{
  "mtlsRootUrl": "https://admin.mtls.googleapis.com/",
  "batchPath": "batch",
  "packagePath": "admin",
  "discoveryVersion": "v1",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "schemas": {
    "MobileDevice": {
      "properties": {
        "firstSync": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "userAgent": {
          "description": "Mobile Device user agent",
          "type": "string"
        },
        "buildNumber": {
          "description": "Mobile Device Build number (Read-only)",
          "type": "string"
        },
        "lastSync": {
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        },
        "bootloaderVersion": {
          "description": "Mobile Device Bootloader version (Read-only)",
          "type": "string"
        },
        "networkOperator": {
          "description": "Mobile Device mobile or network operator (if available) (Read-only)",
          "type": "string"
        },
        "resourceId": {
          "description": "Unique identifier of Mobile Device (Read-only)",
          "type": "string"
        },
        "basebandVersion": {
          "type": "string",
          "description": "Mobile Device Baseband version (Read-only)"
        },
        "applications": {
          "items": {
            "properties": {
              "packageName": {
                "type": "string",
                "description": "Package name of application"
              },
              "versionName": {
                "type": "string",
                "description": "Version name of application"
              },
              "displayName": {
                "type": "string",
                "description": "Display name of application"
              },
              "permission": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "List of Permissions for application"
              },
              "versionCode": {
                "type": "integer",
                "format": "int32",
                "description": "Version code of application"
              }
            },
            "type": "object"
          },
          "description": "List of applications installed on Mobile Device",
          "type": "array"
        },
        "defaultLanguage": {
          "description": "The default locale used on the Mobile Device (Read-only)",
          "type": "string"
        },
        "otherAccountsInfo": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of accounts added on device (Read-only)"
        },
        "hardware": {
          "type": "string",
          "description": "Mobile Device Hardware (Read-only)"
        },
        "unknownSourcesStatus": {
          "type": "boolean",
          "description": "Unknown sources enabled or disabled on device (Read-only)"
        },
        "imei": {
          "type": "string",
          "description": "Mobile Device IMEI number (Read-only)"
        },
        "manufacturer": {
          "type": "string",
          "description": "Mobile Device manufacturer (Read-only)"
        },
        "managedAccountIsOnOwnerProfile": {
          "type": "boolean",
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)"
        },
        "email": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of owner user's email addresses (Read-only)"
        },
        "encryptionStatus": {
          "description": "Mobile Device Encryption Status (Read-only)",
          "type": "string"
        },
        "adbStatus": {
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "os": {
          "type": "string",
          "description": "Name of the mobile operating system"
        },
        "supportsWorkProfile": {
          "description": "Work profile supported on device (Read-only)",
          "type": "boolean"
        },
        "model": {
          "type": "string",
          "description": "Name of the model of the device"
        },
        "serialNumber": {
          "type": "string",
          "description": "Mobile Device SSN or Serial Number (Read-only)"
        },
        "deviceCompromisedStatus": {
          "type": "string",
          "description": "Mobile Device compromised status (Read-only)"
        },
        "brand": {
          "type": "string",
          "description": "Mobile Device Brand (Read-only)"
        },
        "deviceId": {
          "type": "string",
          "description": "Mobile Device serial number (Read-only)"
        },
        "devicePasswordStatus": {
          "description": "DevicePasswordStatus (Read-only)",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The type of device (Read-only)"
        },
        "kind": {
          "default": "admin#directory#mobiledevice",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "wifiMacAddress": {
          "description": "Mobile Device WiFi MAC address (Read-only)",
          "type": "string"
        },
        "securityPatchLevel": {
          "description": "Mobile Device Security patch level (Read-only)",
          "format": "int64",
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Status of the device (Read-only)"
        },
        "developerOptionsStatus": {
          "type": "boolean",
          "description": "Developer options enabled or disabled on device (Read-only)"
        },
        "meid": {
          "type": "string",
          "description": "Mobile Device MEID number (Read-only)"
        },
        "privilege": {
          "description": "DMAgentPermission (Read-only)",
          "type": "string"
        },
        "kernelVersion": {
          "type": "string",
          "description": "Mobile Device Kernel version (Read-only)"
        },
        "hardwareId": {
          "type": "string",
          "description": "Mobile Device Hardware Id (Read-only)"
        },
        "name": {
          "description": "List of owner user's names (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "MobileDevice",
      "type": "object"
    },
    "CalendarResource": {
      "id": "CalendarResource",
      "properties": {
        "kind": {
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "type": "string",
          "default": "admin#directory#resources#calendars#CalendarResource"
        },
        "featureInstances": {
          "description": "Instances of features for the calendar resource.",
          "type": "any"
        },
        "generatedResourceName": {
          "type": "string",
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\"."
        },
        "resourceCategory": {
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.",
          "type": "string"
        },
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        },
        "floorSection": {
          "description": "Name of the section within a floor a resource is located in.",
          "type": "string"
        },
        "buildingId": {
          "description": "Unique ID for the building a resource is located in.",
          "type": "string"
        },
        "floorName": {
          "type": "string",
          "description": "Name of the floor a resource is located on."
        },
        "resourceDescription": {
          "type": "string",
          "description": "Description of the resource, visible only to admins."
        },
        "capacity": {
          "description": "Capacity of a resource, number of seats in a room.",
          "type": "integer",
          "format": "int32"
        },
        "resourceName": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "type": "string"
        },
        "resourceEmail": {
          "type": "string",
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource."
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "resourceType": {
          "type": "string",
          "description": "The type of the calendar resource, intended for non-room resources."
        },
        "resourceId": {
          "type": "string",
          "description": "The unique ID for the calendar resource.",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          }
        }
      },
      "type": "object",
      "description": "Public API: Resources.calendars"
    },
    "UserLanguage": {
      "type": "object",
      "id": "UserLanguage",
      "description": "JSON template for a language entry.",
      "properties": {
        "languageCode": {
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.",
          "type": "string"
        },
        "customLanguage": {
          "type": "string",
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set"
        }
      }
    },
    "UserGender": {
      "properties": {
        "addressMeAs": {
          "type": "string",
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their."
        },
        "type": {
          "type": "string",
          "description": "Gender."
        },
        "customGender": {
          "type": "string",
          "description": "Custom gender."
        }
      },
      "id": "UserGender",
      "type": "object"
    },
    "User": {
      "type": "object",
      "id": "User",
      "properties": {
        "isAdmin": {
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "type": "boolean"
        },
        "suspended": {
          "type": "boolean",
          "description": "Indicates if user is suspended."
        },
        "customSchemas": {
          "type": "object",
          "description": "Custom fields of the user.",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          }
        },
        "addresses": {
          "type": "any",
          "description": "Addresses of User"
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "Boolean indicating if ip is whitelisted"
        },
        "posixAccounts": {
          "type": "any",
          "description": "The POSIX accounts of User"
        },
        "languages": {
          "description": "Languages of User",
          "type": "any"
        },
        "etag": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. ETag of the resource."
        },
        "creationTime": {
          "format": "date-time",
          "description": "User's G Suite account creation time. (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "notes": {
          "description": "Notes of User",
          "type": "any"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "lastLoginTime": {
          "readOnly": true,
          "description": "User's last login time. (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "externalIds": {
          "type": "any",
          "description": "The external Ids of User *"
        },
        "locations": {
          "description": "Locations of User",
          "type": "any"
        },
        "thumbnailPhotoUrl": {
          "type": "string",
          "description": "Output only. Photo Url of the user (Read-only)",
          "readOnly": true
        },
        "name": {
          "description": "User's name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "$ref": "UserName"
        },
        "changePasswordAtNextLogin": {
          "type": "boolean",
          "description": "Boolean indicating if the user should change password in next login"
        },
        "isEnforcedIn2Sv": {
          "readOnly": true,
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "type": "boolean"
        },
        "sshPublicKeys": {
          "type": "any",
          "description": "The SSH public keys of User"
        },
        "keywords": {
          "description": "Keywords of User",
          "type": "any"
        },
        "gender": {
          "type": "any",
          "description": "Gender of User"
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "readOnly": true,
          "description": "Output only. List of aliases (Read-only)"
        },
        "emails": {
          "description": "Emails of User",
          "type": "any"
        },
        "agreedToTerms": {
          "description": "Output only. Indicates if user has agreed to terms (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "customerId": {
          "description": "Output only. CustomerId of User (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "ims": {
          "type": "any",
          "description": "User's Instant Messenger"
        },
        "kind": {
          "description": "Output only. Kind of resource this is.",
          "readOnly": true,
          "type": "string",
          "default": "admin#directory#user"
        },
        "recoveryEmail": {
          "description": "Recovery email of the user.",
          "type": "string"
        },
        "websites": {
          "description": "Websites of User",
          "type": "any"
        },
        "hashFunction": {
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt",
          "type": "string"
        },
        "includeInGlobalAddressList": {
          "description": "Boolean indicating if user is included in Global Address List",
          "type": "boolean"
        },
        "isEnrolledIn2Sv": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Is enrolled in 2-step verification (Read-only)"
        },
        "suspensionReason": {
          "description": "Output only. Suspension reason if user is suspended (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "nonEditableAliases": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          },
          "description": "Output only. List of non editable aliases (Read-only)"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        },
        "primaryEmail": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "username of User",
          "type": "string"
        },
        "organizations": {
          "description": "Organizations of User",
          "type": "any"
        },
        "archived": {
          "description": "Indicates if user is archived.",
          "type": "boolean"
        },
        "thumbnailPhotoEtag": {
          "readOnly": true,
          "description": "Output only. ETag of the user's photo (Read-only)",
          "type": "string"
        },
        "relations": {
          "description": "The Relations of User *",
          "type": "any"
        },
        "recoveryPhone": {
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
          "type": "string"
        },
        "isDelegatedAdmin": {
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "deletionTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "phones": {
          "type": "any",
          "description": "Phone numbers of User"
        },
        "password": {
          "description": "User's password",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string"
        },
        "isMailboxSetup": {
          "description": "Output only. Is mailbox setup (Read-only)",
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "OrgUnit": {
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#orgUnit",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "orgUnitId": {
          "type": "string",
          "description": "Id of OrgUnit"
        },
        "parentOrgUnitPath": {
          "type": "string",
          "description": "Path of parent OrgUnit"
        },
        "blockInheritance": {
          "type": "boolean",
          "description": "Should block inheritance"
        },
        "description": {
          "type": "string",
          "description": "Description of OrgUnit"
        },
        "name": {
          "description": "Name of OrgUnit",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          },
          "type": "string"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "Path of OrgUnit"
        },
        "parentOrgUnitId": {
          "description": "Id of parent OrgUnit",
          "type": "string"
        }
      },
      "id": "OrgUnit",
      "description": "JSON template for Org Unit resource in Directory API."
    },
    "UserCustomProperties": {
      "additionalProperties": {
        "type": "any"
      },
      "type": "object",
      "id": "UserCustomProperties",
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)"
    },
    "ChromeOsMoveDevicesToOu": {
      "id": "ChromeOsMoveDevicesToOu",
      "type": "object",
      "properties": {
        "deviceIds": {
          "items": {
            "type": "string"
          },
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "description": "ChromeOs Devices to be moved to OU",
          "type": "array"
        }
      }
    },
    "FeatureRename": {
      "properties": {
        "newName": {
          "type": "string",
          "description": "New name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          }
        }
      },
      "type": "object",
      "id": "FeatureRename"
    },
    "DirectoryChromeosdevicesCommandResult": {
      "id": "DirectoryChromeosdevicesCommandResult",
      "description": "The result of executing a command.",
      "type": "object",
      "properties": {
        "result": {
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ],
          "type": "string",
          "description": "The result of the command."
        },
        "executeTime": {
          "format": "google-datetime",
          "description": "The time at which the command was executed or failed to execute.",
          "type": "string"
        },
        "errorMessage": {
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed.",
          "type": "string"
        }
      }
    },
    "FeatureInstance": {
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      },
      "type": "object",
      "id": "FeatureInstance",
      "description": "JSON template for a feature instance."
    },
    "SchemaFieldSpec": {
      "properties": {
        "fieldName": {
          "description": "Name of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        },
        "indexed": {
          "description": "Boolean specifying whether the field is indexed or not.",
          "type": "boolean",
          "default": "true"
        },
        "fieldType": {
          "type": "string",
          "description": "Type of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "fieldId": {
          "description": "Unique identifier of Field (Read-only)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "displayName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Display Name of the field."
        },
        "multiValued": {
          "type": "boolean",
          "description": "Boolean specifying whether this is a multi-valued field or not."
        },
        "readAccessType": {
          "default": "ALL_DOMAIN_USERS",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\".",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#schema#fieldspec"
        },
        "numericIndexingSpec": {
          "properties": {
            "maxValue": {
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "type": "number",
              "format": "double"
            },
            "minValue": {
              "type": "number",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double"
            }
          },
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "type": "object"
        }
      },
      "type": "object",
      "description": "JSON template for FieldSpec resource for Schemas in Directory API.",
      "id": "SchemaFieldSpec"
    },
    "ChromeOsDeviceAction": {
      "type": "object",
      "id": "ChromeOsDeviceAction",
      "properties": {
        "deprovisionReason": {
          "type": "string"
        },
        "action": {
          "description": "Action to be taken on the ChromeOs Device",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "type": "string"
        }
      }
    },
    "Group": {
      "id": "Group",
      "properties": {
        "email": {
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "description": "Email of Group",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of Group (Read-only)"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#group",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Description of the group"
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "description": "List of aliases (Read-only)",
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "adminCreated": {
          "description": "Is the group created by admin (Read-only) *",
          "type": "boolean"
        },
        "nonEditableAliases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of non editable aliases (Read-only)"
        },
        "directMembersCount": {
          "type": "string",
          "format": "int64",
          "description": "Group direct members count"
        }
      },
      "type": "object"
    },
    "Schema": {
      "description": "JSON template for Schema resource in Directory API.",
      "properties": {
        "schemaId": {
          "type": "string",
          "description": "Unique identifier of Schema (Read-only)"
        },
        "schemaName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "Schema name"
        },
        "kind": {
          "default": "admin#directory#schema",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "fields": {
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "type": "array",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Fields of Schema"
        },
        "displayName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "Display name for the schema."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "Schema",
      "type": "object"
    },
    "UserKeyword": {
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "value": {
          "description": "Keyword.",
          "type": "string"
        }
      },
      "description": "JSON template for a keyword entry.",
      "type": "object",
      "id": "UserKeyword"
    },
    "VerificationCodes": {
      "type": "object",
      "description": "JSON response template for List verification codes operation in Directory API.",
      "properties": {
        "items": {
          "description": "A list of verification code resources.",
          "type": "array",
          "items": {
            "$ref": "VerificationCode"
          }
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#verificationCodesList",
          "description": "The type of the resource. This is always admin#directory#verificationCodesList."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "VerificationCodes"
    },
    "DirectoryChromeosdevicesCommand": {
      "type": "object",
      "properties": {
        "payload": {
          "description": "The payload that the command specified, if any.",
          "type": "string"
        },
        "commandResult": {
          "description": "The result of the command execution.",
          "$ref": "DirectoryChromeosdevicesCommandResult"
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ],
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "description": "Indicates the command state.",
          "type": "string"
        },
        "type": {
          "description": "The type of the command.",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "type": "string"
        },
        "issueTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The timestamp when the command was issued by the admin."
        },
        "commandId": {
          "description": "Unique ID of a device command.",
          "format": "int64",
          "type": "string"
        },
        "commandExpireTime": {
          "type": "string",
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.",
          "format": "google-datetime"
        }
      },
      "description": "Information regarding a command that was issued to a device.",
      "id": "DirectoryChromeosdevicesCommand"
    },
    "Channel": {
      "id": "Channel",
      "description": "An notification channel used to watch for resource changes.",
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.",
          "type": "string"
        },
        "payload": {
          "type": "boolean",
          "description": "A Boolean value to indicate whether payload is wanted. Optional."
        },
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "expiration": {
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "type": "string",
          "format": "int64"
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "type": "object"
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "kind": {
          "type": "string",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "default": "api#channel"
        },
        "token": {
          "type": "string",
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional."
        },
        "id": {
          "type": "string",
          "description": "A UUID or similar unique string that identifies this channel."
        }
      }
    },
    "Users": {
      "type": "object",
      "properties": {
        "trigger_event": {
          "description": "Event that triggered this response (only used in case of Push Response)",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#users",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "users": {
          "type": "array",
          "description": "List of user objects.",
          "items": {
            "$ref": "User"
          }
        }
      },
      "id": "Users"
    },
    "UserIm": {
      "properties": {
        "customProtocol": {
          "type": "string",
          "description": "Custom protocol."
        },
        "primary": {
          "description": "If this is user's primary im. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "im": {
          "description": "Instant messenger id.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value."
        }
      },
      "id": "UserIm",
      "type": "object",
      "description": "JSON template for instant messenger of an user."
    },
    "Groups": {
      "type": "object",
      "id": "Groups",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#groups",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "groups": {
          "type": "array",
          "description": "List of group objects.",
          "items": {
            "$ref": "Group"
          }
        }
      }
    },
    "Feature": {
      "description": "JSON template for Feature object in Directory API.",
      "type": "object",
      "id": "Feature",
      "properties": {
        "name": {
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "type": "string",
          "description": "The name of the feature."
        },
        "kind": {
          "default": "admin#directory#resources#features#Feature",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "UserUndelete": {
      "id": "UserUndelete",
      "properties": {
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        }
      },
      "type": "object"
    },
    "UserSshPublicKey": {
      "type": "object",
      "id": "UserSshPublicKey",
      "properties": {
        "key": {
          "type": "string",
          "description": "An SSH public key."
        },
        "fingerprint": {
          "readOnly": true,
          "type": "string",
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)"
        },
        "expirationTimeUsec": {
          "type": "string",
          "description": "An expiration time in microseconds since epoch.",
          "format": "int64"
        }
      },
      "description": "JSON template for a POSIX account entry."
    },
    "Roles": {
      "id": "Roles",
      "properties": {
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "Role"
          },
          "description": "A list of Role resources.",
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#roles",
          "description": "The type of the API resource. This is always admin#directory#roles.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserOrganization": {
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If it user's primary organization."
        },
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "symbol": {
          "description": "Symbol of the organization.",
          "type": "string"
        },
        "domain": {
          "type": "string",
          "description": "The domain to which the organization belongs to."
        },
        "name": {
          "description": "Name of the organization",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Description of the organization."
        },
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
        },
        "fullTimeEquivalent": {
          "type": "integer",
          "format": "int32",
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%)."
        },
        "costCenter": {
          "type": "string",
          "description": "The cost center of the users department."
        }
      },
      "type": "object",
      "description": "JSON template for an organization entry.",
      "id": "UserOrganization"
    },
    "MobileDevices": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "mobiledevices": {
          "type": "array",
          "items": {
            "$ref": "MobileDevice"
          },
          "description": "List of Mobile Device objects."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#mobiledevices",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "MobileDevices"
    },
    "UserWebsite": {
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "value": {
          "type": "string",
          "description": "Website."
        },
        "primary": {
          "description": "If this is user's primary website or not.",
          "type": "boolean"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "id": "UserWebsite",
      "type": "object",
      "description": "JSON template for a website entry."
    },
    "Role": {
      "id": "Role",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#role.",
          "default": "admin#directory#role"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "roleName": {
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "description": "Name of the role.",
          "type": "string"
        },
        "rolePrivileges": {
          "description": "The set of privileges that are granted to this role.",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "items": {
            "properties": {
              "privilegeName": {
                "type": "string",
                "description": "The name of the privilege."
              },
              "serviceId": {
                "type": "string",
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "isSystemRole": {
          "description": "Returns true if this is a pre-defined system role.",
          "type": "boolean"
        },
        "roleDescription": {
          "type": "string",
          "description": "A short description of the role."
        },
        "roleId": {
          "type": "string",
          "format": "int64",
          "description": "ID of the role."
        },
        "isSuperAdminRole": {
          "type": "boolean",
          "description": "Returns true if the role is a super admin role."
        }
      },
      "type": "object"
    },
    "Token": {
      "id": "Token",
      "properties": {
        "kind": {
          "default": "admin#directory#token",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#token."
        },
        "nativeApp": {
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device.",
          "type": "boolean"
        },
        "clientId": {
          "description": "The Client ID of the application the token is issued to.",
          "type": "string"
        },
        "scopes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of authorization scopes the application is granted."
        },
        "displayText": {
          "description": "The displayable name of the application the token is issued to.",
          "type": "string"
        },
        "userKey": {
          "description": "The unique ID of the user that issued the token.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "anonymous": {
          "type": "boolean",
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID."
        }
      },
      "description": "JSON template for token resource in Directory API.",
      "type": "object"
    },
    "UserLocation": {
      "description": "JSON template for a location entry.",
      "properties": {
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.",
          "type": "string"
        },
        "floorSection": {
          "type": "string",
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values."
        },
        "buildingId": {
          "description": "Building Identifier.",
          "type": "string"
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        },
        "deskCode": {
          "description": "Most specific textual code of individual desk location.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "floorName": {
          "type": "string",
          "description": "Floor name/number."
        }
      },
      "id": "UserLocation",
      "type": "object"
    },
    "UserRelation": {
      "properties": {
        "value": {
          "description": "The name of the relation.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "type": "string",
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner."
        }
      },
      "description": "JSON template for a relation entry.",
      "id": "UserRelation",
      "type": "object"
    },
    "Domains2": {
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#domains"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "domains": {
          "description": "List of domain objects.",
          "type": "array",
          "items": {
            "$ref": "Domains"
          }
        }
      },
      "type": "object",
      "id": "Domains2"
    },
    "RoleAssignments": {
      "id": "RoleAssignments",
      "type": "object",
      "properties": {
        "items": {
          "items": {
            "$ref": "RoleAssignment"
          },
          "description": "A list of RoleAssignment resources.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#roleAssignments .",
          "default": "admin#directory#roleAssignments",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "Member": {
      "properties": {
        "email": {
          "type": "string",
          "description": "Email of member (Read-only)"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#member",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey."
        },
        "type": {
          "description": "Type of member (Immutable)",
          "type": "string"
        },
        "status": {
          "description": "Status of member (Immutable)",
          "type": "string"
        },
        "role": {
          "description": "Role of member",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "delivery_settings": {
          "type": "string",
          "description": "Delivery settings of member"
        }
      },
      "id": "Member",
      "type": "object"
    },
    "Customer": {
      "type": "object",
      "properties": {
        "customerCreationTime": {
          "format": "date-time",
          "type": "string",
          "description": "The customer's creation time (Readonly)"
        },
        "phoneNumber": {
          "description": "The customer's contact phone number in E.164 format.",
          "type": "string"
        },
        "language": {
          "type": "string",
          "description": "The customer's ISO 639-2 language code. The default value is en-US"
        },
        "id": {
          "type": "string",
          "description": "The unique ID for the customer's G Suite account. (Readonly)"
        },
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain"
        },
        "postalAddress": {
          "$ref": "CustomerPostalAddress",
          "description": "The customer's postal address information."
        },
        "customerDomain": {
          "type": "string",
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#customer",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Customer"
    },
    "Schemas": {
      "id": "Schemas",
      "type": "object",
      "properties": {
        "schemas": {
          "description": "List of UserSchema objects.",
          "type": "array",
          "items": {
            "$ref": "Schema"
          }
        },
        "kind": {
          "default": "admin#directory#schemas",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "JSON response template for List Schema operation in Directory API."
    },
    "ChromeOsDevices": {
      "type": "object",
      "id": "ChromeOsDevices",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#chromeosdevices"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "chromeosdevices": {
          "type": "array",
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "description": "List of Chrome OS Device objects."
        }
      }
    },
    "Asps": {
      "type": "object",
      "id": "Asps",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "Asp"
          },
          "description": "A list of ASP resources."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#aspList.",
          "type": "string",
          "default": "admin#directory#aspList"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "UserAddress": {
      "description": "JSON template for address.",
      "id": "UserAddress",
      "type": "object",
      "properties": {
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Locality."
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        },
        "formatted": {
          "type": "string",
          "description": "Formatted address."
        },
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "poBox": {
          "type": "string",
          "description": "Other parts of address."
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "region": {
          "type": "string",
          "description": "Region."
        },
        "extendedAddress": {
          "type": "string",
          "description": "Extended Address."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value."
        },
        "primary": {
          "description": "If this is user's primary address. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "countryCode": {
          "description": "Country code.",
          "type": "string"
        },
        "streetAddress": {
          "type": "string",
          "description": "Street."
        }
      }
    },
    "Privilege": {
      "id": "Privilege",
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string",
          "description": "The name of the service this privilege is for."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "isOuScopable": {
          "description": "If the privilege can be restricted to an organization unit.",
          "type": "boolean"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#privilege",
          "description": "The type of the API resource. This is always admin#directory#privilege."
        },
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        },
        "serviceId": {
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
          "type": "string"
        },
        "childPrivileges": {
          "items": {
            "$ref": "Privilege"
          },
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "type": "array"
        }
      }
    },
    "Asp": {
      "id": "Asp",
      "properties": {
        "codeId": {
          "format": "int32",
          "description": "The unique ID of the ASP.",
          "type": "integer"
        },
        "userKey": {
          "description": "The unique ID of the user who issued the ASP.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#asp",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#asp."
        },
        "creationTime": {
          "type": "string",
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "format": "int64"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the ASP."
        },
        "lastTimeUsed": {
          "format": "int64",
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created."
        }
      },
      "type": "object",
      "description": "The template that returns individual ASP (Access Code) data."
    },
    "Domains": {
      "properties": {
        "kind": {
          "default": "admin#directory#domain",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Indicates if the domain is a primary domain (Read-only)."
        },
        "domainAliases": {
          "description": "List of domain alias objects. (Read-only)",
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "creationTime": {
          "type": "string",
          "description": "Creation time of the domain. (Read-only).",
          "format": "int64"
        },
        "domainName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The domain name of the customer."
        },
        "verified": {
          "description": "Indicates the verification state of a domain. (Read-only).",
          "type": "boolean"
        }
      },
      "id": "Domains",
      "type": "object"
    },
    "RoleAssignment": {
      "id": "RoleAssignment",
      "type": "object",
      "properties": {
        "scopeType": {
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT ",
          "type": "string"
        },
        "assignedTo": {
          "type": "string",
          "description": "The unique ID of the user this role is assigned to."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "orgUnitId": {
          "type": "string",
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to."
        },
        "roleId": {
          "format": "int64",
          "description": "The ID of the role that is assigned.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#roleAssignment",
          "description": "The type of the API resource. This is always admin#directory#roleAssignment.",
          "type": "string"
        },
        "roleAssignmentId": {
          "description": "ID of this roleAssignment.",
          "format": "int64",
          "type": "string"
        }
      }
    },
    "ChromeOsDevice": {
      "properties": {
        "ethernetMacAddress": {
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)",
          "type": "string"
        },
        "activeTimeRanges": {
          "description": "List of active time ranges (Read-only)",
          "type": "array",
          "items": {
            "properties": {
              "date": {
                "format": "date",
                "description": "Date of usage",
                "type": "string"
              },
              "activeTime": {
                "type": "integer",
                "format": "int32",
                "description": "Duration in milliseconds"
              }
            },
            "type": "object"
          }
        },
        "lastSync": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "systemRamFreeReports": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "systemRamFreeInfo": {
                "type": "array",
                "items": {
                  "format": "int64",
                  "type": "string"
                }
              },
              "reportTime": {
                "description": "Date and time the report was received.",
                "format": "date-time",
                "type": "string"
              }
            }
          },
          "description": "Reports of amounts of available RAM memory (Read-only)"
        },
        "macAddress": {
          "description": "Chromebook Mac Address on wifi network interface (Read-only)",
          "type": "string"
        },
        "bootMode": {
          "description": "Chromebook boot mode (Read-only)",
          "type": "string"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of the device"
        },
        "deviceFiles": {
          "items": {
            "properties": {
              "type": {
                "description": "File type",
                "type": "string"
              },
              "createTime": {
                "type": "string",
                "description": "Date and time the file was created",
                "format": "date-time"
              },
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              },
              "name": {
                "description": "File name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "List of device files to download (Read-only)"
        },
        "willAutoRenew": {
          "description": "Will Chromebook auto renew after support end date (Read-only)",
          "type": "boolean"
        },
        "dockMacAddress": {
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "autoUpdateExpiration": {
          "type": "string",
          "format": "int64",
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support"
        },
        "model": {
          "description": "Chromebook Model (Read-only)",
          "type": "string"
        },
        "orderNumber": {
          "description": "Chromebook order number (Read-only)",
          "type": "string"
        },
        "serialNumber": {
          "type": "string",
          "description": "Chromebook serial number (Read-only)"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#chromeosdevice"
        },
        "manufactureDate": {
          "type": "string",
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format."
        },
        "notes": {
          "description": "Notes added by the administrator",
          "type": "string"
        },
        "cpuStatusReports": {
          "description": "Reports of CPU utilization and temperature (Read-only)",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "cpuTemperatureInfo": {
                "type": "array",
                "description": "List of CPU temperature samples.",
                "items": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "description": "CPU label",
                      "type": "string"
                    },
                    "temperature": {
                      "type": "integer",
                      "description": "Temperature in Celsius degrees.",
                      "format": "int32"
                    }
                  }
                }
              },
              "cpuUtilizationPercentageInfo": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "reportTime": {
                "format": "date-time",
                "description": "Date and time the report was received.",
                "type": "string"
              }
            }
          }
        },
        "platformVersion": {
          "description": "Chromebook platform version (Read-only)",
          "type": "string"
        },
        "osVersion": {
          "description": "Chromebook Os Version (Read-only)",
          "type": "string"
        },
        "annotatedLocation": {
          "description": "Address or location of the device as noted by the administrator",
          "type": "string"
        },
        "meid": {
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)",
          "type": "string"
        },
        "status": {
          "description": "status of the device (Read-only)",
          "type": "string"
        },
        "tpmVersionInfo": {
          "properties": {
            "vendorSpecific": {
              "description": "Vendor-specific information such as Vendor ID.",
              "type": "string"
            },
            "firmwareVersion": {
              "type": "string",
              "description": "TPM firmware version."
            },
            "family": {
              "type": "string",
              "description": "TPM family."
            },
            "tpmModel": {
              "type": "string",
              "description": "TPM model number."
            },
            "manufacturer": {
              "description": "TPM manufacturer code.",
              "type": "string"
            },
            "specLevel": {
              "type": "string",
              "description": "TPM specification level."
            }
          },
          "type": "object",
          "description": "Trusted Platform Module (TPM) (Read-only)"
        },
        "annotatedAssetId": {
          "type": "string",
          "description": "AssetId specified during enrollment or through later annotation"
        },
        "recentUsers": {
          "description": "List of recent device users, in descending order by last login time (Read-only)",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "email": {
                "description": "Email address of the user. Present only if the user type is managed",
                "type": "string"
              },
              "type": {
                "description": "The type of the user",
                "type": "string"
              }
            }
          }
        },
        "firmwareVersion": {
          "description": "Chromebook firmware version (Read-only)",
          "type": "string"
        },
        "ethernetMacAddress0": {
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "annotatedUser": {
          "type": "string",
          "description": "User of the device"
        },
        "systemRamTotal": {
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "type": "string",
          "format": "int64"
        },
        "diskVolumeReports": {
          "items": {
            "properties": {
              "volumeInfo": {
                "description": "Disk volumes",
                "items": {
                  "type": "object",
                  "properties": {
                    "storageTotal": {
                      "description": "Total disk space [in bytes]",
                      "type": "string",
                      "format": "int64"
                    },
                    "storageFree": {
                      "description": "Free disk space [in bytes]",
                      "format": "int64",
                      "type": "string"
                    },
                    "volumeId": {
                      "description": "Volume id",
                      "type": "string"
                    }
                  }
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "description": "Reports of disk space and other info about mounted/connected volumes.",
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "deviceId": {
          "type": "string",
          "description": "Unique identifier of Chrome OS Device (Read-only)"
        },
        "lastKnownNetwork": {
          "description": "Contains last known network (Read-only)",
          "items": {
            "properties": {
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              },
              "ipAddress": {
                "type": "string",
                "description": "The IP address."
              }
            },
            "type": "object",
            "description": "Information for an ip address."
          },
          "type": "array"
        },
        "supportEndDate": {
          "type": "string",
          "description": "Final date the device will be supported (Read-only)",
          "format": "date-time"
        },
        "lastEnrollmentTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was last enrolled (Read-only)"
        }
      },
      "type": "object",
      "id": "ChromeOsDevice"
    },
    "Features": {
      "type": "object",
      "description": "Public API: Resources.features",
      "id": "Features",
      "properties": {
        "kind": {
          "default": "admin#directory#resources#features#featuresList",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "features": {
          "description": "The Features in this page of results.",
          "items": {
            "$ref": "Feature"
          },
          "type": "array"
        }
      }
    },
    "Tokens": {
      "properties": {
        "kind": {
          "default": "admin#directory#tokenList",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#tokenList."
        },
        "items": {
          "description": "A list of Token resources.",
          "items": {
            "$ref": "Token"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object",
      "description": "JSON response template for List tokens operation in Directory API.",
      "id": "Tokens"
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "properties": {
        "commandType": {
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "type": "string",
          "description": "The type of command."
        },
        "payload": {
          "type": "string",
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a stringified JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100]."
        }
      },
      "id": "DirectoryChromeosdevicesIssueCommandRequest",
      "type": "object",
      "description": "A request for issuing a command."
    },
    "CalendarResources": {
      "type": "object",
      "description": "Public API: Resources.calendars",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList.",
          "default": "admin#directory#resources#calendars#calendarResourcesList"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "CalendarResource"
          },
          "description": "The CalendarResources in this page of results."
        }
      },
      "id": "CalendarResources"
    },
    "BuildingAddress": {
      "type": "object",
      "description": "Public API: Resources.buildings",
      "id": "BuildingAddress",
      "properties": {
        "locality": {
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.",
          "type": "string"
        },
        "addressLines": {
          "type": "array",
          "description": "Unstructured address lines describing the lower levels of an address.",
          "items": {
            "type": "string"
          }
        },
        "regionCode": {
          "description": "Required. CLDR region code of the country/region of the address.",
          "type": "string"
        },
        "languageCode": {
          "type": "string",
          "description": "Optional. BCP-47 language code of the contents of this address (if known)."
        },
        "postalCode": {
          "description": "Optional. Postal code of the address.",
          "type": "string"
        },
        "sublocality": {
          "type": "string",
          "description": "Optional. Sublocality of the address."
        },
        "administrativeArea": {
          "type": "string",
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region."
        }
      }
    },
    "Buildings": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#buildings#buildingsList"
        },
        "buildings": {
          "description": "The Buildings in this page of results.",
          "items": {
            "$ref": "Building"
          },
          "type": "array"
        }
      },
      "description": "Public API: Resources.buildings",
      "id": "Buildings"
    },
    "UserExternalId": {
      "description": "JSON template for an externalId entry.",
      "type": "object",
      "id": "UserExternalId",
      "properties": {
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The value of the id."
        },
        "type": {
          "type": "string",
          "description": "The type of the Id."
        }
      }
    },
    "UserPhoto": {
      "id": "UserPhoto",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "mimeType": {
          "type": "string",
          "description": "Mime Type of the photo"
        },
        "photoData": {
          "format": "byte",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "description": "Base64 encoded photo data"
        },
        "width": {
          "format": "int32",
          "type": "integer",
          "description": "Width in pixels of the photo"
        },
        "height": {
          "type": "integer",
          "description": "Height in pixels of the photo",
          "format": "int32"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#user#photo"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "primaryEmail": {
          "type": "string",
          "description": "Primary email of User (Read-only)"
        }
      }
    },
    "Alias": {
      "id": "Alias",
      "description": "JSON template for Alias object in Directory API.",
      "properties": {
        "primaryEmail": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#alias"
        },
        "etag": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MembersHasMember": {
      "type": "object",
      "id": "MembersHasMember",
      "properties": {
        "isMember": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested."
        }
      },
      "description": "JSON template for Has Member response in Directory API."
    },
    "UserEmail": {
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value."
        },
        "address": {
          "type": "string",
          "description": "Email id of the user."
        },
        "primary": {
          "description": "If this is user's primary email. Only one entry could be marked as primary.",
          "type": "boolean"
        }
      },
      "description": "JSON template for an email.",
      "id": "UserEmail",
      "type": "object"
    },
    "VerificationCode": {
      "id": "VerificationCode",
      "properties": {
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCode.",
          "type": "string",
          "default": "admin#directory#verificationCode"
        },
        "userId": {
          "type": "string",
          "description": "The obfuscated unique ID of the user."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "verificationCode": {
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for verification codes in Directory API."
    },
    "UserMakeAdmin": {
      "properties": {
        "status": {
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "type": "boolean",
          "description": "Boolean indicating new admin status of the user"
        }
      },
      "id": "UserMakeAdmin",
      "type": "object"
    },
    "UserPosixAccount": {
      "type": "object",
      "description": "JSON template for a POSIX account entry.",
      "id": "UserPosixAccount",
      "properties": {
        "uid": {
          "description": "The POSIX compliant user ID.",
          "type": "string",
          "format": "uint64"
        },
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        },
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "operatingSystemType": {
          "type": "string",
          "description": "The operating system type for this account."
        },
        "gecos": {
          "type": "string",
          "description": "The GECOS (user information) for this account."
        },
        "gid": {
          "type": "string",
          "description": "The default group ID.",
          "format": "uint64"
        },
        "accountId": {
          "type": "string",
          "description": "A POSIX account field identifier."
        },
        "shell": {
          "type": "string",
          "description": "The path to the login shell for this account."
        },
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        },
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        }
      }
    },
    "BuildingCoordinates": {
      "type": "object",
      "id": "BuildingCoordinates",
      "description": "Public API: Resources.buildings",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude in decimal degrees."
        },
        "longitude": {
          "type": "number",
          "description": "Longitude in decimal degrees.",
          "format": "double"
        }
      }
    },
    "OrgUnits": {
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#orgUnits",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "organizationUnits": {
          "description": "List of user objects.",
          "items": {
            "$ref": "OrgUnit"
          },
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "JSON response template for List Organization Units operation in Directory API.",
      "id": "OrgUnits"
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "properties": {
        "commandId": {
          "type": "string",
          "format": "int64",
          "description": "The unique ID of the issued command, used to retrieve the command status."
        }
      },
      "type": "object",
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "description": "A response for issuing a command."
    },
    "Members": {
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#members"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "members": {
          "description": "List of member objects.",
          "items": {
            "$ref": "Member"
          },
          "type": "array"
        }
      },
      "id": "Members",
      "type": "object"
    },
    "MobileDeviceAction": {
      "type": "object",
      "properties": {
        "action": {
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          },
          "type": "string",
          "description": "Action to be taken on the Mobile Device"
        }
      },
      "id": "MobileDeviceAction"
    },
    "Aliases": {
      "type": "object",
      "description": "JSON response template to list aliases in Directory API.",
      "id": "Aliases",
      "properties": {
        "aliases": {
          "items": {
            "type": "any"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#aliases"
        },
        "etag": {
          "type": "string"
        }
      }
    },
    "Privileges": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "default": "admin#directory#privileges",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Privilege"
          },
          "description": "A list of Privilege resources."
        }
      },
      "id": "Privileges",
      "type": "object"
    },
    "CustomerPostalAddress": {
      "type": "object",
      "id": "CustomerPostalAddress",
      "properties": {
        "countryCode": {
          "type": "string",
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements."
        },
        "addressLine2": {
          "type": "string",
          "description": "Address line 2 of the address."
        },
        "locality": {
          "type": "string",
          "description": "Name of the locality. An example of a locality value is the city of San Francisco."
        },
        "addressLine1": {
          "type": "string",
          "description": "A customer's physical address. The address can be composed of one to three lines."
        },
        "contactName": {
          "type": "string",
          "description": "The customer contact's name."
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        },
        "postalCode": {
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element.",
          "type": "string"
        },
        "addressLine3": {
          "description": "Address line 3 of the address.",
          "type": "string"
        },
        "region": {
          "description": "Name of the region. An example of a region value is NY for the state of New York.",
          "type": "string"
        }
      }
    },
    "DomainAliases": {
      "id": "DomainAliases",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "domainAliases": {
          "type": "array",
          "description": "List of domain alias objects.",
          "items": {
            "$ref": "DomainAlias"
          }
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#domainAliases"
        }
      }
    },
    "DomainAlias": {
      "properties": {
        "domainAliasName": {
          "type": "string",
          "description": "The domain alias name."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#domainAlias"
        },
        "creationTime": {
          "type": "string",
          "format": "int64",
          "description": "The creation time of the domain alias. (Read-only)."
        },
        "parentDomainName": {
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "verified": {
          "description": "Indicates the verification state of a domain alias. (Read-only)",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "DomainAlias"
    },
    "UserPhone": {
      "id": "UserPhone",
      "type": "object",
      "properties": {
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary phone or not.",
          "type": "boolean"
        },
        "value": {
          "type": "string",
          "description": "Phone number."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      },
      "description": "JSON template for a phone entry."
    },
    "Building": {
      "properties": {
        "buildingName": {
          "type": "string",
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters."
        },
        "kind": {
          "default": "admin#directory#resources#buildings#Building",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "floorNames": {
          "type": "array",
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string",
          "description": "A brief description of the building. For example, \"Chelsea Market\"."
        },
        "coordinates": {
          "$ref": "BuildingCoordinates",
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees."
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "address": {
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required.",
          "$ref": "BuildingAddress"
        },
        "buildingId": {
          "type": "string",
          "description": "Unique identifier for the building. The maximum length is 100 characters."
        }
      },
      "type": "object",
      "id": "Building",
      "description": "Public API: Resources.buildings"
    },
    "UserAbout": {
      "type": "object",
      "id": "UserAbout",
      "properties": {
        "value": {
          "type": "string",
          "description": "Actual value of notes."
        },
        "contentType": {
          "type": "string",
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text."
        }
      },
      "description": "JSON template for About (notes) of a user in Directory API."
    },
    "UserName": {
      "properties": {
        "fullName": {
          "type": "string",
          "description": "Full Name"
        },
        "givenName": {
          "description": "First Name",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "familyName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "Last Name",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserName"
    }
  },
  "fullyEncodeReservedExpansion": true,
  "ownerName": "Google",
  "baseUrl": "https://admin.googleapis.com/",
  "servicePath": "",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "basePath": "",
  "canonicalName": "directory",
  "name": "admin",
  "revision": "20201117",
  "resources": {
    "orgunits": {
      "methods": {
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "orgUnitPath": {
              "required": true,
              "type": "string",
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$",
              "location": "path"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "description": "Retrieve organizational unit",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "id": "directory.orgunits.get",
          "response": {
            "$ref": "OrgUnit"
          }
        },
        "update": {
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$",
              "type": "string",
              "required": true
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "request": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "description": "Update organizational unit",
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.update",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}"
        },
        "patch": {
          "response": {
            "$ref": "OrgUnit"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "request": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "required": true,
              "location": "path",
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID"
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            }
          },
          "id": "directory.orgunits.patch",
          "httpMethod": "PATCH",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}"
        },
        "list": {
          "id": "directory.orgunits.list",
          "response": {
            "$ref": "OrgUnits"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "httpMethod": "GET",
          "parameters": {
            "orgUnitPath": {
              "location": "query",
              "default": "",
              "type": "string",
              "description": "the URL-encoded organizational unit's path or its ID"
            },
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            },
            "type": {
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "description": "Whether to return all sub-organizations or just immediate children",
              "type": "string",
              "location": "query",
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ]
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameterOrder": [
            "customerId"
          ],
          "description": "Retrieve all organizational units"
        },
        "delete": {
          "httpMethod": "DELETE",
          "description": "Remove organizational unit",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "id": "directory.orgunits.delete",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        },
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "description": "Add organizational unit",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            }
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "request": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.insert"
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "description": "Stop watching resources through this channel.",
          "httpMethod": "POST",
          "id": "admin.channels.stop",
          "parameterOrder": [],
          "parameters": {},
          "path": "admin/directory_v1/channels/stop",
          "flatPath": "admin/directory_v1/channels/stop",
          "request": {
            "$ref": "Channel"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        }
      }
    },
    "customers": {
      "methods": {
        "patch": {
          "parameterOrder": [
            "customerKey"
          ],
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.patch",
          "response": {
            "$ref": "Customer"
          },
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "description": "Patch Customers via Apiary Patch Orchestration",
          "request": {
            "$ref": "Customer"
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ]
        },
        "update": {
          "parameterOrder": [
            "customerKey"
          ],
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "description": "Updates a customer.",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "request": {
            "$ref": "Customer"
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "response": {
            "$ref": "Customer"
          },
          "httpMethod": "PUT",
          "id": "directory.customers.update"
        },
        "get": {
          "parameterOrder": [
            "customerKey"
          ],
          "description": "Retrieves a customer.",
          "path": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.get",
          "httpMethod": "GET",
          "parameters": {
            "customerKey": {
              "required": true,
              "description": "Id of the customer to be retrieved",
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          }
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "get": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "id": "directory.mobiledevices.get",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "response": {
            "$ref": "MobileDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "httpMethod": "GET",
          "description": "Retrieve Mobile Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "parameters": {
            "resourceId": {
              "description": "Immutable ID of Mobile Device",
              "type": "string",
              "location": "path",
              "required": true
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          }
        },
        "list": {
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "id": "directory.mobiledevices.list",
          "response": {
            "$ref": "MobileDevices"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "parameters": {
            "orderBy": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "description": "Column to use for sorting results",
              "type": "string"
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields."
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string"
            },
            "maxResults": {
              "minimum": "1",
              "default": "100",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "maximum": "100",
              "location": "query",
              "type": "integer",
              "format": "int32"
            }
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "parameterOrder": [
            "customerId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ]
        },
        "delete": {
          "parameters": {
            "resourceId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of Mobile Device"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "httpMethod": "DELETE",
          "description": "Delete Mobile Device",
          "id": "directory.mobiledevices.delete",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ]
        },
        "action": {
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "description": "Take action on Mobile Device",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "id": "directory.mobiledevices.action",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            },
            "resourceId": {
              "description": "Immutable ID of Mobile Device",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "httpMethod": "POST"
        }
      }
    },
    "domainAliases": {
      "methods": {
        "insert": {
          "request": {
            "$ref": "DomainAlias"
          },
          "description": "Inserts a domain alias of the customer.",
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "response": {
            "$ref": "DomainAlias"
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domainAliases.insert",
          "path": "admin/directory/v1/customer/{customer}/domainaliases"
        },
        "delete": {
          "id": "directory.domainAliases.delete",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            },
            "domainAliasName": {
              "location": "path",
              "type": "string",
              "description": "Name of domain alias to be retrieved.",
              "required": true
            }
          },
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "description": "Deletes a domain Alias of the customer."
        },
        "get": {
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "response": {
            "$ref": "DomainAlias"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "parameters": {
            "domainAliasName": {
              "location": "path",
              "description": "Name of domain alias to be retrieved.",
              "type": "string",
              "required": true
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            }
          },
          "httpMethod": "GET",
          "id": "directory.domainAliases.get",
          "description": "Retrieves a domain alias of the customer."
        },
        "list": {
          "parameterOrder": [
            "customer"
          ],
          "description": "Lists the domain aliases of the customer.",
          "httpMethod": "GET",
          "response": {
            "$ref": "DomainAliases"
          },
          "parameters": {
            "parentDomainName": {
              "description": "Name of the parent domain for which domain aliases are to be fetched.",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "id": "directory.domainAliases.list"
        }
      }
    },
    "roles": {
      "methods": {
        "patch": {
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "roleId": {
              "description": "Immutable ID of the role.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "httpMethod": "PATCH",
          "description": "Patch role via Apiary Patch Orchestration",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "request": {
            "$ref": "Role"
          },
          "id": "directory.roles.patch",
          "response": {
            "$ref": "Role"
          }
        },
        "list": {
          "path": "admin/directory/v1/customer/{customer}/roles",
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "id": "directory.roles.list",
          "response": {
            "$ref": "Roles"
          },
          "httpMethod": "GET",
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "parameters": {
            "maxResults": {
              "location": "query",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "minimum": "1",
              "type": "integer",
              "maximum": "100"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify the next page in the list."
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ]
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Deletes a role.",
          "parameters": {
            "roleId": {
              "description": "Immutable ID of the role.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "id": "directory.roles.delete",
          "httpMethod": "DELETE"
        },
        "insert": {
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "response": {
            "$ref": "Role"
          },
          "description": "Creates a role.",
          "id": "directory.roles.insert",
          "request": {
            "$ref": "Role"
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            }
          }
        },
        "get": {
          "description": "Retrieves a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.get",
          "parameters": {
            "roleId": {
              "type": "string",
              "description": "Immutable ID of the role.",
              "location": "path",
              "required": true
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "update": {
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.update",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "roleId": {
              "required": true,
              "description": "Immutable ID of the role.",
              "location": "path",
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "httpMethod": "PUT",
          "request": {
            "$ref": "Role"
          },
          "description": "Updates a role."
        }
      }
    },
    "groups": {
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "description": "Remove a alias for the group",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "httpMethod": "DELETE",
              "id": "directory.groups.aliases.delete",
              "parameters": {
                "alias": {
                  "location": "path",
                  "type": "string",
                  "description": "The alias to be removed",
                  "required": true
                },
                "groupKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the group"
                }
              }
            },
            "list": {
              "description": "List all aliases for a group",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameters": {
                "groupKey": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the group"
                }
              },
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "parameterOrder": [
                "groupKey"
              ],
              "response": {
                "$ref": "Aliases"
              },
              "id": "directory.groups.aliases.list",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases"
            },
            "insert": {
              "id": "directory.groups.aliases.insert",
              "parameters": {
                "groupKey": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Email or immutable ID of the group"
                }
              },
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "description": "Add a alias for the group",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "httpMethod": "POST",
              "request": {
                "$ref": "Alias"
              },
              "response": {
                "$ref": "Alias"
              },
              "parameterOrder": [
                "groupKey"
              ],
              "path": "admin/directory/v1/groups/{groupKey}/aliases"
            }
          }
        }
      },
      "methods": {
        "patch": {
          "parameterOrder": [
            "groupKey"
          ],
          "httpMethod": "PATCH",
          "description": "Patch Groups via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.patch",
          "path": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameters": {
            "groupKey": {
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "location": "path"
            }
          },
          "request": {
            "$ref": "Group"
          }
        },
        "update": {
          "httpMethod": "PUT",
          "parameterOrder": [
            "groupKey"
          ],
          "response": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "request": {
            "$ref": "Group"
          },
          "description": "Update Group",
          "path": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.update",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ]
        },
        "get": {
          "description": "Retrieve Group",
          "id": "directory.groups.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group",
              "location": "path",
              "required": true
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          }
        },
        "list": {
          "path": "admin/directory/v1/groups",
          "parameters": {
            "domain": {
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain.",
              "type": "string"
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "location": "query",
              "type": "string"
            },
            "userKey": {
              "location": "query",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "type": "string"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "type": "integer",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "minimum": "1",
              "format": "int32",
              "default": "200",
              "location": "query"
            },
            "orderBy": {
              "type": "string",
              "enum": [
                "orderByUndefined",
                "email"
              ],
              "location": "query",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Email of the group."
              ]
            },
            "sortOrder": {
              "location": "query",
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            }
          },
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "flatPath": "admin/directory/v1/groups",
          "id": "directory.groups.list",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "response": {
            "$ref": "Groups"
          },
          "httpMethod": "GET"
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "description": "Create Group",
          "parameters": {},
          "parameterOrder": [],
          "path": "admin/directory/v1/groups",
          "id": "directory.groups.insert",
          "flatPath": "admin/directory/v1/groups",
          "request": {
            "$ref": "Group"
          },
          "httpMethod": "POST",
          "response": {
            "$ref": "Group"
          }
        },
        "delete": {
          "parameters": {
            "groupKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "description": "Delete Group",
          "path": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.delete",
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "httpMethod": "DELETE"
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "methods": {
                "issueCommand": {
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "description": "Issues a command for the device to execute.",
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "httpMethod": "POST",
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ],
                  "parameters": {
                    "customerId": {
                      "description": "Immutable. Immutable ID of the G Suite account.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "deviceId": {
                      "location": "path",
                      "description": "Immutable. Immutable ID of Chrome OS Device.",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ]
                }
              },
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "description": "Gets command data a specific command issued to the device.",
                      "httpMethod": "GET",
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ],
                      "parameters": {
                        "deviceId": {
                          "type": "string",
                          "location": "path",
                          "required": true,
                          "description": "Immutable. Immutable ID of Chrome OS Device."
                        },
                        "customerId": {
                          "description": "Immutable. Immutable ID of the G Suite account.",
                          "type": "string",
                          "required": true,
                          "location": "path"
                        },
                        "commandId": {
                          "location": "path",
                          "required": true,
                          "format": "int64",
                          "type": "string",
                          "description": "Immutable. Immutable ID of Chrome OS Device Command."
                        }
                      },
                      "id": "admin.customer.devices.chromeos.commands.get"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "asps": {
      "methods": {
        "get": {
          "description": "Get information about an ASP issued by a user.",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "response": {
            "$ref": "Asp"
          },
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.get",
          "httpMethod": "GET",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            },
            "codeId": {
              "type": "integer",
              "format": "int32",
              "description": "The unique ID of the ASP.",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "list": {
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "description": "List the ASPs issued by a user.",
          "response": {
            "$ref": "Asps"
          },
          "path": "admin/directory/v1/users/{userKey}/asps",
          "id": "directory.asps.list",
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string"
            }
          }
        },
        "delete": {
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            },
            "codeId": {
              "type": "integer",
              "description": "The unique ID of the ASP to be deleted.",
              "required": true,
              "location": "path",
              "format": "int32"
            }
          },
          "description": "Delete an ASP issued by a user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "DELETE",
          "id": "directory.asps.delete",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameterOrder": [
            "userKey",
            "codeId"
          ]
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "id": "directory.twoStepVerification.turnOff",
          "description": "Turn off 2-Step Verification for user.",
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff"
        }
      }
    },
    "members": {
      "methods": {
        "insert": {
          "httpMethod": "POST",
          "id": "directory.members.insert",
          "response": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "parameters": {
            "groupKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the group"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "request": {
            "$ref": "Member"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "description": "Add user to the specified group."
        },
        "hasMember": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "response": {
            "$ref": "MembersHasMember"
          },
          "id": "directory.members.hasMember",
          "parameters": {
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "memberKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "httpMethod": "GET"
        },
        "list": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "id": "directory.members.list",
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group",
              "required": true,
              "location": "path"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "maxResults": {
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "type": "integer",
              "location": "query",
              "minimum": "1",
              "format": "int32",
              "default": "200"
            },
            "includeDerivedMembership": {
              "description": "Whether to list indirect memberships. Default: false.",
              "location": "query",
              "type": "boolean"
            },
            "roles": {
              "type": "string",
              "description": "Comma separated role values to filter list results on.",
              "location": "query"
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "response": {
            "$ref": "Members"
          },
          "description": "Retrieve all members in a group (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ]
        },
        "patch": {
          "request": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "response": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "PATCH",
          "id": "directory.members.patch",
          "description": "Patch Member via Apiary Patch Orchestration",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "type": "string",
              "required": true
            },
            "memberKey": {
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ]
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "response": {
            "$ref": "Member"
          },
          "request": {
            "$ref": "Member"
          },
          "httpMethod": "PUT",
          "parameters": {
            "memberKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "type": "string",
              "location": "path",
              "required": true
            },
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "required": true
            }
          },
          "id": "directory.members.update",
          "description": "Update membership of a user in the specified group.",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        },
        "delete": {
          "description": "Remove membership.",
          "parameters": {
            "memberKey": {
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the member",
              "required": true
            },
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.delete",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "httpMethod": "DELETE"
        },
        "get": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.members.get",
          "httpMethod": "GET",
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group",
              "type": "string",
              "required": true
            },
            "memberKey": {
              "description": "Email or immutable ID of the member",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          },
          "description": "Retrieve Group Member",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "insert": {
          "id": "directory.roleAssignments.insert",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "httpMethod": "POST",
          "response": {
            "$ref": "RoleAssignment"
          },
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            }
          },
          "request": {
            "$ref": "RoleAssignment"
          },
          "description": "Creates a role assignment."
        },
        "get": {
          "id": "directory.roleAssignments.get",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "description": "Retrieve a role assignment.",
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            },
            "roleAssignmentId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the role assignment.",
              "type": "string"
            }
          },
          "response": {
            "$ref": "RoleAssignment"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ]
        },
        "delete": {
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "description": "Deletes a role assignment.",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roleAssignments.delete",
          "parameters": {
            "roleAssignmentId": {
              "description": "Immutable ID of the role assignment.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          }
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "response": {
            "$ref": "RoleAssignments"
          },
          "parameters": {
            "maxResults": {
              "location": "query",
              "maximum": "200",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "minimum": "1",
              "format": "int32"
            },
            "userKey": {
              "type": "string",
              "location": "query",
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user."
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify the next page in the list.",
              "location": "query"
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            },
            "roleId": {
              "location": "query",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "description": "Retrieves a paginated list of all roleAssignments.",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "id": "directory.roleAssignments.list",
          "httpMethod": "GET"
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "generate": {
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.verificationCodes.generate",
          "description": "Generate new backup verification codes for the user.",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user",
              "location": "path",
              "type": "string"
            }
          },
          "httpMethod": "POST"
        },
        "invalidate": {
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "description": "Invalidate the current backup verification codes for the user.",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.verificationCodes.invalidate",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate"
        },
        "list": {
          "response": {
            "$ref": "VerificationCodes"
          },
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "id": "directory.verificationCodes.list",
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes"
        }
      }
    },
    "domains": {
      "methods": {
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "parameters": {
            "domainName": {
              "location": "path",
              "description": "Name of domain to be retrieved",
              "required": true,
              "type": "string"
            },
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            }
          },
          "id": "directory.domains.get",
          "description": "Retrieves a domain of the customer.",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "response": {
            "$ref": "Domains"
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}"
        },
        "list": {
          "response": {
            "$ref": "Domains2"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "GET",
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "id": "directory.domains.list",
          "path": "admin/directory/v1/customer/{customer}/domains",
          "description": "Lists the domains of the customer."
        },
        "delete": {
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameters": {
            "domainName": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Name of domain to be deleted"
            },
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "description": "Deletes a domain of the customer.",
          "id": "directory.domains.delete",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ]
        },
        "insert": {
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domains.insert",
          "httpMethod": "POST",
          "response": {
            "$ref": "Domains"
          },
          "request": {
            "$ref": "Domains"
          },
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "description": "Inserts a domain of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domains"
        }
      }
    },
    "users": {
      "resources": {
        "photos": {
          "methods": {
            "update": {
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              },
              "httpMethod": "PUT",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Add a photo for the user",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.update",
              "response": {
                "$ref": "UserPhoto"
              },
              "request": {
                "$ref": "UserPhoto"
              }
            },
            "get": {
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.get",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Retrieve photo of a user"
            },
            "delete": {
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "DELETE",
              "description": "Remove photos for the user",
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.delete"
            },
            "patch": {
              "response": {
                "$ref": "UserPhoto"
              },
              "httpMethod": "PATCH",
              "request": {
                "$ref": "UserPhoto"
              },
              "id": "directory.users.photos.patch",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "location": "path"
                }
              },
              "description": "Patch Photo via Apiary Patch Orchestration",
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ]
            }
          }
        },
        "aliases": {
          "methods": {
            "list": {
              "parameterOrder": [
                "userKey"
              ],
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "description": "List all aliases for a user",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "httpMethod": "GET",
              "id": "directory.users.aliases.list",
              "response": {
                "$ref": "Aliases"
              }
            },
            "watch": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "parameters": {
                "event": {
                  "description": "Event on which subscription is intended (if subscribing)",
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "location": "query"
                },
                "userKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true
                }
              },
              "request": {
                "$ref": "Channel"
              },
              "id": "directory.users.aliases.watch",
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "description": "Watch for changes in users list",
              "response": {
                "$ref": "Channel"
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "userKey"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch"
            },
            "delete": {
              "parameters": {
                "alias": {
                  "description": "The alias to be removed",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "userKey": {
                  "required": true,
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "id": "directory.users.aliases.delete",
              "description": "Remove a alias for the user",
              "httpMethod": "DELETE"
            },
            "insert": {
              "description": "Add a alias for the user",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "id": "directory.users.aliases.insert",
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "httpMethod": "POST",
              "request": {
                "$ref": "Alias"
              },
              "parameters": {
                "userKey": {
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Alias"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases"
            }
          }
        }
      },
      "methods": {
        "insert": {
          "request": {
            "$ref": "User"
          },
          "parameters": {},
          "description": "create user.",
          "response": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users",
          "parameterOrder": [],
          "httpMethod": "POST",
          "id": "directory.users.insert"
        },
        "patch": {
          "response": {
            "$ref": "User"
          },
          "httpMethod": "PATCH",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "request": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.patch",
          "description": "Patch Users via Apiary Patch Orchestration"
        },
        "get": {
          "flatPath": "admin/directory/v1/users/{userKey}",
          "path": "admin/directory/v1/users/{userKey}",
          "httpMethod": "GET",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user",
              "required": true
            },
            "projection": {
              "location": "query",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "default": "basic",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "description": "What subset of fields to fetch for this user.",
              "type": "string"
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query",
              "type": "string"
            },
            "viewType": {
              "default": "admin_view",
              "type": "string",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "location": "query"
            }
          },
          "id": "directory.users.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "response": {
            "$ref": "User"
          },
          "parameterOrder": [
            "userKey"
          ],
          "description": "retrieve user"
        },
        "undelete": {
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "description": "The immutable id of the user",
              "location": "path"
            }
          },
          "description": "Undelete a deleted user",
          "httpMethod": "POST",
          "id": "directory.users.undelete",
          "request": {
            "$ref": "UserUndelete"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/undelete"
        },
        "delete": {
          "flatPath": "admin/directory/v1/users/{userKey}",
          "description": "Delete user",
          "path": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.delete",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "httpMethod": "DELETE",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user"
            }
          }
        },
        "watch": {
          "description": "Watch for changes in users list",
          "flatPath": "admin/directory/v1/users/watch",
          "httpMethod": "POST",
          "id": "directory.users.watch",
          "parameterOrder": [],
          "path": "admin/directory/v1/users/watch",
          "parameters": {
            "query": {
              "location": "query",
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "domain": {
              "type": "string",
              "location": "query",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\""
            },
            "showDeleted": {
              "location": "query",
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)"
            },
            "orderBy": {
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "type": "string",
              "description": "Column to use for sorting results",
              "location": "query"
            },
            "viewType": {
              "type": "string",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "location": "query",
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user."
            },
            "sortOrder": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order."
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "type": "string"
            },
            "event": {
              "type": "string",
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "description": "Event on which subscription is intended",
              "location": "query"
            },
            "maxResults": {
              "minimum": "1",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "location": "query",
              "default": "100",
              "type": "integer",
              "maximum": "500"
            },
            "projection": {
              "location": "query",
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "default": "basic",
              "description": "What subset of fields to fetch for this user."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "Channel"
          },
          "request": {
            "$ref": "Channel"
          }
        },
        "list": {
          "response": {
            "$ref": "Users"
          },
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "flatPath": "admin/directory/v1/users",
          "parameters": {
            "customFieldMask": {
              "type": "string",
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "type": "string",
              "description": "Column to use for sorting results"
            },
            "viewType": {
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "type": "string",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "location": "query",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ]
            },
            "showDeleted": {
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "location": "query"
            },
            "maxResults": {
              "default": "100",
              "format": "int32",
              "location": "query",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "minimum": "1",
              "maximum": "500"
            },
            "query": {
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "location": "query"
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "type": "string",
              "location": "query",
              "description": "Whether to return results in ascending or descending order.",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "projection": {
              "location": "query",
              "description": "What subset of fields to fetch for this user.",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "type": "string",
              "default": "basic"
            }
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/users",
          "id": "directory.users.list"
        },
        "makeAdmin": {
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user as admin",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "description": "change admin status of a user",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "id": "directory.users.makeAdmin",
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/makeAdmin"
        },
        "signOut": {
          "httpMethod": "POST",
          "id": "directory.users.signOut",
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "parameterOrder": [
            "userKey"
          ],
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "update": {
          "description": "update user",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "request": {
            "$ref": "User"
          },
          "httpMethod": "PUT",
          "id": "directory.users.update",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}"
        }
      }
    },
    "schemas": {
      "methods": {
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "response": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "httpMethod": "POST",
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "description": "Create schema.",
          "request": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.insert",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "parameterOrder": [
            "customerId"
          ]
        },
        "delete": {
          "id": "directory.schemas.delete",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Delete schema",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "schemaKey": {
              "location": "path",
              "description": "Name or immutable ID of the schema",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "DELETE"
        },
        "update": {
          "request": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.update",
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            },
            "schemaKey": {
              "location": "path",
              "description": "Name or immutable ID of the schema.",
              "type": "string",
              "required": true
            }
          },
          "httpMethod": "PUT",
          "description": "Update schema",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        },
        "get": {
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Retrieve schema",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "response": {
            "$ref": "Schema"
          },
          "parameters": {
            "schemaKey": {
              "description": "Name or immutable ID of the schema",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.schemas.get",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ]
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "customerId"
          ],
          "description": "Retrieve all schemas for a customer",
          "httpMethod": "GET",
          "id": "directory.schemas.list",
          "response": {
            "$ref": "Schemas"
          }
        },
        "patch": {
          "description": "Patch Schema via Apiary Patch Orchestration",
          "id": "directory.schemas.patch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "response": {
            "$ref": "Schema"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            },
            "schemaKey": {
              "description": "Name or immutable ID of the schema.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Schema"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ]
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "get": {
          "id": "directory.chromeosdevices.get",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "description": "Retrieve Chrome OS Device",
          "parameters": {
            "deviceId": {
              "type": "string",
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "location": "path"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "response": {
            "$ref": "ChromeOsDevice"
          }
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "httpMethod": "PUT",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameters": {
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "type": "string"
            },
            "deviceId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of Chrome OS Device"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "description": "Update Chrome OS Device",
          "id": "directory.chromeosdevices.update",
          "request": {
            "$ref": "ChromeOsDevice"
          }
        },
        "list": {
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameters": {
            "query": {
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "location": "query",
              "type": "string"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "location": "query"
            },
            "orderBy": {
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ],
              "description": "Column to use for sorting results",
              "type": "string",
              "location": "query",
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ]
            },
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "maxResults": {
              "type": "integer",
              "default": "100",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "location": "query",
              "format": "int32"
            }
          },
          "id": "directory.chromeosdevices.list",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "parameterOrder": [
            "customerId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "httpMethod": "GET"
        },
        "moveDevicesToOu": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            },
            "orgUnitPath": {
              "required": true,
              "description": "Full path of the target organizational unit or its ID",
              "type": "string",
              "location": "query"
            }
          },
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "httpMethod": "POST",
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu"
        },
        "patch": {
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "description": "Patch Chrome OS Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameters": {
            "deviceId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of Chrome OS Device",
              "type": "string"
            },
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "type": "string"
            }
          },
          "httpMethod": "PATCH",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "id": "directory.chromeosdevices.patch"
        },
        "action": {
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "resourceId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of Chrome OS Device"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "description": "Take action on Chrome OS Device",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "id": "directory.chromeosdevices.action",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action"
        }
      }
    },
    "tokens": {
      "methods": {
        "delete": {
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Delete all access tokens issued by a user for an application.",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "clientId": {
              "location": "path",
              "type": "string",
              "description": "The Client ID of the application the token is issued to.",
              "required": true
            }
          },
          "id": "directory.tokens.delete",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "list": {
          "id": "directory.tokens.list",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "GET",
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "response": {
            "$ref": "Tokens"
          },
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "get": {
          "id": "directory.tokens.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true
            },
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "response": {
            "$ref": "Token"
          },
          "description": "Get information about an access token issued by a user.",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        }
      }
    },
    "resources": {
      "resources": {
        "buildings": {
          "methods": {
            "delete": {
              "id": "directory.resources.buildings.delete",
              "description": "Deletes a building.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "description": "The id of the building to delete.",
                  "location": "path",
                  "required": true
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ]
            },
            "update": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "buildingId": {
                  "description": "The id of the building to update.",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "coordinatesSource": {
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED",
                  "location": "query",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ]
                },
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "response": {
                "$ref": "Building"
              },
              "description": "Updates a building.",
              "request": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "PUT",
              "id": "directory.resources.buildings.update"
            },
            "get": {
              "httpMethod": "GET",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "buildingId": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the building to retrieve."
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Retrieves a building.",
              "id": "directory.resources.buildings.get",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "list": {
              "description": "Retrieves a list of buildings for an account.",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.buildings.list",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "httpMethod": "GET",
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Token to specify the next page in the list."
                },
                "maxResults": {
                  "type": "integer",
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "location": "query",
                  "minimum": "1",
                  "format": "int32"
                }
              },
              "response": {
                "$ref": "Buildings"
              }
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Patches a building via Apiary Patch Orchestration.",
              "id": "directory.resources.buildings.patch",
              "httpMethod": "PATCH",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "request": {
                "$ref": "Building"
              },
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "coordinatesSource": {
                  "location": "query",
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "type": "string"
                },
                "buildingId": {
                  "required": true,
                  "type": "string",
                  "description": "The id of the building to update.",
                  "location": "path"
                }
              }
            },
            "insert": {
              "id": "directory.resources.buildings.insert",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "response": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "parameterOrder": [
                "customer"
              ],
              "description": "Inserts a building.",
              "httpMethod": "POST",
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                },
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "type": "string",
                  "location": "query",
                  "description": "Source from which Building.coordinates are derived."
                }
              },
              "request": {
                "$ref": "Building"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            }
          }
        },
        "calendars": {
          "methods": {
            "get": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.get",
              "description": "Retrieves a calendar resource.",
              "parameters": {
                "calendarResourceId": {
                  "type": "string",
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "location": "path",
                  "required": true
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "response": {
                "$ref": "CalendarResource"
              }
            },
            "insert": {
              "response": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "description": "Inserts a calendar resource.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "id": "directory.resources.calendars.insert",
              "parameterOrder": [
                "customer"
              ],
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars"
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.calendars.patch",
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                },
                "calendarResourceId": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID of the calendar resource to update.",
                  "required": true
                }
              },
              "httpMethod": "PATCH",
              "request": {
                "$ref": "CalendarResource"
              },
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "response": {
                "$ref": "CalendarResource"
              }
            },
            "delete": {
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.delete",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "calendarResourceId": {
                  "type": "string",
                  "description": "The unique ID of the calendar resource to delete.",
                  "location": "path",
                  "required": true
                }
              },
              "description": "Deletes a calendar resource.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "DELETE"
            },
            "update": {
              "id": "directory.resources.calendars.update",
              "httpMethod": "PUT",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "parameters": {
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to update.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "request": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "list": {
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "response": {
                "$ref": "CalendarResources"
              },
              "parameters": {
                "query": {
                  "location": "query",
                  "type": "string",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone."
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "type": "string",
                  "location": "query"
                },
                "orderBy": {
                  "type": "string",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order.",
                  "location": "query"
                },
                "maxResults": {
                  "minimum": "1",
                  "format": "int32",
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "location": "query",
                  "type": "integer"
                }
              },
              "id": "directory.resources.calendars.list",
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a list of calendar resources for an account."
            }
          }
        },
        "features": {
          "methods": {
            "rename": {
              "httpMethod": "POST",
              "parameters": {
                "oldName": {
                  "type": "string",
                  "description": "The unique ID of the feature to rename.",
                  "required": true,
                  "location": "path"
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "id": "directory.resources.features.rename",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Renames a feature.",
              "request": {
                "$ref": "FeatureRename"
              }
            },
            "patch": {
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID of the feature to update."
                }
              },
              "request": {
                "$ref": "Feature"
              },
              "response": {
                "$ref": "Feature"
              },
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "httpMethod": "PATCH",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.patch"
            },
            "list": {
              "description": "Retrieves a list of features for an account.",
              "id": "directory.resources.features.list",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Token to specify the next page in the list."
                },
                "maxResults": {
                  "type": "integer",
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "minimum": "1",
                  "location": "query",
                  "format": "int32"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "response": {
                "$ref": "Features"
              },
              "parameterOrder": [
                "customer"
              ],
              "httpMethod": "GET"
            },
            "get": {
              "response": {
                "$ref": "Feature"
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a feature.",
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the feature to retrieve.",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.get",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "delete": {
              "id": "directory.resources.features.delete",
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameters": {
                "featureKey": {
                  "location": "path",
                  "description": "The unique ID of the feature to delete.",
                  "required": true,
                  "type": "string"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Deletes a feature.",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "insert": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "request": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.insert",
              "description": "Inserts a feature.",
              "path": "admin/directory/v1/customer/{customer}/resources/features"
            },
            "update": {
              "description": "Updates a feature.",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.features.update",
              "response": {
                "$ref": "Feature"
              },
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the feature to update.",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "httpMethod": "PUT",
              "request": {
                "$ref": "Feature"
              }
            }
          }
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.privileges.list",
          "httpMethod": "GET",
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "response": {
            "$ref": "Privileges"
          },
          "description": "Retrieves a paginated list of all privileges for a customer."
        }
      }
    }
  },
  "ownerDomain": "google.com",
  "id": "admin:directory_v1",
  "version": "directory_v1",
  "kind": "discovery#restDescription",
  "rootUrl": "https://admin.googleapis.com/",
  "title": "Admin SDK",
  "parameters": {
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "location": "query",
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "upload_protocol": {
      "location": "query",
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "alt": {
      "type": "string",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response.",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "access_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth access token."
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    }
  },
  "protocol": "rest",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        }
      }
    }
  }
}
