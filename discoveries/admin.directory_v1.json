{
  "version": "directory_v1",
  "protocol": "rest",
  "basePath": "",
  "resources": {
    "privileges": {
      "methods": {
        "list": {
          "id": "directory.privileges.list",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "response": {
            "$ref": "Privileges"
          },
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "httpMethod": "GET"
        }
      }
    },
    "customers": {
      "methods": {
        "update": {
          "path": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.update",
          "parameterOrder": [
            "customerKey"
          ],
          "description": "Updates a customer.",
          "response": {
            "$ref": "Customer"
          },
          "httpMethod": "PUT",
          "request": {
            "$ref": "Customer"
          },
          "parameters": {
            "customerKey": {
              "required": true,
              "description": "Id of the customer to be updated",
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}"
        },
        "patch": {
          "parameters": {
            "customerKey": {
              "type": "string",
              "description": "Id of the customer to be updated",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ],
          "response": {
            "$ref": "Customer"
          },
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.patch",
          "request": {
            "$ref": "Customer"
          },
          "description": "Patch Customers via Apiary Patch Orchestration",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ]
        },
        "get": {
          "parameterOrder": [
            "customerKey"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "path": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "GET",
          "id": "directory.customers.get",
          "description": "Retrieves a customer.",
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be retrieved",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "response": {
            "$ref": "Customer"
          }
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "generate": {
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.verificationCodes.generate",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "description": "Generate new backup verification codes for the user.",
          "httpMethod": "POST"
        },
        "invalidate": {
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "id": "directory.verificationCodes.invalidate",
          "description": "Invalidate the current backup verification codes for the user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "httpMethod": "GET",
          "id": "directory.verificationCodes.list",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "response": {
            "$ref": "VerificationCodes"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes"
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "list": {
          "parameters": {
            "query": {
              "type": "string",
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "location": "query"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            },
            "projection": {
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ]
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "maxResults": {
              "minimum": "1",
              "maximum": "100",
              "location": "query",
              "default": "100",
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 100."
            },
            "orderBy": {
              "type": "string",
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "description": "Column to use for sorting results",
              "location": "query",
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ]
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "response": {
            "$ref": "MobileDevices"
          },
          "httpMethod": "GET",
          "id": "directory.mobiledevices.list",
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile"
        },
        "delete": {
          "httpMethod": "DELETE",
          "id": "directory.mobiledevices.delete",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "resourceId": {
              "required": true,
              "description": "Immutable ID of Mobile Device",
              "location": "path",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "description": "Delete Mobile Device"
        },
        "action": {
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "httpMethod": "POST",
          "id": "directory.mobiledevices.action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "parameters": {
            "resourceId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of Mobile Device",
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "description": "Take action on Mobile Device",
          "request": {
            "$ref": "MobileDeviceAction"
          }
        },
        "get": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "response": {
            "$ref": "MobileDevice"
          },
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "description": "Restrict information returned to a set of selected fields."
            },
            "resourceId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of Mobile Device"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "id": "directory.mobiledevices.get",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "httpMethod": "GET",
          "description": "Retrieve Mobile Device"
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "methods": {
                "issueCommand": {
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "description": "Issues a command for the device to execute.",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ],
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "parameters": {
                    "customerId": {
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "description": "Immutable. Immutable ID of the G Suite account."
                    },
                    "deviceId": {
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "description": "Immutable. Immutable ID of Chrome OS Device."
                    }
                  }
                }
              },
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "parameters": {
                        "deviceId": {
                          "required": true,
                          "type": "string",
                          "description": "Immutable. Immutable ID of Chrome OS Device.",
                          "location": "path"
                        },
                        "commandId": {
                          "required": true,
                          "description": "Immutable. Immutable ID of Chrome OS Device Command.",
                          "format": "int64",
                          "location": "path",
                          "type": "string"
                        },
                        "customerId": {
                          "required": true,
                          "location": "path",
                          "type": "string",
                          "description": "Immutable. Immutable ID of the G Suite account."
                        }
                      },
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ],
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "description": "Gets command data a specific command issued to the device.",
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "id": "admin.customer.devices.chromeos.commands.get",
                      "httpMethod": "GET"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "domainAliases": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "description": "Lists the domain aliases of the customer.",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            },
            "parentDomainName": {
              "location": "query",
              "type": "string",
              "description": "Name of the parent domain for which domain aliases are to be fetched."
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "httpMethod": "GET",
          "response": {
            "$ref": "DomainAliases"
          },
          "id": "directory.domainAliases.list",
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ]
        },
        "get": {
          "response": {
            "$ref": "DomainAlias"
          },
          "description": "Retrieves a domain alias of the customer.",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "domainAliasName": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Name of domain alias to be retrieved."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "id": "directory.domainAliases.get",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}"
        },
        "delete": {
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "httpMethod": "DELETE",
          "description": "Deletes a domain Alias of the customer.",
          "id": "directory.domainAliases.delete",
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            },
            "domainAliasName": {
              "description": "Name of domain alias to be retrieved.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ]
        },
        "insert": {
          "parameterOrder": [
            "customer"
          ],
          "description": "Inserts a domain alias of the customer.",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            }
          },
          "response": {
            "$ref": "DomainAlias"
          },
          "request": {
            "$ref": "DomainAlias"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "id": "directory.domainAliases.insert",
          "path": "admin/directory/v1/customer/{customer}/domainaliases"
        }
      }
    },
    "groups": {
      "methods": {
        "list": {
          "httpMethod": "GET",
          "id": "directory.groups.list",
          "parameterOrder": [],
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "response": {
            "$ref": "Groups"
          },
          "flatPath": "admin/directory/v1/groups",
          "parameters": {
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "userKey": {
              "location": "query",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "type": "string"
            },
            "domain": {
              "type": "string",
              "location": "query",
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead."
            },
            "maxResults": {
              "minimum": "1",
              "location": "query",
              "default": "200",
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 200."
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "email"
              ],
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "type": "string",
              "location": "query"
            },
            "customer": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain."
            },
            "sortOrder": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used"
            },
            "query": {
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "location": "query"
            }
          },
          "path": "admin/directory/v1/groups",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ]
        },
        "get": {
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group"
            }
          },
          "description": "Retrieve Group",
          "httpMethod": "GET",
          "parameterOrder": [
            "groupKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "path": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.get",
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ]
        },
        "insert": {
          "response": {
            "$ref": "Group"
          },
          "id": "directory.groups.insert",
          "parameters": {},
          "request": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups",
          "parameterOrder": [],
          "httpMethod": "POST",
          "path": "admin/directory/v1/groups",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "description": "Create Group"
        },
        "patch": {
          "description": "Patch Groups via Apiary Patch Orchestration",
          "response": {
            "$ref": "Group"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.patch",
          "request": {
            "$ref": "Group"
          },
          "parameters": {
            "groupKey": {
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "location": "path"
            }
          },
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/groups/{groupKey}"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "id": "directory.groups.delete",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the group"
            }
          },
          "description": "Delete Group",
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "DELETE"
        },
        "update": {
          "parameterOrder": [
            "groupKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Group"
          },
          "id": "directory.groups.update",
          "request": {
            "$ref": "Group"
          },
          "description": "Update Group",
          "path": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "httpMethod": "PUT"
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "id": "directory.groups.aliases.delete",
              "description": "Remove a alias for the group",
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "parameters": {
                "alias": {
                  "location": "path",
                  "description": "The alias to be removed",
                  "type": "string",
                  "required": true
                },
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              }
            },
            "list": {
              "parameterOrder": [
                "groupKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "description": "List all aliases for a group",
              "response": {
                "$ref": "Aliases"
              },
              "parameters": {
                "groupKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the group",
                  "required": true,
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "id": "directory.groups.aliases.list",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "httpMethod": "GET"
            },
            "insert": {
              "parameterOrder": [
                "groupKey"
              ],
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "id": "directory.groups.aliases.insert",
              "response": {
                "$ref": "Alias"
              },
              "description": "Add a alias for the group",
              "request": {
                "$ref": "Alias"
              }
            }
          }
        }
      }
    },
    "users": {
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "description": "Remove a alias for the user",
              "parameters": {
                "alias": {
                  "description": "The alias to be removed",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "id": "directory.users.aliases.delete"
            },
            "watch": {
              "description": "Watch for changes in users list",
              "id": "directory.users.aliases.watch",
              "request": {
                "$ref": "Channel"
              },
              "parameterOrder": [
                "userKey"
              ],
              "httpMethod": "POST",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                },
                "event": {
                  "location": "query",
                  "type": "string",
                  "description": "Event on which subscription is intended (if subscribing)",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ]
                }
              },
              "response": {
                "$ref": "Channel"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases/watch"
            },
            "list": {
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "description": "List all aliases for a user",
              "parameterOrder": [
                "userKey"
              ],
              "response": {
                "$ref": "Aliases"
              },
              "parameters": {
                "userKey": {
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "id": "directory.users.aliases.list"
            },
            "insert": {
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "response": {
                "$ref": "Alias"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "description": "Add a alias for the user",
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.aliases.insert",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "request": {
                "$ref": "Alias"
              },
              "httpMethod": "POST",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              }
            }
          }
        },
        "photos": {
          "methods": {
            "delete": {
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "id": "directory.users.photos.delete",
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "required": true
                }
              },
              "description": "Remove photos for the user",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "patch": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "UserPhoto"
              },
              "response": {
                "$ref": "UserPhoto"
              },
              "parameters": {
                "userKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "required": true
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "id": "directory.users.photos.patch",
              "description": "Patch Photo via Apiary Patch Orchestration"
            },
            "get": {
              "description": "Retrieve photo of a user",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.get",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "GET",
              "response": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ],
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              }
            },
            "update": {
              "description": "Add a photo for the user",
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.update",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "request": {
                "$ref": "UserPhoto"
              },
              "httpMethod": "PUT",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "response": {
                "$ref": "UserPhoto"
              },
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              }
            }
          }
        }
      },
      "methods": {
        "makeAdmin": {
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.makeAdmin",
          "description": "change admin status of a user",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user as admin",
              "required": true
            }
          }
        },
        "signOut": {
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            }
          },
          "httpMethod": "POST",
          "id": "directory.users.signOut",
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/signOut"
        },
        "insert": {
          "parameters": {},
          "description": "create user.",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.insert",
          "request": {
            "$ref": "User"
          },
          "response": {
            "$ref": "User"
          },
          "parameterOrder": [],
          "flatPath": "admin/directory/v1/users",
          "path": "admin/directory/v1/users"
        },
        "list": {
          "parameterOrder": [],
          "id": "directory.users.list",
          "flatPath": "admin/directory/v1/users",
          "parameters": {
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query",
              "type": "string"
            },
            "projection": {
              "default": "basic",
              "location": "query",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "type": "string",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "description": "What subset of fields to fetch for this user."
            },
            "showDeleted": {
              "location": "query",
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)"
            },
            "viewType": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "type": "string",
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user."
            },
            "maxResults": {
              "type": "integer",
              "minimum": "1",
              "maximum": "500",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "location": "query",
              "default": "100"
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "location": "query",
              "description": "Whether to return results in ascending or descending order."
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "location": "query",
              "type": "string"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            },
            "domain": {
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "location": "query"
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "location": "query"
            },
            "query": {
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "location": "query"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "GET",
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "path": "admin/directory/v1/users",
          "response": {
            "$ref": "Users"
          }
        },
        "get": {
          "parameters": {
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "type": "string",
              "location": "query",
              "default": "basic",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "description": "What subset of fields to fetch for this user."
            },
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user",
              "location": "path",
              "required": true
            },
            "viewType": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "location": "query",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user."
            }
          },
          "id": "directory.users.get",
          "response": {
            "$ref": "User"
          },
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}",
          "httpMethod": "GET",
          "description": "retrieve user",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "DELETE",
          "parameterOrder": [
            "userKey"
          ],
          "description": "Delete user",
          "path": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.delete"
        },
        "watch": {
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/watch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "flatPath": "admin/directory/v1/users/watch",
          "description": "Watch for changes in users list",
          "request": {
            "$ref": "Channel"
          },
          "id": "directory.users.watch",
          "response": {
            "$ref": "Channel"
          },
          "parameters": {
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "default": "basic",
              "description": "What subset of fields to fetch for this user.",
              "location": "query",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "type": "string",
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ]
            },
            "orderBy": {
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "location": "query",
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "type": "string",
              "description": "Column to use for sorting results"
            },
            "customFieldMask": {
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string"
            },
            "showDeleted": {
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string",
              "location": "query"
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "location": "query",
              "type": "string"
            },
            "sortOrder": {
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order.",
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string"
            },
            "event": {
              "description": "Event on which subscription is intended",
              "type": "string",
              "location": "query",
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ]
            },
            "domain": {
              "location": "query",
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\""
            },
            "viewType": {
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "default": "admin_view",
              "location": "query",
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "type": "string",
              "enum": [
                "admin_view",
                "domain_public"
              ]
            },
            "maxResults": {
              "minimum": "1",
              "default": "100",
              "maximum": "500",
              "type": "integer",
              "description": "Maximum number of results to return.",
              "location": "query",
              "format": "int32"
            }
          },
          "parameterOrder": []
        },
        "undelete": {
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "id": "directory.users.undelete",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "parameters": {
            "userKey": {
              "description": "The immutable id of the user",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "description": "Undelete a deleted user",
          "request": {
            "$ref": "UserUndelete"
          }
        },
        "update": {
          "id": "directory.users.update",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "required": true,
              "type": "string"
            }
          },
          "description": "update user",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          },
          "request": {
            "$ref": "User"
          }
        },
        "patch": {
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/users/{userKey}",
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "description": "Patch Users via Apiary Patch Orchestration",
          "response": {
            "$ref": "User"
          },
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.patch",
          "request": {
            "$ref": "User"
          }
        }
      }
    },
    "asps": {
      "methods": {
        "get": {
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "response": {
            "$ref": "Asp"
          },
          "id": "directory.asps.get",
          "httpMethod": "GET",
          "description": "Get information about an ASP issued by a user.",
          "parameters": {
            "codeId": {
              "format": "int32",
              "required": true,
              "description": "The unique ID of the ASP.",
              "type": "integer",
              "location": "path"
            },
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          }
        },
        "list": {
          "httpMethod": "GET",
          "path": "admin/directory/v1/users/{userKey}/asps",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "response": {
            "$ref": "Asps"
          },
          "description": "List the ASPs issued by a user.",
          "id": "directory.asps.list",
          "parameterOrder": [
            "userKey"
          ]
        },
        "delete": {
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.asps.delete",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "description": "Delete an ASP issued by a user.",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "codeId": {
              "location": "path",
              "required": true,
              "type": "integer",
              "description": "The unique ID of the ASP to be deleted.",
              "format": "int32"
            }
          }
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "request": {
            "$ref": "Channel"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameterOrder": [],
          "description": "Stop watching resources through this channel.",
          "path": "admin/directory_v1/channels/stop",
          "flatPath": "admin/directory_v1/channels/stop",
          "id": "admin.channels.stop",
          "parameters": {},
          "httpMethod": "POST"
        }
      }
    },
    "members": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "response": {
            "$ref": "Members"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "httpMethod": "GET",
          "description": "Retrieve all members in a group (paginated)",
          "id": "directory.members.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the group"
            },
            "roles": {
              "description": "Comma separated role values to filter list results on.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "format": "int32",
              "default": "200"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "includeDerivedMembership": {
              "location": "query",
              "type": "boolean",
              "description": "Whether to list indirect memberships. Default: false."
            }
          }
        },
        "patch": {
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Patch Member via Apiary Patch Orchestration",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "id": "directory.members.patch",
          "httpMethod": "PATCH",
          "parameters": {
            "memberKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object"
            },
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "response": {
            "$ref": "Member"
          },
          "request": {
            "$ref": "Member"
          }
        },
        "insert": {
          "id": "directory.members.insert",
          "response": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "parameters": {
            "groupKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the group"
            }
          },
          "request": {
            "$ref": "Member"
          },
          "description": "Add user to the specified group.",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "parameterOrder": [
            "groupKey"
          ]
        },
        "hasMember": {
          "response": {
            "$ref": "MembersHasMember"
          },
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID."
            },
            "memberKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID."
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "id": "directory.members.hasMember",
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "httpMethod": "GET"
        },
        "get": {
          "id": "directory.members.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "response": {
            "$ref": "Member"
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "memberKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the member"
            },
            "groupKey": {
              "required": true,
              "description": "Email or immutable ID of the group",
              "location": "path",
              "type": "string"
            }
          },
          "description": "Retrieve Group Member",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "update": {
          "description": "Update membership of a user in the specified group.",
          "request": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "type": "string",
              "required": true
            },
            "memberKey": {
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "required": true,
              "location": "path"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "PUT",
          "id": "directory.members.update",
          "response": {
            "$ref": "Member"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ]
        },
        "delete": {
          "description": "Remove membership.",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "memberKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the member",
              "type": "string"
            }
          },
          "id": "directory.members.delete",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ]
        }
      }
    },
    "schemas": {
      "methods": {
        "delete": {
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "description": "Delete schema",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "schemaKey": {
              "required": true,
              "description": "Name or immutable ID of the schema",
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.schemas.delete",
          "httpMethod": "DELETE"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "description": "Retrieve schema",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "schemaKey": {
              "type": "string",
              "required": true,
              "description": "Name or immutable ID of the schema",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Schema"
          },
          "httpMethod": "GET",
          "id": "directory.schemas.get"
        },
        "patch": {
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "PATCH",
          "id": "directory.schemas.patch",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "schemaKey": {
              "type": "string",
              "required": true,
              "description": "Name or immutable ID of the schema.",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "description": "Patch Schema via Apiary Patch Orchestration",
          "response": {
            "$ref": "Schema"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "request": {
            "$ref": "Schema"
          }
        },
        "insert": {
          "request": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.insert",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "httpMethod": "POST",
          "description": "Create schema.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "response": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId"
          ]
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameters": {
            "schemaKey": {
              "description": "Name or immutable ID of the schema.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "description": "Update schema",
          "request": {
            "$ref": "Schema"
          },
          "response": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.update",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        },
        "list": {
          "description": "Retrieve all schemas for a customer",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "response": {
            "$ref": "Schemas"
          },
          "httpMethod": "GET",
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "id": "directory.schemas.list",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "parameterOrder": [
            "customerId"
          ]
        }
      }
    },
    "resources": {
      "resources": {
        "buildings": {
          "methods": {
            "insert": {
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "coordinatesSource": {
                  "description": "Source from which Building.coordinates are derived.",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "type": "string",
                  "location": "query"
                }
              },
              "description": "Inserts a building.",
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "id": "directory.resources.buildings.insert",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer"
              ]
            },
            "get": {
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Retrieves a building.",
              "id": "directory.resources.buildings.get",
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the building to retrieve."
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "response": {
                "$ref": "Building"
              }
            },
            "delete": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.delete",
              "httpMethod": "DELETE",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                },
                "buildingId": {
                  "required": true,
                  "location": "path",
                  "description": "The id of the building to delete.",
                  "type": "string"
                }
              },
              "description": "Deletes a building.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "patch": {
              "request": {
                "$ref": "Building"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Patches a building via Apiary Patch Orchestration.",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              },
              "httpMethod": "PATCH",
              "parameters": {
                "coordinatesSource": {
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "type": "string",
                  "description": "Source from which Building.coordinates are derived.",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "location": "query"
                },
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "buildingId": {
                  "location": "path",
                  "required": true,
                  "description": "The id of the building to update.",
                  "type": "string"
                }
              },
              "id": "directory.resources.buildings.patch",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "id": "directory.resources.buildings.list",
              "parameters": {
                "maxResults": {
                  "location": "query",
                  "minimum": "1",
                  "format": "int32",
                  "description": "Maximum number of results to return.",
                  "type": "integer",
                  "maximum": "500"
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "response": {
                "$ref": "Buildings"
              },
              "parameterOrder": [
                "customer"
              ],
              "description": "Retrieves a list of buildings for an account.",
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings"
            },
            "update": {
              "description": "Updates a building.",
              "request": {
                "$ref": "Building"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "id": "directory.resources.buildings.update",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "PUT",
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                },
                "buildingId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The id of the building to update."
                },
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "location": "query",
                  "type": "string"
                }
              }
            }
          }
        },
        "features": {
          "methods": {
            "insert": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "response": {
                "$ref": "Feature"
              },
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                }
              },
              "parameterOrder": [
                "customer"
              ],
              "request": {
                "$ref": "Feature"
              },
              "description": "Inserts a feature.",
              "httpMethod": "POST",
              "id": "directory.resources.features.insert"
            },
            "patch": {
              "request": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.patch",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "PATCH",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the feature to update."
                }
              },
              "response": {
                "$ref": "Feature"
              }
            },
            "update": {
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "PUT",
              "response": {
                "$ref": "Feature"
              },
              "request": {
                "$ref": "Feature"
              },
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "featureKey": {
                  "required": true,
                  "description": "The unique ID of the feature to update.",
                  "location": "path",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.features.update",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Updates a feature."
            },
            "get": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "description": "Retrieves a feature.",
              "response": {
                "$ref": "Feature"
              },
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                },
                "featureKey": {
                  "description": "The unique ID of the feature to retrieve.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.features.get"
            },
            "delete": {
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "featureKey": {
                  "description": "The unique ID of the feature to delete.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "description": "Deletes a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "DELETE",
              "id": "directory.resources.features.delete"
            },
            "rename": {
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                },
                "oldName": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the feature to rename.",
                  "type": "string"
                }
              },
              "id": "directory.resources.features.rename",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Renames a feature.",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "httpMethod": "POST",
              "request": {
                "$ref": "FeatureRename"
              },
              "parameterOrder": [
                "customer",
                "oldName"
              ]
            },
            "list": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.features.list",
              "response": {
                "$ref": "Features"
              },
              "parameters": {
                "maxResults": {
                  "maximum": "500",
                  "type": "integer",
                  "location": "query",
                  "description": "Maximum number of results to return.",
                  "format": "int32",
                  "minimum": "1"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Token to specify the next page in the list."
                }
              },
              "httpMethod": "GET",
              "description": "Retrieves a list of features for an account.",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            }
          }
        },
        "calendars": {
          "methods": {
            "insert": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "response": {
                "$ref": "CalendarResource"
              },
              "httpMethod": "POST",
              "description": "Inserts a calendar resource.",
              "id": "directory.resources.calendars.insert",
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              }
            },
            "update": {
              "request": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to update.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "response": {
                "$ref": "CalendarResource"
              },
              "httpMethod": "PUT",
              "id": "directory.resources.calendars.update",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
            },
            "delete": {
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                },
                "calendarResourceId": {
                  "required": true,
                  "description": "The unique ID of the calendar resource to delete.",
                  "location": "path",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.delete",
              "description": "Deletes a calendar resource."
            },
            "get": {
              "parameters": {
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "response": {
                "$ref": "CalendarResource"
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Retrieves a calendar resource.",
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.get",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "list": {
              "httpMethod": "GET",
              "response": {
                "$ref": "CalendarResources"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "id": "directory.resources.calendars.list",
              "parameters": {
                "orderBy": {
                  "location": "query",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order.",
                  "type": "string"
                },
                "maxResults": {
                  "maximum": "500",
                  "minimum": "1",
                  "format": "int32",
                  "type": "integer",
                  "location": "query",
                  "description": "Maximum number of results to return."
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "pageToken": {
                  "type": "string",
                  "description": "Token to specify the next page in the list.",
                  "location": "query"
                },
                "query": {
                  "location": "query",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone.",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a list of calendar resources for an account."
            },
            "patch": {
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "description": "The unique ID of the calendar resource to update.",
                  "type": "string",
                  "location": "path"
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                }
              },
              "httpMethod": "PATCH",
              "id": "directory.resources.calendars.patch",
              "response": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "request": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            }
          }
        }
      }
    },
    "roles": {
      "methods": {
        "update": {
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "roleId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "request": {
            "$ref": "Role"
          },
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "httpMethod": "PUT",
          "description": "Updates a role.",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.update"
        },
        "get": {
          "response": {
            "$ref": "Role"
          },
          "httpMethod": "GET",
          "description": "Retrieves a role.",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "roleId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role."
            }
          },
          "id": "directory.roles.get",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "delete": {
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "roleId": {
              "description": "Immutable ID of the role.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.delete",
          "description": "Deletes a role.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "list": {
          "parameterOrder": [
            "customer"
          ],
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles",
          "httpMethod": "GET",
          "response": {
            "$ref": "Roles"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "id": "directory.roles.list",
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            },
            "maxResults": {
              "format": "int32",
              "maximum": "100",
              "description": "Maximum number of results to return.",
              "minimum": "1",
              "location": "query",
              "type": "integer"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify the next page in the list.",
              "type": "string"
            }
          }
        },
        "insert": {
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "request": {
            "$ref": "Role"
          },
          "description": "Creates a role.",
          "id": "directory.roles.insert",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "httpMethod": "POST"
        },
        "patch": {
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "request": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "parameters": {
            "roleId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role."
            },
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "description": "Patch role via Apiary Patch Orchestration",
          "id": "directory.roles.patch",
          "httpMethod": "PATCH",
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "delete": {
          "id": "directory.roleAssignments.delete",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            },
            "roleAssignmentId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the role assignment."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "description": "Deletes a role assignment.",
          "httpMethod": "DELETE"
        },
        "insert": {
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Creates a role assignment.",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "response": {
            "$ref": "RoleAssignment"
          },
          "id": "directory.roleAssignments.insert",
          "request": {
            "$ref": "RoleAssignment"
          },
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "description": "Retrieve a role assignment.",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "response": {
            "$ref": "RoleAssignment"
          },
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            },
            "roleAssignmentId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the role assignment.",
              "required": true
            }
          },
          "httpMethod": "GET",
          "id": "directory.roleAssignments.get"
        },
        "list": {
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "description": "Retrieves a paginated list of all roleAssignments.",
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.roleAssignments.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "response": {
            "$ref": "RoleAssignments"
          },
          "parameters": {
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify the next page in the list."
            },
            "maxResults": {
              "maximum": "200",
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of results to return."
            },
            "roleId": {
              "location": "query",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "type": "string"
            },
            "userKey": {
              "location": "query",
              "type": "string",
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user."
            },
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          }
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "POST",
          "description": "Turn off 2-Step Verification for user.",
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "id": "directory.twoStepVerification.turnOff",
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path"
            }
          }
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "action": {
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            },
            "resourceId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of Chrome OS Device"
            }
          },
          "description": "Take action on Chrome OS Device",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "id": "directory.chromeosdevices.action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "httpMethod": "POST"
        },
        "get": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "projection": {
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            },
            "deviceId": {
              "type": "string",
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "description": "Retrieve Chrome OS Device",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "id": "directory.chromeosdevices.get",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        },
        "list": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "id": "directory.chromeosdevices.list",
          "parameters": {
            "sortOrder": {
              "type": "string",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "description": "Column to use for sorting results",
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ]
            },
            "orgUnitPath": {
              "type": "string",
              "description": "Full path of the organizational unit or its ID",
              "location": "query"
            },
            "projection": {
              "location": "query",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "maxResults": {
              "location": "query",
              "type": "integer",
              "minimum": "1",
              "format": "int32",
              "default": "100",
              "description": "Maximum number of results to return."
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333"
            }
          },
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameterOrder": [
            "customerId"
          ]
        },
        "moveDevicesToOu": {
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "parameters": {
            "orgUnitPath": {
              "location": "query",
              "required": true,
              "description": "Full path of the target organizational unit or its ID",
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          }
        },
        "patch": {
          "parameters": {
            "deviceId": {
              "location": "path",
              "description": "Immutable ID of Chrome OS Device",
              "type": "string",
              "required": true
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "description": "Patch Chrome OS Device",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.patch"
        },
        "update": {
          "httpMethod": "PUT",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string"
            },
            "deviceId": {
              "location": "path",
              "description": "Immutable ID of Chrome OS Device",
              "type": "string",
              "required": true
            }
          },
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "description": "Update Chrome OS Device",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ]
        }
      }
    },
    "orgunits": {
      "methods": {
        "delete": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "description": "Remove organizational unit",
          "id": "directory.orgunits.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameters": {
            "orgUnitPath": {
              "pattern": "^.*$",
              "location": "path",
              "required": true,
              "description": "Full path of the organizational unit or its ID",
              "type": "string"
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "httpMethod": "GET",
          "description": "Retrieve all organizational units",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "id": "directory.orgunits.list",
          "response": {
            "$ref": "OrgUnits"
          },
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "type": {
              "type": "string",
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "location": "query",
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ],
              "description": "Whether to return all sub-organizations or just immediate children"
            },
            "orgUnitPath": {
              "type": "string",
              "location": "query",
              "default": "",
              "description": "the URL-encoded organizational unit's path or its ID"
            },
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits"
        },
        "insert": {
          "parameterOrder": [
            "customerId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "description": "Add organizational unit",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            }
          },
          "id": "directory.orgunits.insert",
          "request": {
            "$ref": "OrgUnit"
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "POST"
        },
        "get": {
          "description": "Retrieve organizational unit",
          "parameters": {
            "orgUnitPath": {
              "pattern": "^.*$",
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Full path of the organizational unit or its ID"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.orgunits.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "httpMethod": "GET"
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            },
            "orgUnitPath": {
              "pattern": "^.*$",
              "required": true,
              "location": "path",
              "description": "Full path of the organizational unit or its ID",
              "type": "string"
            }
          },
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "response": {
            "$ref": "OrgUnit"
          },
          "request": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.patch",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}"
        },
        "update": {
          "request": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "response": {
            "$ref": "OrgUnit"
          },
          "description": "Update organizational unit",
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            },
            "orgUnitPath": {
              "type": "string",
              "description": "Full path of the organizational unit or its ID",
              "required": true,
              "location": "path",
              "pattern": "^.*$"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "httpMethod": "PUT",
          "id": "directory.orgunits.update"
        }
      }
    },
    "domains": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "httpMethod": "GET",
          "parameterOrder": [
            "customer"
          ],
          "description": "Lists the domains of the customer.",
          "id": "directory.domains.list",
          "response": {
            "$ref": "Domains2"
          },
          "path": "admin/directory/v1/customer/{customer}/domains",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          }
        },
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "Domains"
          },
          "id": "directory.domains.insert",
          "path": "admin/directory/v1/customer/{customer}/domains",
          "description": "Inserts a domain of the customer.",
          "request": {
            "$ref": "Domains"
          }
        },
        "get": {
          "response": {
            "$ref": "Domains"
          },
          "description": "Retrieves a domain of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "id": "directory.domains.get",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true
            },
            "domainName": {
              "location": "path",
              "required": true,
              "description": "Name of domain to be retrieved",
              "type": "string"
            }
          },
          "httpMethod": "GET"
        },
        "delete": {
          "id": "directory.domains.delete",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "parameters": {
            "domainName": {
              "location": "path",
              "type": "string",
              "description": "Name of domain to be deleted",
              "required": true
            },
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            }
          },
          "description": "Deletes a domain of the customer."
        }
      }
    },
    "tokens": {
      "methods": {
        "delete": {
          "id": "directory.tokens.delete",
          "parameters": {
            "clientId": {
              "location": "path",
              "description": "The Client ID of the application the token is issued to.",
              "type": "string",
              "required": true
            },
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Delete all access tokens issued by a user for an application.",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "userKey",
            "clientId"
          ]
        },
        "get": {
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "httpMethod": "GET",
          "response": {
            "$ref": "Token"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Get information about an access token issued by a user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "parameters": {
            "clientId": {
              "location": "path",
              "description": "The Client ID of the application the token is issued to.",
              "type": "string",
              "required": true
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.tokens.get"
        },
        "list": {
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "id": "directory.tokens.list",
          "httpMethod": "GET",
          "response": {
            "$ref": "Tokens"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey"
          ]
        }
      }
    }
  },
  "parameters": {
    "alt": {
      "default": "json",
      "type": "string",
      "location": "query",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response."
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "location": "query"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    }
  },
  "baseUrl": "https://www.googleapis.com/",
  "title": "Admin SDK",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "schemas": {
    "UserAbout": {
      "properties": {
        "value": {
          "description": "Actual value of notes.",
          "type": "string"
        },
        "contentType": {
          "type": "string",
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text."
        }
      },
      "id": "UserAbout",
      "description": "JSON template for About (notes) of a user in Directory API.",
      "type": "object"
    },
    "UserLocation": {
      "description": "JSON template for a location entry.",
      "type": "object",
      "id": "UserLocation",
      "properties": {
        "floorSection": {
          "type": "string",
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value."
        },
        "area": {
          "type": "string",
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''"
        },
        "deskCode": {
          "description": "Most specific textual code of individual desk location.",
          "type": "string"
        },
        "buildingId": {
          "description": "Building Identifier.",
          "type": "string"
        },
        "floorName": {
          "type": "string",
          "description": "Floor name/number."
        }
      }
    },
    "Groups": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#groups",
          "description": "Kind of resource this is."
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "groups": {
          "description": "List of group objects.",
          "type": "array",
          "items": {
            "$ref": "Group"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Groups"
    },
    "UserPosixAccount": {
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix.",
      "id": "UserPosixAccount",
      "properties": {
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        },
        "shell": {
          "type": "string",
          "description": "The path to the login shell for this account."
        },
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "gecos": {
          "type": "string",
          "description": "The GECOS (user information) for this account."
        },
        "accountId": {
          "description": "A POSIX account field identifier.",
          "type": "string"
        },
        "systemId": {
          "type": "string",
          "description": "System identifier for which account Username or Uid apply to."
        },
        "uid": {
          "format": "uint64",
          "description": "The POSIX compliant user ID.",
          "type": "string"
        },
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        },
        "gid": {
          "format": "uint64",
          "type": "string",
          "description": "The default group ID."
        },
        "operatingSystemType": {
          "type": "string",
          "description": "The operating system type for this account."
        }
      },
      "type": "object"
    },
    "UserWebsite": {
      "description": "JSON template for a website entry.",
      "id": "UserWebsite",
      "type": "object",
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary website or not."
        },
        "value": {
          "type": "string",
          "description": "Website."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      }
    },
    "Customer": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "phoneNumber": {
          "description": "The customer's contact phone number in E.164 format.",
          "type": "string"
        },
        "id": {
          "description": "The unique ID for the customer's G Suite account. (Readonly)",
          "type": "string"
        },
        "customerCreationTime": {
          "type": "string",
          "description": "The customer's creation time (Readonly)",
          "format": "date-time"
        },
        "kind": {
          "type": "string",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer",
          "default": "admin#directory#customer"
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. The default value is en-US",
          "type": "string"
        },
        "postalAddress": {
          "$ref": "CustomerPostalAddress",
          "description": "The customer's postal address information."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "customerDomain": {
          "type": "string",
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer."
        },
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain"
        }
      },
      "type": "object",
      "id": "Customer"
    },
    "UserGender": {
      "properties": {
        "addressMeAs": {
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Gender."
        },
        "customGender": {
          "type": "string",
          "description": "Custom gender."
        }
      },
      "id": "UserGender",
      "type": "object"
    },
    "Members": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#members",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "members": {
          "type": "array",
          "description": "List of member objects.",
          "items": {
            "$ref": "Member"
          }
        }
      },
      "id": "Members",
      "type": "object"
    },
    "UserName": {
      "id": "UserName",
      "type": "object",
      "properties": {
        "familyName": {
          "description": "Last Name",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "fullName": {
          "type": "string",
          "description": "Full Name"
        },
        "givenName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "First Name",
          "type": "string"
        }
      }
    },
    "VerificationCode": {
      "type": "object",
      "properties": {
        "verificationCode": {
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCode.",
          "default": "admin#directory#verificationCode",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "userId": {
          "type": "string",
          "description": "The obfuscated unique ID of the user."
        }
      },
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "VerificationCode"
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "properties": {
        "payload": {
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100].",
          "type": "string"
        },
        "commandType": {
          "type": "string",
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "description": "The type of command."
        }
      },
      "type": "object",
      "id": "DirectoryChromeosdevicesIssueCommandRequest",
      "description": "A request for issuing a command."
    },
    "Privileges": {
      "id": "Privileges",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "default": "admin#directory#privileges",
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "A list of Privilege resources.",
          "items": {
            "$ref": "Privilege"
          }
        }
      }
    },
    "Feature": {
      "description": "JSON template for Feature object in Directory API.",
      "type": "object",
      "id": "Feature",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#Feature",
          "type": "string"
        },
        "name": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "description": "The name of the feature."
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "UserOrganization": {
      "id": "UserOrganization",
      "type": "object",
      "properties": {
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "fullTimeEquivalent": {
          "format": "int32",
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
          "type": "integer"
        },
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        },
        "primary": {
          "description": "If it user's primary organization.",
          "type": "boolean"
        },
        "domain": {
          "type": "string",
          "description": "The domain to which the organization belongs to."
        },
        "name": {
          "type": "string",
          "description": "Name of the organization"
        },
        "costCenter": {
          "description": "The cost center of the users department.",
          "type": "string"
        },
        "description": {
          "description": "Description of the organization.",
          "type": "string"
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of the organization."
        }
      },
      "description": "JSON template for an organization entry."
    },
    "Features": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "features": {
          "items": {
            "$ref": "Feature"
          },
          "description": "The Features in this page of results.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#featuresList",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Public API: Resources.features",
      "id": "Features"
    },
    "UserMakeAdmin": {
      "id": "UserMakeAdmin",
      "properties": {
        "status": {
          "type": "boolean",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "description": "Boolean indicating new admin status of the user"
        }
      },
      "type": "object"
    },
    "Domains2": {
      "properties": {
        "domains": {
          "items": {
            "$ref": "Domains"
          },
          "description": "List of domain objects.",
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#domains",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Domains2",
      "type": "object"
    },
    "UserAddress": {
      "id": "UserAddress",
      "properties": {
        "extendedAddress": {
          "description": "Extended Address.",
          "type": "string"
        },
        "poBox": {
          "description": "Other parts of address.",
          "type": "string"
        },
        "region": {
          "type": "string",
          "description": "Region."
        },
        "primary": {
          "description": "If this is user's primary address. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "formatted": {
          "type": "string",
          "description": "Formatted address."
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal code.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "countryCode": {
          "type": "string",
          "description": "Country code."
        },
        "streetAddress": {
          "type": "string",
          "description": "Street."
        },
        "locality": {
          "description": "Locality.",
          "type": "string"
        },
        "sourceIsStructured": {
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered.",
          "type": "boolean"
        }
      },
      "description": "JSON template for address.",
      "type": "object"
    },
    "Users": {
      "id": "Users",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "User"
          },
          "description": "List of user objects."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "trigger_event": {
          "type": "string",
          "description": "Event that triggered this response (only used in case of Push Response)"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#users"
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Channel": {
      "type": "object",
      "properties": {
        "expiration": {
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "type": "string",
          "format": "int64"
        },
        "token": {
          "type": "string",
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional."
        },
        "kind": {
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "default": "api#channel",
          "type": "string"
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions."
        },
        "payload": {
          "description": "A Boolean value to indicate whether payload is wanted. Optional.",
          "type": "boolean"
        },
        "type": {
          "description": "The type of delivery mechanism used for this channel.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "A UUID or similar unique string that identifies this channel."
        },
        "params": {
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        }
      },
      "id": "Channel",
      "description": "An notification channel used to watch for resource changes."
    },
    "Building": {
      "description": "Public API: Resources.buildings",
      "type": "object",
      "id": "Building",
      "properties": {
        "buildingId": {
          "description": "Unique identifier for the building. The maximum length is 100 characters.",
          "type": "string"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "buildingName": {
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters.",
          "type": "string"
        },
        "coordinates": {
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees.",
          "$ref": "BuildingCoordinates"
        },
        "address": {
          "$ref": "BuildingAddress",
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required."
        },
        "kind": {
          "default": "admin#directory#resources#buildings#Building",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "floorNames": {
          "type": "array",
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string",
          "description": "A brief description of the building. For example, \"Chelsea Market\"."
        }
      }
    },
    "Schemas": {
      "type": "object",
      "id": "Schemas",
      "properties": {
        "schemas": {
          "description": "List of UserSchema objects.",
          "items": {
            "$ref": "Schema"
          },
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#schemas",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "CustomerPostalAddress": {
      "type": "object",
      "id": "CustomerPostalAddress",
      "properties": {
        "addressLine2": {
          "description": "Address line 2 of the address.",
          "type": "string"
        },
        "locality": {
          "description": "Name of the locality. An example of a locality value is the city of San Francisco.",
          "type": "string"
        },
        "addressLine1": {
          "type": "string",
          "description": "A customer's physical address. The address can be composed of one to three lines."
        },
        "postalCode": {
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element.",
          "type": "string"
        },
        "countryCode": {
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements.",
          "type": "string"
        },
        "addressLine3": {
          "type": "string",
          "description": "Address line 3 of the address."
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        },
        "region": {
          "type": "string",
          "description": "Name of the region. An example of a region value is NY for the state of New York."
        },
        "contactName": {
          "type": "string",
          "description": "The customer contact's name."
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)"
    },
    "MobileDevice": {
      "id": "MobileDevice",
      "properties": {
        "resourceId": {
          "type": "string",
          "description": "Unique identifier of Mobile Device (Read-only)"
        },
        "model": {
          "type": "string",
          "description": "Name of the model of the device"
        },
        "type": {
          "type": "string",
          "description": "The type of device (Read-only)"
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "wifiMacAddress": {
          "type": "string",
          "description": "Mobile Device WiFi MAC address (Read-only)"
        },
        "serialNumber": {
          "type": "string",
          "description": "Mobile Device SSN or Serial Number (Read-only)"
        },
        "basebandVersion": {
          "description": "Mobile Device Baseband version (Read-only)",
          "type": "string"
        },
        "supportsWorkProfile": {
          "description": "Work profile supported on device (Read-only)",
          "type": "boolean"
        },
        "kernelVersion": {
          "description": "Mobile Device Kernel version (Read-only)",
          "type": "string"
        },
        "userAgent": {
          "description": "Mobile Device user agent",
          "type": "string"
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "deviceId": {
          "description": "Mobile Device serial number (Read-only)",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#mobiledevice",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "otherAccountsInfo": {
          "description": "List of accounts added on device (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "devicePasswordStatus": {
          "type": "string",
          "description": "DevicePasswordStatus (Read-only)"
        },
        "buildNumber": {
          "type": "string",
          "description": "Mobile Device Build number (Read-only)"
        },
        "name": {
          "description": "List of owner user's names (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "meid": {
          "description": "Mobile Device MEID number (Read-only)",
          "type": "string"
        },
        "email": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of owner user's email addresses (Read-only)"
        },
        "managedAccountIsOnOwnerProfile": {
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)",
          "type": "boolean"
        },
        "applications": {
          "description": "List of applications installed on Mobile Device",
          "type": "array",
          "items": {
            "properties": {
              "versionCode": {
                "type": "integer",
                "description": "Version code of application",
                "format": "int32"
              },
              "versionName": {
                "type": "string",
                "description": "Version name of application"
              },
              "displayName": {
                "description": "Display name of application",
                "type": "string"
              },
              "permission": {
                "items": {
                  "type": "string"
                },
                "description": "List of Permissions for application",
                "type": "array"
              },
              "packageName": {
                "description": "Package name of application",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "defaultLanguage": {
          "description": "The default locale used on the Mobile Device (Read-only)",
          "type": "string"
        },
        "deviceCompromisedStatus": {
          "description": "Mobile Device compromised status (Read-only)",
          "type": "string"
        },
        "bootloaderVersion": {
          "description": "Mobile Device Bootloader version (Read-only)",
          "type": "string"
        },
        "lastSync": {
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        },
        "developerOptionsStatus": {
          "type": "boolean",
          "description": "Developer options enabled or disabled on device (Read-only)"
        },
        "hardwareId": {
          "description": "Mobile Device Hardware Id (Read-only)",
          "type": "string"
        },
        "privilege": {
          "type": "string",
          "description": "DMAgentPermission (Read-only)"
        },
        "os": {
          "type": "string",
          "description": "Name of the mobile operating system"
        },
        "securityPatchLevel": {
          "type": "string",
          "description": "Mobile Device Security patch level (Read-only)",
          "format": "int64"
        },
        "encryptionStatus": {
          "description": "Mobile Device Encryption Status (Read-only)",
          "type": "string"
        },
        "imei": {
          "description": "Mobile Device IMEI number (Read-only)",
          "type": "string"
        },
        "brand": {
          "type": "string",
          "description": "Mobile Device Brand (Read-only)"
        },
        "unknownSourcesStatus": {
          "type": "boolean",
          "description": "Unknown sources enabled or disabled on device (Read-only)"
        },
        "networkOperator": {
          "type": "string",
          "description": "Mobile Device mobile or network operator (if available) (Read-only)"
        },
        "status": {
          "type": "string",
          "description": "Status of the device (Read-only)"
        },
        "firstSync": {
          "format": "date-time",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "manufacturer": {
          "description": "Mobile Device manufacturer (Read-only)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserUndelete": {
      "properties": {
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserUndelete"
    },
    "Aliases": {
      "description": "JSON response template to list aliases in Directory API.",
      "type": "object",
      "id": "Aliases",
      "properties": {
        "etag": {
          "type": "string"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "kind": {
          "default": "admin#directory#aliases",
          "type": "string"
        }
      }
    },
    "CalendarResources": {
      "properties": {
        "kind": {
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList.",
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "items": {
          "description": "The CalendarResources in this page of results.",
          "items": {
            "$ref": "CalendarResource"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "description": "Public API: Resources.calendars",
      "type": "object",
      "id": "CalendarResources"
    },
    "ChromeOsMoveDevicesToOu": {
      "properties": {
        "deviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "ChromeOs Devices to be moved to OU",
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          }
        }
      },
      "type": "object",
      "id": "ChromeOsMoveDevicesToOu"
    },
    "SchemaFieldSpec": {
      "id": "SchemaFieldSpec",
      "type": "object",
      "properties": {
        "indexed": {
          "description": "Boolean specifying whether the field is indexed or not.",
          "default": "true",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema#fieldspec",
          "type": "string"
        },
        "fieldId": {
          "description": "Unique identifier of Field (Read-only)",
          "type": "string"
        },
        "fieldType": {
          "type": "string",
          "description": "Type of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "numericIndexingSpec": {
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "properties": {
            "minValue": {
              "format": "double",
              "type": "number",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            },
            "maxValue": {
              "type": "number",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double"
            }
          },
          "type": "object"
        },
        "fieldName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Name of the field."
        },
        "multiValued": {
          "type": "boolean",
          "description": "Boolean specifying whether this is a multi-valued field or not."
        },
        "readAccessType": {
          "type": "string",
          "default": "ALL_DOMAIN_USERS",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\"."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "displayName": {
          "description": "Display Name of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        }
      },
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "DomainAlias": {
      "id": "DomainAlias",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "creationTime": {
          "description": "The creation time of the domain alias. (Read-only).",
          "format": "int64",
          "type": "string"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain alias. (Read-only)"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domainAlias",
          "description": "Kind of resource this is."
        },
        "domainAliasName": {
          "description": "The domain alias name.",
          "type": "string"
        },
        "parentDomainName": {
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        }
      }
    },
    "UserEmail": {
      "type": "object",
      "id": "UserEmail",
      "description": "JSON template for an email.",
      "properties": {
        "address": {
          "type": "string",
          "description": "Email id of the user."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary email. Only one entry could be marked as primary."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      }
    },
    "ChromeOsDevices": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "ChromeOsDevices",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "kind": {
          "default": "admin#directory#chromeosdevices",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "chromeosdevices": {
          "description": "List of Chrome OS Device objects.",
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "type": "array"
        }
      }
    },
    "Buildings": {
      "properties": {
        "buildings": {
          "description": "The Buildings in this page of results.",
          "type": "array",
          "items": {
            "$ref": "Building"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#buildings#buildingsList",
          "type": "string"
        }
      },
      "description": "Public API: Resources.buildings",
      "type": "object",
      "id": "Buildings"
    },
    "MobileDeviceAction": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "description": "Action to be taken on the Mobile Device",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          }
        }
      },
      "id": "MobileDeviceAction"
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "properties": {
        "commandId": {
          "format": "int64",
          "type": "string",
          "description": "The unique ID of the issued command, used to retrieve the command status."
        }
      },
      "type": "object",
      "description": "A response for issuing a command."
    },
    "DomainAliases": {
      "type": "object",
      "id": "DomainAliases",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAliases",
          "type": "string"
        },
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array",
          "description": "List of domain alias objects."
        }
      }
    },
    "Roles": {
      "id": "Roles",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "items": {
            "$ref": "Role"
          },
          "description": "A list of Role resources.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#roles",
          "description": "The type of the API resource. This is always admin#directory#roles.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserRelation": {
      "type": "object",
      "description": "JSON template for a relation entry.",
      "id": "UserRelation",
      "properties": {
        "value": {
          "type": "string",
          "description": "The name of the relation."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner."
        }
      }
    },
    "Alias": {
      "description": "JSON template for Alias object in Directory API.",
      "type": "object",
      "properties": {
        "primaryEmail": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#alias",
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        }
      },
      "id": "Alias"
    },
    "Asps": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Asps",
      "properties": {
        "items": {
          "items": {
            "$ref": "Asp"
          },
          "type": "array",
          "description": "A list of ASP resources."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#aspList",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#aspList."
        }
      }
    },
    "UserKeyword": {
      "id": "UserKeyword",
      "description": "JSON template for a keyword entry.",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "value": {
          "description": "Keyword.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        }
      },
      "type": "object"
    },
    "Member": {
      "properties": {
        "email": {
          "description": "Email of member (Read-only)",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#member",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "role": {
          "description": "Role of member",
          "type": "string"
        },
        "type": {
          "description": "Type of member (Immutable)",
          "type": "string"
        },
        "status": {
          "description": "Status of member (Immutable)",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey."
        },
        "delivery_settings": {
          "description": "Delivery settings of member",
          "type": "string"
        }
      },
      "id": "Member",
      "type": "object"
    },
    "VerificationCodes": {
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "items": {
          "items": {
            "$ref": "VerificationCode"
          },
          "description": "A list of verification code resources.",
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCodesList.",
          "default": "admin#directory#verificationCodesList",
          "type": "string"
        }
      },
      "id": "VerificationCodes"
    },
    "DirectoryChromeosdevicesCommand": {
      "description": "Information regarding a command that was issued to a device.",
      "id": "DirectoryChromeosdevicesCommand",
      "properties": {
        "type": {
          "description": "The type of the command.",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "type": "string"
        },
        "commandResult": {
          "$ref": "DirectoryChromeosdevicesCommandResult",
          "description": "The result of the command execution."
        },
        "state": {
          "description": "Indicates the command state.",
          "type": "string",
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ]
        },
        "commandExpireTime": {
          "type": "string",
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.",
          "format": "google-datetime"
        },
        "commandId": {
          "format": "int64",
          "type": "string",
          "description": "Unique ID of a device command."
        },
        "issueTime": {
          "description": "The timestamp when the command was issued by the admin.",
          "type": "string",
          "format": "google-datetime"
        },
        "payload": {
          "description": "The payload that the command specified, if any.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Role": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#role.",
          "default": "admin#directory#role"
        },
        "rolePrivileges": {
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "description": "The set of privileges that are granted to this role.",
          "type": "array",
          "items": {
            "properties": {
              "serviceId": {
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
                "type": "string"
              },
              "privilegeName": {
                "description": "The name of the privilege.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "roleDescription": {
          "type": "string",
          "description": "A short description of the role."
        },
        "roleName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "description": "Name of the role."
        },
        "roleId": {
          "description": "ID of the role.",
          "type": "string",
          "format": "int64"
        },
        "isSuperAdminRole": {
          "type": "boolean",
          "description": "Returns true if the role is a super admin role."
        },
        "isSystemRole": {
          "description": "Returns true if this is a pre-defined system role.",
          "type": "boolean"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object",
      "id": "Role"
    },
    "UserLanguage": {
      "type": "object",
      "properties": {
        "languageCode": {
          "type": "string",
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException."
        },
        "customLanguage": {
          "type": "string",
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set"
        }
      },
      "id": "UserLanguage",
      "description": "JSON template for a language entry."
    },
    "UserSshPublicKey": {
      "description": "JSON template for a POSIX account entry.",
      "type": "object",
      "properties": {
        "key": {
          "description": "An SSH public key.",
          "type": "string"
        },
        "fingerprint": {
          "readOnly": true,
          "type": "string",
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)"
        },
        "expirationTimeUsec": {
          "description": "An expiration time in microseconds since epoch.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "UserSshPublicKey"
    },
    "Privilege": {
      "properties": {
        "isOuScopable": {
          "description": "If the privilege can be restricted to an organization unit.",
          "type": "boolean"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "serviceId": {
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
          "type": "string"
        },
        "childPrivileges": {
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "items": {
            "$ref": "Privilege"
          },
          "type": "array"
        },
        "privilegeName": {
          "type": "string",
          "description": "The name of the privilege."
        },
        "serviceName": {
          "type": "string",
          "description": "The name of the service this privilege is for."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#privilege.",
          "type": "string",
          "default": "admin#directory#privilege"
        }
      },
      "id": "Privilege",
      "type": "object"
    },
    "Token": {
      "properties": {
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user that issued the token."
        },
        "anonymous": {
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID.",
          "type": "boolean"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#token.",
          "type": "string",
          "default": "admin#directory#token"
        },
        "nativeApp": {
          "type": "boolean",
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device."
        },
        "clientId": {
          "description": "The Client ID of the application the token is issued to.",
          "type": "string"
        },
        "scopes": {
          "description": "A list of authorization scopes the application is granted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "displayText": {
          "type": "string",
          "description": "The displayable name of the application the token is issued to."
        }
      },
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Token"
    },
    "UserExternalId": {
      "type": "object",
      "id": "UserExternalId",
      "description": "JSON template for an externalId entry.",
      "properties": {
        "type": {
          "description": "The type of the Id.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "value": {
          "type": "string",
          "description": "The value of the id."
        }
      }
    },
    "Schema": {
      "id": "Schema",
      "type": "object",
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "default": "admin#directory#schema",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "schemaId": {
          "description": "Unique identifier of Schema (Read-only)",
          "type": "string"
        },
        "fields": {
          "type": "array",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "description": "Fields of Schema"
        },
        "displayName": {
          "description": "Display name for the schema.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "schemaName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "Schema name",
          "type": "string"
        }
      }
    },
    "RoleAssignments": {
      "type": "object",
      "properties": {
        "items": {
          "items": {
            "$ref": "RoleAssignment"
          },
          "type": "array",
          "description": "A list of RoleAssignment resources."
        },
        "kind": {
          "default": "admin#directory#roleAssignments",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments ."
        },
        "nextPageToken": {
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "RoleAssignments"
    },
    "BuildingCoordinates": {
      "id": "BuildingCoordinates",
      "description": "Public API: Resources.buildings",
      "properties": {
        "longitude": {
          "format": "double",
          "type": "number",
          "description": "Longitude in decimal degrees."
        },
        "latitude": {
          "description": "Latitude in decimal degrees.",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "CalendarResource": {
      "type": "object",
      "description": "Public API: Resources.calendars",
      "properties": {
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "resourceCategory": {
          "type": "string",
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN."
        },
        "floorSection": {
          "description": "Name of the section within a floor a resource is located in.",
          "type": "string"
        },
        "generatedResourceName": {
          "type": "string",
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\"."
        },
        "kind": {
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "type": "string",
          "default": "admin#directory#resources#calendars#CalendarResource"
        },
        "featureInstances": {
          "description": "Instances of features for the calendar resource.",
          "type": "any"
        },
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        },
        "capacity": {
          "description": "Capacity of a resource, number of seats in a room.",
          "type": "integer",
          "format": "int32"
        },
        "resourceId": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "description": "The unique ID for the calendar resource."
        },
        "resourceEmail": {
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource.",
          "type": "string"
        },
        "resourceDescription": {
          "type": "string",
          "description": "Description of the resource, visible only to admins."
        },
        "buildingId": {
          "type": "string",
          "description": "Unique ID for the building a resource is located in."
        },
        "resourceName": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string",
          "description": "The name of the calendar resource. For example, \"Training Room 1A\"."
        },
        "floorName": {
          "type": "string",
          "description": "Name of the floor a resource is located on."
        },
        "resourceType": {
          "type": "string",
          "description": "The type of the calendar resource, intended for non-room resources."
        }
      },
      "id": "CalendarResource"
    },
    "FeatureInstance": {
      "description": "JSON template for a feature instance.",
      "type": "object",
      "properties": {
        "feature": {
          "$ref": "Feature",
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature."
        }
      },
      "id": "FeatureInstance"
    },
    "Domains": {
      "type": "object",
      "properties": {
        "domainAliases": {
          "description": "List of domain alias objects. (Read-only)",
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "creationTime": {
          "type": "string",
          "description": "Creation time of the domain. (Read-only).",
          "format": "int64"
        },
        "verified": {
          "description": "Indicates the verification state of a domain. (Read-only).",
          "type": "boolean"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domain",
          "description": "Kind of resource this is."
        },
        "domainName": {
          "description": "The domain name of the customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "type": "string"
        },
        "isPrimary": {
          "description": "Indicates if the domain is a primary domain (Read-only).",
          "type": "boolean"
        }
      },
      "id": "Domains"
    },
    "RoleAssignment": {
      "id": "RoleAssignment",
      "type": "object",
      "properties": {
        "roleId": {
          "format": "int64",
          "description": "The ID of the role that is assigned.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "roleAssignmentId": {
          "type": "string",
          "format": "int64",
          "description": "ID of this roleAssignment."
        },
        "kind": {
          "default": "admin#directory#roleAssignment",
          "description": "The type of the API resource. This is always admin#directory#roleAssignment.",
          "type": "string"
        },
        "orgUnitId": {
          "type": "string",
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to."
        },
        "assignedTo": {
          "description": "The unique ID of the user this role is assigned to.",
          "type": "string"
        },
        "scopeType": {
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT ",
          "type": "string"
        }
      }
    },
    "Asp": {
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Asp",
      "properties": {
        "codeId": {
          "type": "integer",
          "format": "int32",
          "description": "The unique ID of the ASP."
        },
        "lastTimeUsed": {
          "type": "string",
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "format": "int64"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the ASP."
        },
        "creationTime": {
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "format": "int64",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created."
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user who issued the ASP."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#asp.",
          "type": "string",
          "default": "admin#directory#asp"
        }
      }
    },
    "User": {
      "id": "User",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "relations": {
          "description": "The Relations of User *",
          "type": "any"
        },
        "addresses": {
          "type": "any",
          "description": "Addresses of User"
        },
        "isEnrolledIn2Sv": {
          "readOnly": true,
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "type": "boolean"
        },
        "aliases": {
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. List of aliases (Read-only)"
        },
        "isDelegatedAdmin": {
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)",
          "type": "boolean"
        },
        "languages": {
          "description": "Languages of User",
          "type": "any"
        },
        "thumbnailPhotoUrl": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Photo Url of the user (Read-only)"
        },
        "gender": {
          "description": "Gender of User",
          "type": "any"
        },
        "kind": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Kind of resource this is.",
          "default": "admin#directory#user"
        },
        "hashFunction": {
          "type": "string",
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt"
        },
        "password": {
          "type": "string",
          "description": "User's password",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "websites": {
          "type": "any",
          "description": "Websites of User"
        },
        "includeInGlobalAddressList": {
          "type": "boolean",
          "description": "Boolean indicating if user is included in Global Address List"
        },
        "notes": {
          "description": "Notes of User",
          "type": "any"
        },
        "etag": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. ETag of the resource."
        },
        "emails": {
          "type": "any",
          "description": "Emails of User"
        },
        "isEnforcedIn2Sv": {
          "type": "boolean",
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "readOnly": true
        },
        "organizations": {
          "description": "Organizations of User",
          "type": "any"
        },
        "posixAccounts": {
          "description": "The POSIX accounts of User",
          "type": "any"
        },
        "customerId": {
          "type": "string",
          "description": "Output only. CustomerId of User (Read-only)",
          "readOnly": true
        },
        "sshPublicKeys": {
          "description": "The SSH public keys of User",
          "type": "any"
        },
        "isMailboxSetup": {
          "description": "Output only. Is mailbox setup (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "agreedToTerms": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Indicates if user has agreed to terms (Read-only)"
        },
        "creationTime": {
          "format": "date-time",
          "readOnly": true,
          "type": "string",
          "description": "User's G Suite account creation time. (Read-only)"
        },
        "primaryEmail": {
          "description": "username of User",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "name": {
          "description": "User's name",
          "$ref": "UserName",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "keywords": {
          "description": "Keywords of User",
          "type": "any"
        },
        "locations": {
          "type": "any",
          "description": "Locations of User"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        },
        "recoveryEmail": {
          "type": "string",
          "description": "Recovery email of the user."
        },
        "ims": {
          "type": "any",
          "description": "User's Instant Messenger"
        },
        "deletionTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "customSchemas": {
          "type": "object",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          },
          "description": "Custom fields of the user."
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "Boolean indicating if ip is whitelisted"
        },
        "thumbnailPhotoEtag": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. ETag of the user's photo (Read-only)"
        },
        "lastLoginTime": {
          "type": "string",
          "description": "User's last login time. (Read-only)",
          "readOnly": true,
          "format": "date-time"
        },
        "phones": {
          "description": "Phone numbers of User",
          "type": "any"
        },
        "nonEditableAliases": {
          "readOnly": true,
          "description": "Output only. List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isAdmin": {
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "suspensionReason": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Suspension reason if user is suspended (Read-only)"
        },
        "externalIds": {
          "description": "The external Ids of User *",
          "type": "any"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "changePasswordAtNextLogin": {
          "description": "Boolean indicating if the user should change password in next login",
          "type": "boolean"
        },
        "archived": {
          "type": "boolean",
          "description": "Indicates if user is archived."
        },
        "suspended": {
          "type": "boolean",
          "description": "Indicates if user is suspended."
        },
        "recoveryPhone": {
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FeatureRename": {
      "properties": {
        "newName": {
          "description": "New name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          },
          "type": "string"
        }
      },
      "id": "FeatureRename",
      "type": "object"
    },
    "UserIm": {
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary im. Only one entry could be marked as primary."
        },
        "customProtocol": {
          "type": "string",
          "description": "Custom protocol."
        },
        "im": {
          "description": "Instant messenger id.",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "protocol": {
          "type": "string",
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for instant messenger of an user.",
      "id": "UserIm"
    },
    "UserPhoto": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "UserPhoto",
      "properties": {
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "height": {
          "type": "integer",
          "description": "Height in pixels of the photo",
          "format": "int32"
        },
        "mimeType": {
          "description": "Mime Type of the photo",
          "type": "string"
        },
        "width": {
          "description": "Width in pixels of the photo",
          "format": "int32",
          "type": "integer"
        },
        "photoData": {
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "type": "string",
          "format": "byte",
          "description": "Base64 encoded photo data"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#user#photo"
        },
        "primaryEmail": {
          "description": "Primary email of User (Read-only)",
          "type": "string"
        }
      }
    },
    "ChromeOsDeviceAction": {
      "type": "object",
      "properties": {
        "deprovisionReason": {
          "type": "string"
        },
        "action": {
          "description": "Action to be taken on the ChromeOs Device",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "type": "string"
        }
      },
      "id": "ChromeOsDeviceAction"
    },
    "Group": {
      "id": "Group",
      "properties": {
        "aliases": {
          "type": "array",
          "description": "List of aliases (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "description": "Group name"
        },
        "email": {
          "description": "Email of Group",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "type": "string"
        },
        "description": {
          "description": "Description of the group",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#group",
          "description": "Kind of resource this is."
        },
        "directMembersCount": {
          "type": "string",
          "format": "int64",
          "description": "Group direct members count"
        },
        "adminCreated": {
          "type": "boolean",
          "description": "Is the group created by admin (Read-only) *"
        },
        "id": {
          "description": "Unique identifier of Group (Read-only)",
          "type": "string"
        },
        "nonEditableAliases": {
          "type": "array",
          "description": "List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "UserCustomProperties": {
      "id": "UserCustomProperties",
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "type": "object",
      "additionalProperties": {
        "type": "any"
      }
    },
    "Tokens": {
      "id": "Tokens",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Token"
          },
          "description": "A list of Token resources."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#tokenList.",
          "type": "string",
          "default": "admin#directory#tokenList"
        }
      },
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "ChromeOsDevice": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "ChromeOsDevice",
      "properties": {
        "macAddress": {
          "description": "Chromebook Mac Address on wifi network interface (Read-only)",
          "type": "string"
        },
        "annotatedAssetId": {
          "description": "AssetId specified during enrollment or through later annotation",
          "type": "string"
        },
        "deviceId": {
          "type": "string",
          "description": "Unique identifier of Chrome OS Device (Read-only)"
        },
        "ethernetMacAddress0": {
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "notes": {
          "description": "Notes added by the administrator",
          "type": "string"
        },
        "recentUsers": {
          "type": "array",
          "items": {
            "properties": {
              "type": {
                "description": "The type of the user",
                "type": "string"
              },
              "email": {
                "description": "Email address of the user. Present only if the user type is managed",
                "type": "string"
              }
            },
            "type": "object"
          },
          "description": "List of recent device users, in descending order by last login time (Read-only)"
        },
        "ethernetMacAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)"
        },
        "osVersion": {
          "description": "Chromebook Os Version (Read-only)",
          "type": "string"
        },
        "cpuStatusReports": {
          "description": "Reports of CPU utilization and temperature (Read-only)",
          "type": "array",
          "items": {
            "properties": {
              "reportTime": {
                "type": "string",
                "description": "Date and time the report was received.",
                "format": "date-time"
              },
              "cpuTemperatureInfo": {
                "description": "List of CPU temperature samples.",
                "items": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "description": "CPU label",
                      "type": "string"
                    },
                    "temperature": {
                      "format": "int32",
                      "type": "integer",
                      "description": "Temperature in Celsius degrees."
                    }
                  }
                },
                "type": "array"
              },
              "cpuUtilizationPercentageInfo": {
                "type": "array",
                "items": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            },
            "type": "object"
          }
        },
        "willAutoRenew": {
          "type": "boolean",
          "description": "Will Chromebook auto renew after support end date (Read-only)"
        },
        "lastKnownNetwork": {
          "items": {
            "properties": {
              "wanIpAddress": {
                "description": "The WAN IP address.",
                "type": "string"
              },
              "ipAddress": {
                "type": "string",
                "description": "The IP address."
              }
            },
            "type": "object",
            "description": "Information for an ip address."
          },
          "description": "Contains last known network (Read-only)",
          "type": "array"
        },
        "lastEnrollmentTime": {
          "description": "Date and time the device was last enrolled (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#chromeosdevice",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "meid": {
          "type": "string",
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)"
        },
        "platformVersion": {
          "type": "string",
          "description": "Chromebook platform version (Read-only)"
        },
        "annotatedUser": {
          "description": "User of the device",
          "type": "string"
        },
        "serialNumber": {
          "description": "Chromebook serial number (Read-only)",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "autoUpdateExpiration": {
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "type": "string",
          "format": "int64"
        },
        "diskVolumeReports": {
          "items": {
            "properties": {
              "volumeInfo": {
                "description": "Disk volumes",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "storageTotal": {
                      "format": "int64",
                      "type": "string",
                      "description": "Total disk space [in bytes]"
                    },
                    "volumeId": {
                      "description": "Volume id",
                      "type": "string"
                    },
                    "storageFree": {
                      "format": "int64",
                      "type": "string",
                      "description": "Free disk space [in bytes]"
                    }
                  }
                }
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "Reports of disk space and other info about mounted/connected volumes."
        },
        "annotatedLocation": {
          "type": "string",
          "description": "Address or location of the device as noted by the administrator"
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "dockMacAddress": {
          "type": "string",
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "deviceFiles": {
          "description": "List of device files to download (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "createTime": {
                "type": "string",
                "description": "Date and time the file was created",
                "format": "date-time"
              },
              "type": {
                "type": "string",
                "description": "File type"
              },
              "name": {
                "type": "string",
                "description": "File name"
              },
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              }
            }
          },
          "type": "array"
        },
        "tpmVersionInfo": {
          "type": "object",
          "properties": {
            "tpmModel": {
              "type": "string",
              "description": "TPM model number."
            },
            "family": {
              "description": "TPM family.",
              "type": "string"
            },
            "firmwareVersion": {
              "description": "TPM firmware version.",
              "type": "string"
            },
            "specLevel": {
              "type": "string",
              "description": "TPM specification level."
            },
            "vendorSpecific": {
              "description": "Vendor-specific information such as Vendor ID.",
              "type": "string"
            },
            "manufacturer": {
              "description": "TPM manufacturer code.",
              "type": "string"
            }
          },
          "description": "Trusted Platform Module (TPM) (Read-only)"
        },
        "bootMode": {
          "type": "string",
          "description": "Chromebook boot mode (Read-only)"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of the device"
        },
        "supportEndDate": {
          "type": "string",
          "description": "Final date the device will be supported (Read-only)",
          "format": "date-time"
        },
        "activeTimeRanges": {
          "type": "array",
          "description": "List of active time ranges (Read-only)",
          "items": {
            "properties": {
              "activeTime": {
                "description": "Duration in milliseconds",
                "type": "integer",
                "format": "int32"
              },
              "date": {
                "format": "date",
                "description": "Date of usage",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "systemRamFreeReports": {
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "items": {
            "properties": {
              "reportTime": {
                "description": "Date and time the report was received.",
                "type": "string",
                "format": "date-time"
              },
              "systemRamFreeInfo": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "int64"
                }
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "systemRamTotal": {
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "type": "string",
          "format": "int64"
        },
        "manufactureDate": {
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
          "type": "string"
        },
        "firmwareVersion": {
          "type": "string",
          "description": "Chromebook firmware version (Read-only)"
        },
        "model": {
          "type": "string",
          "description": "Chromebook Model (Read-only)"
        },
        "orderNumber": {
          "type": "string",
          "description": "Chromebook order number (Read-only)"
        },
        "status": {
          "type": "string",
          "description": "status of the device (Read-only)"
        }
      }
    },
    "OrgUnits": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "organizationUnits": {
          "type": "array",
          "items": {
            "$ref": "OrgUnit"
          },
          "description": "List of user objects."
        },
        "kind": {
          "default": "admin#directory#orgUnits",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "id": "OrgUnits",
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserPhone": {
      "type": "object",
      "id": "UserPhone",
      "description": "JSON template for a phone entry.",
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary phone or not."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "value": {
          "description": "Phone number.",
          "type": "string"
        }
      }
    },
    "MobileDevices": {
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#mobiledevices",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "mobiledevices": {
          "items": {
            "$ref": "MobileDevice"
          },
          "type": "array",
          "description": "List of Mobile Device objects."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "MobileDevices"
    },
    "DirectoryChromeosdevicesCommandResult": {
      "description": "The result of executing a command.",
      "properties": {
        "errorMessage": {
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed.",
          "type": "string"
        },
        "result": {
          "type": "string",
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "description": "The result of the command.",
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ]
        },
        "executeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time at which the command was executed or failed to execute."
        }
      },
      "id": "DirectoryChromeosdevicesCommandResult",
      "type": "object"
    },
    "BuildingAddress": {
      "properties": {
        "addressLines": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Unstructured address lines describing the lower levels of an address."
        },
        "locality": {
          "type": "string",
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines."
        },
        "regionCode": {
          "description": "Required. CLDR region code of the country/region of the address.",
          "type": "string"
        },
        "sublocality": {
          "type": "string",
          "description": "Optional. Sublocality of the address."
        },
        "postalCode": {
          "type": "string",
          "description": "Optional. Postal code of the address."
        },
        "languageCode": {
          "type": "string",
          "description": "Optional. BCP-47 language code of the contents of this address (if known)."
        },
        "administrativeArea": {
          "type": "string",
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region."
        }
      },
      "type": "object",
      "description": "Public API: Resources.buildings",
      "id": "BuildingAddress"
    },
    "OrgUnit": {
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "OrgUnit",
      "type": "object",
      "properties": {
        "orgUnitPath": {
          "description": "Path of OrgUnit",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#orgUnit"
        },
        "name": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          },
          "description": "Name of OrgUnit"
        },
        "parentOrgUnitPath": {
          "description": "Path of parent OrgUnit",
          "type": "string"
        },
        "parentOrgUnitId": {
          "description": "Id of parent OrgUnit",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "orgUnitId": {
          "description": "Id of OrgUnit",
          "type": "string"
        },
        "description": {
          "description": "Description of OrgUnit",
          "type": "string"
        },
        "blockInheritance": {
          "type": "boolean",
          "description": "Should block inheritance"
        }
      }
    },
    "MembersHasMember": {
      "type": "object",
      "properties": {
        "isMember": {
          "readOnly": true,
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "type": "boolean"
        }
      },
      "description": "JSON template for Has Member response in Directory API.",
      "id": "MembersHasMember"
    }
  },
  "kind": "discovery#restDescription",
  "servicePath": "",
  "rootUrl": "https://www.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        }
      }
    }
  },
  "ownerName": "Google",
  "id": "admin:directory_v1",
  "canonicalName": "directory",
  "discoveryVersion": "v1",
  "revision": "20201013",
  "ownerDomain": "google.com",
  "fullyEncodeReservedExpansion": true,
  "name": "admin",
  "packagePath": "admin",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "batchPath": "batch/admin/directory_v1",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "mtlsRootUrl": "https://www.mtls.googleapis.com/"
}
