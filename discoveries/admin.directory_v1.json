{
  "revision": "20201031",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "packagePath": "admin",
  "version": "directory_v1",
  "ownerDomain": "google.com",
  "parameters": {
    "alt": {
      "description": "Data format for response.",
      "location": "query",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "default": "json"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "default": "true",
      "type": "boolean"
    },
    "$.xgafv": {
      "location": "query",
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "access_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth access token."
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "location": "query",
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    }
  },
  "rootUrl": "https://admin.googleapis.com/",
  "basePath": "",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "discoveryVersion": "v1",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "id": "admin:directory_v1",
  "ownerName": "Google",
  "canonicalName": "directory",
  "mtlsRootUrl": "https://admin.mtls.googleapis.com/",
  "protocol": "rest",
  "fullyEncodeReservedExpansion": true,
  "title": "Admin SDK",
  "batchPath": "batch",
  "baseUrl": "https://admin.googleapis.com/",
  "name": "admin",
  "schemas": {
    "Building": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#buildings#Building"
        },
        "buildingName": {
          "type": "string",
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters."
        },
        "buildingId": {
          "type": "string",
          "description": "Unique identifier for the building. The maximum length is 100 characters."
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "coordinates": {
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees.",
          "$ref": "BuildingCoordinates"
        },
        "address": {
          "$ref": "BuildingAddress",
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required."
        },
        "floorNames": {
          "type": "array",
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string",
          "description": "A brief description of the building. For example, \"Chelsea Market\"."
        }
      },
      "description": "Public API: Resources.buildings",
      "type": "object",
      "id": "Building"
    },
    "DomainAliases": {
      "id": "DomainAliases",
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#domainAliases",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array",
          "description": "List of domain alias objects."
        }
      }
    },
    "Channel": {
      "description": "An notification channel used to watch for resource changes.",
      "type": "object",
      "id": "Channel",
      "properties": {
        "payload": {
          "type": "boolean",
          "description": "A Boolean value to indicate whether payload is wanted. Optional."
        },
        "expiration": {
          "format": "int64",
          "type": "string",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional."
        },
        "params": {
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "token": {
          "type": "string",
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional."
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "A UUID or similar unique string that identifies this channel."
        },
        "kind": {
          "type": "string",
          "default": "api#channel",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\"."
        },
        "resourceId": {
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "resourceUri": {
          "description": "A version-specific identifier for the watched resource.",
          "type": "string"
        }
      }
    },
    "UserWebsite": {
      "id": "UserWebsite",
      "properties": {
        "primary": {
          "description": "If this is user's primary website or not.",
          "type": "boolean"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "value": {
          "description": "Website.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for a website entry."
    },
    "UserGender": {
      "id": "UserGender",
      "properties": {
        "addressMeAs": {
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their.",
          "type": "string"
        },
        "type": {
          "description": "Gender.",
          "type": "string"
        },
        "customGender": {
          "type": "string",
          "description": "Custom gender."
        }
      },
      "type": "object"
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "type": "object",
      "id": "DirectoryChromeosdevicesIssueCommandRequest",
      "description": "A request for issuing a command.",
      "properties": {
        "payload": {
          "type": "string",
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a stringified JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100]."
        },
        "commandType": {
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "description": "The type of command.",
          "type": "string",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ]
        }
      }
    },
    "Schema": {
      "id": "Schema",
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "Display name for the schema.",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "schemaName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "Schema name",
          "type": "string"
        },
        "fields": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Fields of Schema",
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "type": "array"
        },
        "schemaId": {
          "description": "Unique identifier of Schema (Read-only)",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#schema",
          "description": "Kind of resource this is."
        }
      }
    },
    "OrgUnits": {
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "OrgUnits",
      "properties": {
        "organizationUnits": {
          "items": {
            "$ref": "OrgUnit"
          },
          "description": "List of user objects.",
          "type": "array"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#orgUnits",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object"
    },
    "Alias": {
      "type": "object",
      "description": "JSON template for Alias object in Directory API.",
      "properties": {
        "alias": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#alias"
        },
        "id": {
          "type": "string"
        }
      },
      "id": "Alias"
    },
    "SchemaFieldSpec": {
      "type": "object",
      "id": "SchemaFieldSpec",
      "properties": {
        "multiValued": {
          "type": "boolean",
          "description": "Boolean specifying whether this is a multi-valued field or not."
        },
        "kind": {
          "default": "admin#directory#schema#fieldspec",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "fieldId": {
          "description": "Unique identifier of Field (Read-only)",
          "type": "string"
        },
        "fieldName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Name of the field."
        },
        "numericIndexingSpec": {
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "properties": {
            "maxValue": {
              "format": "double",
              "type": "number",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            },
            "minValue": {
              "format": "double",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "type": "number"
            }
          },
          "type": "object"
        },
        "indexed": {
          "description": "Boolean specifying whether the field is indexed or not.",
          "default": "true",
          "type": "boolean"
        },
        "fieldType": {
          "description": "Type of the field.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "displayName": {
          "description": "Display Name of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        },
        "readAccessType": {
          "type": "string",
          "default": "ALL_DOMAIN_USERS",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\"."
        }
      },
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserOrganization": {
      "description": "JSON template for an organization entry.",
      "id": "UserOrganization",
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "description": "The domain to which the organization belongs to."
        },
        "name": {
          "description": "Name of the organization",
          "type": "string"
        },
        "fullTimeEquivalent": {
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "department": {
          "type": "string",
          "description": "Department within the organization."
        },
        "symbol": {
          "description": "Symbol of the organization.",
          "type": "string"
        },
        "description": {
          "description": "Description of the organization.",
          "type": "string"
        },
        "costCenter": {
          "description": "The cost center of the users department.",
          "type": "string"
        },
        "title": {
          "description": "Title (designation) of the user in the organization.",
          "type": "string"
        },
        "location": {
          "description": "Location of the organization. This need not be fully qualified address.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If it user's primary organization."
        }
      }
    },
    "Aliases": {
      "properties": {
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#aliases"
        },
        "etag": {
          "type": "string"
        }
      },
      "description": "JSON response template to list aliases in Directory API.",
      "id": "Aliases",
      "type": "object"
    },
    "UserPhoto": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "primaryEmail": {
          "type": "string",
          "description": "Primary email of User (Read-only)"
        },
        "width": {
          "description": "Width in pixels of the photo",
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "description": "Height in pixels of the photo",
          "format": "int32",
          "type": "integer"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#user#photo"
        },
        "mimeType": {
          "type": "string",
          "description": "Mime Type of the photo"
        },
        "photoData": {
          "description": "Base64 encoded photo data",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "format": "byte"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        }
      },
      "id": "UserPhoto",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Member": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of member (Immutable)"
        },
        "email": {
          "type": "string",
          "description": "Email of member (Read-only)"
        },
        "status": {
          "description": "Status of member (Immutable)",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#member"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "role": {
          "type": "string",
          "description": "Role of member"
        },
        "delivery_settings": {
          "description": "Delivery settings of member",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey.",
          "type": "string"
        }
      },
      "id": "Member",
      "type": "object"
    },
    "Features": {
      "type": "object",
      "description": "Public API: Resources.features",
      "id": "Features",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "features": {
          "type": "array",
          "items": {
            "$ref": "Feature"
          },
          "description": "The Features in this page of results."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#features#featuresList",
          "description": "Kind of resource this is."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        }
      }
    },
    "BuildingAddress": {
      "properties": {
        "regionCode": {
          "description": "Required. CLDR region code of the country/region of the address.",
          "type": "string"
        },
        "addressLines": {
          "type": "array",
          "description": "Unstructured address lines describing the lower levels of an address.",
          "items": {
            "type": "string"
          }
        },
        "sublocality": {
          "type": "string",
          "description": "Optional. Sublocality of the address."
        },
        "postalCode": {
          "description": "Optional. Postal code of the address.",
          "type": "string"
        },
        "administrativeArea": {
          "type": "string",
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region."
        },
        "locality": {
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.",
          "type": "string"
        },
        "languageCode": {
          "description": "Optional. BCP-47 language code of the contents of this address (if known).",
          "type": "string"
        }
      },
      "id": "BuildingAddress",
      "description": "Public API: Resources.buildings",
      "type": "object"
    },
    "CalendarResources": {
      "id": "CalendarResources",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "items": {
          "description": "The CalendarResources in this page of results.",
          "type": "array",
          "items": {
            "$ref": "CalendarResource"
          }
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList."
        }
      },
      "description": "Public API: Resources.calendars",
      "type": "object"
    },
    "MobileDevice": {
      "id": "MobileDevice",
      "type": "object",
      "properties": {
        "userAgent": {
          "description": "Mobile Device user agent",
          "type": "string"
        },
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "meid": {
          "description": "Mobile Device MEID number (Read-only)",
          "type": "string"
        },
        "encryptionStatus": {
          "type": "string",
          "description": "Mobile Device Encryption Status (Read-only)"
        },
        "brand": {
          "description": "Mobile Device Brand (Read-only)",
          "type": "string"
        },
        "deviceId": {
          "description": "Mobile Device serial number (Read-only)",
          "type": "string"
        },
        "applications": {
          "description": "List of applications installed on Mobile Device",
          "items": {
            "properties": {
              "versionName": {
                "type": "string",
                "description": "Version name of application"
              },
              "packageName": {
                "type": "string",
                "description": "Package name of application"
              },
              "versionCode": {
                "description": "Version code of application",
                "format": "int32",
                "type": "integer"
              },
              "displayName": {
                "description": "Display name of application",
                "type": "string"
              },
              "permission": {
                "type": "array",
                "description": "List of Permissions for application",
                "items": {
                  "type": "string"
                }
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "networkOperator": {
          "description": "Mobile Device mobile or network operator (if available) (Read-only)",
          "type": "string"
        },
        "buildNumber": {
          "description": "Mobile Device Build number (Read-only)",
          "type": "string"
        },
        "wifiMacAddress": {
          "type": "string",
          "description": "Mobile Device WiFi MAC address (Read-only)"
        },
        "privilege": {
          "type": "string",
          "description": "DMAgentPermission (Read-only)"
        },
        "manufacturer": {
          "type": "string",
          "description": "Mobile Device manufacturer (Read-only)"
        },
        "model": {
          "description": "Name of the model of the device",
          "type": "string"
        },
        "securityPatchLevel": {
          "format": "int64",
          "description": "Mobile Device Security patch level (Read-only)",
          "type": "string"
        },
        "resourceId": {
          "description": "Unique identifier of Mobile Device (Read-only)",
          "type": "string"
        },
        "supportsWorkProfile": {
          "type": "boolean",
          "description": "Work profile supported on device (Read-only)"
        },
        "os": {
          "type": "string",
          "description": "Name of the mobile operating system"
        },
        "email": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of owner user's email addresses (Read-only)"
        },
        "bootloaderVersion": {
          "type": "string",
          "description": "Mobile Device Bootloader version (Read-only)"
        },
        "status": {
          "type": "string",
          "description": "Status of the device (Read-only)"
        },
        "serialNumber": {
          "type": "string",
          "description": "Mobile Device SSN or Serial Number (Read-only)"
        },
        "firstSync": {
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "lastSync": {
          "type": "string",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time"
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "name": {
          "description": "List of owner user's names (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "otherAccountsInfo": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of accounts added on device (Read-only)"
        },
        "developerOptionsStatus": {
          "type": "boolean",
          "description": "Developer options enabled or disabled on device (Read-only)"
        },
        "deviceCompromisedStatus": {
          "type": "string",
          "description": "Mobile Device compromised status (Read-only)"
        },
        "imei": {
          "type": "string",
          "description": "Mobile Device IMEI number (Read-only)"
        },
        "unknownSourcesStatus": {
          "type": "boolean",
          "description": "Unknown sources enabled or disabled on device (Read-only)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "devicePasswordStatus": {
          "description": "DevicePasswordStatus (Read-only)",
          "type": "string"
        },
        "hardware": {
          "type": "string",
          "description": "Mobile Device Hardware (Read-only)"
        },
        "type": {
          "description": "The type of device (Read-only)",
          "type": "string"
        },
        "managedAccountIsOnOwnerProfile": {
          "type": "boolean",
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)"
        },
        "defaultLanguage": {
          "description": "The default locale used on the Mobile Device (Read-only)",
          "type": "string"
        },
        "basebandVersion": {
          "description": "Mobile Device Baseband version (Read-only)",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#mobiledevice",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "hardwareId": {
          "description": "Mobile Device Hardware Id (Read-only)",
          "type": "string"
        },
        "kernelVersion": {
          "description": "Mobile Device Kernel version (Read-only)",
          "type": "string"
        }
      }
    },
    "UserIm": {
      "description": "JSON template for instant messenger of an user.",
      "properties": {
        "protocol": {
          "type": "string",
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field."
        },
        "primary": {
          "description": "If this is user's primary im. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "customProtocol": {
          "description": "Custom protocol.",
          "type": "string"
        },
        "im": {
          "description": "Instant messenger id.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserIm"
    },
    "Feature": {
      "id": "Feature",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#features#Feature",
          "description": "Kind of resource this is."
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "name": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "description": "The name of the feature."
        }
      },
      "type": "object",
      "description": "JSON template for Feature object in Directory API."
    },
    "UserMakeAdmin": {
      "type": "object",
      "id": "UserMakeAdmin",
      "properties": {
        "status": {
          "description": "Boolean indicating new admin status of the user",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "type": "boolean"
        }
      }
    },
    "UserUndelete": {
      "properties": {
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        }
      },
      "id": "UserUndelete",
      "type": "object"
    },
    "Domains": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "verified": {
          "description": "Indicates the verification state of a domain. (Read-only).",
          "type": "boolean"
        },
        "kind": {
          "default": "admin#directory#domain",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "creationTime": {
          "description": "Creation time of the domain. (Read-only).",
          "format": "int64",
          "type": "string"
        },
        "domainAliases": {
          "description": "List of domain alias objects. (Read-only)",
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          }
        },
        "domainName": {
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The domain name of the customer.",
          "type": "string"
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Indicates if the domain is a primary domain (Read-only)."
        }
      },
      "id": "Domains"
    },
    "Token": {
      "type": "object",
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Token",
      "properties": {
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user that issued the token."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nativeApp": {
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device.",
          "type": "boolean"
        },
        "scopes": {
          "description": "A list of authorization scopes the application is granted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "default": "admin#directory#token",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#token."
        },
        "clientId": {
          "description": "The Client ID of the application the token is issued to.",
          "type": "string"
        },
        "anonymous": {
          "type": "boolean",
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID."
        },
        "displayText": {
          "description": "The displayable name of the application the token is issued to.",
          "type": "string"
        }
      }
    },
    "UserLocation": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value."
        },
        "floorSection": {
          "type": "string",
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values."
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "deskCode": {
          "description": "Most specific textual code of individual desk location.",
          "type": "string"
        },
        "floorName": {
          "type": "string",
          "description": "Floor name/number."
        },
        "buildingId": {
          "description": "Building Identifier.",
          "type": "string"
        }
      },
      "id": "UserLocation",
      "description": "JSON template for a location entry.",
      "type": "object"
    },
    "Privilege": {
      "properties": {
        "childPrivileges": {
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "type": "array",
          "items": {
            "$ref": "Privilege"
          }
        },
        "serviceName": {
          "type": "string",
          "description": "The name of the service this privilege is for."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "serviceId": {
          "type": "string",
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
        },
        "isOuScopable": {
          "type": "boolean",
          "description": "If the privilege can be restricted to an organization unit."
        },
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privilege.",
          "default": "admin#directory#privilege"
        }
      },
      "type": "object",
      "id": "Privilege"
    },
    "DirectoryChromeosdevicesCommand": {
      "type": "object",
      "id": "DirectoryChromeosdevicesCommand",
      "description": "Information regarding a command that was issued to a device.",
      "properties": {
        "commandExpireTime": {
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.",
          "type": "string",
          "format": "google-datetime"
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ],
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "type": "string",
          "description": "Indicates the command state."
        },
        "issueTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The timestamp when the command was issued by the admin."
        },
        "commandResult": {
          "$ref": "DirectoryChromeosdevicesCommandResult",
          "description": "The result of the command execution."
        },
        "type": {
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "description": "The type of the command.",
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "type": "string"
        },
        "commandId": {
          "description": "Unique ID of a device command.",
          "format": "int64",
          "type": "string"
        },
        "payload": {
          "type": "string",
          "description": "The payload that the command specified, if any."
        }
      }
    },
    "FeatureInstance": {
      "type": "object",
      "description": "JSON template for a feature instance.",
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      },
      "id": "FeatureInstance"
    },
    "UserPhone": {
      "type": "object",
      "description": "JSON template for a phone entry.",
      "id": "UserPhone",
      "properties": {
        "value": {
          "type": "string",
          "description": "Phone number."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary phone or not.",
          "type": "boolean"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      }
    },
    "UserPosixAccount": {
      "id": "UserPosixAccount",
      "type": "object",
      "description": "JSON template for a POSIX account entry.",
      "properties": {
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        },
        "gid": {
          "description": "The default group ID.",
          "format": "uint64",
          "type": "string"
        },
        "systemId": {
          "type": "string",
          "description": "System identifier for which account Username or Uid apply to."
        },
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        },
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        },
        "gecos": {
          "type": "string",
          "description": "The GECOS (user information) for this account."
        },
        "operatingSystemType": {
          "type": "string",
          "description": "The operating system type for this account."
        },
        "uid": {
          "type": "string",
          "format": "uint64",
          "description": "The POSIX compliant user ID."
        },
        "accountId": {
          "description": "A POSIX account field identifier.",
          "type": "string"
        }
      }
    },
    "Group": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Group",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#group",
          "type": "string"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Description of the group"
        },
        "email": {
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "description": "Email of Group",
          "type": "string"
        },
        "aliases": {
          "description": "List of aliases (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "directMembersCount": {
          "format": "int64",
          "description": "Group direct members count",
          "type": "string"
        },
        "adminCreated": {
          "type": "boolean",
          "description": "Is the group created by admin (Read-only) *"
        },
        "nonEditableAliases": {
          "description": "List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of Group (Read-only)"
        }
      },
      "type": "object"
    },
    "ChromeOsDeviceAction": {
      "type": "object",
      "id": "ChromeOsDeviceAction",
      "properties": {
        "action": {
          "description": "Action to be taken on the ChromeOs Device",
          "type": "string",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          }
        },
        "deprovisionReason": {
          "type": "string"
        }
      }
    },
    "Members": {
      "id": "Members",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#members",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "members": {
          "items": {
            "$ref": "Member"
          },
          "description": "List of member objects.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        }
      }
    },
    "DirectoryChromeosdevicesCommandResult": {
      "description": "The result of executing a command.",
      "id": "DirectoryChromeosdevicesCommandResult",
      "type": "object",
      "properties": {
        "errorMessage": {
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed.",
          "type": "string"
        },
        "executeTime": {
          "description": "The time at which the command was executed or failed to execute.",
          "type": "string",
          "format": "google-datetime"
        },
        "result": {
          "type": "string",
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ],
          "description": "The result of the command.",
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ]
        }
      }
    },
    "MobileDeviceAction": {
      "id": "MobileDeviceAction",
      "type": "object",
      "properties": {
        "action": {
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          },
          "description": "Action to be taken on the Mobile Device",
          "type": "string"
        }
      }
    },
    "Privileges": {
      "properties": {
        "items": {
          "description": "A list of Privilege resources.",
          "type": "array",
          "items": {
            "$ref": "Privilege"
          }
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "default": "admin#directory#privileges",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Privileges",
      "type": "object"
    },
    "UserEmail": {
      "id": "UserEmail",
      "properties": {
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary email. Only one entry could be marked as primary."
        },
        "address": {
          "description": "Email id of the user.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for an email."
    },
    "CustomerPostalAddress": {
      "type": "object",
      "id": "CustomerPostalAddress",
      "properties": {
        "contactName": {
          "type": "string",
          "description": "The customer contact's name."
        },
        "locality": {
          "description": "Name of the locality. An example of a locality value is the city of San Francisco.",
          "type": "string"
        },
        "postalCode": {
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element.",
          "type": "string"
        },
        "addressLine3": {
          "type": "string",
          "description": "Address line 3 of the address."
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        },
        "region": {
          "description": "Name of the region. An example of a region value is NY for the state of New York.",
          "type": "string"
        },
        "addressLine2": {
          "description": "Address line 2 of the address.",
          "type": "string"
        },
        "countryCode": {
          "type": "string",
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements."
        },
        "addressLine1": {
          "type": "string",
          "description": "A customer's physical address. The address can be composed of one to three lines."
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)"
    },
    "RoleAssignment": {
      "id": "RoleAssignment",
      "properties": {
        "roleId": {
          "format": "int64",
          "description": "The ID of the role that is assigned.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#roleAssignment.",
          "type": "string",
          "default": "admin#directory#roleAssignment"
        },
        "scopeType": {
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT ",
          "type": "string"
        },
        "orgUnitId": {
          "type": "string",
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to."
        },
        "roleAssignmentId": {
          "description": "ID of this roleAssignment.",
          "type": "string",
          "format": "int64"
        },
        "assignedTo": {
          "type": "string",
          "description": "The unique ID of the user this role is assigned to."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserRelation": {
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The name of the relation."
        }
      },
      "type": "object",
      "description": "JSON template for a relation entry.",
      "id": "UserRelation"
    },
    "Buildings": {
      "type": "object",
      "id": "Buildings",
      "description": "Public API: Resources.buildings",
      "properties": {
        "buildings": {
          "description": "The Buildings in this page of results.",
          "type": "array",
          "items": {
            "$ref": "Building"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#buildings#buildingsList",
          "description": "Kind of resource this is."
        }
      }
    },
    "User": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "etag": {
          "readOnly": true,
          "description": "Output only. ETag of the resource.",
          "type": "string"
        },
        "addresses": {
          "type": "any",
          "description": "Addresses of User"
        },
        "emails": {
          "description": "Emails of User",
          "type": "any"
        },
        "kind": {
          "default": "admin#directory#user",
          "type": "string",
          "readOnly": true,
          "description": "Output only. Kind of resource this is."
        },
        "suspensionReason": {
          "type": "string",
          "description": "Output only. Suspension reason if user is suspended (Read-only)",
          "readOnly": true
        },
        "keywords": {
          "description": "Keywords of User",
          "type": "any"
        },
        "thumbnailPhotoEtag": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. ETag of the user's photo (Read-only)"
        },
        "posixAccounts": {
          "type": "any",
          "description": "The POSIX accounts of User"
        },
        "creationTime": {
          "type": "string",
          "description": "User's G Suite account creation time. (Read-only)",
          "format": "date-time",
          "readOnly": true
        },
        "languages": {
          "type": "any",
          "description": "Languages of User"
        },
        "isMailboxSetup": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Is mailbox setup (Read-only)"
        },
        "changePasswordAtNextLogin": {
          "type": "boolean",
          "description": "Boolean indicating if the user should change password in next login"
        },
        "archived": {
          "type": "boolean",
          "description": "Indicates if user is archived."
        },
        "locations": {
          "type": "any",
          "description": "Locations of User"
        },
        "customSchemas": {
          "description": "Custom fields of the user.",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          },
          "type": "object"
        },
        "ims": {
          "description": "User's Instant Messenger",
          "type": "any"
        },
        "suspended": {
          "description": "Indicates if user is suspended.",
          "type": "boolean"
        },
        "nonEditableAliases": {
          "type": "array",
          "readOnly": true,
          "description": "Output only. List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "recoveryEmail": {
          "type": "string",
          "description": "Recovery email of the user."
        },
        "organizations": {
          "type": "any",
          "description": "Organizations of User"
        },
        "ipWhitelisted": {
          "description": "Boolean indicating if ip is whitelisted",
          "type": "boolean"
        },
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        },
        "lastLoginTime": {
          "readOnly": true,
          "type": "string",
          "format": "date-time",
          "description": "User's last login time. (Read-only)"
        },
        "primaryEmail": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string",
          "description": "username of User"
        },
        "isAdmin": {
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "hashFunction": {
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt",
          "type": "string"
        },
        "notes": {
          "description": "Notes of User",
          "type": "any"
        },
        "includeInGlobalAddressList": {
          "type": "boolean",
          "description": "Boolean indicating if user is included in Global Address List"
        },
        "isEnforcedIn2Sv": {
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "isEnrolledIn2Sv": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Is enrolled in 2-step verification (Read-only)"
        },
        "sshPublicKeys": {
          "description": "The SSH public keys of User",
          "type": "any"
        },
        "name": {
          "description": "User's name",
          "$ref": "UserName",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "customerId": {
          "type": "string",
          "description": "Output only. CustomerId of User (Read-only)",
          "readOnly": true
        },
        "websites": {
          "type": "any",
          "description": "Websites of User"
        },
        "relations": {
          "type": "any",
          "description": "The Relations of User *"
        },
        "thumbnailPhotoUrl": {
          "readOnly": true,
          "description": "Output only. Photo Url of the user (Read-only)",
          "type": "string"
        },
        "deletionTime": {
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "externalIds": {
          "type": "any",
          "description": "The external Ids of User *"
        },
        "gender": {
          "description": "Gender of User",
          "type": "any"
        },
        "phones": {
          "type": "any",
          "description": "Phone numbers of User"
        },
        "recoveryPhone": {
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
          "type": "string"
        },
        "isDelegatedAdmin": {
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "agreedToTerms": {
          "type": "boolean",
          "description": "Output only. Indicates if user has agreed to terms (Read-only)",
          "readOnly": true
        },
        "aliases": {
          "description": "Output only. List of aliases (Read-only)",
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "password": {
          "description": "User's password",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        }
      },
      "id": "User"
    },
    "Domains2": {
      "type": "object",
      "id": "Domains2",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#domains",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "domains": {
          "type": "array",
          "description": "List of domain objects.",
          "items": {
            "$ref": "Domains"
          }
        }
      }
    },
    "ChromeOsMoveDevicesToOu": {
      "properties": {
        "deviceIds": {
          "type": "array",
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "items": {
            "type": "string"
          },
          "description": "ChromeOs Devices to be moved to OU"
        }
      },
      "id": "ChromeOsMoveDevicesToOu",
      "type": "object"
    },
    "Asp": {
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#asp.",
          "default": "admin#directory#asp",
          "type": "string"
        },
        "lastTimeUsed": {
          "format": "int64",
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the ASP."
        },
        "codeId": {
          "description": "The unique ID of the ASP.",
          "format": "int32",
          "type": "integer"
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user who issued the ASP."
        },
        "creationTime": {
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "type": "string",
          "format": "int64"
        }
      },
      "id": "Asp"
    },
    "ChromeOsDevices": {
      "id": "ChromeOsDevices",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "chromeosdevices": {
          "description": "List of Chrome OS Device objects.",
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#chromeosdevices",
          "type": "string",
          "description": "Kind of resource this is."
        }
      }
    },
    "Asps": {
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#aspList",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#aspList."
        },
        "items": {
          "items": {
            "$ref": "Asp"
          },
          "type": "array",
          "description": "A list of ASP resources."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Asps",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "MembersHasMember": {
      "description": "JSON template for Has Member response in Directory API.",
      "properties": {
        "isMember": {
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "id": "MembersHasMember",
      "type": "object"
    },
    "DomainAlias": {
      "id": "DomainAlias",
      "properties": {
        "parentDomainName": {
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "type": "string"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain alias. (Read-only)"
        },
        "domainAliasName": {
          "type": "string",
          "description": "The domain alias name."
        },
        "creationTime": {
          "description": "The creation time of the domain alias. (Read-only).",
          "format": "int64",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAlias"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object"
    },
    "Roles": {
      "type": "object",
      "id": "Roles",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#roles",
          "description": "The type of the API resource. This is always admin#directory#roles."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "Role"
          },
          "description": "A list of Role resources.",
          "type": "array"
        }
      }
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "type": "object",
      "description": "A response for issuing a command.",
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "properties": {
        "commandId": {
          "description": "The unique ID of the issued command, used to retrieve the command status.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "UserAbout": {
      "properties": {
        "contentType": {
          "type": "string",
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text."
        },
        "value": {
          "description": "Actual value of notes.",
          "type": "string"
        }
      },
      "description": "JSON template for About (notes) of a user in Directory API.",
      "type": "object",
      "id": "UserAbout"
    },
    "UserExternalId": {
      "type": "object",
      "description": "JSON template for an externalId entry.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the id."
        },
        "type": {
          "description": "The type of the Id.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        }
      },
      "id": "UserExternalId"
    },
    "RoleAssignments": {
      "id": "RoleAssignments",
      "type": "object",
      "properties": {
        "items": {
          "items": {
            "$ref": "RoleAssignment"
          },
          "description": "A list of RoleAssignment resources.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#roleAssignments",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments ."
        }
      }
    },
    "Groups": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#groups"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "Group"
          },
          "description": "List of group objects."
        }
      },
      "id": "Groups",
      "type": "object"
    },
    "MobileDevices": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#mobiledevices",
          "description": "Kind of resource this is."
        },
        "mobiledevices": {
          "description": "List of Mobile Device objects.",
          "type": "array",
          "items": {
            "$ref": "MobileDevice"
          }
        }
      },
      "id": "MobileDevices"
    },
    "VerificationCode": {
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "VerificationCode",
      "properties": {
        "verificationCode": {
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#verificationCode",
          "description": "The type of the resource. This is always admin#directory#verificationCode."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "userId": {
          "description": "The obfuscated unique ID of the user.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "OrgUnit": {
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "OrgUnit",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of OrgUnit"
        },
        "orgUnitId": {
          "description": "Id of OrgUnit",
          "type": "string"
        },
        "orgUnitPath": {
          "description": "Path of OrgUnit",
          "type": "string"
        },
        "name": {
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          },
          "description": "Name of OrgUnit",
          "type": "string"
        },
        "blockInheritance": {
          "type": "boolean",
          "description": "Should block inheritance"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#orgUnit"
        },
        "parentOrgUnitId": {
          "type": "string",
          "description": "Id of parent OrgUnit"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "parentOrgUnitPath": {
          "description": "Path of parent OrgUnit",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserKeyword": {
      "properties": {
        "value": {
          "description": "Keyword.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      },
      "id": "UserKeyword",
      "description": "JSON template for a keyword entry.",
      "type": "object"
    },
    "UserName": {
      "type": "object",
      "properties": {
        "fullName": {
          "description": "Full Name",
          "type": "string"
        },
        "givenName": {
          "description": "First Name",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "familyName": {
          "type": "string",
          "description": "Last Name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        }
      },
      "id": "UserName"
    },
    "ChromeOsDevice": {
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "ChromeOsDevice",
      "properties": {
        "firmwareVersion": {
          "description": "Chromebook firmware version (Read-only)",
          "type": "string"
        },
        "bootMode": {
          "description": "Chromebook boot mode (Read-only)",
          "type": "string"
        },
        "platformVersion": {
          "description": "Chromebook platform version (Read-only)",
          "type": "string"
        },
        "cpuStatusReports": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "reportTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time the report was received."
              },
              "cpuUtilizationPercentageInfo": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "cpuTemperatureInfo": {
                "items": {
                  "type": "object",
                  "properties": {
                    "temperature": {
                      "description": "Temperature in Celsius degrees.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "label": {
                      "type": "string",
                      "description": "CPU label"
                    }
                  }
                },
                "description": "List of CPU temperature samples.",
                "type": "array"
              }
            }
          },
          "description": "Reports of CPU utilization and temperature (Read-only)"
        },
        "meid": {
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)",
          "type": "string"
        },
        "recentUsers": {
          "description": "List of recent device users, in descending order by last login time (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of the user"
              },
              "email": {
                "description": "Email address of the user. Present only if the user type is managed",
                "type": "string"
              }
            }
          },
          "type": "array"
        },
        "lastKnownNetwork": {
          "description": "Contains last known network (Read-only)",
          "type": "array",
          "items": {
            "description": "Information for an ip address.",
            "type": "object",
            "properties": {
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              },
              "ipAddress": {
                "type": "string",
                "description": "The IP address."
              }
            }
          }
        },
        "osVersion": {
          "type": "string",
          "description": "Chromebook Os Version (Read-only)"
        },
        "model": {
          "type": "string",
          "description": "Chromebook Model (Read-only)"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "macAddress": {
          "description": "Chromebook Mac Address on wifi network interface (Read-only)",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#chromeosdevice",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "autoUpdateExpiration": {
          "format": "int64",
          "type": "string",
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support"
        },
        "deviceId": {
          "description": "Unique identifier of Chrome OS Device (Read-only)",
          "type": "string"
        },
        "notes": {
          "description": "Notes added by the administrator",
          "type": "string"
        },
        "supportEndDate": {
          "description": "Final date the device will be supported (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "description": "status of the device (Read-only)",
          "type": "string"
        },
        "serialNumber": {
          "type": "string",
          "description": "Chromebook serial number (Read-only)"
        },
        "annotatedLocation": {
          "type": "string",
          "description": "Address or location of the device as noted by the administrator"
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "systemRamTotal": {
          "format": "int64",
          "type": "string",
          "description": "Total RAM on the device [in bytes] (Read-only)"
        },
        "systemRamFreeReports": {
          "items": {
            "type": "object",
            "properties": {
              "systemRamFreeInfo": {
                "items": {
                  "format": "int64",
                  "type": "string"
                },
                "type": "array"
              },
              "reportTime": {
                "format": "date-time",
                "type": "string",
                "description": "Date and time the report was received."
              }
            }
          },
          "type": "array",
          "description": "Reports of amounts of available RAM memory (Read-only)"
        },
        "annotatedUser": {
          "type": "string",
          "description": "User of the device"
        },
        "diskVolumeReports": {
          "type": "array",
          "description": "Reports of disk space and other info about mounted/connected volumes.",
          "items": {
            "properties": {
              "volumeInfo": {
                "description": "Disk volumes",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "storageTotal": {
                      "type": "string",
                      "description": "Total disk space [in bytes]",
                      "format": "int64"
                    },
                    "volumeId": {
                      "description": "Volume id",
                      "type": "string"
                    },
                    "storageFree": {
                      "format": "int64",
                      "description": "Free disk space [in bytes]",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "type": "object"
          }
        },
        "ethernetMacAddress": {
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)",
          "type": "string"
        },
        "lastEnrollmentTime": {
          "type": "string",
          "description": "Date and time the device was last enrolled (Read-only)",
          "format": "date-time"
        },
        "orderNumber": {
          "type": "string",
          "description": "Chromebook order number (Read-only)"
        },
        "annotatedAssetId": {
          "description": "AssetId specified during enrollment or through later annotation",
          "type": "string"
        },
        "activeTimeRanges": {
          "type": "array",
          "items": {
            "properties": {
              "activeTime": {
                "type": "integer",
                "description": "Duration in milliseconds",
                "format": "int32"
              },
              "date": {
                "format": "date",
                "type": "string",
                "description": "Date of usage"
              }
            },
            "type": "object"
          },
          "description": "List of active time ranges (Read-only)"
        },
        "ethernetMacAddress0": {
          "type": "string",
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "dockMacAddress": {
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "deviceFiles": {
          "description": "List of device files to download (Read-only)",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "File name"
              },
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              },
              "type": {
                "type": "string",
                "description": "File type"
              },
              "createTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time the file was created"
              }
            }
          }
        },
        "manufactureDate": {
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
          "type": "string"
        },
        "orgUnitPath": {
          "description": "OrgUnit of the device",
          "type": "string"
        },
        "tpmVersionInfo": {
          "type": "object",
          "properties": {
            "vendorSpecific": {
              "type": "string",
              "description": "Vendor-specific information such as Vendor ID."
            },
            "manufacturer": {
              "type": "string",
              "description": "TPM manufacturer code."
            },
            "specLevel": {
              "description": "TPM specification level.",
              "type": "string"
            },
            "family": {
              "description": "TPM family.",
              "type": "string"
            },
            "tpmModel": {
              "type": "string",
              "description": "TPM model number."
            },
            "firmwareVersion": {
              "type": "string",
              "description": "TPM firmware version."
            }
          },
          "description": "Trusted Platform Module (TPM) (Read-only)"
        },
        "willAutoRenew": {
          "type": "boolean",
          "description": "Will Chromebook auto renew after support end date (Read-only)"
        }
      }
    },
    "BuildingCoordinates": {
      "description": "Public API: Resources.buildings",
      "properties": {
        "longitude": {
          "description": "Longitude in decimal degrees.",
          "format": "double",
          "type": "number"
        },
        "latitude": {
          "description": "Latitude in decimal degrees.",
          "type": "number",
          "format": "double"
        }
      },
      "id": "BuildingCoordinates",
      "type": "object"
    },
    "Role": {
      "properties": {
        "isSuperAdminRole": {
          "description": "Returns true if the role is a super admin role.",
          "type": "boolean"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#role.",
          "type": "string",
          "default": "admin#directory#role"
        },
        "rolePrivileges": {
          "type": "array",
          "description": "The set of privileges that are granted to this role.",
          "items": {
            "type": "object",
            "properties": {
              "serviceId": {
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
                "type": "string"
              },
              "privilegeName": {
                "type": "string",
                "description": "The name of the privilege."
              }
            }
          },
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          }
        },
        "roleName": {
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "string",
          "description": "Name of the role."
        },
        "isSystemRole": {
          "type": "boolean",
          "description": "Returns true if this is a pre-defined system role."
        },
        "roleId": {
          "type": "string",
          "description": "ID of the role.",
          "format": "int64"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "roleDescription": {
          "description": "A short description of the role.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Role"
    },
    "Customer": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "The customer's contact phone number in E.164 format.",
          "type": "string"
        },
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain"
        },
        "customerDomain": {
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer.",
          "type": "string"
        },
        "customerCreationTime": {
          "description": "The customer's creation time (Readonly)",
          "format": "date-time",
          "type": "string"
        },
        "postalAddress": {
          "description": "The customer's postal address information.",
          "$ref": "CustomerPostalAddress"
        },
        "language": {
          "type": "string",
          "description": "The customer's ISO 639-2 language code. The default value is en-US"
        },
        "id": {
          "type": "string",
          "description": "The unique ID for the customer's G Suite account. (Readonly)"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#customer",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Customer",
      "type": "object"
    },
    "Users": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#users"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "users": {
          "type": "array",
          "description": "List of user objects.",
          "items": {
            "$ref": "User"
          }
        },
        "trigger_event": {
          "description": "Event that triggered this response (only used in case of Push Response)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "Users",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "FeatureRename": {
      "id": "FeatureRename",
      "properties": {
        "newName": {
          "type": "string",
          "description": "New name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          }
        }
      },
      "type": "object"
    },
    "Tokens": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#tokenList",
          "description": "The type of the API resource. This is always admin#directory#tokenList.",
          "type": "string"
        },
        "items": {
          "description": "A list of Token resources.",
          "items": {
            "$ref": "Token"
          },
          "type": "array"
        }
      },
      "id": "Tokens",
      "type": "object",
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "CalendarResource": {
      "id": "CalendarResource",
      "description": "Public API: Resources.calendars",
      "properties": {
        "userVisibleDescription": {
          "type": "string",
          "description": "Description of the resource, visible to users and admins."
        },
        "resourceEmail": {
          "type": "string",
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource."
        },
        "generatedResourceName": {
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\".",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "default": "admin#directory#resources#calendars#CalendarResource"
        },
        "resourceName": {
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "resourceId": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string",
          "description": "The unique ID for the calendar resource."
        },
        "resourceType": {
          "description": "The type of the calendar resource, intended for non-room resources.",
          "type": "string"
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "buildingId": {
          "description": "Unique ID for the building a resource is located in.",
          "type": "string"
        },
        "floorSection": {
          "description": "Name of the section within a floor a resource is located in.",
          "type": "string"
        },
        "resourceCategory": {
          "type": "string",
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN."
        },
        "featureInstances": {
          "type": "any",
          "description": "Instances of features for the calendar resource."
        },
        "capacity": {
          "format": "int32",
          "type": "integer",
          "description": "Capacity of a resource, number of seats in a room."
        },
        "floorName": {
          "type": "string",
          "description": "Name of the floor a resource is located on."
        }
      },
      "type": "object"
    },
    "UserSshPublicKey": {
      "properties": {
        "fingerprint": {
          "readOnly": true,
          "type": "string",
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)"
        },
        "key": {
          "description": "An SSH public key.",
          "type": "string"
        },
        "expirationTimeUsec": {
          "description": "An expiration time in microseconds since epoch.",
          "type": "string",
          "format": "int64"
        }
      },
      "type": "object",
      "description": "JSON template for a POSIX account entry.",
      "id": "UserSshPublicKey"
    },
    "VerificationCodes": {
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "VerificationCodes",
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#verificationCodesList",
          "type": "string",
          "description": "The type of the resource. This is always admin#directory#verificationCodesList."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "description": "A list of verification code resources.",
          "type": "array",
          "items": {
            "$ref": "VerificationCode"
          }
        }
      }
    },
    "Schemas": {
      "type": "object",
      "properties": {
        "schemas": {
          "items": {
            "$ref": "Schema"
          },
          "type": "array",
          "description": "List of UserSchema objects."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#schemas"
        }
      },
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Schemas"
    },
    "UserAddress": {
      "properties": {
        "poBox": {
          "type": "string",
          "description": "Other parts of address."
        },
        "primary": {
          "description": "If this is user's primary address. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "region": {
          "type": "string",
          "description": "Region."
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        },
        "sourceIsStructured": {
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered.",
          "type": "boolean"
        },
        "extendedAddress": {
          "description": "Extended Address.",
          "type": "string"
        },
        "countryCode": {
          "type": "string",
          "description": "Country code."
        },
        "locality": {
          "description": "Locality.",
          "type": "string"
        },
        "country": {
          "type": "string",
          "description": "Country."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "formatted": {
          "description": "Formatted address.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value."
        },
        "streetAddress": {
          "type": "string",
          "description": "Street."
        }
      },
      "id": "UserAddress",
      "description": "JSON template for address.",
      "type": "object"
    },
    "UserLanguage": {
      "id": "UserLanguage",
      "type": "object",
      "properties": {
        "languageCode": {
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.",
          "type": "string"
        },
        "customLanguage": {
          "type": "string",
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set"
        }
      },
      "description": "JSON template for a language entry."
    },
    "UserCustomProperties": {
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "additionalProperties": {
        "type": "any"
      },
      "type": "object",
      "id": "UserCustomProperties"
    }
  },
  "kind": "discovery#restDescription",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        }
      }
    }
  },
  "servicePath": "",
  "resources": {
    "groups": {
      "methods": {
        "patch": {
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string"
            }
          },
          "request": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "description": "Patch Groups via Apiary Patch Orchestration",
          "parameterOrder": [
            "groupKey"
          ],
          "id": "directory.groups.patch"
        },
        "delete": {
          "id": "directory.groups.delete",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/groups/{groupKey}",
          "description": "Delete Group",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "required": true,
              "location": "path",
              "type": "string"
            }
          }
        },
        "list": {
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups",
          "id": "directory.groups.list",
          "response": {
            "$ref": "Groups"
          },
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "parameters": {
            "customer": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain."
            },
            "domain": {
              "location": "query",
              "type": "string",
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead."
            },
            "sortOrder": {
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query"
            },
            "userKey": {
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "location": "query",
              "type": "string"
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "location": "query",
              "type": "string"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "type": "string",
              "location": "query",
              "enum": [
                "orderByUndefined",
                "email"
              ],
              "enumDescriptions": [
                "",
                "Email of the group."
              ]
            },
            "maxResults": {
              "minimum": "1",
              "format": "int32",
              "type": "integer",
              "location": "query",
              "default": "200",
              "description": "Maximum number of results to return. Max allowed value is 200."
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/groups",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ]
        },
        "insert": {
          "path": "admin/directory/v1/groups",
          "parameters": {},
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "response": {
            "$ref": "Group"
          },
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/groups",
          "description": "Create Group",
          "id": "directory.groups.insert",
          "request": {
            "$ref": "Group"
          },
          "parameterOrder": []
        },
        "get": {
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "description": "Retrieve Group",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "id": "directory.groups.get",
          "httpMethod": "GET",
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}"
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "request": {
            "$ref": "Group"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "PUT",
          "id": "directory.groups.update",
          "description": "Update Group",
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Group"
          },
          "path": "admin/directory/v1/groups/{groupKey}"
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "list": {
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "httpMethod": "GET",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "id": "directory.groups.aliases.list",
              "description": "List all aliases for a group",
              "parameterOrder": [
                "groupKey"
              ],
              "response": {
                "$ref": "Aliases"
              },
              "parameters": {
                "groupKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the group",
                  "type": "string",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ]
            },
            "insert": {
              "parameterOrder": [
                "groupKey"
              ],
              "response": {
                "$ref": "Alias"
              },
              "id": "directory.groups.aliases.insert",
              "description": "Add a alias for the group",
              "request": {
                "$ref": "Alias"
              },
              "parameters": {
                "groupKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the group",
                  "required": true,
                  "type": "string"
                }
              },
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "path": "admin/directory/v1/groups/{groupKey}/aliases"
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "id": "directory.groups.aliases.delete",
              "parameters": {
                "alias": {
                  "description": "The alias to be removed",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "groupKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the group",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "description": "Remove a alias for the group"
            }
          }
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "id": "directory.twoStepVerification.turnOff",
          "httpMethod": "POST",
          "description": "Turn off 2-Step Verification for user."
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "id": "admin.customer.devices.chromeos.commands.get",
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "parameters": {
                        "commandId": {
                          "location": "path",
                          "required": true,
                          "description": "Immutable. Immutable ID of Chrome OS Device Command.",
                          "type": "string",
                          "format": "int64"
                        },
                        "deviceId": {
                          "required": true,
                          "description": "Immutable. Immutable ID of Chrome OS Device.",
                          "location": "path",
                          "type": "string"
                        },
                        "customerId": {
                          "location": "path",
                          "description": "Immutable. Immutable ID of the G Suite account.",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "description": "Gets command data a specific command issued to the device.",
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ]
                    }
                  }
                }
              },
              "methods": {
                "issueCommand": {
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "description": "Issues a command for the device to execute.",
                  "parameters": {
                    "customerId": {
                      "location": "path",
                      "description": "Immutable. Immutable ID of the G Suite account.",
                      "type": "string",
                      "required": true
                    },
                    "deviceId": {
                      "description": "Immutable. Immutable ID of Chrome OS Device.",
                      "type": "string",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "orgunits": {
      "methods": {
        "delete": {
          "description": "Remove organizational unit",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameters": {
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "id": "directory.orgunits.delete"
        },
        "list": {
          "id": "directory.orgunits.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            },
            "type": {
              "location": "query",
              "description": "Whether to return all sub-organizations or just immediate children",
              "type": "string",
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ]
            },
            "orgUnitPath": {
              "description": "the URL-encoded organizational unit's path or its ID",
              "location": "query",
              "default": "",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "description": "Retrieve all organizational units",
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "OrgUnits"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits"
        },
        "get": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "description": "Retrieve organizational unit",
          "parameters": {
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "pattern": "^.*$",
              "required": true,
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}"
        },
        "update": {
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            },
            "orgUnitPath": {
              "location": "path",
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "pattern": "^.*$",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "request": {
            "$ref": "OrgUnit"
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "id": "directory.orgunits.update",
          "description": "Update organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        },
        "patch": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "PATCH",
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "id": "directory.orgunits.patch",
          "parameters": {
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "required": true,
              "location": "path",
              "pattern": "^.*$"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "request": {
            "$ref": "OrgUnit"
          }
        },
        "insert": {
          "request": {
            "$ref": "OrgUnit"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "parameterOrder": [
            "customerId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "id": "directory.orgunits.insert",
          "response": {
            "$ref": "OrgUnit"
          },
          "description": "Add organizational unit",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ]
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "flatPath": "admin/directory_v1/channels/stop",
          "path": "admin/directory_v1/channels/stop",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {},
          "httpMethod": "POST",
          "description": "Stop watching resources through this channel.",
          "id": "admin.channels.stop",
          "request": {
            "$ref": "Channel"
          }
        }
      }
    },
    "roles": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "response": {
            "$ref": "Roles"
          },
          "parameterOrder": [
            "customer"
          ],
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "id": "directory.roles.list",
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "parameters": {
            "maxResults": {
              "maximum": "100",
              "type": "integer",
              "location": "query",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "format": "int32"
            },
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            },
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "location": "query",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles",
          "httpMethod": "GET"
        },
        "patch": {
          "description": "Patch role via Apiary Patch Orchestration",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "response": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roles.patch",
          "httpMethod": "PATCH",
          "parameters": {
            "roleId": {
              "location": "path",
              "description": "Immutable ID of the role.",
              "type": "string",
              "required": true
            },
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            }
          },
          "request": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Deletes a role.",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "roleId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role."
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.delete"
        },
        "get": {
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.get",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "roleId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role.",
              "required": true
            },
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "response": {
            "$ref": "Role"
          },
          "description": "Retrieves a role.",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "update": {
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "id": "directory.roles.update",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true
            },
            "roleId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role."
            }
          },
          "request": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "response": {
            "$ref": "Role"
          },
          "httpMethod": "PUT",
          "description": "Updates a role.",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "insert": {
          "id": "directory.roles.insert",
          "description": "Creates a role.",
          "request": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "httpMethod": "POST",
          "response": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles"
        }
      }
    },
    "schemas": {
      "methods": {
        "list": {
          "response": {
            "$ref": "Schemas"
          },
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.schemas.list",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "description": "Retrieve all schemas for a customer",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas"
        },
        "insert": {
          "description": "Create schema.",
          "response": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.schemas.insert",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "httpMethod": "POST",
          "request": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas"
        },
        "delete": {
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true
            },
            "schemaKey": {
              "required": true,
              "type": "string",
              "description": "Name or immutable ID of the schema",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.delete",
          "description": "Delete schema",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "DELETE"
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "description": "Update schema",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          },
          "httpMethod": "PUT",
          "request": {
            "$ref": "Schema"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "id": "directory.schemas.update",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "schemaKey": {
              "type": "string",
              "description": "Name or immutable ID of the schema.",
              "location": "path",
              "required": true
            }
          }
        },
        "patch": {
          "response": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "id": "directory.schemas.patch",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "request": {
            "$ref": "Schema"
          },
          "httpMethod": "PATCH",
          "description": "Patch Schema via Apiary Patch Orchestration",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameters": {
            "schemaKey": {
              "location": "path",
              "description": "Name or immutable ID of the schema.",
              "required": true,
              "type": "string"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            }
          }
        },
        "get": {
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "description": "Retrieve schema",
          "response": {
            "$ref": "Schema"
          },
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "schemaKey": {
              "required": true,
              "location": "path",
              "description": "Name or immutable ID of the schema",
              "type": "string"
            }
          },
          "id": "directory.schemas.get",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "list": {
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "response": {
            "$ref": "VerificationCodes"
          },
          "id": "directory.verificationCodes.list",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes"
        },
        "generate": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "description": "Generate new backup verification codes for the user.",
          "id": "directory.verificationCodes.generate",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameterOrder": [
            "userKey"
          ]
        },
        "invalidate": {
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.verificationCodes.invalidate",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "description": "Invalidate the current backup verification codes for the user.",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the user",
              "required": true
            }
          },
          "httpMethod": "POST"
        }
      }
    },
    "members": {
      "methods": {
        "update": {
          "httpMethod": "PUT",
          "response": {
            "$ref": "Member"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameters": {
            "memberKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "required": true
            },
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.members.update",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "request": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "description": "Update membership of a user in the specified group."
        },
        "insert": {
          "httpMethod": "POST",
          "description": "Add user to the specified group.",
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group"
            }
          },
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "request": {
            "$ref": "Member"
          },
          "id": "directory.members.insert",
          "response": {
            "$ref": "Member"
          }
        },
        "list": {
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "response": {
            "$ref": "Members"
          },
          "id": "directory.members.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "roles": {
              "description": "Comma separated role values to filter list results on.",
              "location": "query",
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "groupKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the group"
            },
            "maxResults": {
              "location": "query",
              "format": "int32",
              "minimum": "1",
              "default": "200",
              "type": "integer",
              "description": "Maximum number of results to return. Max allowed value is 200."
            },
            "includeDerivedMembership": {
              "description": "Whether to list indirect memberships. Default: false.",
              "type": "boolean",
              "location": "query"
            }
          },
          "httpMethod": "GET",
          "description": "Retrieve all members in a group (paginated)",
          "parameterOrder": [
            "groupKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members"
        },
        "hasMember": {
          "parameters": {
            "groupKey": {
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path",
              "type": "string"
            },
            "memberKey": {
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "id": "directory.members.hasMember",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "response": {
            "$ref": "MembersHasMember"
          }
        },
        "delete": {
          "httpMethod": "DELETE",
          "parameters": {
            "groupKey": {
              "required": true,
              "description": "Email or immutable ID of the group",
              "type": "string",
              "location": "path"
            },
            "memberKey": {
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the member",
              "required": true
            }
          },
          "description": "Remove membership.",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "id": "directory.members.delete",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "patch": {
          "id": "directory.members.patch",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Patch Member via Apiary Patch Orchestration",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string"
            },
            "memberKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object"
            }
          },
          "response": {
            "$ref": "Member"
          },
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "request": {
            "$ref": "Member"
          }
        },
        "get": {
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group"
            },
            "memberKey": {
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the member",
              "location": "path"
            }
          },
          "description": "Retrieve Group Member",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "httpMethod": "GET",
          "id": "directory.members.get",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        }
      }
    },
    "customers": {
      "methods": {
        "get": {
          "description": "Retrieves a customer.",
          "path": "admin/directory/v1/customers/{customerKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ],
          "httpMethod": "GET",
          "id": "directory.customers.get",
          "response": {
            "$ref": "Customer"
          },
          "parameters": {
            "customerKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Id of the customer to be retrieved"
            }
          }
        },
        "patch": {
          "response": {
            "$ref": "Customer"
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "description": "Patch Customers via Apiary Patch Orchestration",
          "request": {
            "$ref": "Customer"
          },
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "parameterOrder": [
            "customerKey"
          ],
          "path": "admin/directory/v1/customers/{customerKey}",
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.customers.patch"
        },
        "update": {
          "description": "Updates a customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "parameterOrder": [
            "customerKey"
          ],
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "request": {
            "$ref": "Customer"
          },
          "parameters": {
            "customerKey": {
              "type": "string",
              "location": "path",
              "description": "Id of the customer to be updated",
              "required": true
            }
          },
          "id": "directory.customers.update",
          "path": "admin/directory/v1/customers/{customerKey}"
        }
      }
    },
    "users": {
      "methods": {
        "watch": {
          "parameterOrder": [],
          "id": "directory.users.watch",
          "description": "Watch for changes in users list",
          "response": {
            "$ref": "Channel"
          },
          "path": "admin/directory/v1/users/watch",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/watch",
          "parameters": {
            "sortOrder": {
              "type": "string",
              "description": "Whether to return results in ascending or descending order.",
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users"
            },
            "viewType": {
              "default": "admin_view",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "type": "string",
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "location": "query"
            },
            "domain": {
              "type": "string",
              "location": "query",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\""
            },
            "event": {
              "location": "query",
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "type": "string",
              "description": "Event on which subscription is intended"
            },
            "showDeleted": {
              "location": "query",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "orderBy": {
              "type": "string",
              "location": "query",
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "description": "Column to use for sorting results"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "type": "string",
              "default": "basic",
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ],
              "location": "query",
              "description": "What subset of fields to fetch for this user."
            },
            "maxResults": {
              "format": "int32",
              "location": "query",
              "default": "100",
              "type": "integer",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "maximum": "500"
            },
            "customFieldMask": {
              "location": "query",
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "customer": {
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "Channel"
          }
        },
        "list": {
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "httpMethod": "GET",
          "response": {
            "$ref": "Users"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "flatPath": "admin/directory/v1/users",
          "path": "admin/directory/v1/users",
          "parameterOrder": [],
          "parameters": {
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify next page in the list"
            },
            "sortOrder": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order."
            },
            "projection": {
              "type": "string",
              "description": "What subset of fields to fetch for this user.",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "default": "basic",
              "location": "query"
            },
            "query": {
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string"
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "type": "string",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "location": "query"
            },
            "customFieldMask": {
              "location": "query",
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "showDeleted": {
              "location": "query",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string"
            },
            "viewType": {
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "default": "admin_view",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "default": "100",
              "description": "Maximum number of results to return.",
              "format": "int32",
              "type": "integer",
              "minimum": "1",
              "location": "query",
              "maximum": "500"
            },
            "domain": {
              "location": "query",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "type": "string"
            },
            "customer": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            }
          },
          "id": "directory.users.list"
        },
        "patch": {
          "description": "Patch Users via Apiary Patch Orchestration",
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "User"
          },
          "httpMethod": "PATCH",
          "id": "directory.users.patch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "request": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}"
        },
        "insert": {
          "description": "create user.",
          "parameters": {},
          "parameterOrder": [],
          "path": "admin/directory/v1/users",
          "response": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users",
          "request": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.insert",
          "httpMethod": "POST"
        },
        "delete": {
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.delete",
          "description": "Delete user",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ]
        },
        "get": {
          "parameters": {
            "projection": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "default": "basic",
              "type": "string",
              "description": "What subset of fields to fetch for this user."
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query",
              "type": "string"
            },
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user",
              "type": "string",
              "required": true
            },
            "viewType": {
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "type": "string",
              "location": "query",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ]
            }
          },
          "response": {
            "$ref": "User"
          },
          "description": "retrieve user",
          "path": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.get"
        },
        "signOut": {
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "POST",
          "id": "directory.users.signOut",
          "parameters": {
            "userKey": {
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "parameterOrder": [
            "userKey"
          ]
        },
        "undelete": {
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "required": true,
              "description": "The immutable id of the user",
              "type": "string",
              "location": "path"
            }
          },
          "id": "directory.users.undelete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "description": "Undelete a deleted user",
          "request": {
            "$ref": "UserUndelete"
          },
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "parameterOrder": [
            "userKey"
          ]
        },
        "update": {
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.users.update",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}",
          "description": "update user",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "response": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "httpMethod": "PUT",
          "request": {
            "$ref": "User"
          }
        },
        "makeAdmin": {
          "description": "change admin status of a user",
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "id": "directory.users.makeAdmin",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user as admin",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST"
        }
      },
      "resources": {
        "photos": {
          "methods": {
            "get": {
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.get",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Retrieve photo of a user",
              "response": {
                "$ref": "UserPhoto"
              }
            },
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "request": {
                "$ref": "UserPhoto"
              },
              "description": "Add a photo for the user",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "httpMethod": "PUT",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.update"
            },
            "delete": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "DELETE",
              "description": "Remove photos for the user",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.delete",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ]
            },
            "patch": {
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                }
              },
              "response": {
                "$ref": "UserPhoto"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Patch Photo via Apiary Patch Orchestration",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.patch",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "UserPhoto"
              }
            }
          }
        },
        "aliases": {
          "methods": {
            "insert": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "response": {
                "$ref": "Alias"
              },
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Email or immutable ID of the user"
                }
              },
              "id": "directory.users.aliases.insert",
              "parameterOrder": [
                "userKey"
              ],
              "request": {
                "$ref": "Alias"
              },
              "httpMethod": "POST",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "description": "Add a alias for the user"
            },
            "delete": {
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "description": "Remove a alias for the user",
              "httpMethod": "DELETE",
              "parameters": {
                "alias": {
                  "description": "The alias to be removed",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "userKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "type": "string"
                }
              },
              "id": "directory.users.aliases.delete"
            },
            "watch": {
              "id": "directory.users.aliases.watch",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "parameters": {
                "userKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true
                },
                "event": {
                  "location": "query",
                  "description": "Event on which subscription is intended (if subscribing)",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "parameterOrder": [
                "userKey"
              ],
              "httpMethod": "POST",
              "response": {
                "$ref": "Channel"
              },
              "request": {
                "$ref": "Channel"
              },
              "description": "Watch for changes in users list"
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "id": "directory.users.aliases.list",
              "parameters": {
                "userKey": {
                  "required": true,
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "parameterOrder": [
                "userKey"
              ],
              "response": {
                "$ref": "Aliases"
              },
              "description": "List all aliases for a user"
            }
          }
        }
      }
    },
    "resources": {
      "resources": {
        "buildings": {
          "methods": {
            "patch": {
              "response": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Patches a building via Apiary Patch Orchestration.",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "coordinatesSource": {
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "type": "string",
                  "description": "Source from which Building.coordinates are derived.",
                  "location": "query",
                  "default": "SOURCE_UNSPECIFIED",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ]
                },
                "buildingId": {
                  "type": "string",
                  "description": "The id of the building to update.",
                  "required": true,
                  "location": "path"
                }
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.buildings.patch",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "Building"
              }
            },
            "get": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                },
                "buildingId": {
                  "description": "The unique ID of the building to retrieve.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "id": "directory.resources.buildings.get",
              "description": "Retrieves a building.",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "update": {
              "response": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                },
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "location": "query",
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED"
                },
                "buildingId": {
                  "description": "The id of the building to update.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "description": "Updates a building.",
              "httpMethod": "PUT",
              "id": "directory.resources.buildings.update",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "request": {
                "$ref": "Building"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "list": {
              "httpMethod": "GET",
              "response": {
                "$ref": "Buildings"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "id": "directory.resources.buildings.list",
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                },
                "maxResults": {
                  "format": "int32",
                  "type": "integer",
                  "minimum": "1",
                  "location": "query",
                  "description": "Maximum number of results to return.",
                  "maximum": "500"
                },
                "pageToken": {
                  "type": "string",
                  "description": "Token to specify the next page in the list.",
                  "location": "query"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "description": "Retrieves a list of buildings for an account."
            },
            "insert": {
              "request": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.insert",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "coordinatesSource": {
                  "location": "query",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "type": "string",
                  "default": "SOURCE_UNSPECIFIED"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "Building"
              },
              "description": "Inserts a building.",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "httpMethod": "POST"
            },
            "delete": {
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "DELETE",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "buildingId": {
                  "location": "path",
                  "description": "The id of the building to delete.",
                  "type": "string",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Deletes a building.",
              "id": "directory.resources.buildings.delete"
            }
          }
        },
        "calendars": {
          "methods": {
            "patch": {
              "id": "directory.resources.calendars.patch",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "request": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "httpMethod": "PATCH",
              "parameters": {
                "calendarResourceId": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the calendar resource to update."
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              }
            },
            "insert": {
              "httpMethod": "POST",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "response": {
                "$ref": "CalendarResource"
              },
              "request": {
                "$ref": "CalendarResource"
              },
              "description": "Inserts a calendar resource.",
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "id": "directory.resources.calendars.insert",
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                }
              }
            },
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to update.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "id": "directory.resources.calendars.update",
              "request": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "httpMethod": "PUT",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved."
            },
            "get": {
              "description": "Retrieves a calendar resource.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.get",
              "httpMethod": "GET",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ]
            },
            "list": {
              "parameters": {
                "query": {
                  "type": "string",
                  "location": "query",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone."
                },
                "maxResults": {
                  "location": "query",
                  "maximum": "500",
                  "minimum": "1",
                  "description": "Maximum number of results to return.",
                  "type": "integer",
                  "format": "int32"
                },
                "orderBy": {
                  "location": "query",
                  "type": "string",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order."
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a list of calendar resources for an account.",
              "response": {
                "$ref": "CalendarResources"
              },
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.calendars.list"
            },
            "delete": {
              "parameters": {
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                },
                "calendarResourceId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the calendar resource to delete."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Deletes a calendar resource.",
              "id": "directory.resources.calendars.delete",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "DELETE"
            }
          }
        },
        "features": {
          "methods": {
            "insert": {
              "description": "Inserts a feature.",
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "request": {
                "$ref": "Feature"
              },
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "id": "directory.resources.features.insert",
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "delete": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.delete",
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "required": true,
                  "description": "The unique ID of the feature to delete.",
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Deletes a feature.",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ]
            },
            "update": {
              "parameters": {
                "featureKey": {
                  "description": "The unique ID of the feature to update.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              },
              "description": "Updates a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.update",
              "request": {
                "$ref": "Feature"
              },
              "httpMethod": "PUT",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "response": {
                "$ref": "Feature"
              }
            },
            "get": {
              "httpMethod": "GET",
              "id": "directory.resources.features.get",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "response": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameters": {
                "featureKey": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the feature to retrieve.",
                  "location": "path"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "description": "Retrieves a feature."
            },
            "patch": {
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "response": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "Feature"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.features.patch",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                },
                "featureKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the feature to update."
                }
              }
            },
            "list": {
              "id": "directory.resources.features.list",
              "httpMethod": "GET",
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                },
                "maxResults": {
                  "format": "int32",
                  "minimum": "1",
                  "location": "query",
                  "maximum": "500",
                  "description": "Maximum number of results to return.",
                  "type": "integer"
                }
              },
              "description": "Retrieves a list of features for an account.",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "response": {
                "$ref": "Features"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "rename": {
              "httpMethod": "POST",
              "description": "Renames a feature.",
              "parameters": {
                "oldName": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the feature to rename."
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "id": "directory.resources.features.rename",
              "request": {
                "$ref": "FeatureRename"
              },
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            }
          }
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "update": {
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query"
            },
            "deviceId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of Chrome OS Device"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "id": "directory.chromeosdevices.update",
          "httpMethod": "PUT",
          "description": "Update Chrome OS Device",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ]
        },
        "action": {
          "id": "directory.chromeosdevices.action",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "description": "Take action on Chrome OS Device",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "resourceId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of Chrome OS Device",
              "location": "path"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "httpMethod": "POST"
        },
        "patch": {
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.patch",
          "parameters": {
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "deviceId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of Chrome OS Device"
            },
            "projection": {
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            }
          },
          "httpMethod": "PATCH",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "description": "Patch Chrome OS Device"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameters": {
            "sortOrder": {
              "location": "query",
              "type": "string",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "orderBy": {
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ],
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "description": "Column to use for sorting results"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "minimum": "1",
              "type": "integer",
              "location": "query",
              "default": "100",
              "format": "int32",
              "description": "Maximum number of results to return."
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333"
            },
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "location": "query",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "id": "directory.chromeosdevices.list",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "parameterOrder": [
            "customerId"
          ]
        },
        "moveDevicesToOu": {
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "httpMethod": "POST",
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "location": "query",
              "required": true,
              "description": "Full path of the target organizational unit or its ID"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu"
        },
        "get": {
          "id": "directory.chromeosdevices.get",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "httpMethod": "GET",
          "description": "Retrieve Chrome OS Device",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            },
            "deviceId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of Chrome OS Device",
              "location": "path"
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        }
      }
    },
    "tokens": {
      "methods": {
        "get": {
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "httpMethod": "GET",
          "id": "directory.tokens.get",
          "parameters": {
            "clientId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "The Client ID of the application the token is issued to."
            },
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "description": "Get information about an access token issued by a user.",
          "response": {
            "$ref": "Token"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Delete all access tokens issued by a user for an application.",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "parameters": {
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true
            }
          },
          "id": "directory.tokens.delete",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "httpMethod": "DELETE"
        },
        "list": {
          "id": "directory.tokens.list",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "response": {
            "$ref": "Tokens"
          },
          "httpMethod": "GET",
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        }
      }
    },
    "asps": {
      "methods": {
        "list": {
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "httpMethod": "GET",
          "description": "List the ASPs issued by a user.",
          "id": "directory.asps.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "Asps"
          },
          "path": "admin/directory/v1/users/{userKey}/asps"
        },
        "get": {
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "description": "Get information about an ASP issued by a user.",
          "id": "directory.asps.get",
          "response": {
            "$ref": "Asp"
          },
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string"
            },
            "codeId": {
              "format": "int32",
              "required": true,
              "type": "integer",
              "location": "path",
              "description": "The unique ID of the ASP."
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        },
        "delete": {
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            },
            "codeId": {
              "description": "The unique ID of the ASP to be deleted.",
              "format": "int32",
              "location": "path",
              "required": true,
              "type": "integer"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "DELETE",
          "description": "Delete an ASP issued by a user.",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "httpMethod": "GET",
          "id": "directory.privileges.list",
          "response": {
            "$ref": "Privileges"
          },
          "parameterOrder": [
            "customer"
          ],
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges"
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "list": {
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.mobiledevices.list",
          "response": {
            "$ref": "MobileDevices"
          },
          "httpMethod": "GET",
          "parameters": {
            "query": {
              "type": "string",
              "location": "query",
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search"
            },
            "orderBy": {
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "description": "Column to use for sorting results"
            },
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "maximum": "100",
              "minimum": "1",
              "location": "query",
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "default": "100"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "projection": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile"
        },
        "get": {
          "id": "directory.mobiledevices.get",
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "description": "Retrieve Mobile Device",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "response": {
            "$ref": "MobileDevice"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "resourceId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of Mobile Device",
              "location": "path"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string"
            }
          }
        },
        "delete": {
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "id": "directory.mobiledevices.delete",
          "parameters": {
            "resourceId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of Mobile Device"
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            }
          },
          "description": "Delete Mobile Device"
        },
        "action": {
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            },
            "resourceId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of Mobile Device",
              "required": true
            }
          },
          "description": "Take action on Mobile Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "httpMethod": "POST",
          "id": "directory.mobiledevices.action"
        }
      }
    },
    "domains": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "Domains2"
          },
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "description": "Lists the domains of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "id": "directory.domains.list"
        },
        "get": {
          "response": {
            "$ref": "Domains"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            },
            "domainName": {
              "required": true,
              "description": "Name of domain to be retrieved",
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "httpMethod": "GET",
          "id": "directory.domains.get",
          "description": "Retrieves a domain of the customer."
        },
        "delete": {
          "description": "Deletes a domain of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "httpMethod": "DELETE",
          "parameters": {
            "domainName": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Name of domain to be deleted"
            },
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.domains.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameterOrder": [
            "customer",
            "domainName"
          ]
        },
        "insert": {
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "Domains"
          },
          "description": "Inserts a domain of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "id": "directory.domains.insert",
          "request": {
            "$ref": "Domains"
          },
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customer}/domains"
        }
      }
    },
    "domainAliases": {
      "methods": {
        "list": {
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            },
            "parentDomainName": {
              "type": "string",
              "description": "Name of the parent domain for which domain aliases are to be fetched.",
              "location": "query"
            }
          },
          "httpMethod": "GET",
          "response": {
            "$ref": "DomainAliases"
          },
          "id": "directory.domainAliases.list",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "description": "Lists the domain aliases of the customer."
        },
        "get": {
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "response": {
            "$ref": "DomainAlias"
          },
          "description": "Retrieves a domain alias of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "id": "directory.domainAliases.get",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            },
            "domainAliasName": {
              "description": "Name of domain alias to be retrieved.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          }
        },
        "insert": {
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            }
          },
          "request": {
            "$ref": "DomainAlias"
          },
          "httpMethod": "POST",
          "id": "directory.domainAliases.insert",
          "response": {
            "$ref": "DomainAlias"
          },
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "description": "Inserts a domain alias of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domainaliases"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameters": {
            "domainAliasName": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Name of domain alias to be retrieved."
            },
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.domainAliases.delete",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "description": "Deletes a domain Alias of the customer.",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ]
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "list": {
          "id": "directory.roleAssignments.list",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "description": "Retrieves a paginated list of all roleAssignments.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "response": {
            "$ref": "RoleAssignments"
          },
          "parameters": {
            "roleId": {
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "location": "query",
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify the next page in the list."
            },
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            },
            "maxResults": {
              "description": "Maximum number of results to return.",
              "minimum": "1",
              "type": "integer",
              "maximum": "200",
              "format": "int32",
              "location": "query"
            },
            "userKey": {
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "type": "string",
              "location": "query"
            }
          },
          "parameterOrder": [
            "customer"
          ]
        },
        "get": {
          "description": "Retrieve a role assignment.",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "id": "directory.roleAssignments.get",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            },
            "roleAssignmentId": {
              "location": "path",
              "description": "Immutable ID of the role assignment.",
              "type": "string",
              "required": true
            }
          },
          "response": {
            "$ref": "RoleAssignment"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ]
        },
        "delete": {
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "roleAssignmentId": {
              "description": "Immutable ID of the role assignment.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "description": "Deletes a role assignment.",
          "httpMethod": "DELETE",
          "id": "directory.roleAssignments.delete",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Creates a role assignment.",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "response": {
            "$ref": "RoleAssignment"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "httpMethod": "POST",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "request": {
            "$ref": "RoleAssignment"
          },
          "id": "directory.roleAssignments.insert"
        }
      }
    }
  }
}
