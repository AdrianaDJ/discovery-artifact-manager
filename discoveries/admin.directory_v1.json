{
  "parameters": {
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "alt": {
      "location": "query",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response.",
      "type": "string",
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "default": "true",
      "type": "boolean",
      "location": "query",
      "description": "Returns response with indentations and line breaks."
    }
  },
  "canonicalName": "directory",
  "kind": "discovery#restDescription",
  "ownerName": "Google",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "ownerDomain": "google.com",
  "schemas": {
    "Asp": {
      "type": "object",
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#asp.",
          "default": "admin#directory#asp"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the ASP."
        },
        "name": {
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created.",
          "type": "string"
        },
        "codeId": {
          "description": "The unique ID of the ASP.",
          "type": "integer",
          "format": "int32"
        },
        "creationTime": {
          "type": "string",
          "format": "int64",
          "description": "The time when the ASP was created. Expressed in Unix time format."
        },
        "lastTimeUsed": {
          "format": "int64",
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "type": "string"
        },
        "userKey": {
          "description": "The unique ID of the user who issued the ASP.",
          "type": "string"
        }
      },
      "id": "Asp"
    },
    "Groups": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "Group"
          },
          "description": "List of group objects."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#groups",
          "type": "string"
        }
      },
      "id": "Groups",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Aliases": {
      "description": "JSON response template to list aliases in Directory API.",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#aliases"
        },
        "etag": {
          "type": "string"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        }
      },
      "id": "Aliases"
    },
    "UserPosixAccount": {
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix.",
      "id": "UserPosixAccount",
      "type": "object",
      "properties": {
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        },
        "shell": {
          "type": "string",
          "description": "The path to the login shell for this account."
        },
        "gecos": {
          "type": "string",
          "description": "The GECOS (user information) for this account."
        },
        "gid": {
          "description": "The default group ID.",
          "type": "string",
          "format": "uint64"
        },
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary account within the SystemId."
        },
        "operatingSystemType": {
          "description": "The operating system type for this account.",
          "type": "string"
        },
        "uid": {
          "type": "string",
          "format": "uint64",
          "description": "The POSIX compliant user ID."
        },
        "accountId": {
          "type": "string",
          "description": "A POSIX account field identifier."
        },
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        }
      }
    },
    "FeatureInstance": {
      "description": "JSON template for a feature instance.",
      "type": "object",
      "id": "FeatureInstance",
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      }
    },
    "Feature": {
      "id": "Feature",
      "properties": {
        "name": {
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "description": "The name of the feature.",
          "type": "string"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#Feature"
        }
      },
      "description": "JSON template for Feature object in Directory API.",
      "type": "object"
    },
    "User": {
      "id": "User",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "relations": {
          "description": "The Relations of User *",
          "type": "any"
        },
        "archived": {
          "type": "boolean",
          "description": "Indicates if user is archived."
        },
        "hashFunction": {
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt",
          "type": "string"
        },
        "organizations": {
          "description": "Organizations of User",
          "type": "any"
        },
        "nonEditableAliases": {
          "description": "Output only. List of non editable aliases (Read-only)",
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ipWhitelisted": {
          "description": "Boolean indicating if ip is whitelisted",
          "type": "boolean"
        },
        "isAdmin": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is admin (Read-only)"
        },
        "languages": {
          "type": "any",
          "description": "Languages of User"
        },
        "password": {
          "description": "User's password",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "websites": {
          "description": "Websites of User",
          "type": "any"
        },
        "customerId": {
          "description": "Output only. CustomerId of User (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "recoveryEmail": {
          "type": "string",
          "description": "Recovery email of the user."
        },
        "isMailboxSetup": {
          "type": "boolean",
          "description": "Output only. Is mailbox setup (Read-only)",
          "readOnly": true
        },
        "primaryEmail": {
          "type": "string",
          "description": "username of User",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "recoveryPhone": {
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
          "type": "string"
        },
        "ims": {
          "description": "User's Instant Messenger",
          "type": "any"
        },
        "kind": {
          "default": "admin#directory#user",
          "readOnly": true,
          "description": "Output only. Kind of resource this is.",
          "type": "string"
        },
        "agreedToTerms": {
          "description": "Output only. Indicates if user has agreed to terms (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "thumbnailPhotoUrl": {
          "readOnly": true,
          "description": "Output only. Photo Url of the user (Read-only)",
          "type": "string"
        },
        "name": {
          "description": "User's name",
          "$ref": "UserName",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "locations": {
          "type": "any",
          "description": "Locations of User"
        },
        "creationTime": {
          "readOnly": true,
          "format": "date-time",
          "description": "User's G Suite account creation time. (Read-only)",
          "type": "string"
        },
        "phones": {
          "description": "Phone numbers of User",
          "type": "any"
        },
        "isEnforcedIn2Sv": {
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "emails": {
          "type": "any",
          "description": "Emails of User"
        },
        "keywords": {
          "type": "any",
          "description": "Keywords of User"
        },
        "includeInGlobalAddressList": {
          "type": "boolean",
          "description": "Boolean indicating if user is included in Global Address List"
        },
        "addresses": {
          "description": "Addresses of User",
          "type": "any"
        },
        "gender": {
          "type": "any",
          "description": "Gender of User"
        },
        "sshPublicKeys": {
          "description": "The SSH public keys of User",
          "type": "any"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        },
        "customSchemas": {
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          },
          "description": "Custom fields of the user.",
          "type": "object"
        },
        "suspensionReason": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Suspension reason if user is suspended (Read-only)"
        },
        "posixAccounts": {
          "description": "The POSIX accounts of User",
          "type": "any"
        },
        "aliases": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          },
          "description": "Output only. List of aliases (Read-only)"
        },
        "isEnrolledIn2Sv": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Is enrolled in 2-step verification (Read-only)"
        },
        "isDelegatedAdmin": {
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)",
          "type": "boolean"
        },
        "suspended": {
          "description": "Indicates if user is suspended.",
          "type": "boolean"
        },
        "deletionTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "etag": {
          "description": "Output only. ETag of the resource.",
          "type": "string",
          "readOnly": true
        },
        "changePasswordAtNextLogin": {
          "type": "boolean",
          "description": "Boolean indicating if the user should change password in next login"
        },
        "lastLoginTime": {
          "format": "date-time",
          "type": "string",
          "description": "User's last login time. (Read-only)",
          "readOnly": true
        },
        "thumbnailPhotoEtag": {
          "type": "string",
          "description": "Output only. ETag of the user's photo (Read-only)",
          "readOnly": true
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "externalIds": {
          "type": "any",
          "description": "The external Ids of User *"
        },
        "notes": {
          "description": "Notes of User",
          "type": "any"
        }
      },
      "type": "object"
    },
    "Tokens": {
      "type": "object",
      "id": "Tokens",
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#tokenList",
          "description": "The type of the API resource. This is always admin#directory#tokenList."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Token"
          },
          "description": "A list of Token resources."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "UserName": {
      "id": "UserName",
      "type": "object",
      "properties": {
        "familyName": {
          "description": "Last Name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string"
        },
        "givenName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "First Name",
          "type": "string"
        },
        "fullName": {
          "type": "string",
          "description": "Full Name"
        }
      }
    },
    "Users": {
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#users",
          "type": "string"
        },
        "users": {
          "type": "array",
          "description": "List of user objects.",
          "items": {
            "$ref": "User"
          }
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "trigger_event": {
          "type": "string",
          "description": "Event that triggered this response (only used in case of Push Response)"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "Users",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserPhoto": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "primaryEmail": {
          "type": "string",
          "description": "Primary email of User (Read-only)"
        },
        "photoData": {
          "format": "byte",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "type": "string",
          "description": "Base64 encoded photo data"
        },
        "mimeType": {
          "type": "string",
          "description": "Mime Type of the photo"
        },
        "width": {
          "description": "Width in pixels of the photo",
          "format": "int32",
          "type": "integer"
        },
        "height": {
          "format": "int32",
          "description": "Height in pixels of the photo",
          "type": "integer"
        },
        "kind": {
          "default": "admin#directory#user#photo",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "UserPhoto"
    },
    "FeatureRename": {
      "properties": {
        "newName": {
          "type": "string",
          "description": "New name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          }
        }
      },
      "id": "FeatureRename",
      "type": "object"
    },
    "DomainAliases": {
      "properties": {
        "domainAliases": {
          "description": "List of domain alias objects.",
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#domainAliases"
        }
      },
      "type": "object",
      "id": "DomainAliases"
    },
    "UserUndelete": {
      "properties": {
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        }
      },
      "id": "UserUndelete",
      "type": "object"
    },
    "UserEmail": {
      "description": "JSON template for an email.",
      "type": "object",
      "properties": {
        "primary": {
          "description": "If this is user's primary email. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "address": {
          "type": "string",
          "description": "Email id of the user."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value."
        }
      },
      "id": "UserEmail"
    },
    "UserSshPublicKey": {
      "properties": {
        "expirationTimeUsec": {
          "description": "An expiration time in microseconds since epoch.",
          "type": "string",
          "format": "int64"
        },
        "key": {
          "type": "string",
          "description": "An SSH public key."
        },
        "fingerprint": {
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
          "type": "string",
          "readOnly": true
        }
      },
      "description": "JSON template for a POSIX account entry.",
      "id": "UserSshPublicKey",
      "type": "object"
    },
    "RoleAssignment": {
      "properties": {
        "orgUnitId": {
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.",
          "type": "string"
        },
        "assignedTo": {
          "description": "The unique ID of the user this role is assigned to.",
          "type": "string"
        },
        "roleAssignmentId": {
          "description": "ID of this roleAssignment.",
          "format": "int64",
          "type": "string"
        },
        "roleId": {
          "description": "The ID of the role that is assigned.",
          "type": "string",
          "format": "int64"
        },
        "kind": {
          "default": "admin#directory#roleAssignment",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roleAssignment."
        },
        "scopeType": {
          "type": "string",
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT "
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "RoleAssignment",
      "type": "object"
    },
    "UserKeyword": {
      "description": "JSON template for a keyword entry.",
      "type": "object",
      "id": "UserKeyword",
      "properties": {
        "value": {
          "type": "string",
          "description": "Keyword."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      }
    },
    "UserIm": {
      "description": "JSON template for instant messenger of an user.",
      "id": "UserIm",
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary im. Only one entry could be marked as primary."
        },
        "customProtocol": {
          "description": "Custom protocol.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "protocol": {
          "type": "string",
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "im": {
          "description": "Instant messenger id.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Members": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "description": "List of member objects.",
          "items": {
            "$ref": "Member"
          }
        },
        "kind": {
          "default": "admin#directory#members",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        }
      },
      "id": "Members"
    },
    "UserAbout": {
      "description": "JSON template for About (notes) of a user in Directory API.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Actual value of notes."
        },
        "contentType": {
          "type": "string",
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text."
        }
      },
      "type": "object",
      "id": "UserAbout"
    },
    "Domains": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "isPrimary": {
          "description": "Indicates if the domain is a primary domain (Read-only).",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#domain"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain. (Read-only)."
        },
        "creationTime": {
          "description": "Creation time of the domain. (Read-only).",
          "format": "int64",
          "type": "string"
        },
        "domainName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The domain name of the customer."
        },
        "domainAliases": {
          "type": "array",
          "description": "List of domain alias objects. (Read-only)",
          "items": {
            "$ref": "DomainAlias"
          }
        }
      },
      "id": "Domains",
      "type": "object"
    },
    "Group": {
      "id": "Group",
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#group",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "adminCreated": {
          "type": "boolean",
          "description": "Is the group created by admin (Read-only) *"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of Group (Read-only)"
        },
        "email": {
          "type": "string",
          "description": "Email of Group",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          }
        },
        "description": {
          "description": "Description of the group",
          "type": "string"
        },
        "directMembersCount": {
          "description": "Group direct members count",
          "format": "int64",
          "type": "string"
        },
        "aliases": {
          "type": "array",
          "description": "List of aliases (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "nonEditableAliases": {
          "description": "List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Group name"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Schemas": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "schemas": {
          "type": "array",
          "description": "List of UserSchema objects.",
          "items": {
            "$ref": "Schema"
          }
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#schemas",
          "type": "string"
        }
      },
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Schemas"
    },
    "MobileDevices": {
      "type": "object",
      "id": "MobileDevices",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#mobiledevices",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "mobiledevices": {
          "items": {
            "$ref": "MobileDevice"
          },
          "type": "array",
          "description": "List of Mobile Device objects."
        }
      }
    },
    "Schema": {
      "type": "object",
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "displayName": {
          "description": "Display name for the schema.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "fields": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "type": "array",
          "description": "Fields of Schema"
        },
        "schemaId": {
          "description": "Unique identifier of Schema (Read-only)",
          "type": "string"
        },
        "schemaName": {
          "type": "string",
          "description": "Schema name",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#schema"
        }
      },
      "id": "Schema"
    },
    "UserOrganization": {
      "properties": {
        "title": {
          "description": "Title (designation) of the user in the organization.",
          "type": "string"
        },
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "domain": {
          "description": "The domain to which the organization belongs to.",
          "type": "string"
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of the organization."
        },
        "primary": {
          "type": "boolean",
          "description": "If it user's primary organization."
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "description": {
          "type": "string",
          "description": "Description of the organization."
        },
        "costCenter": {
          "description": "The cost center of the users department.",
          "type": "string"
        },
        "fullTimeEquivalent": {
          "format": "int32",
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
          "type": "integer"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Name of the organization"
        }
      },
      "type": "object",
      "id": "UserOrganization",
      "description": "JSON template for an organization entry."
    },
    "UserRelation": {
      "description": "JSON template for a relation entry.",
      "properties": {
        "value": {
          "description": "The name of the relation.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner.",
          "type": "string"
        }
      },
      "id": "UserRelation",
      "type": "object"
    },
    "Customer": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Customer",
      "properties": {
        "alternateEmail": {
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain",
          "type": "string"
        },
        "phoneNumber": {
          "description": "The customer's contact phone number in E.164 format.",
          "type": "string"
        },
        "customerDomain": {
          "type": "string",
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer."
        },
        "customerCreationTime": {
          "format": "date-time",
          "type": "string",
          "description": "The customer's creation time (Readonly)"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "postalAddress": {
          "description": "The customer's postal address information.",
          "$ref": "CustomerPostalAddress"
        },
        "kind": {
          "type": "string",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer",
          "default": "admin#directory#customer"
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. The default value is en-US",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The unique ID for the customer's G Suite account. (Readonly)"
        }
      }
    },
    "DomainAlias": {
      "type": "object",
      "properties": {
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain alias. (Read-only)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#domainAlias",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "parentDomainName": {
          "type": "string",
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        },
        "creationTime": {
          "format": "int64",
          "description": "The creation time of the domain alias. (Read-only).",
          "type": "string"
        },
        "domainAliasName": {
          "description": "The domain alias name.",
          "type": "string"
        }
      },
      "id": "DomainAlias"
    },
    "BuildingAddress": {
      "properties": {
        "postalCode": {
          "type": "string",
          "description": "Optional. Postal code of the address."
        },
        "languageCode": {
          "description": "Optional. BCP-47 language code of the contents of this address (if known).",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines."
        },
        "sublocality": {
          "description": "Optional. Sublocality of the address.",
          "type": "string"
        },
        "administrativeArea": {
          "type": "string",
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region."
        },
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        },
        "addressLines": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Unstructured address lines describing the lower levels of an address."
        }
      },
      "description": "Public API: Resources.buildings",
      "type": "object",
      "id": "BuildingAddress"
    },
    "VerificationCodes": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCodesList.",
          "default": "admin#directory#verificationCodesList",
          "type": "string"
        },
        "items": {
          "description": "A list of verification code resources.",
          "type": "array",
          "items": {
            "$ref": "VerificationCode"
          }
        }
      },
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "VerificationCodes"
    },
    "UserPhone": {
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "value": {
          "description": "Phone number.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary phone or not.",
          "type": "boolean"
        }
      },
      "description": "JSON template for a phone entry.",
      "type": "object",
      "id": "UserPhone"
    },
    "UserAddress": {
      "id": "UserAddress",
      "description": "JSON template for address.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value."
        },
        "region": {
          "type": "string",
          "description": "Region."
        },
        "formatted": {
          "type": "string",
          "description": "Formatted address."
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        },
        "countryCode": {
          "description": "Country code.",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Locality."
        },
        "streetAddress": {
          "description": "Street.",
          "type": "string"
        },
        "extendedAddress": {
          "description": "Extended Address.",
          "type": "string"
        },
        "poBox": {
          "description": "Other parts of address.",
          "type": "string"
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary address. Only one entry could be marked as primary."
        },
        "sourceIsStructured": {
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered.",
          "type": "boolean"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MembersHasMember": {
      "type": "object",
      "description": "JSON template for Has Member response in Directory API.",
      "id": "MembersHasMember",
      "properties": {
        "isMember": {
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "ChromeOsMoveDevicesToOu": {
      "id": "ChromeOsMoveDevicesToOu",
      "properties": {
        "deviceIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "description": "ChromeOs Devices to be moved to OU"
        }
      },
      "type": "object"
    },
    "Roles": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#roles",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roles."
        },
        "items": {
          "items": {
            "$ref": "Role"
          },
          "type": "array",
          "description": "A list of Role resources."
        },
        "nextPageToken": {
          "type": "string"
        }
      },
      "id": "Roles"
    },
    "BuildingCoordinates": {
      "description": "Public API: Resources.buildings",
      "properties": {
        "longitude": {
          "type": "number",
          "description": "Longitude in decimal degrees.",
          "format": "double"
        },
        "latitude": {
          "format": "double",
          "type": "number",
          "description": "Latitude in decimal degrees."
        }
      },
      "id": "BuildingCoordinates",
      "type": "object"
    },
    "UserLanguage": {
      "type": "object",
      "description": "JSON template for a language entry.",
      "id": "UserLanguage",
      "properties": {
        "customLanguage": {
          "type": "string",
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set"
        },
        "languageCode": {
          "type": "string",
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException."
        }
      }
    },
    "UserMakeAdmin": {
      "id": "UserMakeAdmin",
      "properties": {
        "status": {
          "type": "boolean",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "description": "Boolean indicating new admin status of the user"
        }
      },
      "type": "object"
    },
    "MobileDeviceAction": {
      "type": "object",
      "id": "MobileDeviceAction",
      "properties": {
        "action": {
          "type": "string",
          "description": "Action to be taken on the Mobile Device",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          }
        }
      }
    },
    "CustomerPostalAddress": {
      "id": "CustomerPostalAddress",
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "postalCode": {
          "type": "string",
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element."
        },
        "addressLine3": {
          "type": "string",
          "description": "Address line 3 of the address."
        },
        "locality": {
          "description": "Name of the locality. An example of a locality value is the city of San Francisco.",
          "type": "string"
        },
        "addressLine2": {
          "type": "string",
          "description": "Address line 2 of the address."
        },
        "countryCode": {
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements.",
          "type": "string"
        },
        "organizationName": {
          "description": "The company or company division name.",
          "type": "string"
        },
        "contactName": {
          "description": "The customer contact's name.",
          "type": "string"
        },
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        },
        "region": {
          "description": "Name of the region. An example of a region value is NY for the state of New York.",
          "type": "string"
        }
      }
    },
    "UserGender": {
      "properties": {
        "customGender": {
          "description": "Custom gender.",
          "type": "string"
        },
        "type": {
          "description": "Gender.",
          "type": "string"
        },
        "addressMeAs": {
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserGender"
    },
    "OrgUnits": {
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "organizationUnits": {
          "items": {
            "$ref": "OrgUnit"
          },
          "type": "array",
          "description": "List of user objects."
        },
        "kind": {
          "default": "admin#directory#orgUnits",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "OrgUnits"
    },
    "Token": {
      "id": "Token",
      "type": "object",
      "properties": {
        "nativeApp": {
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device.",
          "type": "boolean"
        },
        "displayText": {
          "description": "The displayable name of the application the token is issued to.",
          "type": "string"
        },
        "clientId": {
          "type": "string",
          "description": "The Client ID of the application the token is issued to."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#token.",
          "default": "admin#directory#token",
          "type": "string"
        },
        "userKey": {
          "description": "The unique ID of the user that issued the token.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "anonymous": {
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID.",
          "type": "boolean"
        },
        "scopes": {
          "items": {
            "type": "string"
          },
          "description": "A list of authorization scopes the application is granted.",
          "type": "array"
        }
      },
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "CalendarResource": {
      "id": "CalendarResource",
      "properties": {
        "featureInstances": {
          "description": "Instances of features for the calendar resource.",
          "type": "any"
        },
        "resourceType": {
          "description": "The type of the calendar resource, intended for non-room resources.",
          "type": "string"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "resourceCategory": {
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.",
          "type": "string"
        },
        "resourceEmail": {
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource.",
          "type": "string"
        },
        "userVisibleDescription": {
          "type": "string",
          "description": "Description of the resource, visible to users and admins."
        },
        "resourceName": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string",
          "description": "The name of the calendar resource. For example, \"Training Room 1A\"."
        },
        "floorSection": {
          "type": "string",
          "description": "Name of the section within a floor a resource is located in."
        },
        "generatedResourceName": {
          "type": "string",
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\"."
        },
        "capacity": {
          "description": "Capacity of a resource, number of seats in a room.",
          "type": "integer",
          "format": "int32"
        },
        "floorName": {
          "description": "Name of the floor a resource is located on.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "default": "admin#directory#resources#calendars#CalendarResource"
        },
        "resourceId": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string",
          "description": "The unique ID for the calendar resource."
        },
        "buildingId": {
          "description": "Unique ID for the building a resource is located in.",
          "type": "string"
        },
        "resourceDescription": {
          "type": "string",
          "description": "Description of the resource, visible only to admins."
        }
      },
      "description": "Public API: Resources.calendars",
      "type": "object"
    },
    "UserExternalId": {
      "type": "object",
      "description": "JSON template for an externalId entry.",
      "properties": {
        "value": {
          "description": "The value of the id.",
          "type": "string"
        },
        "type": {
          "description": "The type of the Id.",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        }
      },
      "id": "UserExternalId"
    },
    "SchemaFieldSpec": {
      "properties": {
        "fieldType": {
          "description": "Type of the field.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "numericIndexingSpec": {
          "properties": {
            "maxValue": {
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double",
              "type": "number"
            },
            "minValue": {
              "format": "double",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "type": "number"
            }
          },
          "type": "object",
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "readAccessType": {
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\".",
          "default": "ALL_DOMAIN_USERS",
          "type": "string"
        },
        "displayName": {
          "description": "Display Name of the field.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "fieldId": {
          "description": "Unique identifier of Field (Read-only)",
          "type": "string"
        },
        "fieldName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Name of the field.",
          "type": "string"
        },
        "indexed": {
          "default": "true",
          "description": "Boolean specifying whether the field is indexed or not.",
          "type": "boolean"
        },
        "multiValued": {
          "type": "boolean",
          "description": "Boolean specifying whether this is a multi-valued field or not."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#schema#fieldspec",
          "description": "Kind of resource this is."
        }
      },
      "id": "SchemaFieldSpec",
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "Alias": {
      "properties": {
        "etag": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#alias"
        },
        "primaryEmail": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        }
      },
      "id": "Alias",
      "type": "object",
      "description": "JSON template for Alias object in Directory API."
    },
    "ChromeOsDevice": {
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "ChromeOsDevice",
      "properties": {
        "annotatedUser": {
          "description": "User of the device",
          "type": "string"
        },
        "diskVolumeReports": {
          "type": "array",
          "items": {
            "properties": {
              "volumeInfo": {
                "type": "array",
                "description": "Disk volumes",
                "items": {
                  "type": "object",
                  "properties": {
                    "storageTotal": {
                      "format": "int64",
                      "description": "Total disk space [in bytes]",
                      "type": "string"
                    },
                    "storageFree": {
                      "type": "string",
                      "format": "int64",
                      "description": "Free disk space [in bytes]"
                    },
                    "volumeId": {
                      "description": "Volume id",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "type": "object"
          },
          "description": "Reports of disk space and other info about mounted/connected volumes."
        },
        "supportEndDate": {
          "format": "date-time",
          "type": "string",
          "description": "Final date the device will be supported (Read-only)"
        },
        "annotatedLocation": {
          "type": "string",
          "description": "Address or location of the device as noted by the administrator"
        },
        "osVersion": {
          "description": "Chromebook Os Version (Read-only)",
          "type": "string"
        },
        "tpmVersionInfo": {
          "type": "object",
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "properties": {
            "family": {
              "type": "string",
              "description": "TPM family."
            },
            "firmwareVersion": {
              "description": "TPM firmware version.",
              "type": "string"
            },
            "manufacturer": {
              "type": "string",
              "description": "TPM manufacturer code."
            },
            "tpmModel": {
              "type": "string",
              "description": "TPM model number."
            },
            "vendorSpecific": {
              "description": "Vendor-specific information such as Vendor ID.",
              "type": "string"
            },
            "specLevel": {
              "type": "string",
              "description": "TPM specification level."
            }
          }
        },
        "cpuStatusReports": {
          "type": "array",
          "description": "Reports of CPU utilization and temperature (Read-only)",
          "items": {
            "properties": {
              "cpuUtilizationPercentageInfo": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "reportTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time the report was received."
              },
              "cpuTemperatureInfo": {
                "description": "List of CPU temperature samples.",
                "items": {
                  "type": "object",
                  "properties": {
                    "temperature": {
                      "format": "int32",
                      "description": "Temperature in Celsius degrees.",
                      "type": "integer"
                    },
                    "label": {
                      "type": "string",
                      "description": "CPU label"
                    }
                  }
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "platformVersion": {
          "description": "Chromebook platform version (Read-only)",
          "type": "string"
        },
        "serialNumber": {
          "type": "string",
          "description": "Chromebook serial number (Read-only)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "macAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on wifi network interface (Read-only)"
        },
        "model": {
          "description": "Chromebook Model (Read-only)",
          "type": "string"
        },
        "notes": {
          "description": "Notes added by the administrator",
          "type": "string"
        },
        "deviceFiles": {
          "description": "List of device files to download (Read-only)",
          "items": {
            "properties": {
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              },
              "name": {
                "description": "File name",
                "type": "string"
              },
              "createTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time the file was created"
              },
              "type": {
                "type": "string",
                "description": "File type"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "willAutoRenew": {
          "type": "boolean",
          "description": "Will Chromebook auto renew after support end date (Read-only)"
        },
        "activeTimeRanges": {
          "type": "array",
          "items": {
            "properties": {
              "activeTime": {
                "description": "Duration in milliseconds",
                "format": "int32",
                "type": "integer"
              },
              "date": {
                "type": "string",
                "description": "Date of usage",
                "format": "date"
              }
            },
            "type": "object"
          },
          "description": "List of active time ranges (Read-only)"
        },
        "ethernetMacAddress0": {
          "type": "string",
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#chromeosdevice",
          "type": "string"
        },
        "systemRamFreeReports": {
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "type": "array",
          "items": {
            "properties": {
              "reportTime": {
                "description": "Date and time the report was received.",
                "type": "string",
                "format": "date-time"
              },
              "systemRamFreeInfo": {
                "items": {
                  "format": "int64",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "ethernetMacAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)"
        },
        "lastEnrollmentTime": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was last enrolled (Read-only)"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of the device"
        },
        "recentUsers": {
          "type": "array",
          "description": "List of recent device users, in descending order by last login time (Read-only)",
          "items": {
            "properties": {
              "email": {
                "description": "Email address of the user. Present only if the user type is managed",
                "type": "string"
              },
              "type": {
                "type": "string",
                "description": "The type of the user"
              }
            },
            "type": "object"
          }
        },
        "autoUpdateExpiration": {
          "type": "string",
          "format": "int64",
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support"
        },
        "dockMacAddress": {
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "manufactureDate": {
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
          "type": "string"
        },
        "firmwareVersion": {
          "type": "string",
          "description": "Chromebook firmware version (Read-only)"
        },
        "annotatedAssetId": {
          "type": "string",
          "description": "AssetId specified during enrollment or through later annotation"
        },
        "bootMode": {
          "description": "Chromebook boot mode (Read-only)",
          "type": "string"
        },
        "orderNumber": {
          "type": "string",
          "description": "Chromebook order number (Read-only)"
        },
        "deviceId": {
          "type": "string",
          "description": "Unique identifier of Chrome OS Device (Read-only)"
        },
        "systemRamTotal": {
          "type": "string",
          "format": "int64",
          "description": "Total RAM on the device [in bytes] (Read-only)"
        },
        "lastKnownNetwork": {
          "items": {
            "properties": {
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              },
              "ipAddress": {
                "type": "string",
                "description": "The IP address."
              }
            },
            "description": "Information for an ip address.",
            "type": "object"
          },
          "description": "Contains last known network (Read-only)",
          "type": "array"
        },
        "meid": {
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)",
          "type": "string"
        },
        "status": {
          "description": "status of the device (Read-only)",
          "type": "string"
        },
        "lastSync": {
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        }
      }
    },
    "Features": {
      "description": "Public API: Resources.features",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#features#featuresList",
          "description": "Kind of resource this is."
        },
        "features": {
          "items": {
            "$ref": "Feature"
          },
          "type": "array",
          "description": "The Features in this page of results."
        }
      },
      "id": "Features"
    },
    "UserWebsite": {
      "properties": {
        "primary": {
          "description": "If this is user's primary website or not.",
          "type": "boolean"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Website."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserWebsite",
      "description": "JSON template for a website entry."
    },
    "ChromeOsDevices": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "chromeosdevices": {
          "type": "array",
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "description": "List of Chrome OS Device objects."
        },
        "kind": {
          "default": "admin#directory#chromeosdevices",
          "description": "Kind of resource this is.",
          "type": "string"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "ChromeOsDevices"
    },
    "Privileges": {
      "id": "Privileges",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "A list of Privilege resources.",
          "items": {
            "$ref": "Privilege"
          }
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "type": "string",
          "default": "admin#directory#privileges"
        }
      },
      "type": "object"
    },
    "OrgUnit": {
      "properties": {
        "orgUnitPath": {
          "description": "Path of OrgUnit",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#orgUnit",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "name": {
          "description": "Name of OrgUnit",
          "type": "string",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          }
        },
        "parentOrgUnitId": {
          "description": "Id of parent OrgUnit",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Description of OrgUnit"
        },
        "orgUnitId": {
          "type": "string",
          "description": "Id of OrgUnit"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "parentOrgUnitPath": {
          "type": "string",
          "description": "Path of parent OrgUnit"
        },
        "blockInheritance": {
          "type": "boolean",
          "description": "Should block inheritance"
        }
      },
      "type": "object",
      "id": "OrgUnit",
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "VerificationCode": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "verificationCode": {
          "type": "string",
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result."
        },
        "userId": {
          "description": "The obfuscated unique ID of the user.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#verificationCode",
          "description": "The type of the resource. This is always admin#directory#verificationCode."
        }
      },
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "VerificationCode"
    },
    "UserLocation": {
      "type": "object",
      "id": "UserLocation",
      "properties": {
        "deskCode": {
          "type": "string",
          "description": "Most specific textual code of individual desk location."
        },
        "buildingId": {
          "type": "string",
          "description": "Building Identifier."
        },
        "floorName": {
          "type": "string",
          "description": "Floor name/number."
        },
        "floorSection": {
          "type": "string",
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values."
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value."
        }
      },
      "description": "JSON template for a location entry."
    },
    "CalendarResources": {
      "id": "CalendarResources",
      "description": "Public API: Resources.calendars",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "items": {
          "description": "The CalendarResources in this page of results.",
          "items": {
            "$ref": "CalendarResource"
          },
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "type": "string",
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList."
        }
      },
      "type": "object"
    },
    "RoleAssignments": {
      "id": "RoleAssignments",
      "properties": {
        "nextPageToken": {
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#roleAssignments .",
          "type": "string",
          "default": "admin#directory#roleAssignments"
        },
        "items": {
          "items": {
            "$ref": "RoleAssignment"
          },
          "type": "array",
          "description": "A list of RoleAssignment resources."
        }
      },
      "type": "object"
    },
    "Channel": {
      "id": "Channel",
      "description": "An notification channel used to watch for resource changes.",
      "type": "object",
      "properties": {
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "type": "object"
        },
        "resourceId": {
          "type": "string",
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions."
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "payload": {
          "type": "boolean",
          "description": "A Boolean value to indicate whether payload is wanted. Optional."
        },
        "kind": {
          "default": "api#channel",
          "type": "string",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\"."
        },
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "expiration": {
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "type": "string",
          "format": "int64"
        },
        "id": {
          "description": "A UUID or similar unique string that identifies this channel.",
          "type": "string"
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        },
        "token": {
          "type": "string",
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional."
        }
      }
    },
    "Domains2": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domains",
          "description": "Kind of resource this is."
        },
        "domains": {
          "items": {
            "$ref": "Domains"
          },
          "type": "array",
          "description": "List of domain objects."
        }
      },
      "id": "Domains2",
      "type": "object"
    },
    "Member": {
      "type": "object",
      "id": "Member",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email of member (Read-only)"
        },
        "role": {
          "type": "string",
          "description": "Role of member"
        },
        "status": {
          "type": "string",
          "description": "Status of member (Immutable)"
        },
        "type": {
          "description": "Type of member (Immutable)",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#member",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "delivery_settings": {
          "type": "string",
          "description": "Delivery settings of member"
        }
      }
    },
    "ChromeOsDeviceAction": {
      "type": "object",
      "id": "ChromeOsDeviceAction",
      "properties": {
        "deprovisionReason": {
          "type": "string"
        },
        "action": {
          "type": "string",
          "description": "Action to be taken on the ChromeOs Device",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          }
        }
      }
    },
    "UserCustomProperties": {
      "type": "object",
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "additionalProperties": {
        "type": "any"
      },
      "id": "UserCustomProperties"
    },
    "Buildings": {
      "properties": {
        "buildings": {
          "type": "array",
          "description": "The Buildings in this page of results.",
          "items": {
            "$ref": "Building"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "kind": {
          "default": "admin#directory#resources#buildings#buildingsList",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "id": "Buildings",
      "description": "Public API: Resources.buildings",
      "type": "object"
    },
    "Role": {
      "properties": {
        "isSystemRole": {
          "type": "boolean",
          "description": "Returns true if this is a pre-defined system role."
        },
        "isSuperAdminRole": {
          "description": "Returns true if the role is a super admin role.",
          "type": "boolean"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#role",
          "description": "The type of the API resource. This is always admin#directory#role."
        },
        "rolePrivileges": {
          "items": {
            "properties": {
              "privilegeName": {
                "type": "string",
                "description": "The name of the privilege."
              },
              "serviceId": {
                "type": "string",
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
              }
            },
            "type": "object"
          },
          "description": "The set of privileges that are granted to this role.",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "array"
        },
        "roleId": {
          "format": "int64",
          "description": "ID of the role.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "roleName": {
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "description": "Name of the role.",
          "type": "string"
        },
        "roleDescription": {
          "type": "string",
          "description": "A short description of the role."
        }
      },
      "id": "Role",
      "type": "object"
    },
    "Building": {
      "id": "Building",
      "type": "object",
      "description": "Public API: Resources.buildings",
      "properties": {
        "floorNames": {
          "items": {
            "type": "string"
          },
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#resources#buildings#Building",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "description": {
          "description": "A brief description of the building. For example, \"Chelsea Market\".",
          "type": "string"
        },
        "buildingId": {
          "type": "string",
          "description": "Unique identifier for the building. The maximum length is 100 characters."
        },
        "coordinates": {
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees.",
          "$ref": "BuildingCoordinates"
        },
        "address": {
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required.",
          "$ref": "BuildingAddress"
        },
        "buildingName": {
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters.",
          "type": "string"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "Asps": {
      "id": "Asps",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of ASP resources.",
          "items": {
            "$ref": "Asp"
          }
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#aspList.",
          "type": "string",
          "default": "admin#directory#aspList"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "Privilege": {
      "type": "object",
      "id": "Privilege",
      "properties": {
        "isOuScopable": {
          "description": "If the privilege can be restricted to an organization unit.",
          "type": "boolean"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "serviceId": {
          "type": "string",
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#privilege.",
          "default": "admin#directory#privilege",
          "type": "string"
        },
        "serviceName": {
          "type": "string",
          "description": "The name of the service this privilege is for."
        },
        "childPrivileges": {
          "type": "array",
          "items": {
            "$ref": "Privilege"
          },
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege."
        },
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        }
      }
    },
    "MobileDevice": {
      "type": "object",
      "properties": {
        "lastSync": {
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        },
        "userAgent": {
          "description": "Mobile Device user agent",
          "type": "string"
        },
        "brand": {
          "description": "Mobile Device Brand (Read-only)",
          "type": "string"
        },
        "email": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of owner user's email addresses (Read-only)"
        },
        "kind": {
          "default": "admin#directory#mobiledevice",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "devicePasswordStatus": {
          "type": "string",
          "description": "DevicePasswordStatus (Read-only)"
        },
        "applications": {
          "description": "List of applications installed on Mobile Device",
          "items": {
            "properties": {
              "packageName": {
                "type": "string",
                "description": "Package name of application"
              },
              "versionName": {
                "type": "string",
                "description": "Version name of application"
              },
              "displayName": {
                "type": "string",
                "description": "Display name of application"
              },
              "permission": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of Permissions for application"
              },
              "versionCode": {
                "type": "integer",
                "format": "int32",
                "description": "Version code of application"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "firstSync": {
          "type": "string",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time"
        },
        "name": {
          "description": "List of owner user's names (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "serialNumber": {
          "type": "string",
          "description": "Mobile Device SSN or Serial Number (Read-only)"
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "managedAccountIsOnOwnerProfile": {
          "type": "boolean",
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)"
        },
        "bootloaderVersion": {
          "description": "Mobile Device Bootloader version (Read-only)",
          "type": "string"
        },
        "buildNumber": {
          "description": "Mobile Device Build number (Read-only)",
          "type": "string"
        },
        "model": {
          "description": "Name of the model of the device",
          "type": "string"
        },
        "meid": {
          "type": "string",
          "description": "Mobile Device MEID number (Read-only)"
        },
        "securityPatchLevel": {
          "format": "int64",
          "description": "Mobile Device Security patch level (Read-only)",
          "type": "string"
        },
        "os": {
          "description": "Name of the mobile operating system",
          "type": "string"
        },
        "supportsWorkProfile": {
          "type": "boolean",
          "description": "Work profile supported on device (Read-only)"
        },
        "wifiMacAddress": {
          "type": "string",
          "description": "Mobile Device WiFi MAC address (Read-only)"
        },
        "hardwareId": {
          "description": "Mobile Device Hardware Id (Read-only)",
          "type": "string"
        },
        "imei": {
          "description": "Mobile Device IMEI number (Read-only)",
          "type": "string"
        },
        "basebandVersion": {
          "type": "string",
          "description": "Mobile Device Baseband version (Read-only)"
        },
        "defaultLanguage": {
          "description": "The default locale used on the Mobile Device (Read-only)",
          "type": "string"
        },
        "encryptionStatus": {
          "description": "Mobile Device Encryption Status (Read-only)",
          "type": "string"
        },
        "privilege": {
          "description": "DMAgentPermission (Read-only)",
          "type": "string"
        },
        "manufacturer": {
          "type": "string",
          "description": "Mobile Device manufacturer (Read-only)"
        },
        "type": {
          "type": "string",
          "description": "The type of device (Read-only)"
        },
        "deviceCompromisedStatus": {
          "description": "Mobile Device compromised status (Read-only)",
          "type": "string"
        },
        "resourceId": {
          "description": "Unique identifier of Mobile Device (Read-only)",
          "type": "string"
        },
        "hardware": {
          "type": "string",
          "description": "Mobile Device Hardware (Read-only)"
        },
        "networkOperator": {
          "description": "Mobile Device mobile or network operator (if available) (Read-only)",
          "type": "string"
        },
        "unknownSourcesStatus": {
          "description": "Unknown sources enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "kernelVersion": {
          "description": "Mobile Device Kernel version (Read-only)",
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Status of the device (Read-only)"
        },
        "otherAccountsInfo": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of accounts added on device (Read-only)"
        },
        "deviceId": {
          "type": "string",
          "description": "Mobile Device serial number (Read-only)"
        }
      },
      "id": "MobileDevice"
    }
  },
  "baseUrl": "https://www.googleapis.com/",
  "title": "Admin SDK",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        }
      }
    }
  },
  "batchPath": "batch/admin/directory_v1",
  "name": "admin",
  "packagePath": "admin",
  "servicePath": "",
  "rootUrl": "https://www.googleapis.com/",
  "revision": "20200909",
  "id": "admin:directory_v1",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "version": "directory_v1",
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "protocol": "rest",
  "fullyEncodeReservedExpansion": true,
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "basePath": "",
  "resources": {
    "roleAssignments": {
      "methods": {
        "delete": {
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "roleAssignmentId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the role assignment.",
              "type": "string"
            }
          },
          "description": "Deletes a role assignment.",
          "id": "directory.roleAssignments.delete",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}"
        },
        "insert": {
          "id": "directory.roleAssignments.insert",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "httpMethod": "POST",
          "description": "Creates a role assignment.",
          "request": {
            "$ref": "RoleAssignment"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "response": {
            "$ref": "RoleAssignment"
          }
        },
        "list": {
          "parameters": {
            "pageToken": {
              "location": "query",
              "description": "Token to specify the next page in the list.",
              "type": "string"
            },
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            },
            "maxResults": {
              "type": "integer",
              "maximum": "200",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "location": "query",
              "minimum": "1"
            },
            "userKey": {
              "type": "string",
              "location": "query",
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user."
            },
            "roleId": {
              "location": "query",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "response": {
            "$ref": "RoleAssignments"
          },
          "description": "Retrieves a paginated list of all roleAssignments.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.roleAssignments.list",
          "path": "admin/directory/v1/customer/{customer}/roleassignments"
        },
        "get": {
          "response": {
            "$ref": "RoleAssignment"
          },
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "roleAssignmentId": {
              "location": "path",
              "description": "Immutable ID of the role assignment.",
              "required": true,
              "type": "string"
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.roleAssignments.get",
          "description": "Retrieve a role assignment.",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}"
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "id": "directory.mobiledevices.list",
          "parameters": {
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "sortOrder": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used"
            },
            "orderBy": {
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "location": "query",
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "description": "Column to use for sorting results",
              "type": "string"
            },
            "maxResults": {
              "default": "100",
              "type": "integer",
              "minimum": "1",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "maximum": "100",
              "location": "query",
              "format": "int32"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "location": "query",
              "type": "string"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            }
          },
          "response": {
            "$ref": "MobileDevices"
          }
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "id": "directory.mobiledevices.delete",
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            },
            "resourceId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of Mobile Device",
              "type": "string"
            }
          },
          "description": "Delete Mobile Device",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ]
        },
        "get": {
          "description": "Retrieve Mobile Device",
          "id": "directory.mobiledevices.get",
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "resourceId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of Mobile Device",
              "location": "path"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string"
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            }
          },
          "response": {
            "$ref": "MobileDevice"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}"
        },
        "action": {
          "id": "directory.mobiledevices.action",
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "description": "Take action on Mobile Device",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            },
            "resourceId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of Mobile Device",
              "type": "string"
            }
          }
        }
      }
    },
    "resources": {
      "resources": {
        "calendars": {
          "methods": {
            "delete": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "DELETE",
              "id": "directory.resources.calendars.delete",
              "description": "Deletes a calendar resource.",
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the calendar resource to delete."
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "update": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.update",
              "httpMethod": "PUT",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "calendarResourceId": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the calendar resource to update.",
                  "location": "path"
                }
              },
              "request": {
                "$ref": "CalendarResource"
              },
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved."
            },
            "get": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "id": "directory.resources.calendars.get",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Retrieves a calendar resource.",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                },
                "calendarResourceId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the calendar resource to retrieve."
                }
              }
            },
            "insert": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "POST",
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "description": "Inserts a calendar resource.",
              "request": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              },
              "id": "directory.resources.calendars.insert"
            },
            "patch": {
              "request": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.patch",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "calendarResourceId": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the calendar resource to update.",
                  "location": "path"
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                }
              },
              "httpMethod": "PATCH",
              "description": "Patches a calendar resource via Apiary Patch Orchestration."
            },
            "list": {
              "response": {
                "$ref": "CalendarResources"
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.calendars.list",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "query": {
                  "type": "string",
                  "location": "query",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone."
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                },
                "maxResults": {
                  "type": "integer",
                  "maximum": "500",
                  "location": "query",
                  "description": "Maximum number of results to return.",
                  "format": "int32",
                  "minimum": "1"
                },
                "orderBy": {
                  "type": "string",
                  "location": "query",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order."
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                }
              },
              "description": "Retrieves a list of calendar resources for an account.",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            }
          }
        },
        "buildings": {
          "methods": {
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "description": "Retrieves a list of buildings for an account.",
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Token to specify the next page in the list."
                },
                "maxResults": {
                  "maximum": "500",
                  "type": "integer",
                  "location": "query",
                  "minimum": "1",
                  "description": "Maximum number of results to return.",
                  "format": "int32"
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "response": {
                "$ref": "Buildings"
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.buildings.list"
            },
            "update": {
              "response": {
                "$ref": "Building"
              },
              "httpMethod": "PUT",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "description": "The id of the building to update.",
                  "required": true,
                  "location": "path"
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string"
                },
                "coordinatesSource": {
                  "location": "query",
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ]
                }
              },
              "request": {
                "$ref": "Building"
              },
              "description": "Updates a building.",
              "id": "directory.resources.buildings.update",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "buildingId"
              ]
            },
            "insert": {
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Inserts a building.",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "coordinatesSource": {
                  "type": "string",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "location": "query",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED"
                }
              },
              "response": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.buildings.insert",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "request": {
                "$ref": "Building"
              }
            },
            "get": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                },
                "buildingId": {
                  "description": "The unique ID of the building to retrieve.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "description": "Retrieves a building.",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "GET",
              "id": "directory.resources.buildings.get"
            },
            "patch": {
              "description": "Patches a building via Apiary Patch Orchestration.",
              "request": {
                "$ref": "Building"
              },
              "response": {
                "$ref": "Building"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "PATCH",
              "id": "directory.resources.buildings.patch",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "coordinatesSource": {
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "type": "string",
                  "default": "SOURCE_UNSPECIFIED",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "location": "query",
                  "description": "Source from which Building.coordinates are derived."
                },
                "buildingId": {
                  "location": "path",
                  "description": "The id of the building to update.",
                  "required": true,
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              }
            },
            "delete": {
              "description": "Deletes a building.",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "buildingId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The id of the building to delete."
                }
              },
              "id": "directory.resources.buildings.delete",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            }
          }
        },
        "features": {
          "methods": {
            "delete": {
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Deletes a feature.",
              "parameters": {
                "featureKey": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID of the feature to delete."
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "id": "directory.resources.features.delete"
            },
            "rename": {
              "request": {
                "$ref": "FeatureRename"
              },
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Renames a feature.",
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "parameters": {
                "oldName": {
                  "location": "path",
                  "description": "The unique ID of the feature to rename.",
                  "type": "string",
                  "required": true
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "id": "directory.resources.features.rename"
            },
            "list": {
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "response": {
                "$ref": "Features"
              },
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.features.list",
              "description": "Retrieves a list of features for an account.",
              "parameters": {
                "maxResults": {
                  "description": "Maximum number of results to return.",
                  "minimum": "1",
                  "maximum": "500",
                  "location": "query",
                  "format": "int32",
                  "type": "integer"
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "type": "string",
                  "location": "query"
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "get": {
              "parameters": {
                "featureKey": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the feature to retrieve."
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "response": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.get",
              "httpMethod": "GET",
              "description": "Retrieves a feature."
            },
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "description": "The unique ID of the feature to update.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "request": {
                "$ref": "Feature"
              },
              "response": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "PUT",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "description": "Updates a feature.",
              "id": "directory.resources.features.update"
            },
            "insert": {
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer"
              ],
              "request": {
                "$ref": "Feature"
              },
              "description": "Inserts a feature.",
              "response": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "id": "directory.resources.features.insert"
            },
            "patch": {
              "httpMethod": "PATCH",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "id": "directory.resources.features.patch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "Feature"
              },
              "request": {
                "$ref": "Feature"
              },
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "featureKey": {
                  "type": "string",
                  "description": "The unique ID of the feature to update.",
                  "required": true,
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            }
          }
        }
      }
    },
    "orgunits": {
      "methods": {
        "get": {
          "id": "directory.orgunits.get",
          "description": "Retrieve organizational unit",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "orgUnitPath": {
              "location": "path",
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "response": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "GET"
        },
        "delete": {
          "description": "Remove organizational unit",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "required": true,
              "pattern": "^.*$",
              "type": "string",
              "description": "Full path of the organizational unit or its ID"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "id": "directory.orgunits.delete"
        },
        "list": {
          "id": "directory.orgunits.list",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "response": {
            "$ref": "OrgUnits"
          },
          "httpMethod": "GET",
          "description": "Retrieve all organizational units",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameters": {
            "type": {
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "location": "query",
              "type": "string",
              "description": "Whether to return all sub-organizations or just immediate children",
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ]
            },
            "orgUnitPath": {
              "description": "the URL-encoded organizational unit's path or its ID",
              "location": "query",
              "type": "string",
              "default": ""
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "customerId"
          ]
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "request": {
            "$ref": "OrgUnit"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "httpMethod": "POST",
          "response": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "description": "Add organizational unit",
          "id": "directory.orgunits.insert"
        },
        "patch": {
          "request": {
            "$ref": "OrgUnit"
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "httpMethod": "PATCH",
          "id": "directory.orgunits.patch",
          "parameters": {
            "orgUnitPath": {
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            }
          }
        },
        "update": {
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "response": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "description": "Update organizational unit",
          "request": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "orgUnitPath": {
              "required": true,
              "type": "string",
              "description": "Full path of the organizational unit or its ID",
              "location": "path",
              "pattern": "^.*$"
            },
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "httpMethod": "PUT"
        }
      }
    },
    "members": {
      "methods": {
        "delete": {
          "description": "Remove membership.",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "memberKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the member",
              "location": "path"
            }
          },
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        },
        "patch": {
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "location": "path",
              "required": true
            },
            "memberKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "request": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          },
          "id": "directory.members.patch",
          "description": "Patch Member via Apiary Patch Orchestration"
        },
        "hasMember": {
          "id": "directory.members.hasMember",
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "response": {
            "$ref": "MembersHasMember"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "memberKey": {
              "type": "string",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "location": "path",
              "required": true
            },
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "httpMethod": "GET"
        },
        "update": {
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true,
              "location": "path"
            },
            "memberKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "type": "string"
            }
          },
          "description": "Update membership of a user in the specified group.",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "response": {
            "$ref": "Member"
          },
          "request": {
            "$ref": "Member"
          },
          "id": "directory.members.update",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "get": {
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the group"
            },
            "memberKey": {
              "required": true,
              "description": "Email or immutable ID of the member",
              "location": "path",
              "type": "string"
            }
          },
          "description": "Retrieve Group Member",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          },
          "id": "directory.members.get"
        },
        "insert": {
          "id": "directory.members.insert",
          "parameterOrder": [
            "groupKey"
          ],
          "description": "Add user to the specified group.",
          "response": {
            "$ref": "Member"
          },
          "request": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the group",
              "location": "path"
            }
          }
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.members.list",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "response": {
            "$ref": "Members"
          },
          "parameters": {
            "maxResults": {
              "type": "integer",
              "format": "int32",
              "minimum": "1",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "location": "query",
              "default": "200"
            },
            "roles": {
              "description": "Comma separated role values to filter list results on.",
              "location": "query",
              "type": "string"
            },
            "includeDerivedMembership": {
              "type": "boolean",
              "description": "Whether to list indirect memberships. Default: false.",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            },
            "groupKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group"
            }
          },
          "description": "Retrieve all members in a group (paginated)"
        }
      }
    },
    "users": {
      "methods": {
        "delete": {
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.delete",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "description": "Delete user",
          "path": "admin/directory/v1/users/{userKey}"
        },
        "list": {
          "httpMethod": "GET",
          "path": "admin/directory/v1/users",
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "parameterOrder": [],
          "id": "directory.users.list",
          "flatPath": "admin/directory/v1/users",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "Users"
          },
          "parameters": {
            "sortOrder": {
              "location": "query",
              "type": "string",
              "description": "Whether to return results in ascending or descending order.",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "location": "query",
              "description": "What subset of fields to fetch for this user.",
              "type": "string",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "default": "basic"
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string",
              "location": "query"
            },
            "viewType": {
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "location": "query",
              "type": "string",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ]
            },
            "showDeleted": {
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "description": "Maximum number of results to return.",
              "minimum": "1",
              "maximum": "500",
              "format": "int32",
              "default": "100",
              "type": "integer",
              "location": "query"
            },
            "orderBy": {
              "location": "query",
              "description": "Column to use for sorting results",
              "type": "string",
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ]
            },
            "domain": {
              "location": "query",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "type": "string"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify next page in the list"
            }
          }
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "httpMethod": "GET",
          "description": "retrieve user",
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "viewType": {
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "type": "string",
              "default": "admin_view",
              "location": "query"
            },
            "customFieldMask": {
              "location": "query",
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "projection": {
              "location": "query",
              "type": "string",
              "default": "basic",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "description": "What subset of fields to fetch for this user.",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ]
            },
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user",
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.get"
        },
        "makeAdmin": {
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user as admin",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.users.makeAdmin",
          "description": "change admin status of a user",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/makeAdmin"
        },
        "signOut": {
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "id": "directory.users.signOut",
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again."
        },
        "insert": {
          "request": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameters": {},
          "path": "admin/directory/v1/users",
          "flatPath": "admin/directory/v1/users",
          "response": {
            "$ref": "User"
          },
          "parameterOrder": [],
          "httpMethod": "POST",
          "id": "directory.users.insert",
          "description": "create user."
        },
        "update": {
          "id": "directory.users.update",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "request": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "httpMethod": "PUT",
          "description": "update user"
        },
        "watch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "admin/directory/v1/users/watch",
          "response": {
            "$ref": "Channel"
          },
          "id": "directory.users.watch",
          "flatPath": "admin/directory/v1/users/watch",
          "parameterOrder": [],
          "request": {
            "$ref": "Channel"
          },
          "parameters": {
            "viewType": {
              "type": "string",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "location": "query",
              "default": "admin_view"
            },
            "event": {
              "type": "string",
              "description": "Event on which subscription is intended",
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "location": "query"
            },
            "projection": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "default": "basic",
              "location": "query",
              "description": "What subset of fields to fetch for this user.",
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ]
            },
            "customFieldMask": {
              "location": "query",
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "maxResults": {
              "format": "int32",
              "type": "integer",
              "minimum": "1",
              "maximum": "500",
              "description": "Maximum number of results to return.",
              "default": "100",
              "location": "query"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "location": "query",
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "type": "string"
            },
            "sortOrder": {
              "type": "string",
              "description": "Whether to return results in ascending or descending order.",
              "location": "query",
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "domain": {
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\"",
              "location": "query"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify next page in the list"
            },
            "showDeleted": {
              "location": "query",
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)"
            },
            "query": {
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string"
            }
          },
          "description": "Watch for changes in users list",
          "httpMethod": "POST"
        },
        "patch": {
          "path": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "request": {
            "$ref": "User"
          },
          "response": {
            "$ref": "User"
          },
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "PATCH",
          "description": "Patch Users via Apiary Patch Orchestration",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.patch",
          "flatPath": "admin/directory/v1/users/{userKey}"
        },
        "undelete": {
          "httpMethod": "POST",
          "description": "Undelete a deleted user",
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.undelete",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "The immutable id of the user"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "request": {
            "$ref": "UserUndelete"
          }
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "insert": {
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "request": {
                "$ref": "Alias"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "id": "directory.users.aliases.insert",
              "description": "Add a alias for the user",
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user"
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "response": {
                "$ref": "Alias"
              },
              "httpMethod": "POST"
            },
            "list": {
              "id": "directory.users.aliases.list",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "httpMethod": "GET",
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "response": {
                "$ref": "Aliases"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "required": true
                }
              },
              "description": "List all aliases for a user"
            },
            "watch": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "id": "directory.users.aliases.watch",
              "description": "Watch for changes in users list",
              "request": {
                "$ref": "Channel"
              },
              "httpMethod": "POST",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "parameters": {
                "event": {
                  "location": "query",
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "description": "Event on which subscription is intended (if subscribing)",
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ]
                },
                "userKey": {
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "response": {
                "$ref": "Channel"
              }
            },
            "delete": {
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "id": "directory.users.aliases.delete",
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "parameters": {
                "alias": {
                  "description": "The alias to be removed",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "userKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "location": "path"
                }
              },
              "description": "Remove a alias for the user",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}"
            }
          }
        },
        "photos": {
          "methods": {
            "delete": {
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ],
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.delete",
              "description": "Remove photos for the user"
            },
            "get": {
              "response": {
                "$ref": "UserPhoto"
              },
              "httpMethod": "GET",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Retrieve photo of a user",
              "id": "directory.users.photos.get",
              "parameters": {
                "userKey": {
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "patch": {
              "request": {
                "$ref": "UserPhoto"
              },
              "httpMethod": "PATCH",
              "description": "Patch Photo via Apiary Patch Orchestration",
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.patch",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "update": {
              "id": "directory.users.photos.update",
              "description": "Add a photo for the user",
              "httpMethod": "PUT",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "request": {
                "$ref": "UserPhoto"
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              },
              "response": {
                "$ref": "UserPhoto"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ]
            }
          }
        }
      }
    },
    "tokens": {
      "methods": {
        "list": {
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "id": "directory.tokens.list",
          "response": {
            "$ref": "Tokens"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string"
            }
          }
        },
        "get": {
          "description": "Get information about an access token issued by a user.",
          "response": {
            "$ref": "Token"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "id": "directory.tokens.get",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        },
        "delete": {
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "id": "directory.tokens.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Delete all access tokens issued by a user for an application."
        }
      }
    },
    "asps": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "id": "directory.asps.list",
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "response": {
            "$ref": "Asps"
          },
          "description": "List the ASPs issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/asps"
        },
        "delete": {
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            },
            "codeId": {
              "description": "The unique ID of the ASP to be deleted.",
              "required": true,
              "format": "int32",
              "location": "path",
              "type": "integer"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Delete an ASP issued by a user.",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.delete",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameterOrder": [
            "userKey",
            "codeId"
          ]
        },
        "get": {
          "parameters": {
            "codeId": {
              "required": true,
              "description": "The unique ID of the ASP.",
              "location": "path",
              "type": "integer",
              "format": "int32"
            },
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "description": "Get information about an ASP issued by a user.",
          "id": "directory.asps.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "response": {
            "$ref": "Asp"
          }
        }
      }
    },
    "schemas": {
      "methods": {
        "insert": {
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "id": "directory.schemas.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "request": {
            "$ref": "Schema"
          },
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "description": "Create schema.",
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "response": {
            "$ref": "Schema"
          }
        },
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "DELETE",
          "parameters": {
            "schemaKey": {
              "required": true,
              "description": "Name or immutable ID of the schema",
              "location": "path",
              "type": "string"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "id": "directory.schemas.delete",
          "description": "Delete schema"
        },
        "patch": {
          "id": "directory.schemas.patch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          },
          "description": "Patch Schema via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "schemaKey": {
              "required": true,
              "location": "path",
              "description": "Name or immutable ID of the schema.",
              "type": "string"
            }
          },
          "request": {
            "$ref": "Schema"
          }
        },
        "get": {
          "id": "directory.schemas.get",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "response": {
            "$ref": "Schema"
          },
          "description": "Retrieve schema",
          "parameters": {
            "schemaKey": {
              "type": "string",
              "location": "path",
              "description": "Name or immutable ID of the schema",
              "required": true
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ]
        },
        "list": {
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "id": "directory.schemas.list",
          "parameterOrder": [
            "customerId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "response": {
            "$ref": "Schemas"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "description": "Retrieve all schemas for a customer",
          "httpMethod": "GET"
        },
        "update": {
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "description": "Update schema",
          "request": {
            "$ref": "Schema"
          },
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            },
            "schemaKey": {
              "description": "Name or immutable ID of the schema.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.schemas.update",
          "response": {
            "$ref": "Schema"
          }
        }
      }
    },
    "roles": {
      "methods": {
        "list": {
          "httpMethod": "GET",
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "response": {
            "$ref": "Roles"
          },
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            },
            "maxResults": {
              "maximum": "100",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "location": "query",
              "type": "integer",
              "minimum": "1"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify the next page in the list.",
              "type": "string"
            }
          },
          "id": "directory.roles.list"
        },
        "patch": {
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "response": {
            "$ref": "Role"
          },
          "parameters": {
            "roleId": {
              "description": "Immutable ID of the role.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "httpMethod": "PATCH",
          "id": "directory.roles.patch",
          "description": "Patch role via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "request": {
            "$ref": "Role"
          }
        },
        "update": {
          "httpMethod": "PUT",
          "parameters": {
            "roleId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the role."
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "response": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "request": {
            "$ref": "Role"
          },
          "id": "directory.roles.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Updates a role.",
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Deletes a role.",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "id": "directory.roles.delete",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "roleId": {
              "type": "string",
              "description": "Immutable ID of the role.",
              "required": true,
              "location": "path"
            }
          }
        },
        "insert": {
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.roles.insert",
          "request": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles",
          "description": "Creates a role.",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "httpMethod": "POST",
          "response": {
            "$ref": "Role"
          }
        },
        "get": {
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "id": "directory.roles.get",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Retrieves a role.",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            },
            "roleId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role."
            }
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ]
        }
      }
    },
    "domainAliases": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "parameters": {
            "parentDomainName": {
              "description": "Name of the parent domain for which domain aliases are to be fetched.",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "response": {
            "$ref": "DomainAliases"
          },
          "id": "directory.domainAliases.list",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "httpMethod": "GET",
          "parameterOrder": [
            "customer"
          ],
          "description": "Lists the domain aliases of the customer."
        },
        "insert": {
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "response": {
            "$ref": "DomainAlias"
          },
          "request": {
            "$ref": "DomainAlias"
          },
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "description": "Inserts a domain alias of the customer.",
          "id": "directory.domainAliases.insert",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          }
        },
        "get": {
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameters": {
            "domainAliasName": {
              "type": "string",
              "required": true,
              "description": "Name of domain alias to be retrieved.",
              "location": "path"
            },
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "response": {
            "$ref": "DomainAlias"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "id": "directory.domainAliases.get",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "description": "Retrieves a domain alias of the customer."
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "httpMethod": "DELETE",
          "id": "directory.domainAliases.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "description": "Deletes a domain Alias of the customer.",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true
            },
            "domainAliasName": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Name of domain alias to be retrieved."
            }
          }
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "patch": {
          "description": "Patch Chrome OS Device",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameters": {
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "location": "query"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "id": "directory.chromeosdevices.patch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ]
        },
        "moveDevicesToOu": {
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            },
            "orgUnitPath": {
              "description": "Full path of the target organizational unit or its ID",
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ]
        },
        "action": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameters": {
            "resourceId": {
              "type": "string",
              "description": "Immutable ID of Chrome OS Device",
              "location": "path",
              "required": true
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            }
          },
          "description": "Take action on Chrome OS Device",
          "id": "directory.chromeosdevices.action"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameters": {
            "projection": {
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            },
            "deviceId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of Chrome OS Device",
              "type": "string"
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "description": "Retrieve Chrome OS Device",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.get",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "response": {
            "$ref": "ChromeOsDevice"
          }
        },
        "update": {
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "id": "directory.chromeosdevices.update",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "parameters": {
            "deviceId": {
              "required": true,
              "description": "Immutable ID of Chrome OS Device",
              "location": "path",
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            },
            "projection": {
              "location": "query",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "description": "Update Chrome OS Device",
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ]
        },
        "list": {
          "id": "directory.chromeosdevices.list",
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query"
            },
            "maxResults": {
              "description": "Maximum number of results to return.",
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "format": "int32",
              "default": "100"
            },
            "orderBy": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ],
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "type": "string",
              "description": "Column to use for sorting results"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "orgUnitPath": {
              "location": "query",
              "type": "string",
              "description": "Full path of the organizational unit or its ID"
            },
            "query": {
              "type": "string",
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "location": "query"
            },
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            },
            "sortOrder": {
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "response": {
            "$ref": "ChromeOsDevices"
          }
        }
      }
    },
    "customers": {
      "methods": {
        "get": {
          "parameters": {
            "customerKey": {
              "location": "path",
              "type": "string",
              "description": "Id of the customer to be retrieved",
              "required": true
            }
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "parameterOrder": [
            "customerKey"
          ],
          "id": "directory.customers.get",
          "description": "Retrieves a customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customers/{customerKey}"
        },
        "patch": {
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/customers/{customerKey}",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameters": {
            "customerKey": {
              "type": "string",
              "required": true,
              "description": "Id of the customer to be updated",
              "location": "path"
            }
          },
          "id": "directory.customers.patch",
          "parameterOrder": [
            "customerKey"
          ],
          "request": {
            "$ref": "Customer"
          },
          "description": "Patch Customers via Apiary Patch Orchestration",
          "response": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ]
        },
        "update": {
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "request": {
            "$ref": "Customer"
          },
          "id": "directory.customers.update",
          "path": "admin/directory/v1/customers/{customerKey}",
          "description": "Updates a customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "parameterOrder": [
            "customerKey"
          ],
          "httpMethod": "PUT",
          "response": {
            "$ref": "Customer"
          },
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "type": "string",
              "location": "path",
              "required": true
            }
          }
        }
      }
    },
    "groups": {
      "resources": {
        "aliases": {
          "methods": {
            "insert": {
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameterOrder": [
                "groupKey"
              ],
              "httpMethod": "POST",
              "response": {
                "$ref": "Alias"
              },
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "request": {
                "$ref": "Alias"
              },
              "description": "Add a alias for the group",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "id": "directory.groups.aliases.insert"
            },
            "delete": {
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "description": "Remove a alias for the group",
              "parameters": {
                "alias": {
                  "type": "string",
                  "location": "path",
                  "description": "The alias to be removed",
                  "required": true
                },
                "groupKey": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the group"
                }
              },
              "httpMethod": "DELETE",
              "id": "directory.groups.aliases.delete",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ]
            },
            "list": {
              "httpMethod": "GET",
              "id": "directory.groups.aliases.list",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "response": {
                "$ref": "Aliases"
              },
              "parameterOrder": [
                "groupKey"
              ],
              "parameters": {
                "groupKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the group"
                }
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "description": "List all aliases for a group",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ]
            }
          }
        }
      },
      "methods": {
        "delete": {
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "path": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.groups.delete",
          "description": "Delete Group",
          "httpMethod": "DELETE"
        },
        "update": {
          "path": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "PUT",
          "parameterOrder": [
            "groupKey"
          ],
          "response": {
            "$ref": "Group"
          },
          "request": {
            "$ref": "Group"
          },
          "id": "directory.groups.update",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "description": "Update Group",
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            }
          }
        },
        "patch": {
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "groupKey"
          ],
          "id": "directory.groups.patch",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "request": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "PATCH",
          "response": {
            "$ref": "Group"
          },
          "description": "Patch Groups via Apiary Patch Orchestration"
        },
        "list": {
          "parameterOrder": [],
          "path": "admin/directory/v1/groups",
          "httpMethod": "GET",
          "response": {
            "$ref": "Groups"
          },
          "flatPath": "admin/directory/v1/groups",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.groups.list",
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "parameters": {
            "domain": {
              "type": "string",
              "location": "query",
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead."
            },
            "userKey": {
              "location": "query",
              "type": "string",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object."
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query"
            },
            "customer": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain."
            },
            "orderBy": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUndefined",
                "email"
              ]
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "default": "200",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "type": "integer",
              "minimum": "1",
              "format": "int32"
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "location": "query",
              "type": "string"
            }
          }
        },
        "get": {
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.groups.get",
          "httpMethod": "GET",
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "description": "Retrieve Group"
        },
        "insert": {
          "description": "Create Group",
          "parameterOrder": [],
          "flatPath": "admin/directory/v1/groups",
          "id": "directory.groups.insert",
          "httpMethod": "POST",
          "parameters": {},
          "request": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "response": {
            "$ref": "Group"
          },
          "path": "admin/directory/v1/groups"
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "id": "directory.twoStepVerification.turnOff",
          "description": "Turn off 2-Step Verification for user.",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string"
            }
          }
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "generate": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.verificationCodes.generate",
          "description": "Generate new backup verification codes for the user.",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameterOrder": [
            "userKey"
          ]
        },
        "invalidate": {
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.verificationCodes.invalidate",
          "description": "Invalidate the current backup verification codes for the user.",
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ]
        },
        "list": {
          "id": "directory.verificationCodes.list",
          "httpMethod": "GET",
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "response": {
            "$ref": "VerificationCodes"
          },
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "response": {
            "$ref": "Privileges"
          },
          "id": "directory.privileges.list",
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ]
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "httpMethod": "POST",
          "description": "Stop watching resources through this channel.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "admin.channels.stop",
          "parameterOrder": [],
          "request": {
            "$ref": "Channel"
          },
          "path": "admin/directory_v1/channels/stop",
          "flatPath": "admin/directory_v1/channels/stop",
          "parameters": {}
        }
      }
    },
    "domains": {
      "methods": {
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "description": "Deletes a domain of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "domainName": {
              "required": true,
              "description": "Name of domain to be deleted",
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.domains.delete"
        },
        "get": {
          "response": {
            "$ref": "Domains"
          },
          "description": "Retrieves a domain of the customer.",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameters": {
            "domainName": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Name of domain to be retrieved"
            },
            "customer": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "id": "directory.domains.get"
        },
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "path": "admin/directory/v1/customer/{customer}/domains",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameterOrder": [
            "customer"
          ],
          "request": {
            "$ref": "Domains"
          },
          "response": {
            "$ref": "Domains"
          },
          "id": "directory.domains.insert",
          "description": "Inserts a domain of the customer.",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            }
          },
          "httpMethod": "POST"
        },
        "list": {
          "httpMethod": "GET",
          "description": "Lists the domains of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains",
          "response": {
            "$ref": "Domains2"
          },
          "id": "directory.domains.list",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            }
          }
        }
      }
    }
  },
  "discoveryVersion": "v1"
}
