{
  "servicePath": "",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "id": "admin:directory_v1",
  "rootUrl": "https://www.googleapis.com/",
  "title": "Admin SDK",
  "protocol": "rest",
  "parameters": {
    "alt": {
      "type": "string",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response.",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "$.xgafv": {
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "description": "V1 error format."
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    }
  },
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "ownerDomain": "google.com",
  "version": "directory_v1",
  "canonicalName": "directory",
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "packagePath": "admin",
  "basePath": "",
  "baseUrl": "https://www.googleapis.com/",
  "resources": {
    "roles": {
      "methods": {
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "httpMethod": "PUT",
          "id": "directory.roles.update",
          "parameters": {
            "roleId": {
              "description": "Immutable ID of the role.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "response": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "request": {
            "$ref": "Role"
          },
          "description": "Updates a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "get": {
          "id": "directory.roles.get",
          "httpMethod": "GET",
          "parameters": {
            "roleId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the role."
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "description": "Retrieves a role.",
          "response": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "patch": {
          "response": {
            "$ref": "Role"
          },
          "description": "Patch role via Apiary Patch Orchestration",
          "id": "directory.roles.patch",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "request": {
            "$ref": "Role"
          },
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "roleId": {
              "description": "Immutable ID of the role.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "insert": {
          "httpMethod": "POST",
          "response": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "request": {
            "$ref": "Role"
          },
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "description": "Creates a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "id": "directory.roles.insert",
          "path": "admin/directory/v1/customer/{customer}/roles"
        },
        "delete": {
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Deletes a role.",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "parameters": {
            "roleId": {
              "type": "string",
              "description": "Immutable ID of the role.",
              "required": true,
              "location": "path"
            },
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roles.delete"
        },
        "list": {
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "maxResults": {
              "format": "int32",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "maximum": "100",
              "location": "query"
            },
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "location": "query",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "id": "directory.roles.list",
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "response": {
            "$ref": "Roles"
          }
        }
      }
    },
    "groups": {
      "methods": {
        "get": {
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "path": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.get",
          "response": {
            "$ref": "Group"
          },
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameterOrder": [
            "groupKey"
          ],
          "description": "Retrieve Group",
          "httpMethod": "GET"
        },
        "list": {
          "parameterOrder": [],
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "flatPath": "admin/directory/v1/groups",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "userKey": {
              "location": "query",
              "type": "string",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object."
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "type": "string",
              "location": "query"
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain.",
              "type": "string"
            },
            "maxResults": {
              "type": "integer",
              "minimum": "1",
              "format": "int32",
              "location": "query",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "default": "200"
            },
            "query": {
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "email"
              ],
              "location": "query",
              "type": "string",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Email of the group."
              ]
            }
          },
          "id": "directory.groups.list",
          "response": {
            "$ref": "Groups"
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/groups"
        },
        "insert": {
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "id": "directory.groups.insert",
          "parameterOrder": [],
          "parameters": {},
          "description": "Create Group",
          "request": {
            "$ref": "Group"
          },
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/groups",
          "path": "admin/directory/v1/groups"
        },
        "update": {
          "httpMethod": "PUT",
          "path": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "description": "Update Group",
          "request": {
            "$ref": "Group"
          },
          "response": {
            "$ref": "Group"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.update"
        },
        "patch": {
          "parameterOrder": [
            "groupKey"
          ],
          "id": "directory.groups.patch",
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "description": "Patch Groups via Apiary Patch Orchestration",
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "request": {
            "$ref": "Group"
          }
        },
        "delete": {
          "description": "Delete Group",
          "path": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.delete",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "httpMethod": "DELETE",
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}"
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "httpMethod": "DELETE",
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "alias": {
                  "required": true,
                  "type": "string",
                  "description": "The alias to be removed",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "id": "directory.groups.aliases.delete",
              "description": "Remove a alias for the group"
            },
            "insert": {
              "request": {
                "$ref": "Alias"
              },
              "parameters": {
                "groupKey": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the group"
                }
              },
              "description": "Add a alias for the group",
              "response": {
                "$ref": "Alias"
              },
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "id": "directory.groups.aliases.insert",
              "parameterOrder": [
                "groupKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "httpMethod": "POST"
            },
            "list": {
              "parameters": {
                "groupKey": {
                  "required": true,
                  "description": "Email or immutable ID of the group",
                  "location": "path",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Aliases"
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameterOrder": [
                "groupKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "id": "directory.groups.aliases.list",
              "httpMethod": "GET",
              "description": "List all aliases for a group",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases"
            }
          }
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "get": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "description": "Retrieve Mobile Device",
          "parameters": {
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "projection": {
              "type": "string",
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ]
            },
            "resourceId": {
              "description": "Immutable ID of Mobile Device",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "id": "directory.mobiledevices.get",
          "response": {
            "$ref": "MobileDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}"
        },
        "action": {
          "httpMethod": "POST",
          "id": "directory.mobiledevices.action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "description": "Take action on Mobile Device",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "resourceId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of Mobile Device"
            }
          },
          "request": {
            "$ref": "MobileDeviceAction"
          }
        },
        "delete": {
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "httpMethod": "DELETE",
          "parameters": {
            "resourceId": {
              "description": "Immutable ID of Mobile Device",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.mobiledevices.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "description": "Delete Mobile Device"
        },
        "list": {
          "httpMethod": "GET",
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "id": "directory.mobiledevices.list",
          "parameters": {
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ]
            },
            "maxResults": {
              "maximum": "100",
              "minimum": "1",
              "format": "int32",
              "default": "100",
              "location": "query",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "type": "integer"
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "location": "query",
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search"
            },
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "parameterOrder": [
            "customerId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "response": {
            "$ref": "MobileDevices"
          }
        }
      }
    },
    "users": {
      "resources": {
        "photos": {
          "methods": {
            "get": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "response": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ],
              "httpMethod": "GET",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              },
              "id": "directory.users.photos.get",
              "description": "Retrieve photo of a user",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "httpMethod": "PATCH",
              "response": {
                "$ref": "UserPhoto"
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.patch",
              "description": "Patch Photo via Apiary Patch Orchestration",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "type": "string"
                }
              },
              "request": {
                "$ref": "UserPhoto"
              }
            },
            "delete": {
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Remove photos for the user",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "httpMethod": "DELETE",
              "id": "directory.users.photos.delete",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              }
            },
            "update": {
              "parameterOrder": [
                "userKey"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Add a photo for the user",
              "request": {
                "$ref": "UserPhoto"
              },
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "id": "directory.users.photos.update",
              "httpMethod": "PUT"
            }
          }
        },
        "aliases": {
          "methods": {
            "delete": {
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "description": "Remove a alias for the user",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "id": "directory.users.aliases.delete",
              "parameters": {
                "alias": {
                  "description": "The alias to be removed",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "httpMethod": "DELETE"
            },
            "watch": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "parameters": {
                "event": {
                  "location": "query",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "type": "string",
                  "description": "Event on which subscription is intended (if subscribing)"
                },
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "id": "directory.users.aliases.watch",
              "parameterOrder": [
                "userKey"
              ],
              "description": "Watch for changes in users list",
              "httpMethod": "POST",
              "request": {
                "$ref": "Channel"
              },
              "response": {
                "$ref": "Channel"
              }
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "Aliases"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "id": "directory.users.aliases.list",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "description": "List all aliases for a user"
            },
            "insert": {
              "description": "Add a alias for the user",
              "response": {
                "$ref": "Alias"
              },
              "request": {
                "$ref": "Alias"
              },
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.aliases.insert",
              "httpMethod": "POST",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases"
            }
          }
        }
      },
      "methods": {
        "insert": {
          "httpMethod": "POST",
          "path": "admin/directory/v1/users",
          "parameterOrder": [],
          "parameters": {},
          "description": "create user.",
          "flatPath": "admin/directory/v1/users",
          "id": "directory.users.insert",
          "response": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "request": {
            "$ref": "User"
          }
        },
        "list": {
          "httpMethod": "GET",
          "response": {
            "$ref": "Users"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "admin/directory/v1/users",
          "flatPath": "admin/directory/v1/users",
          "parameterOrder": [],
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "parameters": {
            "domain": {
              "location": "query",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "type": "string"
            },
            "orderBy": {
              "type": "string",
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "location": "query",
              "description": "Column to use for sorting results"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order.",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query"
            },
            "showDeleted": {
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string",
              "location": "query"
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "minimum": "1",
              "type": "integer",
              "location": "query",
              "format": "int32",
              "maximum": "500",
              "default": "100",
              "description": "Maximum number of results to return."
            },
            "customFieldMask": {
              "type": "string",
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "location": "query",
              "default": "basic",
              "type": "string",
              "description": "What subset of fields to fetch for this user."
            },
            "customer": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "viewType": {
              "location": "query",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "type": "string",
              "default": "admin_view",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ]
            }
          },
          "id": "directory.users.list"
        },
        "watch": {
          "id": "directory.users.watch",
          "description": "Watch for changes in users list",
          "parameterOrder": [],
          "httpMethod": "POST",
          "request": {
            "$ref": "Channel"
          },
          "flatPath": "admin/directory/v1/users/watch",
          "parameters": {
            "sortOrder": {
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order.",
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "showDeleted": {
              "type": "string",
              "location": "query",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)"
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "default": "basic",
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ],
              "type": "string",
              "description": "What subset of fields to fetch for this user.",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "location": "query"
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query",
              "type": "string"
            },
            "orderBy": {
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "description": "Column to use for sorting results",
              "location": "query",
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "type": "string"
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\"",
              "location": "query",
              "type": "string"
            },
            "event": {
              "description": "Event on which subscription is intended",
              "location": "query",
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ]
            },
            "maxResults": {
              "format": "int32",
              "default": "100",
              "type": "integer",
              "description": "Maximum number of results to return.",
              "location": "query",
              "minimum": "1",
              "maximum": "500"
            },
            "viewType": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "default": "admin_view",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user."
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            }
          },
          "response": {
            "$ref": "Channel"
          },
          "path": "admin/directory/v1/users/watch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        },
        "update": {
          "description": "update user",
          "path": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          },
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "httpMethod": "PUT",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.users.update",
          "request": {
            "$ref": "User"
          }
        },
        "delete": {
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user",
              "type": "string",
              "required": true
            }
          },
          "id": "directory.users.delete",
          "httpMethod": "DELETE",
          "description": "Delete user",
          "path": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "makeAdmin": {
          "description": "change admin status of a user",
          "id": "directory.users.makeAdmin",
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user as admin",
              "location": "path",
              "type": "string"
            }
          }
        },
        "undelete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "request": {
            "$ref": "UserUndelete"
          },
          "description": "Undelete a deleted user",
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "id": "directory.users.undelete",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "The immutable id of the user"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/undelete"
        },
        "get": {
          "path": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.get",
          "response": {
            "$ref": "User"
          },
          "description": "retrieve user",
          "parameters": {
            "projection": {
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "type": "string",
              "default": "basic",
              "description": "What subset of fields to fetch for this user.",
              "location": "query",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ]
            },
            "customFieldMask": {
              "location": "query",
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "viewType": {
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "location": "query",
              "type": "string",
              "default": "admin_view"
            },
            "userKey": {
              "description": "Email or immutable ID of the user",
              "type": "string",
              "required": true,
              "location": "path"
            }
          }
        },
        "signOut": {
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "id": "directory.users.signOut",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          }
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "PATCH",
          "description": "Patch Users via Apiary Patch Orchestration",
          "request": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          },
          "id": "directory.users.patch",
          "path": "admin/directory/v1/users/{userKey}"
        }
      }
    },
    "schemas": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "id": "directory.schemas.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "parameters": {
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "response": {
            "$ref": "Schemas"
          },
          "description": "Retrieve all schemas for a customer",
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "GET"
        },
        "get": {
          "parameters": {
            "schemaKey": {
              "description": "Name or immutable ID of the schema",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            }
          },
          "description": "Retrieve schema",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "id": "directory.schemas.get",
          "httpMethod": "GET",
          "response": {
            "$ref": "Schema"
          }
        },
        "insert": {
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "response": {
            "$ref": "Schema"
          },
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            }
          },
          "description": "Create schema.",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.schemas.insert",
          "httpMethod": "POST",
          "request": {
            "$ref": "Schema"
          }
        },
        "delete": {
          "id": "directory.schemas.delete",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "schemaKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Name or immutable ID of the schema"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "description": "Delete schema",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        },
        "patch": {
          "id": "directory.schemas.patch",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Patch Schema via Apiary Patch Orchestration",
          "request": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            },
            "schemaKey": {
              "location": "path",
              "required": true,
              "description": "Name or immutable ID of the schema.",
              "type": "string"
            }
          },
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ]
        },
        "update": {
          "request": {
            "$ref": "Schema"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "description": "Update schema",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "id": "directory.schemas.update",
          "response": {
            "$ref": "Schema"
          },
          "httpMethod": "PUT",
          "parameters": {
            "schemaKey": {
              "description": "Name or immutable ID of the schema.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            }
          }
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Stop watching resources through this channel.",
          "id": "admin.channels.stop",
          "request": {
            "$ref": "Channel"
          },
          "parameterOrder": [],
          "flatPath": "admin/directory_v1/channels/stop",
          "path": "admin/directory_v1/channels/stop",
          "parameters": {}
        }
      }
    },
    "domainAliases": {
      "methods": {
        "delete": {
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            },
            "domainAliasName": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Name of domain alias to be retrieved."
            }
          },
          "id": "directory.domainAliases.delete",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "description": "Deletes a domain Alias of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ]
        },
        "list": {
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            },
            "parentDomainName": {
              "location": "query",
              "type": "string",
              "description": "Name of the parent domain for which domain aliases are to be fetched."
            }
          },
          "response": {
            "$ref": "DomainAliases"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "httpMethod": "GET",
          "parameterOrder": [
            "customer"
          ],
          "description": "Lists the domain aliases of the customer.",
          "id": "directory.domainAliases.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases"
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "request": {
            "$ref": "DomainAlias"
          },
          "response": {
            "$ref": "DomainAlias"
          },
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "id": "directory.domainAliases.insert",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "description": "Inserts a domain alias of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases"
        },
        "get": {
          "description": "Retrieves a domain alias of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "httpMethod": "GET",
          "id": "directory.domainAliases.get",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            },
            "domainAliasName": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Name of domain alias to be retrieved."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "response": {
            "$ref": "DomainAlias"
          }
        }
      }
    },
    "asps": {
      "methods": {
        "list": {
          "path": "admin/directory/v1/users/{userKey}/asps",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "description": "List the ASPs issued by a user.",
          "response": {
            "$ref": "Asps"
          },
          "id": "directory.asps.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "DELETE",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            },
            "codeId": {
              "format": "int32",
              "required": true,
              "type": "integer",
              "description": "The unique ID of the ASP to be deleted.",
              "location": "path"
            }
          },
          "description": "Delete an ASP issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.delete"
        },
        "get": {
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true
            },
            "codeId": {
              "required": true,
              "format": "int32",
              "description": "The unique ID of the ASP.",
              "type": "integer",
              "location": "path"
            }
          },
          "description": "Get information about an ASP issued by a user.",
          "response": {
            "$ref": "Asp"
          },
          "id": "directory.asps.get",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "list": {
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "id": "directory.verificationCodes.list",
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "httpMethod": "GET",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "response": {
            "$ref": "VerificationCodes"
          }
        },
        "generate": {
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.verificationCodes.generate",
          "description": "Generate new backup verification codes for the user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "required": true,
              "location": "path",
              "type": "string"
            }
          }
        },
        "invalidate": {
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.verificationCodes.invalidate",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "description": "Invalidate the current backup verification codes for the user."
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "response": {
            "$ref": "Privileges"
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "id": "directory.privileges.list",
          "description": "Retrieves a paginated list of all privileges for a customer."
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "id": "directory.twoStepVerification.turnOff",
          "description": "Turn off 2-Step Verification for user.",
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        }
      }
    },
    "resources": {
      "resources": {
        "buildings": {
          "methods": {
            "delete": {
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The id of the building to delete."
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              },
              "description": "Deletes a building.",
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.delete",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "buildingId"
              ]
            },
            "patch": {
              "request": {
                "$ref": "Building"
              },
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "buildingId": {
                  "location": "path",
                  "required": true,
                  "description": "The id of the building to update.",
                  "type": "string"
                },
                "coordinatesSource": {
                  "type": "string",
                  "description": "Source from which Building.coordinates are derived.",
                  "location": "query",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ]
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.patch",
              "description": "Patches a building via Apiary Patch Orchestration.",
              "httpMethod": "PATCH",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "insert": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "id": "directory.resources.buildings.insert",
              "request": {
                "$ref": "Building"
              },
              "response": {
                "$ref": "Building"
              },
              "description": "Inserts a building.",
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "location": "query",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "type": "string",
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED"
                }
              },
              "httpMethod": "POST",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings"
            },
            "get": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                },
                "buildingId": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID of the building to retrieve.",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.get",
              "description": "Retrieves a building.",
              "parameterOrder": [
                "customer",
                "buildingId"
              ]
            },
            "update": {
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "httpMethod": "PUT",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Updates a building.",
              "id": "directory.resources.buildings.update",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "request": {
                "$ref": "Building"
              },
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "buildingId": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The id of the building to update."
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "location": "query",
                  "default": "SOURCE_UNSPECIFIED",
                  "description": "Source from which Building.coordinates are derived.",
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ]
                }
              }
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Token to specify the next page in the list."
                },
                "maxResults": {
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "minimum": "1",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                }
              },
              "description": "Retrieves a list of buildings for an account.",
              "parameterOrder": [
                "customer"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "httpMethod": "GET",
              "id": "directory.resources.buildings.list",
              "response": {
                "$ref": "Buildings"
              }
            }
          }
        },
        "calendars": {
          "methods": {
            "delete": {
              "id": "directory.resources.calendars.delete",
              "description": "Deletes a calendar resource.",
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "calendarResourceId": {
                  "required": true,
                  "description": "The unique ID of the calendar resource to delete.",
                  "location": "path",
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "DELETE",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
            },
            "list": {
              "parameterOrder": [
                "customer"
              ],
              "description": "Retrieves a list of calendar resources for an account.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.calendars.list",
              "parameters": {
                "orderBy": {
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order.",
                  "location": "query",
                  "type": "string"
                },
                "pageToken": {
                  "type": "string",
                  "description": "Token to specify the next page in the list.",
                  "location": "query"
                },
                "maxResults": {
                  "maximum": "500",
                  "format": "int32",
                  "description": "Maximum number of results to return.",
                  "type": "integer",
                  "location": "query",
                  "minimum": "1"
                },
                "query": {
                  "location": "query",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone.",
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "response": {
                "$ref": "CalendarResources"
              }
            },
            "insert": {
              "request": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "response": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "parameterOrder": [
                "customer"
              ],
              "description": "Inserts a calendar resource.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.calendars.insert"
            },
            "update": {
              "id": "directory.resources.calendars.update",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "CalendarResource"
              },
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "httpMethod": "PUT",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to update.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              }
            },
            "get": {
              "description": "Retrieves a calendar resource.",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "GET",
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                },
                "calendarResourceId": {
                  "location": "path",
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "id": "directory.resources.calendars.get",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "patch": {
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "response": {
                "$ref": "CalendarResource"
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID of the calendar resource to update."
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                }
              },
              "id": "directory.resources.calendars.patch",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "PATCH",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "request": {
                "$ref": "CalendarResource"
              }
            }
          }
        },
        "features": {
          "methods": {
            "delete": {
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "DELETE",
              "description": "Deletes a feature.",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "featureKey": {
                  "location": "path",
                  "description": "The unique ID of the feature to delete.",
                  "type": "string",
                  "required": true
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.features.delete"
            },
            "list": {
              "parameterOrder": [
                "customer"
              ],
              "description": "Retrieves a list of features for an account.",
              "response": {
                "$ref": "Features"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "httpMethod": "GET",
              "id": "directory.resources.features.list",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                },
                "maxResults": {
                  "location": "query",
                  "maximum": "500",
                  "minimum": "1",
                  "format": "int32",
                  "type": "integer",
                  "description": "Maximum number of results to return."
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "location": "query",
                  "type": "string"
                }
              }
            },
            "get": {
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Retrieves a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.features.get",
              "response": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "GET",
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                },
                "featureKey": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID of the feature to retrieve."
                }
              }
            },
            "rename": {
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "request": {
                "$ref": "FeatureRename"
              },
              "id": "directory.resources.features.rename",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "oldName": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the feature to rename.",
                  "location": "path"
                }
              },
              "description": "Renames a feature.",
              "httpMethod": "POST"
            },
            "update": {
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "description": "Updates a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "response": {
                "$ref": "Feature"
              },
              "parameters": {
                "featureKey": {
                  "type": "string",
                  "description": "The unique ID of the feature to update.",
                  "location": "path",
                  "required": true
                },
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "request": {
                "$ref": "Feature"
              },
              "httpMethod": "PUT",
              "id": "directory.resources.features.update"
            },
            "patch": {
              "response": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.patch",
              "request": {
                "$ref": "Feature"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "description": "The unique ID of the feature to update.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "httpMethod": "PATCH",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "insert": {
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "httpMethod": "POST",
              "response": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.insert",
              "description": "Inserts a feature."
            }
          }
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "methods": {
                "issueCommand": {
                  "description": "Issues a command for the device to execute.",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ],
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "parameters": {
                    "deviceId": {
                      "required": true,
                      "type": "string",
                      "description": "Immutable. Immutable ID of Chrome OS Device.",
                      "location": "path"
                    },
                    "customerId": {
                      "description": "Immutable. Immutable ID of the G Suite account.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  }
                }
              },
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "id": "admin.customer.devices.chromeos.commands.get",
                      "description": "Gets command data a specific command issued to the device.",
                      "httpMethod": "GET",
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "parameters": {
                        "customerId": {
                          "location": "path",
                          "required": true,
                          "description": "Immutable. Immutable ID of the G Suite account.",
                          "type": "string"
                        },
                        "deviceId": {
                          "location": "path",
                          "required": true,
                          "type": "string",
                          "description": "Immutable. Immutable ID of Chrome OS Device."
                        },
                        "commandId": {
                          "required": true,
                          "type": "string",
                          "location": "path",
                          "description": "Immutable. Immutable ID of Chrome OS Device Command.",
                          "format": "int64"
                        }
                      },
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "domains": {
      "methods": {
        "get": {
          "response": {
            "$ref": "Domains"
          },
          "id": "directory.domains.get",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "parameters": {
            "domainName": {
              "description": "Name of domain to be retrieved",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "httpMethod": "GET",
          "description": "Retrieves a domain of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}"
        },
        "delete": {
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "description": "Deletes a domain of the customer.",
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            },
            "domainName": {
              "location": "path",
              "description": "Name of domain to be deleted",
              "type": "string",
              "required": true
            }
          },
          "id": "directory.domains.delete",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}"
        },
        "list": {
          "id": "directory.domains.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "response": {
            "$ref": "Domains2"
          },
          "description": "Lists the domains of the customer.",
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains",
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "GET"
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "description": "Inserts a domain of the customer.",
          "request": {
            "$ref": "Domains"
          },
          "path": "admin/directory/v1/customer/{customer}/domains",
          "response": {
            "$ref": "Domains"
          },
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "id": "directory.domains.insert",
          "parameterOrder": [
            "customer"
          ]
        }
      }
    },
    "customers": {
      "methods": {
        "get": {
          "parameterOrder": [
            "customerKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "path": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "description": "Retrieves a customer.",
          "id": "directory.customers.get",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameters": {
            "customerKey": {
              "type": "string",
              "description": "Id of the customer to be retrieved",
              "required": true,
              "location": "path"
            }
          },
          "httpMethod": "GET"
        },
        "update": {
          "description": "Updates a customer.",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ],
          "response": {
            "$ref": "Customer"
          },
          "id": "directory.customers.update",
          "request": {
            "$ref": "Customer"
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "parameters": {
            "customerKey": {
              "location": "path",
              "required": true,
              "description": "Id of the customer to be updated",
              "type": "string"
            }
          },
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ]
        },
        "patch": {
          "httpMethod": "PATCH",
          "parameters": {
            "customerKey": {
              "location": "path",
              "type": "string",
              "description": "Id of the customer to be updated",
              "required": true
            }
          },
          "id": "directory.customers.patch",
          "path": "admin/directory/v1/customers/{customerKey}",
          "request": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "response": {
            "$ref": "Customer"
          },
          "parameterOrder": [
            "customerKey"
          ],
          "description": "Patch Customers via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/customers/{customerKey}"
        }
      }
    },
    "tokens": {
      "methods": {
        "list": {
          "id": "directory.tokens.list",
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Tokens"
          },
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "delete": {
          "httpMethod": "DELETE",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string"
            },
            "clientId": {
              "location": "path",
              "description": "The Client ID of the application the token is issued to.",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "id": "directory.tokens.delete",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Delete all access tokens issued by a user for an application.",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        },
        "get": {
          "description": "Get information about an access token issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "response": {
            "$ref": "Token"
          },
          "id": "directory.tokens.get",
          "parameters": {
            "clientId": {
              "required": true,
              "location": "path",
              "description": "The Client ID of the application the token is issued to.",
              "type": "string"
            },
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            }
          },
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "delete": {
          "httpMethod": "DELETE",
          "parameters": {
            "roleAssignmentId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role assignment."
            },
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "id": "directory.roleAssignments.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "description": "Deletes a role assignment.",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}"
        },
        "insert": {
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "RoleAssignment"
          },
          "description": "Creates a role assignment.",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "request": {
            "$ref": "RoleAssignment"
          },
          "id": "directory.roleAssignments.insert"
        },
        "list": {
          "response": {
            "$ref": "RoleAssignments"
          },
          "description": "Retrieves a paginated list of all roleAssignments.",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "id": "directory.roleAssignments.list",
          "httpMethod": "GET",
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "location": "query",
              "type": "string"
            },
            "roleId": {
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            },
            "maxResults": {
              "type": "integer",
              "location": "query",
              "maximum": "200",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "minimum": "1"
            },
            "userKey": {
              "location": "query",
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "type": "string"
            }
          }
        },
        "get": {
          "response": {
            "$ref": "RoleAssignment"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "httpMethod": "GET",
          "description": "Retrieve a role assignment.",
          "id": "directory.roleAssignments.get",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "roleAssignmentId": {
              "location": "path",
              "description": "Immutable ID of the role assignment.",
              "required": true,
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            }
          }
        }
      }
    },
    "orgunits": {
      "methods": {
        "get": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "id": "directory.orgunits.get",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "response": {
            "$ref": "OrgUnit"
          },
          "description": "Retrieve organizational unit",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "orgUnitPath": {
              "pattern": "^.*$",
              "location": "path",
              "required": true,
              "description": "Full path of the organizational unit or its ID",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        },
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "description": "Remove organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            },
            "orgUnitPath": {
              "pattern": "^.*$",
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Full path of the organizational unit or its ID"
            }
          },
          "httpMethod": "DELETE",
          "id": "directory.orgunits.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}"
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "response": {
            "$ref": "OrgUnit"
          },
          "request": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.orgunits.insert",
          "description": "Add organizational unit",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "httpMethod": "POST"
        },
        "patch": {
          "id": "directory.orgunits.patch",
          "request": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "httpMethod": "PATCH",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameters": {
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "orgUnitPath": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$"
            }
          },
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "response": {
            "$ref": "OrgUnit"
          }
        },
        "list": {
          "description": "Retrieve all organizational units",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "response": {
            "$ref": "OrgUnits"
          },
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "description": "the URL-encoded organizational unit's path or its ID",
              "location": "query",
              "default": ""
            },
            "type": {
              "location": "query",
              "type": "string",
              "description": "Whether to return all sub-organizations or just immediate children",
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ]
            },
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "httpMethod": "GET",
          "id": "directory.orgunits.list"
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "id": "directory.orgunits.update",
          "response": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "description": "Update organizational unit",
          "request": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            },
            "orgUnitPath": {
              "type": "string",
              "required": true,
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$",
              "location": "path"
            }
          }
        }
      }
    },
    "members": {
      "methods": {
        "get": {
          "description": "Retrieve Group Member",
          "id": "directory.members.get",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "GET",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "memberKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the member"
            },
            "groupKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group",
              "required": true
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          }
        },
        "update": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "httpMethod": "PUT",
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string"
            },
            "memberKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "required": true
            }
          },
          "response": {
            "$ref": "Member"
          },
          "request": {
            "$ref": "Member"
          },
          "id": "directory.members.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Update membership of a user in the specified group."
        },
        "insert": {
          "request": {
            "$ref": "Member"
          },
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "response": {
            "$ref": "Member"
          },
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "id": "directory.members.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "description": "Add user to the specified group."
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "memberKey": {
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "type": "string",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.patch",
          "description": "Patch Member via Apiary Patch Orchestration",
          "response": {
            "$ref": "Member"
          },
          "request": {
            "$ref": "Member"
          },
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "list": {
          "description": "Retrieve all members in a group (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "roles": {
              "type": "string",
              "location": "query",
              "description": "Comma separated role values to filter list results on."
            },
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group",
              "location": "path",
              "required": true
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "minimum": "1",
              "default": "200",
              "type": "integer",
              "format": "int32",
              "location": "query",
              "description": "Maximum number of results to return. Max allowed value is 200."
            },
            "includeDerivedMembership": {
              "type": "boolean",
              "description": "Whether to list indirect memberships. Default: false.",
              "location": "query"
            }
          },
          "response": {
            "$ref": "Members"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "httpMethod": "GET",
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "parameterOrder": [
            "groupKey"
          ],
          "id": "directory.members.list"
        },
        "hasMember": {
          "response": {
            "$ref": "MembersHasMember"
          },
          "parameters": {
            "groupKey": {
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "location": "path"
            },
            "memberKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID."
            }
          },
          "id": "directory.members.hasMember",
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "httpMethod": "GET",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        },
        "delete": {
          "id": "directory.members.delete",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group",
              "type": "string"
            },
            "memberKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the member"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "description": "Remove membership.",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "moveDevicesToOu": {
          "httpMethod": "POST",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            },
            "orgUnitPath": {
              "location": "query",
              "type": "string",
              "description": "Full path of the target organizational unit or its ID",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "id": "directory.chromeosdevices.moveDevicesToOu"
        },
        "list": {
          "parameters": {
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "location": "query"
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "orderBy": {
              "type": "string",
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ],
              "location": "query"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "maxResults": {
              "minimum": "1",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "default": "100",
              "location": "query",
              "type": "integer"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "id": "directory.chromeosdevices.list"
        },
        "get": {
          "id": "directory.chromeosdevices.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "description": "Retrieve Chrome OS Device",
          "parameters": {
            "deviceId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of Chrome OS Device",
              "location": "path"
            },
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "projection": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            }
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        },
        "action": {
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "resourceId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of Chrome OS Device",
              "location": "path"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "httpMethod": "POST",
          "id": "directory.chromeosdevices.action",
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "description": "Take action on Chrome OS Device"
        },
        "update": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string"
            },
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "description": "Update Chrome OS Device",
          "id": "directory.chromeosdevices.update",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ]
        },
        "patch": {
          "id": "directory.chromeosdevices.patch",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameters": {
            "deviceId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of Chrome OS Device"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true
            }
          },
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "description": "Patch Chrome OS Device",
          "httpMethod": "PATCH",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ]
        }
      }
    }
  },
  "fullyEncodeReservedExpansion": true,
  "batchPath": "batch/admin/directory_v1",
  "revision": "20201013",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "name": "admin",
  "schemas": {
    "ChromeOsDevices": {
      "properties": {
        "kind": {
          "default": "admin#directory#chromeosdevices",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "chromeosdevices": {
          "type": "array",
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "description": "List of Chrome OS Device objects."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "ChromeOsDevices"
    },
    "RoleAssignment": {
      "properties": {
        "roleAssignmentId": {
          "format": "int64",
          "type": "string",
          "description": "ID of this roleAssignment."
        },
        "orgUnitId": {
          "type": "string",
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to."
        },
        "roleId": {
          "format": "int64",
          "description": "The ID of the role that is assigned.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roleAssignment.",
          "default": "admin#directory#roleAssignment"
        },
        "assignedTo": {
          "description": "The unique ID of the user this role is assigned to.",
          "type": "string"
        },
        "scopeType": {
          "type": "string",
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT "
        }
      },
      "id": "RoleAssignment",
      "type": "object"
    },
    "Alias": {
      "id": "Alias",
      "description": "JSON template for Alias object in Directory API.",
      "properties": {
        "primaryEmail": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#alias",
          "type": "string"
        },
        "etag": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MobileDevice": {
      "id": "MobileDevice",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of device (Read-only)"
        },
        "privilege": {
          "type": "string",
          "description": "DMAgentPermission (Read-only)"
        },
        "status": {
          "description": "Status of the device (Read-only)",
          "type": "string"
        },
        "managedAccountIsOnOwnerProfile": {
          "type": "boolean",
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)"
        },
        "encryptionStatus": {
          "type": "string",
          "description": "Mobile Device Encryption Status (Read-only)"
        },
        "userAgent": {
          "type": "string",
          "description": "Mobile Device user agent"
        },
        "kernelVersion": {
          "description": "Mobile Device Kernel version (Read-only)",
          "type": "string"
        },
        "manufacturer": {
          "type": "string",
          "description": "Mobile Device manufacturer (Read-only)"
        },
        "wifiMacAddress": {
          "type": "string",
          "description": "Mobile Device WiFi MAC address (Read-only)"
        },
        "resourceId": {
          "type": "string",
          "description": "Unique identifier of Mobile Device (Read-only)"
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "applications": {
          "items": {
            "properties": {
              "permission": {
                "items": {
                  "type": "string"
                },
                "description": "List of Permissions for application",
                "type": "array"
              },
              "displayName": {
                "type": "string",
                "description": "Display name of application"
              },
              "versionCode": {
                "description": "Version code of application",
                "type": "integer",
                "format": "int32"
              },
              "packageName": {
                "description": "Package name of application",
                "type": "string"
              },
              "versionName": {
                "type": "string",
                "description": "Version name of application"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "List of applications installed on Mobile Device"
        },
        "imei": {
          "description": "Mobile Device IMEI number (Read-only)",
          "type": "string"
        },
        "hardware": {
          "type": "string",
          "description": "Mobile Device Hardware (Read-only)"
        },
        "firstSync": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "kind": {
          "default": "admin#directory#mobiledevice",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "devicePasswordStatus": {
          "description": "DevicePasswordStatus (Read-only)",
          "type": "string"
        },
        "supportsWorkProfile": {
          "type": "boolean",
          "description": "Work profile supported on device (Read-only)"
        },
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "model": {
          "type": "string",
          "description": "Name of the model of the device"
        },
        "defaultLanguage": {
          "type": "string",
          "description": "The default locale used on the Mobile Device (Read-only)"
        },
        "serialNumber": {
          "description": "Mobile Device SSN or Serial Number (Read-only)",
          "type": "string"
        },
        "bootloaderVersion": {
          "type": "string",
          "description": "Mobile Device Bootloader version (Read-only)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "unknownSourcesStatus": {
          "description": "Unknown sources enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "meid": {
          "type": "string",
          "description": "Mobile Device MEID number (Read-only)"
        },
        "otherAccountsInfo": {
          "items": {
            "type": "string"
          },
          "description": "List of accounts added on device (Read-only)",
          "type": "array"
        },
        "hardwareId": {
          "type": "string",
          "description": "Mobile Device Hardware Id (Read-only)"
        },
        "lastSync": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "buildNumber": {
          "type": "string",
          "description": "Mobile Device Build number (Read-only)"
        },
        "deviceId": {
          "description": "Mobile Device serial number (Read-only)",
          "type": "string"
        },
        "securityPatchLevel": {
          "description": "Mobile Device Security patch level (Read-only)",
          "format": "int64",
          "type": "string"
        },
        "brand": {
          "description": "Mobile Device Brand (Read-only)",
          "type": "string"
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "networkOperator": {
          "type": "string",
          "description": "Mobile Device mobile or network operator (if available) (Read-only)"
        },
        "email": {
          "items": {
            "type": "string"
          },
          "description": "List of owner user's email addresses (Read-only)",
          "type": "array"
        },
        "deviceCompromisedStatus": {
          "type": "string",
          "description": "Mobile Device compromised status (Read-only)"
        },
        "os": {
          "description": "Name of the mobile operating system",
          "type": "string"
        },
        "basebandVersion": {
          "type": "string",
          "description": "Mobile Device Baseband version (Read-only)"
        },
        "name": {
          "description": "List of owner user's names (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UserLanguage": {
      "description": "JSON template for a language entry.",
      "properties": {
        "languageCode": {
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.",
          "type": "string"
        },
        "customLanguage": {
          "type": "string",
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set"
        }
      },
      "id": "UserLanguage",
      "type": "object"
    },
    "Users": {
      "type": "object",
      "properties": {
        "users": {
          "items": {
            "$ref": "User"
          },
          "description": "List of user objects.",
          "type": "array"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#users",
          "description": "Kind of resource this is."
        },
        "trigger_event": {
          "description": "Event that triggered this response (only used in case of Push Response)",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "Users",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Privileges": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#privileges",
          "description": "The type of the API resource. This is always admin#directory#privileges."
        },
        "items": {
          "description": "A list of Privilege resources.",
          "items": {
            "$ref": "Privilege"
          },
          "type": "array"
        }
      },
      "id": "Privileges"
    },
    "Tokens": {
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#tokenList",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#tokenList."
        },
        "items": {
          "description": "A list of Token resources.",
          "items": {
            "$ref": "Token"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "Tokens"
    },
    "UserSshPublicKey": {
      "description": "JSON template for a POSIX account entry.",
      "type": "object",
      "id": "UserSshPublicKey",
      "properties": {
        "expirationTimeUsec": {
          "type": "string",
          "format": "int64",
          "description": "An expiration time in microseconds since epoch."
        },
        "fingerprint": {
          "readOnly": true,
          "type": "string",
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)"
        },
        "key": {
          "type": "string",
          "description": "An SSH public key."
        }
      }
    },
    "ChromeOsDevice": {
      "id": "ChromeOsDevice",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "serialNumber": {
          "type": "string",
          "description": "Chromebook serial number (Read-only)"
        },
        "bootMode": {
          "type": "string",
          "description": "Chromebook boot mode (Read-only)"
        },
        "manufactureDate": {
          "type": "string",
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format."
        },
        "systemRamFreeReports": {
          "items": {
            "properties": {
              "systemRamFreeInfo": {
                "items": {
                  "type": "string",
                  "format": "int64"
                },
                "type": "array"
              },
              "reportTime": {
                "type": "string",
                "description": "Date and time the report was received.",
                "format": "date-time"
              }
            },
            "type": "object"
          },
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "type": "array"
        },
        "annotatedAssetId": {
          "type": "string",
          "description": "AssetId specified during enrollment or through later annotation"
        },
        "annotatedLocation": {
          "type": "string",
          "description": "Address or location of the device as noted by the administrator"
        },
        "ethernetMacAddress0": {
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "model": {
          "type": "string",
          "description": "Chromebook Model (Read-only)"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of the device"
        },
        "lastEnrollmentTime": {
          "format": "date-time",
          "description": "Date and time the device was last enrolled (Read-only)",
          "type": "string"
        },
        "tpmVersionInfo": {
          "properties": {
            "family": {
              "type": "string",
              "description": "TPM family."
            },
            "vendorSpecific": {
              "description": "Vendor-specific information such as Vendor ID.",
              "type": "string"
            },
            "tpmModel": {
              "type": "string",
              "description": "TPM model number."
            },
            "specLevel": {
              "type": "string",
              "description": "TPM specification level."
            },
            "firmwareVersion": {
              "type": "string",
              "description": "TPM firmware version."
            },
            "manufacturer": {
              "description": "TPM manufacturer code.",
              "type": "string"
            }
          },
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "type": "object"
        },
        "kind": {
          "default": "admin#directory#chromeosdevice",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "autoUpdateExpiration": {
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "type": "string",
          "format": "int64"
        },
        "ethernetMacAddress": {
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)",
          "type": "string"
        },
        "systemRamTotal": {
          "type": "string",
          "format": "int64",
          "description": "Total RAM on the device [in bytes] (Read-only)"
        },
        "willAutoRenew": {
          "type": "boolean",
          "description": "Will Chromebook auto renew after support end date (Read-only)"
        },
        "osVersion": {
          "type": "string",
          "description": "Chromebook Os Version (Read-only)"
        },
        "notes": {
          "type": "string",
          "description": "Notes added by the administrator"
        },
        "orderNumber": {
          "description": "Chromebook order number (Read-only)",
          "type": "string"
        },
        "cpuStatusReports": {
          "items": {
            "properties": {
              "reportTime": {
                "type": "string",
                "description": "Date and time the report was received.",
                "format": "date-time"
              },
              "cpuUtilizationPercentageInfo": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "cpuTemperatureInfo": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "temperature": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Temperature in Celsius degrees."
                    },
                    "label": {
                      "description": "CPU label",
                      "type": "string"
                    }
                  }
                },
                "description": "List of CPU temperature samples."
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "Reports of CPU utilization and temperature (Read-only)"
        },
        "deviceFiles": {
          "type": "array",
          "description": "List of device files to download (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "File name",
                "type": "string"
              },
              "createTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time the file was created"
              },
              "type": {
                "description": "File type",
                "type": "string"
              },
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              }
            }
          }
        },
        "recentUsers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of the user"
              },
              "email": {
                "type": "string",
                "description": "Email address of the user. Present only if the user type is managed"
              }
            }
          },
          "description": "List of recent device users, in descending order by last login time (Read-only)"
        },
        "firmwareVersion": {
          "type": "string",
          "description": "Chromebook firmware version (Read-only)"
        },
        "dockMacAddress": {
          "type": "string",
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "lastSync": {
          "type": "string",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time"
        },
        "macAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on wifi network interface (Read-only)"
        },
        "diskVolumeReports": {
          "items": {
            "type": "object",
            "properties": {
              "volumeInfo": {
                "description": "Disk volumes",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "storageTotal": {
                      "type": "string",
                      "description": "Total disk space [in bytes]",
                      "format": "int64"
                    },
                    "volumeId": {
                      "type": "string",
                      "description": "Volume id"
                    },
                    "storageFree": {
                      "description": "Free disk space [in bytes]",
                      "format": "int64",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "type": "array",
          "description": "Reports of disk space and other info about mounted/connected volumes."
        },
        "platformVersion": {
          "description": "Chromebook platform version (Read-only)",
          "type": "string"
        },
        "annotatedUser": {
          "type": "string",
          "description": "User of the device"
        },
        "meid": {
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)",
          "type": "string"
        },
        "activeTimeRanges": {
          "items": {
            "type": "object",
            "properties": {
              "date": {
                "format": "date",
                "description": "Date of usage",
                "type": "string"
              },
              "activeTime": {
                "format": "int32",
                "type": "integer",
                "description": "Duration in milliseconds"
              }
            }
          },
          "description": "List of active time ranges (Read-only)",
          "type": "array"
        },
        "deviceId": {
          "type": "string",
          "description": "Unique identifier of Chrome OS Device (Read-only)"
        },
        "lastKnownNetwork": {
          "description": "Contains last known network (Read-only)",
          "type": "array",
          "items": {
            "properties": {
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              },
              "ipAddress": {
                "type": "string",
                "description": "The IP address."
              }
            },
            "description": "Information for an ip address.",
            "type": "object"
          }
        },
        "status": {
          "type": "string",
          "description": "status of the device (Read-only)"
        },
        "supportEndDate": {
          "format": "date-time",
          "type": "string",
          "description": "Final date the device will be supported (Read-only)"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "FeatureRename": {
      "id": "FeatureRename",
      "properties": {
        "newName": {
          "description": "New name of the feature.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          }
        }
      },
      "type": "object"
    },
    "Features": {
      "type": "object",
      "description": "Public API: Resources.features",
      "properties": {
        "kind": {
          "default": "admin#directory#resources#features#featuresList",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "features": {
          "items": {
            "$ref": "Feature"
          },
          "type": "array",
          "description": "The Features in this page of results."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Features"
    },
    "User": {
      "properties": {
        "archived": {
          "type": "boolean",
          "description": "Indicates if user is archived."
        },
        "externalIds": {
          "type": "any",
          "description": "The external Ids of User *"
        },
        "creationTime": {
          "description": "User's G Suite account creation time. (Read-only)",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "recoveryEmail": {
          "type": "string",
          "description": "Recovery email of the user."
        },
        "changePasswordAtNextLogin": {
          "type": "boolean",
          "description": "Boolean indicating if the user should change password in next login"
        },
        "isEnforcedIn2Sv": {
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "lastLoginTime": {
          "description": "User's last login time. (Read-only)",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "websites": {
          "type": "any",
          "description": "Websites of User"
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "Boolean indicating if ip is whitelisted"
        },
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        },
        "organizations": {
          "description": "Organizations of User",
          "type": "any"
        },
        "keywords": {
          "type": "any",
          "description": "Keywords of User"
        },
        "addresses": {
          "description": "Addresses of User",
          "type": "any"
        },
        "recoveryPhone": {
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
          "type": "string"
        },
        "suspensionReason": {
          "readOnly": true,
          "description": "Output only. Suspension reason if user is suspended (Read-only)",
          "type": "string"
        },
        "locations": {
          "description": "Locations of User",
          "type": "any"
        },
        "isDelegatedAdmin": {
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "gender": {
          "type": "any",
          "description": "Gender of User"
        },
        "languages": {
          "description": "Languages of User",
          "type": "any"
        },
        "suspended": {
          "description": "Indicates if user is suspended.",
          "type": "boolean"
        },
        "name": {
          "description": "User's name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "$ref": "UserName"
        },
        "kind": {
          "readOnly": true,
          "default": "admin#directory#user",
          "description": "Output only. Kind of resource this is.",
          "type": "string"
        },
        "notes": {
          "description": "Notes of User",
          "type": "any"
        },
        "emails": {
          "type": "any",
          "description": "Emails of User"
        },
        "isAdmin": {
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "isMailboxSetup": {
          "description": "Output only. Is mailbox setup (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "deletionTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "agreedToTerms": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Indicates if user has agreed to terms (Read-only)"
        },
        "isEnrolledIn2Sv": {
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "primaryEmail": {
          "description": "username of User",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "password": {
          "description": "User's password",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "description": "Output only. List of aliases (Read-only)",
          "readOnly": true,
          "type": "array"
        },
        "customSchemas": {
          "type": "object",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          },
          "description": "Custom fields of the user."
        },
        "includeInGlobalAddressList": {
          "description": "Boolean indicating if user is included in Global Address List",
          "type": "boolean"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "posixAccounts": {
          "type": "any",
          "description": "The POSIX accounts of User"
        },
        "phones": {
          "description": "Phone numbers of User",
          "type": "any"
        },
        "hashFunction": {
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt",
          "type": "string"
        },
        "ims": {
          "description": "User's Instant Messenger",
          "type": "any"
        },
        "sshPublicKeys": {
          "description": "The SSH public keys of User",
          "type": "any"
        },
        "thumbnailPhotoUrl": {
          "readOnly": true,
          "description": "Output only. Photo Url of the user (Read-only)",
          "type": "string"
        },
        "nonEditableAliases": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Output only. List of non editable aliases (Read-only)",
          "readOnly": true
        },
        "etag": {
          "description": "Output only. ETag of the resource.",
          "readOnly": true,
          "type": "string"
        },
        "customerId": {
          "type": "string",
          "description": "Output only. CustomerId of User (Read-only)",
          "readOnly": true
        },
        "thumbnailPhotoEtag": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. ETag of the user's photo (Read-only)"
        },
        "relations": {
          "description": "The Relations of User *",
          "type": "any"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "User"
    },
    "CalendarResource": {
      "properties": {
        "userVisibleDescription": {
          "type": "string",
          "description": "Description of the resource, visible to users and admins."
        },
        "capacity": {
          "format": "int32",
          "type": "integer",
          "description": "Capacity of a resource, number of seats in a room."
        },
        "generatedResourceName": {
          "type": "string",
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\"."
        },
        "resourceName": {
          "type": "string",
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          }
        },
        "buildingId": {
          "description": "Unique ID for the building a resource is located in.",
          "type": "string"
        },
        "floorName": {
          "description": "Name of the floor a resource is located on.",
          "type": "string"
        },
        "floorSection": {
          "description": "Name of the section within a floor a resource is located in.",
          "type": "string"
        },
        "resourceEmail": {
          "type": "string",
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource."
        },
        "kind": {
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "type": "string",
          "default": "admin#directory#resources#calendars#CalendarResource"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "description": "The unique ID for the calendar resource."
        },
        "resourceType": {
          "type": "string",
          "description": "The type of the calendar resource, intended for non-room resources."
        },
        "featureInstances": {
          "type": "any",
          "description": "Instances of features for the calendar resource."
        },
        "resourceCategory": {
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.",
          "type": "string"
        }
      },
      "id": "CalendarResource",
      "description": "Public API: Resources.calendars",
      "type": "object"
    },
    "Buildings": {
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#buildings#buildingsList",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "buildings": {
          "items": {
            "$ref": "Building"
          },
          "type": "array",
          "description": "The Buildings in this page of results."
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        }
      },
      "description": "Public API: Resources.buildings",
      "type": "object",
      "id": "Buildings"
    },
    "UserName": {
      "type": "object",
      "properties": {
        "familyName": {
          "type": "string",
          "description": "Last Name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "fullName": {
          "type": "string",
          "description": "Full Name"
        },
        "givenName": {
          "type": "string",
          "description": "First Name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        }
      },
      "id": "UserName"
    },
    "MobileDevices": {
      "type": "object",
      "id": "MobileDevices",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#mobiledevices"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "mobiledevices": {
          "type": "array",
          "items": {
            "$ref": "MobileDevice"
          },
          "description": "List of Mobile Device objects."
        }
      }
    },
    "OrgUnits": {
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "OrgUnits",
      "properties": {
        "organizationUnits": {
          "items": {
            "$ref": "OrgUnit"
          },
          "type": "array",
          "description": "List of user objects."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#orgUnits",
          "type": "string"
        }
      }
    },
    "UserPhone": {
      "properties": {
        "value": {
          "description": "Phone number.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary phone or not."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "description": "JSON template for a phone entry.",
      "type": "object",
      "id": "UserPhone"
    },
    "UserPhoto": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "UserPhoto",
      "properties": {
        "width": {
          "description": "Width in pixels of the photo",
          "type": "integer",
          "format": "int32"
        },
        "photoData": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "format": "byte",
          "description": "Base64 encoded photo data"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#user#photo",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "primaryEmail": {
          "description": "Primary email of User (Read-only)",
          "type": "string"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "Height in pixels of the photo"
        },
        "mimeType": {
          "type": "string",
          "description": "Mime Type of the photo"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        }
      },
      "type": "object"
    },
    "Token": {
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of authorization scopes the application is granted."
        },
        "userKey": {
          "description": "The unique ID of the user that issued the token.",
          "type": "string"
        },
        "clientId": {
          "type": "string",
          "description": "The Client ID of the application the token is issued to."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "anonymous": {
          "type": "boolean",
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID."
        },
        "kind": {
          "default": "admin#directory#token",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#token."
        },
        "nativeApp": {
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device.",
          "type": "boolean"
        },
        "displayText": {
          "type": "string",
          "description": "The displayable name of the application the token is issued to."
        }
      },
      "type": "object",
      "id": "Token"
    },
    "FeatureInstance": {
      "id": "FeatureInstance",
      "description": "JSON template for a feature instance.",
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      },
      "type": "object"
    },
    "Domains2": {
      "id": "Domains2",
      "properties": {
        "domains": {
          "type": "array",
          "items": {
            "$ref": "Domains"
          },
          "description": "List of domain objects."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domains",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object"
    },
    "UserAbout": {
      "properties": {
        "contentType": {
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Actual value of notes."
        }
      },
      "description": "JSON template for About (notes) of a user in Directory API.",
      "type": "object",
      "id": "UserAbout"
    },
    "Feature": {
      "id": "Feature",
      "type": "object",
      "description": "JSON template for Feature object in Directory API.",
      "properties": {
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "name": {
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "description": "The name of the feature.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#resources#features#Feature",
          "description": "Kind of resource this is.",
          "type": "string"
        }
      }
    },
    "Roles": {
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#roles",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roles."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Role"
          },
          "description": "A list of Role resources."
        }
      },
      "id": "Roles"
    },
    "Channel": {
      "description": "An notification channel used to watch for resource changes.",
      "id": "Channel",
      "type": "object",
      "properties": {
        "params": {
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "expiration": {
          "type": "string",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "format": "int64"
        },
        "resourceId": {
          "type": "string",
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions."
        },
        "kind": {
          "default": "api#channel",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "type": "string"
        },
        "type": {
          "description": "The type of delivery mechanism used for this channel.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "A UUID or similar unique string that identifies this channel."
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "token": {
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.",
          "type": "string"
        },
        "payload": {
          "type": "boolean",
          "description": "A Boolean value to indicate whether payload is wanted. Optional."
        }
      }
    },
    "DirectoryChromeosdevicesCommand": {
      "type": "object",
      "properties": {
        "commandExpireTime": {
          "format": "google-datetime",
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.",
          "type": "string"
        },
        "commandResult": {
          "$ref": "DirectoryChromeosdevicesCommandResult",
          "description": "The result of the command execution."
        },
        "issueTime": {
          "format": "google-datetime",
          "description": "The timestamp when the command was issued by the admin.",
          "type": "string"
        },
        "commandId": {
          "format": "int64",
          "description": "Unique ID of a device command.",
          "type": "string"
        },
        "type": {
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "type": "string",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "description": "The type of the command."
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ],
          "type": "string",
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "description": "Indicates the command state."
        },
        "payload": {
          "description": "The payload that the command specified, if any.",
          "type": "string"
        }
      },
      "description": "Information regarding a command that was issued to a device.",
      "id": "DirectoryChromeosdevicesCommand"
    },
    "Group": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the group"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of Group (Read-only)"
        },
        "email": {
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "type": "string",
          "description": "Email of Group"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#group",
          "type": "string"
        },
        "nonEditableAliases": {
          "items": {
            "type": "string"
          },
          "description": "List of non editable aliases (Read-only)",
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Group name"
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "description": "List of aliases (Read-only)",
          "type": "array"
        },
        "adminCreated": {
          "description": "Is the group created by admin (Read-only) *",
          "type": "boolean"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "directMembersCount": {
          "type": "string",
          "description": "Group direct members count",
          "format": "int64"
        }
      },
      "id": "Group",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Schema": {
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Display name for the schema.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#schema"
        },
        "schemaId": {
          "type": "string",
          "description": "Unique identifier of Schema (Read-only)"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "schemaName": {
          "description": "Schema name",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "type": "string"
        },
        "fields": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "description": "Fields of Schema",
          "type": "array"
        }
      },
      "id": "Schema"
    },
    "DirectoryChromeosdevicesCommandResult": {
      "type": "object",
      "id": "DirectoryChromeosdevicesCommandResult",
      "properties": {
        "result": {
          "type": "string",
          "description": "The result of the command.",
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ]
        },
        "executeTime": {
          "format": "google-datetime",
          "description": "The time at which the command was executed or failed to execute.",
          "type": "string"
        },
        "errorMessage": {
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed.",
          "type": "string"
        }
      },
      "description": "The result of executing a command."
    },
    "UserExternalId": {
      "type": "object",
      "description": "JSON template for an externalId entry.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the Id."
        },
        "value": {
          "description": "The value of the id.",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        }
      },
      "id": "UserExternalId"
    },
    "VerificationCode": {
      "id": "VerificationCode",
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The obfuscated unique ID of the user."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#verificationCode",
          "description": "The type of the resource. This is always admin#directory#verificationCode."
        },
        "verificationCode": {
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "ChromeOsMoveDevicesToOu": {
      "properties": {
        "deviceIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "description": "ChromeOs Devices to be moved to OU"
        }
      },
      "type": "object",
      "id": "ChromeOsMoveDevicesToOu"
    },
    "UserPosixAccount": {
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix.",
      "id": "UserPosixAccount",
      "type": "object",
      "properties": {
        "gecos": {
          "description": "The GECOS (user information) for this account.",
          "type": "string"
        },
        "gid": {
          "type": "string",
          "format": "uint64",
          "description": "The default group ID."
        },
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "accountId": {
          "description": "A POSIX account field identifier.",
          "type": "string"
        },
        "operatingSystemType": {
          "description": "The operating system type for this account.",
          "type": "string"
        },
        "uid": {
          "format": "uint64",
          "type": "string",
          "description": "The POSIX compliant user ID."
        },
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        },
        "homeDirectory": {
          "type": "string",
          "description": "The path to the home directory for this account."
        },
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        },
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        }
      }
    },
    "Role": {
      "properties": {
        "roleDescription": {
          "description": "A short description of the role.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#role.",
          "default": "admin#directory#role",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "roleName": {
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "string",
          "description": "Name of the role."
        },
        "rolePrivileges": {
          "items": {
            "properties": {
              "privilegeName": {
                "type": "string",
                "description": "The name of the privilege."
              },
              "serviceId": {
                "type": "string",
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
              }
            },
            "type": "object"
          },
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "description": "The set of privileges that are granted to this role.",
          "type": "array"
        },
        "isSystemRole": {
          "description": "Returns true if this is a pre-defined system role.",
          "type": "boolean"
        },
        "roleId": {
          "format": "int64",
          "description": "ID of the role.",
          "type": "string"
        },
        "isSuperAdminRole": {
          "description": "Returns true if the role is a super admin role.",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "Role"
    },
    "UserLocation": {
      "properties": {
        "deskCode": {
          "description": "Most specific textual code of individual desk location.",
          "type": "string"
        },
        "area": {
          "type": "string",
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''"
        },
        "floorName": {
          "type": "string",
          "description": "Floor name/number."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "buildingId": {
          "description": "Building Identifier.",
          "type": "string"
        },
        "floorSection": {
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.",
          "type": "string"
        }
      },
      "id": "UserLocation",
      "type": "object",
      "description": "JSON template for a location entry."
    },
    "Groups": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#groups",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "groups": {
          "type": "array",
          "description": "List of group objects.",
          "items": {
            "$ref": "Group"
          }
        }
      },
      "type": "object",
      "id": "Groups",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "RoleAssignments": {
      "type": "object",
      "id": "RoleAssignments",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "description": "A list of RoleAssignment resources.",
          "items": {
            "$ref": "RoleAssignment"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments .",
          "default": "admin#directory#roleAssignments"
        }
      }
    },
    "UserKeyword": {
      "type": "object",
      "id": "UserKeyword",
      "description": "JSON template for a keyword entry.",
      "properties": {
        "value": {
          "description": "Keyword.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      }
    },
    "UserUndelete": {
      "id": "UserUndelete",
      "type": "object",
      "properties": {
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        }
      }
    },
    "Customer": {
      "type": "object",
      "id": "Customer",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "customerDomain": {
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer.",
          "type": "string"
        },
        "language": {
          "type": "string",
          "description": "The customer's ISO 639-2 language code. The default value is en-US"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The customer's contact phone number in E.164 format."
        },
        "kind": {
          "default": "admin#directory#customer",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer",
          "type": "string"
        },
        "id": {
          "description": "The unique ID for the customer's G Suite account. (Readonly)",
          "type": "string"
        },
        "postalAddress": {
          "$ref": "CustomerPostalAddress",
          "description": "The customer's postal address information."
        },
        "customerCreationTime": {
          "type": "string",
          "description": "The customer's creation time (Readonly)",
          "format": "date-time"
        },
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserWebsite": {
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary website or not."
        },
        "value": {
          "description": "Website.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      },
      "id": "UserWebsite",
      "description": "JSON template for a website entry.",
      "type": "object"
    },
    "DomainAlias": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "domainAliasName": {
          "description": "The domain alias name.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#domainAlias"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain alias. (Read-only)"
        },
        "creationTime": {
          "description": "The creation time of the domain alias. (Read-only).",
          "format": "int64",
          "type": "string"
        },
        "parentDomainName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer."
        }
      },
      "type": "object",
      "id": "DomainAlias"
    },
    "Member": {
      "id": "Member",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of member (Immutable)"
        },
        "delivery_settings": {
          "description": "Delivery settings of member",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey."
        },
        "status": {
          "description": "Status of member (Immutable)",
          "type": "string"
        },
        "email": {
          "description": "Email of member (Read-only)",
          "type": "string"
        },
        "role": {
          "description": "Role of member",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#member"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "UserRelation": {
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The name of the relation."
        },
        "type": {
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner.",
          "type": "string"
        }
      },
      "description": "JSON template for a relation entry.",
      "id": "UserRelation",
      "type": "object"
    },
    "MobileDeviceAction": {
      "type": "object",
      "id": "MobileDeviceAction",
      "properties": {
        "action": {
          "type": "string",
          "description": "Action to be taken on the Mobile Device",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          }
        }
      }
    },
    "Building": {
      "type": "object",
      "description": "Public API: Resources.buildings",
      "properties": {
        "buildingName": {
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters.",
          "type": "string"
        },
        "description": {
          "description": "A brief description of the building. For example, \"Chelsea Market\".",
          "type": "string"
        },
        "buildingId": {
          "description": "Unique identifier for the building. The maximum length is 100 characters.",
          "type": "string"
        },
        "floorNames": {
          "type": "array",
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "default": "admin#directory#resources#buildings#Building",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "address": {
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required.",
          "$ref": "BuildingAddress"
        },
        "coordinates": {
          "$ref": "BuildingCoordinates",
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees."
        }
      },
      "id": "Building"
    },
    "UserIm": {
      "id": "UserIm",
      "description": "JSON template for instant messenger of an user.",
      "type": "object",
      "properties": {
        "customProtocol": {
          "description": "Custom protocol.",
          "type": "string"
        },
        "im": {
          "type": "string",
          "description": "Instant messenger id."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "protocol": {
          "type": "string",
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary im. Only one entry could be marked as primary."
        }
      }
    },
    "UserAddress": {
      "properties": {
        "postalCode": {
          "description": "Postal code.",
          "type": "string"
        },
        "poBox": {
          "description": "Other parts of address.",
          "type": "string"
        },
        "locality": {
          "description": "Locality.",
          "type": "string"
        },
        "streetAddress": {
          "description": "Street.",
          "type": "string"
        },
        "country": {
          "type": "string",
          "description": "Country."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "region": {
          "description": "Region.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value."
        },
        "extendedAddress": {
          "type": "string",
          "description": "Extended Address."
        },
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "formatted": {
          "description": "Formatted address.",
          "type": "string"
        },
        "countryCode": {
          "type": "string",
          "description": "Country code."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary address. Only one entry could be marked as primary."
        }
      },
      "type": "object",
      "description": "JSON template for address.",
      "id": "UserAddress"
    },
    "Asp": {
      "id": "Asp",
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "creationTime": {
          "type": "string",
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "format": "int64"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#asp",
          "description": "The type of the API resource. This is always admin#directory#asp."
        },
        "name": {
          "type": "string",
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the ASP."
        },
        "codeId": {
          "type": "integer",
          "description": "The unique ID of the ASP.",
          "format": "int32"
        },
        "userKey": {
          "description": "The unique ID of the user who issued the ASP.",
          "type": "string"
        },
        "lastTimeUsed": {
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "type": "string",
          "format": "int64"
        }
      },
      "type": "object"
    },
    "Privilege": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        },
        "isOuScopable": {
          "type": "boolean",
          "description": "If the privilege can be restricted to an organization unit."
        },
        "childPrivileges": {
          "type": "array",
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "items": {
            "$ref": "Privilege"
          }
        },
        "serviceName": {
          "type": "string",
          "description": "The name of the service this privilege is for."
        },
        "serviceId": {
          "type": "string",
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privilege.",
          "default": "admin#directory#privilege"
        }
      },
      "id": "Privilege",
      "type": "object"
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "type": "object",
      "description": "A response for issuing a command.",
      "properties": {
        "commandId": {
          "type": "string",
          "format": "int64",
          "description": "The unique ID of the issued command, used to retrieve the command status."
        }
      },
      "id": "DirectoryChromeosdevicesIssueCommandResponse"
    },
    "Asps": {
      "properties": {
        "kind": {
          "default": "admin#directory#aspList",
          "description": "The type of the API resource. This is always admin#directory#aspList.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Asp"
          },
          "description": "A list of ASP resources."
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Asps",
      "type": "object"
    },
    "UserOrganization": {
      "description": "JSON template for an organization entry.",
      "type": "object",
      "id": "UserOrganization",
      "properties": {
        "primary": {
          "description": "If it user's primary organization.",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the organization",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol of the organization.",
          "type": "string"
        },
        "title": {
          "description": "Title (designation) of the user in the organization.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "domain": {
          "description": "The domain to which the organization belongs to.",
          "type": "string"
        },
        "costCenter": {
          "type": "string",
          "description": "The cost center of the users department."
        },
        "fullTimeEquivalent": {
          "type": "integer",
          "format": "int32",
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%)."
        },
        "description": {
          "type": "string",
          "description": "Description of the organization."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
        },
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        },
        "location": {
          "description": "Location of the organization. This need not be fully qualified address.",
          "type": "string"
        }
      }
    },
    "MembersHasMember": {
      "id": "MembersHasMember",
      "type": "object",
      "description": "JSON template for Has Member response in Directory API.",
      "properties": {
        "isMember": {
          "type": "boolean",
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "readOnly": true
        }
      }
    },
    "CalendarResources": {
      "description": "Public API: Resources.calendars",
      "properties": {
        "kind": {
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "items": {
          "description": "The CalendarResources in this page of results.",
          "items": {
            "$ref": "CalendarResource"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object",
      "id": "CalendarResources"
    },
    "Schemas": {
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#schemas",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "schemas": {
          "items": {
            "$ref": "Schema"
          },
          "type": "array",
          "description": "List of UserSchema objects."
        }
      },
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Schemas",
      "type": "object"
    },
    "SchemaFieldSpec": {
      "properties": {
        "fieldType": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Type of the field."
        },
        "readAccessType": {
          "default": "ALL_DOMAIN_USERS",
          "type": "string",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\"."
        },
        "fieldName": {
          "description": "Name of the field.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema#fieldspec"
        },
        "indexed": {
          "description": "Boolean specifying whether the field is indexed or not.",
          "default": "true",
          "type": "boolean"
        },
        "multiValued": {
          "description": "Boolean specifying whether this is a multi-valued field or not.",
          "type": "boolean"
        },
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string",
          "description": "Display Name of the field."
        },
        "fieldId": {
          "description": "Unique identifier of Field (Read-only)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "numericIndexingSpec": {
          "properties": {
            "maxValue": {
              "type": "number",
              "format": "double",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            },
            "minValue": {
              "type": "number",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double"
            }
          },
          "type": "object",
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported."
        }
      },
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "SchemaFieldSpec",
      "type": "object"
    },
    "Members": {
      "id": "Members",
      "type": "object",
      "properties": {
        "members": {
          "items": {
            "$ref": "Member"
          },
          "type": "array",
          "description": "List of member objects."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#members",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        }
      }
    },
    "UserEmail": {
      "properties": {
        "address": {
          "description": "Email id of the user.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary email. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value."
        }
      },
      "description": "JSON template for an email.",
      "type": "object",
      "id": "UserEmail"
    },
    "BuildingCoordinates": {
      "id": "BuildingCoordinates",
      "type": "object",
      "properties": {
        "longitude": {
          "description": "Longitude in decimal degrees.",
          "format": "double",
          "type": "number"
        },
        "latitude": {
          "type": "number",
          "description": "Latitude in decimal degrees.",
          "format": "double"
        }
      },
      "description": "Public API: Resources.buildings"
    },
    "CustomerPostalAddress": {
      "properties": {
        "postalCode": {
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element.",
          "type": "string"
        },
        "countryCode": {
          "type": "string",
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements."
        },
        "addressLine2": {
          "type": "string",
          "description": "Address line 2 of the address."
        },
        "locality": {
          "type": "string",
          "description": "Name of the locality. An example of a locality value is the city of San Francisco."
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        },
        "contactName": {
          "type": "string",
          "description": "The customer contact's name."
        },
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        },
        "addressLine3": {
          "type": "string",
          "description": "Address line 3 of the address."
        },
        "region": {
          "type": "string",
          "description": "Name of the region. An example of a region value is NY for the state of New York."
        }
      },
      "id": "CustomerPostalAddress",
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "string",
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100]."
        },
        "commandType": {
          "type": "string",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "description": "The type of command."
        }
      },
      "id": "DirectoryChromeosdevicesIssueCommandRequest",
      "description": "A request for issuing a command."
    },
    "UserCustomProperties": {
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "id": "UserCustomProperties",
      "type": "object",
      "additionalProperties": {
        "type": "any"
      }
    },
    "BuildingAddress": {
      "description": "Public API: Resources.buildings",
      "id": "BuildingAddress",
      "properties": {
        "administrativeArea": {
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region.",
          "type": "string"
        },
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        },
        "postalCode": {
          "type": "string",
          "description": "Optional. Postal code of the address."
        },
        "locality": {
          "type": "string",
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines."
        },
        "addressLines": {
          "items": {
            "type": "string"
          },
          "description": "Unstructured address lines describing the lower levels of an address.",
          "type": "array"
        },
        "sublocality": {
          "type": "string",
          "description": "Optional. Sublocality of the address."
        },
        "languageCode": {
          "type": "string",
          "description": "Optional. BCP-47 language code of the contents of this address (if known)."
        }
      },
      "type": "object"
    },
    "UserGender": {
      "id": "UserGender",
      "properties": {
        "addressMeAs": {
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Gender."
        },
        "customGender": {
          "type": "string",
          "description": "Custom gender."
        }
      },
      "type": "object"
    },
    "OrgUnit": {
      "properties": {
        "orgUnitId": {
          "type": "string",
          "description": "Id of OrgUnit"
        },
        "parentOrgUnitId": {
          "description": "Id of parent OrgUnit",
          "type": "string"
        },
        "parentOrgUnitPath": {
          "description": "Path of parent OrgUnit",
          "type": "string"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "Path of OrgUnit"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#orgUnit",
          "description": "Kind of resource this is."
        },
        "description": {
          "description": "Description of OrgUnit",
          "type": "string"
        },
        "name": {
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          },
          "description": "Name of OrgUnit",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "blockInheritance": {
          "description": "Should block inheritance",
          "type": "boolean"
        }
      },
      "id": "OrgUnit",
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "VerificationCodes": {
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "VerificationCode"
          },
          "type": "array",
          "description": "A list of verification code resources."
        },
        "kind": {
          "default": "admin#directory#verificationCodesList",
          "type": "string",
          "description": "The type of the resource. This is always admin#directory#verificationCodesList."
        }
      },
      "type": "object",
      "id": "VerificationCodes"
    },
    "Domains": {
      "properties": {
        "creationTime": {
          "description": "Creation time of the domain. (Read-only).",
          "type": "string",
          "format": "int64"
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Indicates if the domain is a primary domain (Read-only)."
        },
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array",
          "description": "List of domain alias objects. (Read-only)"
        },
        "kind": {
          "default": "admin#directory#domain",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "domainName": {
          "description": "The domain name of the customer.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain. (Read-only)."
        }
      },
      "type": "object",
      "id": "Domains"
    },
    "DomainAliases": {
      "type": "object",
      "id": "DomainAliases",
      "properties": {
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array",
          "description": "List of domain alias objects."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domainAliases",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "UserMakeAdmin": {
      "id": "UserMakeAdmin",
      "properties": {
        "status": {
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "description": "Boolean indicating new admin status of the user",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Aliases": {
      "description": "JSON response template to list aliases in Directory API.",
      "id": "Aliases",
      "properties": {
        "etag": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#aliases"
        },
        "aliases": {
          "items": {
            "type": "any"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ChromeOsDeviceAction": {
      "properties": {
        "deprovisionReason": {
          "type": "string"
        },
        "action": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "description": "Action to be taken on the ChromeOs Device"
        }
      },
      "type": "object",
      "id": "ChromeOsDeviceAction"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        }
      }
    }
  }
}
