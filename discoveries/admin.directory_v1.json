{
  "kind": "discovery#restDescription",
  "schemas": {
    "Domains": {
      "properties": {
        "creationTime": {
          "description": "Creation time of the domain. (Read-only).",
          "type": "string",
          "format": "int64"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domain",
          "description": "Kind of resource this is."
        },
        "domainName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The domain name of the customer."
        },
        "domainAliases": {
          "description": "List of domain alias objects. (Read-only)",
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          }
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain. (Read-only)."
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Indicates if the domain is a primary domain (Read-only)."
        }
      },
      "type": "object",
      "id": "Domains"
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "description": "A request for issuing a command.",
      "type": "object",
      "properties": {
        "commandType": {
          "type": "string",
          "description": "The type of command.",
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ]
        },
        "payload": {
          "type": "string",
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100]."
        }
      },
      "id": "DirectoryChromeosdevicesIssueCommandRequest"
    },
    "UserPhone": {
      "type": "object",
      "description": "JSON template for a phone entry.",
      "properties": {
        "primary": {
          "description": "If this is user's primary phone or not.",
          "type": "boolean"
        },
        "value": {
          "type": "string",
          "description": "Phone number."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      },
      "id": "UserPhone"
    },
    "User": {
      "id": "User",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "lastLoginTime": {
          "type": "string",
          "format": "date-time",
          "description": "User's last login time. (Read-only)",
          "readOnly": true
        },
        "isAdmin": {
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "organizations": {
          "description": "Organizations of User",
          "type": "any"
        },
        "recoveryPhone": {
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
          "type": "string"
        },
        "isDelegatedAdmin": {
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "password": {
          "type": "string",
          "description": "User's password",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "languages": {
          "type": "any",
          "description": "Languages of User"
        },
        "ims": {
          "description": "User's Instant Messenger",
          "type": "any"
        },
        "locations": {
          "type": "any",
          "description": "Locations of User"
        },
        "isEnrolledIn2Sv": {
          "type": "boolean",
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "readOnly": true
        },
        "archived": {
          "description": "Indicates if user is archived.",
          "type": "boolean"
        },
        "sshPublicKeys": {
          "description": "The SSH public keys of User",
          "type": "any"
        },
        "kind": {
          "default": "admin#directory#user",
          "readOnly": true,
          "description": "Output only. Kind of resource this is.",
          "type": "string"
        },
        "emails": {
          "description": "Emails of User",
          "type": "any"
        },
        "creationTime": {
          "format": "date-time",
          "description": "User's G Suite account creation time. (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "ipWhitelisted": {
          "description": "Boolean indicating if ip is whitelisted",
          "type": "boolean"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        },
        "name": {
          "$ref": "UserName",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's name"
        },
        "phones": {
          "type": "any",
          "description": "Phone numbers of User"
        },
        "thumbnailPhotoEtag": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. ETag of the user's photo (Read-only)"
        },
        "externalIds": {
          "description": "The external Ids of User *",
          "type": "any"
        },
        "suspended": {
          "type": "boolean",
          "description": "Indicates if user is suspended."
        },
        "gender": {
          "description": "Gender of User",
          "type": "any"
        },
        "keywords": {
          "description": "Keywords of User",
          "type": "any"
        },
        "includeInGlobalAddressList": {
          "description": "Boolean indicating if user is included in Global Address List",
          "type": "boolean"
        },
        "isMailboxSetup": {
          "description": "Output only. Is mailbox setup (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "relations": {
          "type": "any",
          "description": "The Relations of User *"
        },
        "thumbnailPhotoUrl": {
          "type": "string",
          "description": "Output only. Photo Url of the user (Read-only)",
          "readOnly": true
        },
        "addresses": {
          "type": "any",
          "description": "Addresses of User"
        },
        "notes": {
          "description": "Notes of User",
          "type": "any"
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "description": "Output only. List of aliases (Read-only)",
          "type": "array"
        },
        "websites": {
          "type": "any",
          "description": "Websites of User"
        },
        "customSchemas": {
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          },
          "type": "object",
          "description": "Custom fields of the user."
        },
        "agreedToTerms": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Indicates if user has agreed to terms (Read-only)"
        },
        "etag": {
          "description": "Output only. ETag of the resource.",
          "readOnly": true,
          "type": "string"
        },
        "changePasswordAtNextLogin": {
          "type": "boolean",
          "description": "Boolean indicating if the user should change password in next login"
        },
        "deletionTime": {
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "customerId": {
          "readOnly": true,
          "description": "Output only. CustomerId of User (Read-only)",
          "type": "string"
        },
        "recoveryEmail": {
          "type": "string",
          "description": "Recovery email of the user."
        },
        "nonEditableAliases": {
          "readOnly": true,
          "description": "Output only. List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "posixAccounts": {
          "type": "any",
          "description": "The POSIX accounts of User"
        },
        "primaryEmail": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "username of User",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "hashFunction": {
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt",
          "type": "string"
        },
        "isEnforcedIn2Sv": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Is 2-step verification enforced (Read-only)"
        },
        "suspensionReason": {
          "readOnly": true,
          "description": "Output only. Suspension reason if user is suspended (Read-only)",
          "type": "string"
        }
      }
    },
    "Domains2": {
      "id": "Domains2",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#domains",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "domains": {
          "type": "array",
          "items": {
            "$ref": "Domains"
          },
          "description": "List of domain objects."
        }
      }
    },
    "UserAddress": {
      "description": "JSON template for address.",
      "id": "UserAddress",
      "type": "object",
      "properties": {
        "countryCode": {
          "type": "string",
          "description": "Country code."
        },
        "country": {
          "type": "string",
          "description": "Country."
        },
        "primary": {
          "description": "If this is user's primary address. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "locality": {
          "description": "Locality.",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal code.",
          "type": "string"
        },
        "region": {
          "type": "string",
          "description": "Region."
        },
        "extendedAddress": {
          "description": "Extended Address.",
          "type": "string"
        },
        "formatted": {
          "description": "Formatted address.",
          "type": "string"
        },
        "poBox": {
          "type": "string",
          "description": "Other parts of address."
        },
        "streetAddress": {
          "description": "Street.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "sourceIsStructured": {
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered.",
          "type": "boolean"
        }
      }
    },
    "OrgUnit": {
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "OrgUnit",
      "properties": {
        "parentOrgUnitId": {
          "description": "Id of parent OrgUnit",
          "type": "string"
        },
        "parentOrgUnitPath": {
          "description": "Path of parent OrgUnit",
          "type": "string"
        },
        "blockInheritance": {
          "description": "Should block inheritance",
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          },
          "description": "Name of OrgUnit"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "Path of OrgUnit"
        },
        "description": {
          "description": "Description of OrgUnit",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#orgUnit",
          "description": "Kind of resource this is."
        },
        "orgUnitId": {
          "type": "string",
          "description": "Id of OrgUnit"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Feature": {
      "description": "JSON template for Feature object in Directory API.",
      "type": "object",
      "id": "Feature",
      "properties": {
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "name": {
          "description": "The name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#features#Feature"
        }
      }
    },
    "Users": {
      "type": "object",
      "id": "Users",
      "properties": {
        "trigger_event": {
          "type": "string",
          "description": "Event that triggered this response (only used in case of Push Response)"
        },
        "users": {
          "type": "array",
          "description": "List of user objects.",
          "items": {
            "$ref": "User"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#users"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "RoleAssignments": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of RoleAssignment resources.",
          "items": {
            "$ref": "RoleAssignment"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#roleAssignments .",
          "type": "string",
          "default": "admin#directory#roleAssignments"
        }
      },
      "id": "RoleAssignments"
    },
    "FeatureRename": {
      "type": "object",
      "id": "FeatureRename",
      "properties": {
        "newName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          },
          "description": "New name of the feature."
        }
      }
    },
    "Schemas": {
      "id": "Schemas",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#schemas"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "schemas": {
          "description": "List of UserSchema objects.",
          "type": "array",
          "items": {
            "$ref": "Schema"
          }
        }
      },
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Roles": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "A list of Role resources.",
          "items": {
            "$ref": "Role"
          }
        },
        "kind": {
          "default": "admin#directory#roles",
          "description": "The type of the API resource. This is always admin#directory#roles.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "Roles"
    },
    "MobileDeviceAction": {
      "id": "MobileDeviceAction",
      "type": "object",
      "properties": {
        "action": {
          "description": "Action to be taken on the Mobile Device",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          },
          "type": "string"
        }
      }
    },
    "Privilege": {
      "id": "Privilege",
      "properties": {
        "privilegeName": {
          "type": "string",
          "description": "The name of the privilege."
        },
        "isOuScopable": {
          "type": "boolean",
          "description": "If the privilege can be restricted to an organization unit."
        },
        "kind": {
          "default": "admin#directory#privilege",
          "description": "The type of the API resource. This is always admin#directory#privilege.",
          "type": "string"
        },
        "childPrivileges": {
          "type": "array",
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "items": {
            "$ref": "Privilege"
          }
        },
        "serviceId": {
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "serviceName": {
          "type": "string",
          "description": "The name of the service this privilege is for."
        }
      },
      "type": "object"
    },
    "MobileDevice": {
      "id": "MobileDevice",
      "properties": {
        "managedAccountIsOnOwnerProfile": {
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)",
          "type": "boolean"
        },
        "wifiMacAddress": {
          "description": "Mobile Device WiFi MAC address (Read-only)",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#mobiledevice",
          "type": "string"
        },
        "unknownSourcesStatus": {
          "type": "boolean",
          "description": "Unknown sources enabled or disabled on device (Read-only)"
        },
        "basebandVersion": {
          "description": "Mobile Device Baseband version (Read-only)",
          "type": "string"
        },
        "userAgent": {
          "type": "string",
          "description": "Mobile Device user agent"
        },
        "deviceCompromisedStatus": {
          "description": "Mobile Device compromised status (Read-only)",
          "type": "string"
        },
        "privilege": {
          "type": "string",
          "description": "DMAgentPermission (Read-only)"
        },
        "serialNumber": {
          "description": "Mobile Device SSN or Serial Number (Read-only)",
          "type": "string"
        },
        "brand": {
          "type": "string",
          "description": "Mobile Device Brand (Read-only)"
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "os": {
          "type": "string",
          "description": "Name of the mobile operating system"
        },
        "model": {
          "description": "Name of the model of the device",
          "type": "string"
        },
        "hardwareId": {
          "type": "string",
          "description": "Mobile Device Hardware Id (Read-only)"
        },
        "resourceId": {
          "description": "Unique identifier of Mobile Device (Read-only)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "email": {
          "description": "List of owner user's email addresses (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "applications": {
          "type": "array",
          "description": "List of applications installed on Mobile Device",
          "items": {
            "properties": {
              "packageName": {
                "description": "Package name of application",
                "type": "string"
              },
              "permission": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of Permissions for application"
              },
              "versionName": {
                "type": "string",
                "description": "Version name of application"
              },
              "displayName": {
                "description": "Display name of application",
                "type": "string"
              },
              "versionCode": {
                "format": "int32",
                "description": "Version code of application",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "imei": {
          "description": "Mobile Device IMEI number (Read-only)",
          "type": "string"
        },
        "buildNumber": {
          "type": "string",
          "description": "Mobile Device Build number (Read-only)"
        },
        "networkOperator": {
          "type": "string",
          "description": "Mobile Device mobile or network operator (if available) (Read-only)"
        },
        "type": {
          "description": "The type of device (Read-only)",
          "type": "string"
        },
        "encryptionStatus": {
          "type": "string",
          "description": "Mobile Device Encryption Status (Read-only)"
        },
        "defaultLanguage": {
          "type": "string",
          "description": "The default locale used on the Mobile Device (Read-only)"
        },
        "supportsWorkProfile": {
          "type": "boolean",
          "description": "Work profile supported on device (Read-only)"
        },
        "status": {
          "description": "Status of the device (Read-only)",
          "type": "string"
        },
        "otherAccountsInfo": {
          "description": "List of accounts added on device (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "securityPatchLevel": {
          "format": "int64",
          "description": "Mobile Device Security patch level (Read-only)",
          "type": "string"
        },
        "lastSync": {
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        },
        "kernelVersion": {
          "type": "string",
          "description": "Mobile Device Kernel version (Read-only)"
        },
        "bootloaderVersion": {
          "type": "string",
          "description": "Mobile Device Bootloader version (Read-only)"
        },
        "devicePasswordStatus": {
          "type": "string",
          "description": "DevicePasswordStatus (Read-only)"
        },
        "manufacturer": {
          "description": "Mobile Device manufacturer (Read-only)",
          "type": "string"
        },
        "deviceId": {
          "type": "string",
          "description": "Mobile Device serial number (Read-only)"
        },
        "meid": {
          "description": "Mobile Device MEID number (Read-only)",
          "type": "string"
        },
        "developerOptionsStatus": {
          "type": "boolean",
          "description": "Developer options enabled or disabled on device (Read-only)"
        },
        "name": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of owner user's names (Read-only)"
        },
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "firstSync": {
          "format": "date-time",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserName": {
      "id": "UserName",
      "type": "object",
      "properties": {
        "fullName": {
          "type": "string",
          "description": "Full Name"
        },
        "familyName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string",
          "description": "Last Name"
        },
        "givenName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "First Name"
        }
      }
    },
    "ChromeOsMoveDevicesToOu": {
      "id": "ChromeOsMoveDevicesToOu",
      "type": "object",
      "properties": {
        "deviceIds": {
          "type": "array",
          "description": "ChromeOs Devices to be moved to OU",
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "items": {
            "type": "string"
          }
        }
      }
    },
    "VerificationCode": {
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "userId": {
          "description": "The obfuscated unique ID of the user.",
          "type": "string"
        },
        "verificationCode": {
          "type": "string",
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result."
        },
        "kind": {
          "default": "admin#directory#verificationCode",
          "description": "The type of the resource. This is always admin#directory#verificationCode.",
          "type": "string"
        }
      },
      "id": "VerificationCode",
      "type": "object"
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "description": "A response for issuing a command.",
      "type": "object",
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "properties": {
        "commandId": {
          "type": "string",
          "format": "int64",
          "description": "The unique ID of the issued command, used to retrieve the command status."
        }
      }
    },
    "Buildings": {
      "type": "object",
      "properties": {
        "buildings": {
          "items": {
            "$ref": "Building"
          },
          "description": "The Buildings in this page of results.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#resources#buildings#buildingsList",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "Buildings",
      "description": "Public API: Resources.buildings"
    },
    "Group": {
      "id": "Group",
      "properties": {
        "name": {
          "type": "string",
          "description": "Group name"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "adminCreated": {
          "type": "boolean",
          "description": "Is the group created by admin (Read-only) *"
        },
        "kind": {
          "default": "admin#directory#group",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "directMembersCount": {
          "type": "string",
          "format": "int64",
          "description": "Group direct members count"
        },
        "email": {
          "description": "Email of Group",
          "type": "string",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          }
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of Group (Read-only)"
        },
        "nonEditableAliases": {
          "type": "array",
          "description": "List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of aliases (Read-only)"
        },
        "description": {
          "type": "string",
          "description": "Description of the group"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "Groups": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#groups",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "groups": {
          "type": "array",
          "description": "List of group objects.",
          "items": {
            "$ref": "Group"
          }
        }
      },
      "id": "Groups",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "DomainAlias": {
      "type": "object",
      "id": "DomainAlias",
      "properties": {
        "parentDomainName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer."
        },
        "creationTime": {
          "format": "int64",
          "type": "string",
          "description": "The creation time of the domain alias. (Read-only)."
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain alias. (Read-only)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "domainAliasName": {
          "type": "string",
          "description": "The domain alias name."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#domainAlias"
        }
      }
    },
    "UserCustomProperties": {
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "additionalProperties": {
        "type": "any"
      },
      "type": "object",
      "id": "UserCustomProperties"
    },
    "Asp": {
      "id": "Asp",
      "type": "object",
      "properties": {
        "userKey": {
          "description": "The unique ID of the user who issued the ASP.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#asp",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#asp."
        },
        "creationTime": {
          "type": "string",
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "format": "int64"
        },
        "etag": {
          "description": "ETag of the ASP.",
          "type": "string"
        },
        "name": {
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created.",
          "type": "string"
        },
        "codeId": {
          "description": "The unique ID of the ASP.",
          "format": "int32",
          "type": "integer"
        },
        "lastTimeUsed": {
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "type": "string",
          "format": "int64"
        }
      },
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserLocation": {
      "type": "object",
      "description": "JSON template for a location entry.",
      "properties": {
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        },
        "floorName": {
          "description": "Floor name/number.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "buildingId": {
          "type": "string",
          "description": "Building Identifier."
        },
        "floorSection": {
          "type": "string",
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value."
        },
        "deskCode": {
          "type": "string",
          "description": "Most specific textual code of individual desk location."
        }
      },
      "id": "UserLocation"
    },
    "UserMakeAdmin": {
      "properties": {
        "status": {
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "type": "boolean",
          "description": "Boolean indicating new admin status of the user"
        }
      },
      "id": "UserMakeAdmin",
      "type": "object"
    },
    "MobileDevices": {
      "id": "MobileDevices",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#mobiledevices"
        },
        "mobiledevices": {
          "items": {
            "$ref": "MobileDevice"
          },
          "description": "List of Mobile Device objects.",
          "type": "array"
        }
      }
    },
    "UserKeyword": {
      "properties": {
        "value": {
          "description": "Keyword.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "id": "UserKeyword",
      "description": "JSON template for a keyword entry.",
      "type": "object"
    },
    "SchemaFieldSpec": {
      "type": "object",
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "fieldId": {
          "type": "string",
          "description": "Unique identifier of Field (Read-only)"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema#fieldspec",
          "type": "string"
        },
        "fieldType": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Type of the field.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "multiValued": {
          "description": "Boolean specifying whether this is a multi-valued field or not.",
          "type": "boolean"
        },
        "numericIndexingSpec": {
          "type": "object",
          "properties": {
            "minValue": {
              "type": "number",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double"
            },
            "maxValue": {
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "type": "number",
              "format": "double"
            }
          },
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported."
        },
        "indexed": {
          "description": "Boolean specifying whether the field is indexed or not.",
          "type": "boolean",
          "default": "true"
        },
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string",
          "description": "Display Name of the field."
        },
        "fieldName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Name of the field."
        },
        "readAccessType": {
          "type": "string",
          "default": "ALL_DOMAIN_USERS",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\"."
        }
      },
      "id": "SchemaFieldSpec"
    },
    "UserPosixAccount": {
      "id": "UserPosixAccount",
      "type": "object",
      "properties": {
        "operatingSystemType": {
          "description": "The operating system type for this account.",
          "type": "string"
        },
        "accountId": {
          "description": "A POSIX account field identifier.",
          "type": "string"
        },
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        },
        "uid": {
          "description": "The POSIX compliant user ID.",
          "format": "uint64",
          "type": "string"
        },
        "gecos": {
          "description": "The GECOS (user information) for this account.",
          "type": "string"
        },
        "systemId": {
          "type": "string",
          "description": "System identifier for which account Username or Uid apply to."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary account within the SystemId."
        },
        "gid": {
          "type": "string",
          "description": "The default group ID.",
          "format": "uint64"
        },
        "username": {
          "description": "The username of the account.",
          "type": "string"
        },
        "homeDirectory": {
          "type": "string",
          "description": "The path to the home directory for this account."
        }
      },
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix."
    },
    "Building": {
      "id": "Building",
      "type": "object",
      "properties": {
        "address": {
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required.",
          "$ref": "BuildingAddress"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "description": {
          "description": "A brief description of the building. For example, \"Chelsea Market\".",
          "type": "string"
        },
        "coordinates": {
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees.",
          "$ref": "BuildingCoordinates"
        },
        "floorNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry."
        },
        "buildingId": {
          "description": "Unique identifier for the building. The maximum length is 100 characters.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#buildings#Building",
          "description": "Kind of resource this is."
        },
        "buildingName": {
          "type": "string",
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters."
        }
      },
      "description": "Public API: Resources.buildings"
    },
    "BuildingCoordinates": {
      "id": "BuildingCoordinates",
      "properties": {
        "latitude": {
          "description": "Latitude in decimal degrees.",
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "description": "Longitude in decimal degrees.",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object",
      "description": "Public API: Resources.buildings"
    },
    "UserIm": {
      "description": "JSON template for instant messenger of an user.",
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary im. Only one entry could be marked as primary."
        },
        "im": {
          "description": "Instant messenger id.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customProtocol": {
          "type": "string",
          "description": "Custom protocol."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        }
      },
      "id": "UserIm",
      "type": "object"
    },
    "UserWebsite": {
      "type": "object",
      "properties": {
        "value": {
          "description": "Website.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary website or not.",
          "type": "boolean"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "id": "UserWebsite",
      "description": "JSON template for a website entry."
    },
    "UserEmail": {
      "id": "UserEmail",
      "properties": {
        "primary": {
          "description": "If this is user's primary email. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value."
        },
        "address": {
          "type": "string",
          "description": "Email id of the user."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      },
      "description": "JSON template for an email.",
      "type": "object"
    },
    "Role": {
      "type": "object",
      "properties": {
        "isSuperAdminRole": {
          "type": "boolean",
          "description": "Returns true if the role is a super admin role."
        },
        "rolePrivileges": {
          "items": {
            "type": "object",
            "properties": {
              "serviceId": {
                "type": "string",
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
              },
              "privilegeName": {
                "description": "The name of the privilege.",
                "type": "string"
              }
            }
          },
          "type": "array",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "description": "The set of privileges that are granted to this role."
        },
        "isSystemRole": {
          "description": "Returns true if this is a pre-defined system role.",
          "type": "boolean"
        },
        "kind": {
          "default": "admin#directory#role",
          "description": "The type of the API resource. This is always admin#directory#role.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "roleId": {
          "description": "ID of the role.",
          "format": "int64",
          "type": "string"
        },
        "roleDescription": {
          "description": "A short description of the role.",
          "type": "string"
        },
        "roleName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "description": "Name of the role."
        }
      },
      "id": "Role"
    },
    "RoleAssignment": {
      "type": "object",
      "properties": {
        "roleAssignmentId": {
          "format": "int64",
          "description": "ID of this roleAssignment.",
          "type": "string"
        },
        "assignedTo": {
          "description": "The unique ID of the user this role is assigned to.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "roleId": {
          "type": "string",
          "description": "The ID of the role that is assigned.",
          "format": "int64"
        },
        "kind": {
          "default": "admin#directory#roleAssignment",
          "description": "The type of the API resource. This is always admin#directory#roleAssignment.",
          "type": "string"
        },
        "orgUnitId": {
          "type": "string",
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to."
        },
        "scopeType": {
          "type": "string",
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT "
        }
      },
      "id": "RoleAssignment"
    },
    "Customer": {
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "id": {
          "description": "The unique ID for the customer's G Suite account. (Readonly)",
          "type": "string"
        },
        "phoneNumber": {
          "description": "The customer's contact phone number in E.164 format.",
          "type": "string"
        },
        "postalAddress": {
          "description": "The customer's postal address information.",
          "$ref": "CustomerPostalAddress"
        },
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain"
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. The default value is en-US",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#customer",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer",
          "type": "string"
        },
        "customerCreationTime": {
          "format": "date-time",
          "description": "The customer's creation time (Readonly)",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "customerDomain": {
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer.",
          "type": "string"
        }
      },
      "id": "Customer"
    },
    "Token": {
      "id": "Token",
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "userKey": {
          "description": "The unique ID of the user that issued the token.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of authorization scopes the application is granted."
        },
        "clientId": {
          "type": "string",
          "description": "The Client ID of the application the token is issued to."
        },
        "anonymous": {
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID.",
          "type": "boolean"
        },
        "displayText": {
          "type": "string",
          "description": "The displayable name of the application the token is issued to."
        },
        "nativeApp": {
          "type": "boolean",
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device."
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#token.",
          "default": "admin#directory#token"
        }
      },
      "type": "object"
    },
    "Members": {
      "id": "Members",
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "$ref": "Member"
          },
          "description": "List of member objects."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#members",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        }
      }
    },
    "BuildingAddress": {
      "type": "object",
      "description": "Public API: Resources.buildings",
      "id": "BuildingAddress",
      "properties": {
        "postalCode": {
          "description": "Optional. Postal code of the address.",
          "type": "string"
        },
        "languageCode": {
          "description": "Optional. BCP-47 language code of the contents of this address (if known).",
          "type": "string"
        },
        "administrativeArea": {
          "type": "string",
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region."
        },
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        },
        "sublocality": {
          "type": "string",
          "description": "Optional. Sublocality of the address."
        },
        "addressLines": {
          "type": "array",
          "description": "Unstructured address lines describing the lower levels of an address.",
          "items": {
            "type": "string"
          }
        },
        "locality": {
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.",
          "type": "string"
        }
      }
    },
    "MembersHasMember": {
      "id": "MembersHasMember",
      "type": "object",
      "properties": {
        "isMember": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested."
        }
      },
      "description": "JSON template for Has Member response in Directory API."
    },
    "Asps": {
      "id": "Asps",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "Asp"
          },
          "description": "A list of ASP resources."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#aspList",
          "description": "The type of the API resource. This is always admin#directory#aspList."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "DirectoryChromeosdevicesCommandResult": {
      "properties": {
        "errorMessage": {
          "type": "string",
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed."
        },
        "result": {
          "description": "The result of the command.",
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ],
          "type": "string"
        },
        "executeTime": {
          "format": "google-datetime",
          "description": "The time at which the command was executed or failed to execute.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The result of executing a command.",
      "id": "DirectoryChromeosdevicesCommandResult"
    },
    "DirectoryChromeosdevicesCommand": {
      "type": "object",
      "properties": {
        "issueTime": {
          "description": "The timestamp when the command was issued by the admin.",
          "type": "string",
          "format": "google-datetime"
        },
        "commandResult": {
          "$ref": "DirectoryChromeosdevicesCommandResult",
          "description": "The result of the command execution."
        },
        "commandId": {
          "format": "int64",
          "type": "string",
          "description": "Unique ID of a device command."
        },
        "payload": {
          "type": "string",
          "description": "The payload that the command specified, if any."
        },
        "state": {
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ],
          "description": "Indicates the command state."
        },
        "commandExpireTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired."
        },
        "type": {
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "description": "The type of the command.",
          "type": "string"
        }
      },
      "description": "Information regarding a command that was issued to a device.",
      "id": "DirectoryChromeosdevicesCommand"
    },
    "Tokens": {
      "type": "object",
      "id": "Tokens",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "Token"
          },
          "description": "A list of Token resources."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#tokenList",
          "description": "The type of the API resource. This is always admin#directory#tokenList."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserAbout": {
      "type": "object",
      "description": "JSON template for About (notes) of a user in Directory API.",
      "id": "UserAbout",
      "properties": {
        "contentType": {
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.",
          "type": "string"
        },
        "value": {
          "description": "Actual value of notes.",
          "type": "string"
        }
      }
    },
    "UserPhoto": {
      "type": "object",
      "id": "UserPhoto",
      "properties": {
        "height": {
          "type": "integer",
          "description": "Height in pixels of the photo",
          "format": "int32"
        },
        "photoData": {
          "description": "Base64 encoded photo data",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "format": "byte"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#user#photo"
        },
        "mimeType": {
          "description": "Mime Type of the photo",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "width": {
          "format": "int32",
          "type": "integer",
          "description": "Width in pixels of the photo"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "primaryEmail": {
          "type": "string",
          "description": "Primary email of User (Read-only)"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "DomainAliases": {
      "id": "DomainAliases",
      "type": "object",
      "properties": {
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "description": "List of domain alias objects.",
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#domainAliases",
          "type": "string",
          "description": "Kind of resource this is."
        }
      }
    },
    "UserExternalId": {
      "id": "UserExternalId",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the Id."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "value": {
          "type": "string",
          "description": "The value of the id."
        }
      },
      "type": "object",
      "description": "JSON template for an externalId entry."
    },
    "ChromeOsDeviceAction": {
      "id": "ChromeOsDeviceAction",
      "properties": {
        "deprovisionReason": {
          "type": "string"
        },
        "action": {
          "description": "Action to be taken on the ChromeOs Device",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "type": "string"
        }
      },
      "type": "object"
    },
    "ChromeOsDevices": {
      "id": "ChromeOsDevices",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#chromeosdevices",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "chromeosdevices": {
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "type": "array",
          "description": "List of Chrome OS Device objects."
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        }
      }
    },
    "UserGender": {
      "properties": {
        "addressMeAs": {
          "type": "string",
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their."
        },
        "customGender": {
          "type": "string",
          "description": "Custom gender."
        },
        "type": {
          "description": "Gender.",
          "type": "string"
        }
      },
      "id": "UserGender",
      "type": "object"
    },
    "Schema": {
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Schema",
      "type": "object",
      "properties": {
        "schemaName": {
          "description": "Schema name",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "schemaId": {
          "type": "string",
          "description": "Unique identifier of Schema (Read-only)"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema"
        },
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "type": "string",
          "description": "Display name for the schema."
        },
        "fields": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "array",
          "description": "Fields of Schema",
          "items": {
            "$ref": "SchemaFieldSpec"
          }
        }
      }
    },
    "UserLanguage": {
      "id": "UserLanguage",
      "type": "object",
      "properties": {
        "languageCode": {
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.",
          "type": "string"
        },
        "customLanguage": {
          "type": "string",
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set"
        }
      },
      "description": "JSON template for a language entry."
    },
    "VerificationCodes": {
      "type": "object",
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCodesList.",
          "type": "string",
          "default": "admin#directory#verificationCodesList"
        },
        "items": {
          "items": {
            "$ref": "VerificationCode"
          },
          "type": "array",
          "description": "A list of verification code resources."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "VerificationCodes"
    },
    "UserRelation": {
      "type": "object",
      "id": "UserRelation",
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner."
        },
        "value": {
          "type": "string",
          "description": "The name of the relation."
        }
      },
      "description": "JSON template for a relation entry."
    },
    "FeatureInstance": {
      "id": "FeatureInstance",
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      },
      "type": "object",
      "description": "JSON template for a feature instance."
    },
    "Channel": {
      "id": "Channel",
      "properties": {
        "resourceUri": {
          "description": "A version-specific identifier for the watched resource.",
          "type": "string"
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Additional parameters controlling delivery channel behavior. Optional."
        },
        "kind": {
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "type": "string",
          "default": "api#channel"
        },
        "resourceId": {
          "type": "string",
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions."
        },
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "token": {
          "type": "string",
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional."
        },
        "id": {
          "type": "string",
          "description": "A UUID or similar unique string that identifies this channel."
        },
        "expiration": {
          "type": "string",
          "format": "int64",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional."
        },
        "payload": {
          "description": "A Boolean value to indicate whether payload is wanted. Optional.",
          "type": "boolean"
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "An notification channel used to watch for resource changes."
    },
    "UserSshPublicKey": {
      "type": "object",
      "id": "UserSshPublicKey",
      "properties": {
        "expirationTimeUsec": {
          "type": "string",
          "description": "An expiration time in microseconds since epoch.",
          "format": "int64"
        },
        "key": {
          "description": "An SSH public key.",
          "type": "string"
        },
        "fingerprint": {
          "readOnly": true,
          "type": "string",
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)"
        }
      },
      "description": "JSON template for a POSIX account entry."
    },
    "OrgUnits": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#orgUnits",
          "type": "string"
        },
        "organizationUnits": {
          "type": "array",
          "description": "List of user objects.",
          "items": {
            "$ref": "OrgUnit"
          }
        }
      },
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "OrgUnits",
      "type": "object"
    },
    "Privileges": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of Privilege resources.",
          "items": {
            "$ref": "Privilege"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#privileges",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privileges."
        }
      },
      "id": "Privileges"
    },
    "Aliases": {
      "properties": {
        "kind": {
          "default": "admin#directory#aliases",
          "type": "string"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "etag": {
          "type": "string"
        }
      },
      "description": "JSON response template to list aliases in Directory API.",
      "type": "object",
      "id": "Aliases"
    },
    "CalendarResource": {
      "id": "CalendarResource",
      "properties": {
        "buildingId": {
          "description": "Unique ID for the building a resource is located in.",
          "type": "string"
        },
        "resourceDescription": {
          "type": "string",
          "description": "Description of the resource, visible only to admins."
        },
        "floorName": {
          "description": "Name of the floor a resource is located on.",
          "type": "string"
        },
        "resourceName": {
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string"
        },
        "resourceCategory": {
          "type": "string",
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN."
        },
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        },
        "resourceType": {
          "description": "The type of the calendar resource, intended for non-room resources.",
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "description": "The unique ID for the calendar resource.",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          }
        },
        "floorSection": {
          "description": "Name of the section within a floor a resource is located in.",
          "type": "string"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "featureInstances": {
          "description": "Instances of features for the calendar resource.",
          "type": "any"
        },
        "generatedResourceName": {
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\".",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "default": "admin#directory#resources#calendars#CalendarResource"
        },
        "capacity": {
          "format": "int32",
          "type": "integer",
          "description": "Capacity of a resource, number of seats in a room."
        },
        "resourceEmail": {
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource.",
          "type": "string"
        }
      },
      "description": "Public API: Resources.calendars",
      "type": "object"
    },
    "UserUndelete": {
      "id": "UserUndelete",
      "type": "object",
      "properties": {
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        }
      }
    },
    "Member": {
      "id": "Member",
      "properties": {
        "delivery_settings": {
          "description": "Delivery settings of member",
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Status of member (Immutable)"
        },
        "role": {
          "description": "Role of member",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#member",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey."
        },
        "type": {
          "description": "Type of member (Immutable)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "email": {
          "description": "Email of member (Read-only)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserOrganization": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the organization"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
        },
        "description": {
          "description": "Description of the organization.",
          "type": "string"
        },
        "title": {
          "description": "Title (designation) of the user in the organization.",
          "type": "string"
        },
        "fullTimeEquivalent": {
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
          "format": "int32",
          "type": "integer"
        },
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "symbol": {
          "description": "Symbol of the organization.",
          "type": "string"
        },
        "costCenter": {
          "type": "string",
          "description": "The cost center of the users department."
        },
        "domain": {
          "description": "The domain to which the organization belongs to.",
          "type": "string"
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "primary": {
          "description": "If it user's primary organization.",
          "type": "boolean"
        }
      },
      "id": "UserOrganization",
      "description": "JSON template for an organization entry.",
      "type": "object"
    },
    "Features": {
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#features#featuresList",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "features": {
          "description": "The Features in this page of results.",
          "items": {
            "$ref": "Feature"
          },
          "type": "array"
        }
      },
      "type": "object",
      "description": "Public API: Resources.features",
      "id": "Features"
    },
    "CustomerPostalAddress": {
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "CustomerPostalAddress",
      "properties": {
        "addressLine1": {
          "type": "string",
          "description": "A customer's physical address. The address can be composed of one to three lines."
        },
        "region": {
          "type": "string",
          "description": "Name of the region. An example of a region value is NY for the state of New York."
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        },
        "postalCode": {
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element.",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Name of the locality. An example of a locality value is the city of San Francisco."
        },
        "addressLine3": {
          "description": "Address line 3 of the address.",
          "type": "string"
        },
        "addressLine2": {
          "description": "Address line 2 of the address.",
          "type": "string"
        },
        "countryCode": {
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements.",
          "type": "string"
        },
        "contactName": {
          "description": "The customer contact's name.",
          "type": "string"
        }
      }
    },
    "Alias": {
      "description": "JSON template for Alias object in Directory API.",
      "type": "object",
      "properties": {
        "primaryEmail": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#alias"
        },
        "alias": {
          "type": "string"
        }
      },
      "id": "Alias"
    },
    "ChromeOsDevice": {
      "properties": {
        "autoUpdateExpiration": {
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "type": "string",
          "format": "int64"
        },
        "bootMode": {
          "description": "Chromebook boot mode (Read-only)",
          "type": "string"
        },
        "lastKnownNetwork": {
          "description": "Contains last known network (Read-only)",
          "items": {
            "description": "Information for an ip address.",
            "type": "object",
            "properties": {
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              },
              "ipAddress": {
                "type": "string",
                "description": "The IP address."
              }
            }
          },
          "type": "array"
        },
        "ethernetMacAddress": {
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)",
          "type": "string"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of the device"
        },
        "annotatedLocation": {
          "type": "string",
          "description": "Address or location of the device as noted by the administrator"
        },
        "kind": {
          "default": "admin#directory#chromeosdevice",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "activeTimeRanges": {
          "description": "List of active time ranges (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "activeTime": {
                "description": "Duration in milliseconds",
                "format": "int32",
                "type": "integer"
              },
              "date": {
                "description": "Date of usage",
                "format": "date",
                "type": "string"
              }
            }
          },
          "type": "array"
        },
        "systemRamFreeReports": {
          "type": "array",
          "items": {
            "properties": {
              "systemRamFreeInfo": {
                "items": {
                  "type": "string",
                  "format": "int64"
                },
                "type": "array"
              },
              "reportTime": {
                "description": "Date and time the report was received.",
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object"
          },
          "description": "Reports of amounts of available RAM memory (Read-only)"
        },
        "osVersion": {
          "type": "string",
          "description": "Chromebook Os Version (Read-only)"
        },
        "dockMacAddress": {
          "type": "string",
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "platformVersion": {
          "description": "Chromebook platform version (Read-only)",
          "type": "string"
        },
        "cpuStatusReports": {
          "type": "array",
          "items": {
            "properties": {
              "cpuUtilizationPercentageInfo": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "cpuTemperatureInfo": {
                "items": {
                  "properties": {
                    "label": {
                      "type": "string",
                      "description": "CPU label"
                    },
                    "temperature": {
                      "format": "int32",
                      "type": "integer",
                      "description": "Temperature in Celsius degrees."
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "description": "List of CPU temperature samples."
              },
              "reportTime": {
                "format": "date-time",
                "type": "string",
                "description": "Date and time the report was received."
              }
            },
            "type": "object"
          },
          "description": "Reports of CPU utilization and temperature (Read-only)"
        },
        "notes": {
          "description": "Notes added by the administrator",
          "type": "string"
        },
        "diskVolumeReports": {
          "items": {
            "type": "object",
            "properties": {
              "volumeInfo": {
                "description": "Disk volumes",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "volumeId": {
                      "type": "string",
                      "description": "Volume id"
                    },
                    "storageFree": {
                      "format": "int64",
                      "type": "string",
                      "description": "Free disk space [in bytes]"
                    },
                    "storageTotal": {
                      "format": "int64",
                      "type": "string",
                      "description": "Total disk space [in bytes]"
                    }
                  }
                }
              }
            }
          },
          "description": "Reports of disk space and other info about mounted/connected volumes.",
          "type": "array"
        },
        "deviceId": {
          "type": "string",
          "description": "Unique identifier of Chrome OS Device (Read-only)"
        },
        "systemRamTotal": {
          "type": "string",
          "format": "int64",
          "description": "Total RAM on the device [in bytes] (Read-only)"
        },
        "willAutoRenew": {
          "type": "boolean",
          "description": "Will Chromebook auto renew after support end date (Read-only)"
        },
        "ethernetMacAddress0": {
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "firmwareVersion": {
          "description": "Chromebook firmware version (Read-only)",
          "type": "string"
        },
        "tpmVersionInfo": {
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "type": "object",
          "properties": {
            "vendorSpecific": {
              "type": "string",
              "description": "Vendor-specific information such as Vendor ID."
            },
            "tpmModel": {
              "type": "string",
              "description": "TPM model number."
            },
            "family": {
              "type": "string",
              "description": "TPM family."
            },
            "firmwareVersion": {
              "description": "TPM firmware version.",
              "type": "string"
            },
            "manufacturer": {
              "type": "string",
              "description": "TPM manufacturer code."
            },
            "specLevel": {
              "description": "TPM specification level.",
              "type": "string"
            }
          }
        },
        "model": {
          "description": "Chromebook Model (Read-only)",
          "type": "string"
        },
        "recentUsers": {
          "type": "array",
          "items": {
            "properties": {
              "email": {
                "description": "Email address of the user. Present only if the user type is managed",
                "type": "string"
              },
              "type": {
                "type": "string",
                "description": "The type of the user"
              }
            },
            "type": "object"
          },
          "description": "List of recent device users, in descending order by last login time (Read-only)"
        },
        "orderNumber": {
          "type": "string",
          "description": "Chromebook order number (Read-only)"
        },
        "supportEndDate": {
          "type": "string",
          "description": "Final date the device will be supported (Read-only)",
          "format": "date-time"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "annotatedUser": {
          "description": "User of the device",
          "type": "string"
        },
        "macAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on wifi network interface (Read-only)"
        },
        "annotatedAssetId": {
          "type": "string",
          "description": "AssetId specified during enrollment or through later annotation"
        },
        "status": {
          "type": "string",
          "description": "status of the device (Read-only)"
        },
        "manufactureDate": {
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
          "type": "string"
        },
        "deviceFiles": {
          "type": "array",
          "items": {
            "properties": {
              "downloadUrl": {
                "description": "File download URL",
                "type": "string"
              },
              "createTime": {
                "format": "date-time",
                "type": "string",
                "description": "Date and time the file was created"
              },
              "type": {
                "description": "File type",
                "type": "string"
              },
              "name": {
                "description": "File name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "description": "List of device files to download (Read-only)"
        },
        "serialNumber": {
          "description": "Chromebook serial number (Read-only)",
          "type": "string"
        },
        "lastEnrollmentTime": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was last enrolled (Read-only)"
        },
        "meid": {
          "type": "string",
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)"
        }
      },
      "id": "ChromeOsDevice",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "CalendarResources": {
      "description": "Public API: Resources.calendars",
      "type": "object",
      "properties": {
        "items": {
          "description": "The CalendarResources in this page of results.",
          "items": {
            "$ref": "CalendarResource"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "kind": {
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList.",
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "CalendarResources"
    }
  },
  "fullyEncodeReservedExpansion": true,
  "canonicalName": "directory",
  "id": "admin:directory_v1",
  "title": "Admin SDK",
  "name": "admin",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "ownerName": "Google",
  "version": "directory_v1",
  "ownerDomain": "google.com",
  "packagePath": "admin",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        }
      }
    }
  },
  "resources": {
    "orgunits": {
      "methods": {
        "delete": {
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "orgUnitPath": {
              "required": true,
              "type": "string",
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$",
              "location": "path"
            }
          },
          "id": "directory.orgunits.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "description": "Remove organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            },
            "type": {
              "description": "Whether to return all sub-organizations or just immediate children",
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "type": "string",
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ],
              "location": "query"
            },
            "orgUnitPath": {
              "description": "the URL-encoded organizational unit's path or its ID",
              "location": "query",
              "type": "string",
              "default": ""
            }
          },
          "id": "directory.orgunits.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "response": {
            "$ref": "OrgUnits"
          },
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "GET",
          "description": "Retrieve all organizational units"
        },
        "patch": {
          "request": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "orgUnitPath": {
              "pattern": "^.*$",
              "type": "string",
              "required": true,
              "description": "Full path of the organizational unit or its ID",
              "location": "path"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.patch",
          "httpMethod": "PATCH",
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}"
        },
        "update": {
          "response": {
            "$ref": "OrgUnit"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "description": "Update organizational unit",
          "request": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.update",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "orgUnitPath": {
              "pattern": "^.*$",
              "required": true,
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "location": "path"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "httpMethod": "PUT"
        },
        "insert": {
          "response": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "POST",
          "description": "Add organizational unit",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "id": "directory.orgunits.insert",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "request": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId"
          ]
        },
        "get": {
          "parameters": {
            "orgUnitPath": {
              "pattern": "^.*$",
              "required": true,
              "location": "path",
              "description": "Full path of the organizational unit or its ID",
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            }
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "description": "Retrieve organizational unit",
          "id": "directory.orgunits.get",
          "response": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ]
        }
      }
    },
    "resources": {
      "resources": {
        "features": {
          "methods": {
            "list": {
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "maxResults": {
                  "location": "query",
                  "minimum": "1",
                  "format": "int32",
                  "maximum": "500",
                  "description": "Maximum number of results to return.",
                  "type": "integer"
                },
                "pageToken": {
                  "type": "string",
                  "description": "Token to specify the next page in the list.",
                  "location": "query"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "response": {
                "$ref": "Features"
              },
              "description": "Retrieves a list of features for an account.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "id": "directory.resources.features.list"
            },
            "get": {
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Retrieves a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameters": {
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "required": true,
                  "description": "The unique ID of the feature to retrieve.",
                  "location": "path",
                  "type": "string"
                }
              },
              "id": "directory.resources.features.get",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "response": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ]
            },
            "patch": {
              "response": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "id": "directory.resources.features.patch",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "featureKey": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID of the feature to update."
                },
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "description": "Patches a feature via Apiary Patch Orchestration."
            },
            "insert": {
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "id": "directory.resources.features.insert",
              "httpMethod": "POST",
              "request": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "description": "Inserts a feature.",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              }
            },
            "update": {
              "parameters": {
                "featureKey": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the feature to update.",
                  "location": "path"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "Feature"
              },
              "response": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Updates a feature.",
              "httpMethod": "PUT",
              "id": "directory.resources.features.update"
            },
            "rename": {
              "description": "Renames a feature.",
              "id": "directory.resources.features.rename",
              "request": {
                "$ref": "FeatureRename"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "httpMethod": "POST",
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "oldName": {
                  "required": true,
                  "description": "The unique ID of the feature to rename.",
                  "location": "path",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename"
            },
            "delete": {
              "httpMethod": "DELETE",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "featureKey": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the feature to delete."
                }
              },
              "description": "Deletes a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "id": "directory.resources.features.delete",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            }
          }
        },
        "calendars": {
          "methods": {
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "CalendarResource"
              },
              "response": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.update",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "calendarResourceId": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the calendar resource to update.",
                  "location": "path"
                }
              },
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "httpMethod": "PUT",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
            },
            "delete": {
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Deletes a calendar resource.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the calendar resource to delete."
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "id": "directory.resources.calendars.delete",
              "httpMethod": "DELETE"
            },
            "insert": {
              "id": "directory.resources.calendars.insert",
              "response": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                }
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "customer"
              ],
              "request": {
                "$ref": "CalendarResource"
              },
              "description": "Inserts a calendar resource.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "list": {
              "parameterOrder": [
                "customer"
              ],
              "description": "Retrieves a list of calendar resources for an account.",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameters": {
                "query": {
                  "location": "query",
                  "type": "string",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone."
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "type": "string",
                  "location": "query"
                },
                "maxResults": {
                  "description": "Maximum number of results to return.",
                  "format": "int32",
                  "location": "query",
                  "type": "integer",
                  "minimum": "1",
                  "maximum": "500"
                },
                "orderBy": {
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order.",
                  "type": "string",
                  "location": "query"
                }
              },
              "response": {
                "$ref": "CalendarResources"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "id": "directory.resources.calendars.list",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars"
            },
            "get": {
              "id": "directory.resources.calendars.get",
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                },
                "calendarResourceId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the calendar resource to retrieve."
                }
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Retrieves a calendar resource.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
            },
            "patch": {
              "request": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "id": "directory.resources.calendars.patch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "httpMethod": "PATCH",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "calendarResourceId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the calendar resource to update."
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                }
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ]
            }
          }
        },
        "buildings": {
          "methods": {
            "get": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "id": "directory.resources.buildings.get",
              "response": {
                "$ref": "Building"
              },
              "description": "Retrieves a building.",
              "httpMethod": "GET",
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                },
                "buildingId": {
                  "required": true,
                  "description": "The unique ID of the building to retrieve.",
                  "type": "string",
                  "location": "path"
                }
              }
            },
            "update": {
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "description": "Updates a building.",
              "httpMethod": "PUT",
              "request": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "buildingId": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The id of the building to update."
                },
                "coordinatesSource": {
                  "default": "SOURCE_UNSPECIFIED",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "location": "query",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "type": "string"
                }
              },
              "id": "directory.resources.buildings.update",
              "response": {
                "$ref": "Building"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "patch": {
              "request": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.patch",
              "parameters": {
                "buildingId": {
                  "location": "path",
                  "description": "The id of the building to update.",
                  "type": "string",
                  "required": true
                },
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED",
                  "type": "string",
                  "location": "query"
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              },
              "description": "Patches a building via Apiary Patch Orchestration.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "PATCH",
              "response": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "buildingId"
              ]
            },
            "list": {
              "response": {
                "$ref": "Buildings"
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "customer"
              ],
              "description": "Retrieves a list of buildings for an account.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.buildings.list",
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "maxResults": {
                  "format": "int32",
                  "location": "query",
                  "minimum": "1",
                  "maximum": "500",
                  "description": "Maximum number of results to return.",
                  "type": "integer"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Token to specify the next page in the list."
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings"
            },
            "delete": {
              "id": "directory.resources.buildings.delete",
              "httpMethod": "DELETE",
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                },
                "buildingId": {
                  "description": "The id of the building to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Deletes a building.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "insert": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "response": {
                "$ref": "Building"
              },
              "httpMethod": "POST",
              "description": "Inserts a building.",
              "request": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.insert",
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "coordinatesSource": {
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "location": "query",
                  "description": "Source from which Building.coordinates are derived.",
                  "type": "string",
                  "default": "SOURCE_UNSPECIFIED",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ]
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            }
          }
        }
      }
    },
    "tokens": {
      "methods": {
        "get": {
          "parameters": {
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true
            }
          },
          "httpMethod": "GET",
          "id": "directory.tokens.get",
          "response": {
            "$ref": "Token"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Get information about an access token issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.tokens.list",
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "response": {
            "$ref": "Tokens"
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens"
        },
        "delete": {
          "id": "directory.tokens.delete",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            },
            "clientId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "The Client ID of the application the token is issued to."
            }
          },
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Delete all access tokens issued by a user for an application.",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "httpMethod": "GET",
                      "id": "admin.customer.devices.chromeos.commands.get",
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "description": "Gets command data a specific command issued to the device.",
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ],
                      "parameters": {
                        "customerId": {
                          "type": "string",
                          "location": "path",
                          "description": "Immutable. Immutable ID of the G Suite account.",
                          "required": true
                        },
                        "deviceId": {
                          "required": true,
                          "description": "Immutable. Immutable ID of Chrome OS Device.",
                          "type": "string",
                          "location": "path"
                        },
                        "commandId": {
                          "type": "string",
                          "format": "int64",
                          "description": "Immutable. Immutable ID of Chrome OS Device Command.",
                          "location": "path",
                          "required": true
                        }
                      }
                    }
                  }
                }
              },
              "methods": {
                "issueCommand": {
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "httpMethod": "POST",
                  "description": "Issues a command for the device to execute.",
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "parameters": {
                    "customerId": {
                      "description": "Immutable. Immutable ID of the G Suite account.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "deviceId": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "description": "Immutable. Immutable ID of Chrome OS Device."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "domains": {
      "methods": {
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "Domains"
          },
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true
            }
          },
          "request": {
            "$ref": "Domains"
          },
          "description": "Inserts a domain of the customer.",
          "httpMethod": "POST",
          "id": "directory.domains.insert",
          "path": "admin/directory/v1/customer/{customer}/domains"
        },
        "list": {
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domains",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "GET",
          "response": {
            "$ref": "Domains2"
          },
          "id": "directory.domains.list",
          "description": "Lists the domains of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "parameterOrder": [
            "customer"
          ]
        },
        "get": {
          "id": "directory.domains.get",
          "description": "Retrieves a domain of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "domainName": {
              "type": "string",
              "description": "Name of domain to be retrieved",
              "location": "path",
              "required": true
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "response": {
            "$ref": "Domains"
          }
        },
        "delete": {
          "description": "Deletes a domain of the customer.",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameters": {
            "domainName": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Name of domain to be deleted"
            },
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "id": "directory.domains.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameterOrder": [
            "customer",
            "domainName"
          ]
        }
      }
    },
    "customers": {
      "methods": {
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "description": "Retrieves a customer.",
          "response": {
            "$ref": "Customer"
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ],
          "parameters": {
            "customerKey": {
              "required": true,
              "description": "Id of the customer to be retrieved",
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.customers.get"
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "httpMethod": "PUT",
          "response": {
            "$ref": "Customer"
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "description": "Updates a customer.",
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.update",
          "request": {
            "$ref": "Customer"
          },
          "parameterOrder": [
            "customerKey"
          ]
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Customer"
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.patch",
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customerKey"
          ],
          "description": "Patch Customers via Apiary Patch Orchestration",
          "response": {
            "$ref": "Customer"
          }
        }
      }
    },
    "members": {
      "methods": {
        "update": {
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "memberKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "type": "string"
            },
            "groupKey": {
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true
            }
          },
          "httpMethod": "PUT",
          "description": "Update membership of a user in the specified group.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "id": "directory.members.update",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          },
          "request": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        },
        "delete": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "id": "directory.members.delete",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "memberKey": {
              "description": "Email or immutable ID of the member",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "groupKey": {
              "required": true,
              "description": "Email or immutable ID of the group",
              "type": "string",
              "location": "path"
            }
          },
          "description": "Remove membership.",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        },
        "hasMember": {
          "parameters": {
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "memberKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID."
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "response": {
            "$ref": "MembersHasMember"
          },
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "httpMethod": "GET",
          "id": "directory.members.hasMember",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ]
        },
        "patch": {
          "request": {
            "$ref": "Member"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "memberKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object"
            },
            "groupKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.patch",
          "httpMethod": "PATCH",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "response": {
            "$ref": "Member"
          },
          "description": "Patch Member via Apiary Patch Orchestration"
        },
        "get": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.get",
          "description": "Retrieve Group Member",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Member"
          },
          "parameters": {
            "memberKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the member"
            },
            "groupKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        },
        "list": {
          "parameters": {
            "roles": {
              "description": "Comma separated role values to filter list results on.",
              "location": "query",
              "type": "string"
            },
            "includeDerivedMembership": {
              "description": "Whether to list indirect memberships. Default: false.",
              "location": "query",
              "type": "boolean"
            },
            "groupKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "format": "int32",
              "default": "200",
              "description": "Maximum number of results to return. Max allowed value is 200."
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify next page in the list"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "description": "Retrieve all members in a group (paginated)",
          "parameterOrder": [
            "groupKey"
          ],
          "response": {
            "$ref": "Members"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "id": "directory.members.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "httpMethod": "GET"
        },
        "insert": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "parameters": {
            "groupKey": {
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the group",
              "location": "path"
            }
          },
          "request": {
            "$ref": "Member"
          },
          "id": "directory.members.insert",
          "description": "Add user to the specified group.",
          "httpMethod": "POST",
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "response": {
            "$ref": "Member"
          }
        }
      }
    },
    "users": {
      "resources": {
        "photos": {
          "methods": {
            "delete": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Remove photos for the user",
              "id": "directory.users.photos.delete",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user"
                }
              }
            },
            "get": {
              "parameterOrder": [
                "userKey"
              ],
              "response": {
                "$ref": "UserPhoto"
              },
              "description": "Retrieve photo of a user",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "GET",
              "id": "directory.users.photos.get",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              }
            },
            "update": {
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.update",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "response": {
                "$ref": "UserPhoto"
              },
              "description": "Add a photo for the user",
              "httpMethod": "PUT",
              "request": {
                "$ref": "UserPhoto"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the user"
                }
              }
            },
            "patch": {
              "request": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ],
              "parameters": {
                "userKey": {
                  "required": true,
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              },
              "description": "Patch Photo via Apiary Patch Orchestration",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "httpMethod": "PATCH",
              "id": "directory.users.photos.patch",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              }
            }
          }
        },
        "aliases": {
          "methods": {
            "insert": {
              "httpMethod": "POST",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "parameterOrder": [
                "userKey"
              ],
              "request": {
                "$ref": "Alias"
              },
              "response": {
                "$ref": "Alias"
              },
              "id": "directory.users.aliases.insert",
              "description": "Add a alias for the user",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ]
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "id": "directory.users.aliases.delete",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user"
                },
                "alias": {
                  "description": "The alias to be removed",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "httpMethod": "DELETE",
              "description": "Remove a alias for the user",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "parameterOrder": [
                "userKey",
                "alias"
              ]
            },
            "watch": {
              "parameterOrder": [
                "userKey"
              ],
              "request": {
                "$ref": "Channel"
              },
              "description": "Watch for changes in users list",
              "parameters": {
                "event": {
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "description": "Event on which subscription is intended (if subscribing)",
                  "type": "string",
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "location": "query"
                },
                "userKey": {
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                }
              },
              "id": "directory.users.aliases.watch",
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "response": {
                "$ref": "Channel"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "httpMethod": "POST"
            },
            "list": {
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "response": {
                "$ref": "Aliases"
              },
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "parameterOrder": [
                "userKey"
              ],
              "httpMethod": "GET",
              "description": "List all aliases for a user",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "parameters": {
                "userKey": {
                  "required": true,
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              },
              "id": "directory.users.aliases.list"
            }
          }
        }
      },
      "methods": {
        "makeAdmin": {
          "parameterOrder": [
            "userKey"
          ],
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user as admin",
              "location": "path",
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "description": "change admin status of a user",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.makeAdmin",
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin"
        },
        "signOut": {
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.signOut",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/signOut"
        },
        "undelete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "request": {
            "$ref": "UserUndelete"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "description": "The immutable id of the user",
              "type": "string",
              "location": "path"
            }
          },
          "id": "directory.users.undelete",
          "description": "Undelete a deleted user",
          "httpMethod": "POST"
        },
        "watch": {
          "request": {
            "$ref": "Channel"
          },
          "flatPath": "admin/directory/v1/users/watch",
          "parameterOrder": [],
          "parameters": {
            "showDeleted": {
              "location": "query",
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "type": "string",
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ],
              "description": "What subset of fields to fetch for this user.",
              "location": "query",
              "default": "basic"
            },
            "orderBy": {
              "type": "string",
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "description": "Column to use for sorting results",
              "location": "query"
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order.",
              "type": "string",
              "location": "query",
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "domain": {
              "type": "string",
              "location": "query",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\""
            },
            "customFieldMask": {
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string"
            },
            "maxResults": {
              "description": "Maximum number of results to return.",
              "type": "integer",
              "location": "query",
              "maximum": "500",
              "minimum": "1",
              "format": "int32",
              "default": "100"
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string",
              "location": "query"
            },
            "event": {
              "description": "Event on which subscription is intended",
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ]
            },
            "viewType": {
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "location": "query",
              "type": "string",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user."
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "customer": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            }
          },
          "id": "directory.users.watch",
          "path": "admin/directory/v1/users/watch",
          "httpMethod": "POST",
          "response": {
            "$ref": "Channel"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Watch for changes in users list"
        },
        "delete": {
          "path": "admin/directory/v1/users/{userKey}",
          "description": "Delete user",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.delete",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the user",
              "type": "string"
            }
          },
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "path": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string",
              "location": "query"
            },
            "userKey": {
              "description": "Email or immutable ID of the user",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "projection": {
              "description": "What subset of fields to fetch for this user.",
              "location": "query",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "default": "basic",
              "type": "string",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ]
            },
            "viewType": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "location": "query",
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ]
            }
          },
          "id": "directory.users.get",
          "response": {
            "$ref": "User"
          },
          "httpMethod": "GET",
          "description": "retrieve user",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ]
        },
        "update": {
          "path": "admin/directory/v1/users/{userKey}",
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.update",
          "description": "update user",
          "parameterOrder": [
            "userKey"
          ],
          "request": {
            "$ref": "User"
          },
          "response": {
            "$ref": "User"
          }
        },
        "insert": {
          "flatPath": "admin/directory/v1/users",
          "httpMethod": "POST",
          "parameters": {},
          "id": "directory.users.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "create user.",
          "request": {
            "$ref": "User"
          },
          "response": {
            "$ref": "User"
          },
          "parameterOrder": [],
          "path": "admin/directory/v1/users"
        },
        "patch": {
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.patch",
          "response": {
            "$ref": "User"
          },
          "description": "Patch Users via Apiary Patch Orchestration",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "httpMethod": "PATCH",
          "request": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}"
        },
        "list": {
          "id": "directory.users.list",
          "flatPath": "admin/directory/v1/users",
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "showDeleted": {
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "location": "query"
            },
            "customer": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            },
            "sortOrder": {
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order."
            },
            "orderBy": {
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "location": "query",
              "type": "string",
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ]
            },
            "viewType": {
              "type": "string",
              "default": "admin_view",
              "location": "query",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ]
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify next page in the list"
            },
            "customFieldMask": {
              "type": "string",
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "projection": {
              "location": "query",
              "default": "basic",
              "description": "What subset of fields to fetch for this user.",
              "type": "string",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ]
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "location": "query",
              "type": "string"
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "type": "integer",
              "maximum": "500",
              "default": "100",
              "description": "Maximum number of results to return.",
              "minimum": "1",
              "location": "query",
              "format": "int32"
            }
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/users",
          "parameterOrder": [],
          "response": {
            "$ref": "Users"
          }
        }
      }
    },
    "domainAliases": {
      "methods": {
        "get": {
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "description": "Retrieves a domain alias of the customer.",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "domainAliasName": {
              "description": "Name of domain alias to be retrieved.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.domainAliases.get",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "response": {
            "$ref": "DomainAlias"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "httpMethod": "GET"
        },
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "description": "Inserts a domain alias of the customer.",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "POST",
          "request": {
            "$ref": "DomainAlias"
          },
          "response": {
            "$ref": "DomainAlias"
          },
          "id": "directory.domainAliases.insert"
        },
        "delete": {
          "id": "directory.domainAliases.delete",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "description": "Deletes a domain Alias of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "httpMethod": "DELETE",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            },
            "domainAliasName": {
              "required": true,
              "location": "path",
              "description": "Name of domain alias to be retrieved.",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ]
        },
        "list": {
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            },
            "parentDomainName": {
              "location": "query",
              "type": "string",
              "description": "Name of the parent domain for which domain aliases are to be fetched."
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.domainAliases.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "response": {
            "$ref": "DomainAliases"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "description": "Lists the domain aliases of the customer."
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "response": {
            "$ref": "Privileges"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.privileges.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ]
        }
      }
    },
    "schemas": {
      "methods": {
        "insert": {
          "parameterOrder": [
            "customerId"
          ],
          "response": {
            "$ref": "Schema"
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "Schema"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "description": "Create schema.",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "id": "directory.schemas.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ]
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "httpMethod": "DELETE",
          "description": "Delete schema",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.delete",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "schemaKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Name or immutable ID of the schema"
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ]
        },
        "list": {
          "description": "Retrieve all schemas for a customer",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "id": "directory.schemas.list",
          "httpMethod": "GET",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "response": {
            "$ref": "Schemas"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "parameterOrder": [
            "customerId"
          ]
        },
        "get": {
          "description": "Retrieve schema",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "id": "directory.schemas.get",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            },
            "schemaKey": {
              "required": true,
              "description": "Name or immutable ID of the schema",
              "location": "path",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Schema"
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ]
        },
        "patch": {
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "response": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.patch",
          "description": "Patch Schema via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "schemaKey": {
              "type": "string",
              "description": "Name or immutable ID of the schema.",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "request": {
            "$ref": "Schema"
          }
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            },
            "schemaKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Name or immutable ID of the schema."
            }
          },
          "request": {
            "$ref": "Schema"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          },
          "httpMethod": "PUT",
          "id": "directory.schemas.update",
          "description": "Update schema"
        }
      }
    },
    "asps": {
      "methods": {
        "delete": {
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameters": {
            "codeId": {
              "description": "The unique ID of the ASP to be deleted.",
              "required": true,
              "type": "integer",
              "location": "path",
              "format": "int32"
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "id": "directory.asps.delete",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "httpMethod": "DELETE",
          "description": "Delete an ASP issued by a user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        },
        "list": {
          "response": {
            "$ref": "Asps"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "httpMethod": "GET",
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "id": "directory.asps.list",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps",
          "description": "List the ASPs issued by a user."
        },
        "get": {
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "response": {
            "$ref": "Asp"
          },
          "id": "directory.asps.get",
          "parameters": {
            "codeId": {
              "type": "integer",
              "format": "int32",
              "description": "The unique ID of the ASP.",
              "required": true,
              "location": "path"
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "description": "Get information about an ASP issued by a user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "httpMethod": "GET"
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameters": {
            "deviceId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of Chrome OS Device"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "description": "Retrieve Chrome OS Device",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "id": "directory.chromeosdevices.get",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "httpMethod": "GET"
        },
        "update": {
          "id": "directory.chromeosdevices.update",
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            },
            "deviceId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of Chrome OS Device"
            },
            "projection": {
              "type": "string",
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields."
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "httpMethod": "PUT",
          "description": "Update Chrome OS Device"
        },
        "moveDevicesToOu": {
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "parameters": {
            "orgUnitPath": {
              "required": true,
              "type": "string",
              "description": "Full path of the target organizational unit or its ID",
              "location": "query"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            }
          }
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameters": {
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "location": "query",
              "type": "string"
            },
            "projection": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "maxResults": {
              "format": "int32",
              "minimum": "1",
              "location": "query",
              "type": "integer",
              "default": "100",
              "description": "Maximum number of results to return."
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "location": "query",
              "type": "string"
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ],
              "description": "Column to use for sorting results",
              "type": "string",
              "location": "query"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "location": "query",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used"
            }
          },
          "parameterOrder": [
            "customerId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "id": "directory.chromeosdevices.list"
        },
        "patch": {
          "id": "directory.chromeosdevices.patch",
          "description": "Patch Chrome OS Device",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameters": {
            "deviceId": {
              "type": "string",
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "location": "path"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "type": "string"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        },
        "action": {
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "description": "Take action on Chrome OS Device",
          "id": "directory.chromeosdevices.action",
          "httpMethod": "POST",
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "parameters": {
            "resourceId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of Chrome OS Device"
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action"
        }
      }
    },
    "groups": {
      "methods": {
        "get": {
          "id": "directory.groups.get",
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "description": "Retrieve Group",
          "httpMethod": "GET",
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group",
              "required": true,
              "type": "string"
            }
          }
        },
        "delete": {
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "description": "Delete Group",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "id": "directory.groups.delete"
        },
        "insert": {
          "id": "directory.groups.insert",
          "request": {
            "$ref": "Group"
          },
          "parameters": {},
          "flatPath": "admin/directory/v1/groups",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "response": {
            "$ref": "Group"
          },
          "description": "Create Group",
          "path": "admin/directory/v1/groups",
          "parameterOrder": []
        },
        "update": {
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "response": {
            "$ref": "Group"
          },
          "id": "directory.groups.update",
          "request": {
            "$ref": "Group"
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "PUT",
          "description": "Update Group",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true,
              "location": "path",
              "type": "string"
            }
          }
        },
        "list": {
          "flatPath": "admin/directory/v1/groups",
          "response": {
            "$ref": "Groups"
          },
          "parameters": {
            "domain": {
              "type": "string",
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.",
              "location": "query"
            },
            "maxResults": {
              "minimum": "1",
              "default": "200",
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "location": "query"
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "email"
              ],
              "description": "Column to use for sorting results",
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Email of the group."
              ]
            },
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string"
            },
            "query": {
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "type": "string"
            },
            "customer": {
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain.",
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "userKey": {
              "location": "query",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "type": "string"
            }
          },
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "path": "admin/directory/v1/groups",
          "parameterOrder": [],
          "httpMethod": "GET",
          "id": "directory.groups.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ]
        },
        "patch": {
          "description": "Patch Groups via Apiary Patch Orchestration",
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "required": true
            }
          },
          "request": {
            "$ref": "Group"
          },
          "id": "directory.groups.patch",
          "response": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "PATCH"
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "parameterOrder": [
                "groupKey"
              ],
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "id": "directory.groups.aliases.list",
              "description": "List all aliases for a group",
              "parameters": {
                "groupKey": {
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the group",
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "httpMethod": "GET",
              "response": {
                "$ref": "Aliases"
              }
            },
            "insert": {
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "description": "Add a alias for the group",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "httpMethod": "POST",
              "response": {
                "$ref": "Alias"
              },
              "id": "directory.groups.aliases.insert",
              "parameterOrder": [
                "groupKey"
              ],
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "request": {
                "$ref": "Alias"
              }
            },
            "delete": {
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "id": "directory.groups.aliases.delete",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "parameters": {
                "groupKey": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Email or immutable ID of the group"
                },
                "alias": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The alias to be removed"
                }
              },
              "description": "Remove a alias for the group"
            }
          }
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "request": {
            "$ref": "Channel"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {},
          "id": "admin.channels.stop",
          "description": "Stop watching resources through this channel.",
          "httpMethod": "POST",
          "path": "admin/directory_v1/channels/stop",
          "flatPath": "admin/directory_v1/channels/stop",
          "parameterOrder": []
        }
      }
    },
    "roles": {
      "methods": {
        "delete": {
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "roleId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the role."
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Deletes a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.delete",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "list": {
          "id": "directory.roles.list",
          "parameterOrder": [
            "customer"
          ],
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "response": {
            "$ref": "Roles"
          },
          "httpMethod": "GET",
          "parameters": {
            "pageToken": {
              "type": "string",
              "description": "Token to specify the next page in the list.",
              "location": "query"
            },
            "maxResults": {
              "minimum": "1",
              "maximum": "100",
              "type": "integer",
              "format": "int32",
              "location": "query",
              "description": "Maximum number of results to return."
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles",
          "flatPath": "admin/directory/v1/customer/{customer}/roles"
        },
        "insert": {
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "response": {
            "$ref": "Role"
          },
          "id": "directory.roles.insert",
          "httpMethod": "POST",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles",
          "description": "Creates a role.",
          "request": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles"
        },
        "update": {
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            },
            "roleId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the role."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "httpMethod": "PUT",
          "response": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "id": "directory.roles.update",
          "description": "Updates a role.",
          "request": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "get": {
          "description": "Retrieves a role.",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true
            },
            "roleId": {
              "type": "string",
              "description": "Immutable ID of the role.",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "id": "directory.roles.get",
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "httpMethod": "GET"
        },
        "patch": {
          "response": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "roleId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the role.",
              "location": "path"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "description": "Patch role via Apiary Patch Orchestration",
          "id": "directory.roles.patch",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Role"
          }
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "request": {
            "$ref": "RoleAssignment"
          },
          "response": {
            "$ref": "RoleAssignment"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "httpMethod": "POST",
          "description": "Creates a role assignment.",
          "id": "directory.roleAssignments.insert",
          "parameterOrder": [
            "customer"
          ]
        },
        "delete": {
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameters": {
            "roleAssignmentId": {
              "description": "Immutable ID of the role assignment.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "httpMethod": "DELETE",
          "id": "directory.roleAssignments.delete",
          "description": "Deletes a role assignment.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "get": {
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "description": "Retrieve a role assignment.",
          "id": "directory.roleAssignments.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            },
            "roleAssignmentId": {
              "description": "Immutable ID of the role assignment.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "response": {
            "$ref": "RoleAssignment"
          },
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ]
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "response": {
            "$ref": "RoleAssignments"
          },
          "id": "directory.roleAssignments.list",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "description": "Retrieves a paginated list of all roleAssignments.",
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "userKey": {
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "type": "integer",
              "description": "Maximum number of results to return.",
              "maximum": "200",
              "format": "int32",
              "minimum": "1"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify the next page in the list."
            },
            "roleId": {
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "location": "query",
              "type": "string"
            }
          }
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "httpMethod": "POST",
          "description": "Turn off 2-Step Verification for user.",
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.twoStepVerification.turnOff",
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff"
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "list": {
          "httpMethod": "GET",
          "response": {
            "$ref": "VerificationCodes"
          },
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.verificationCodes.list",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes"
        },
        "generate": {
          "description": "Generate new backup verification codes for the user.",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the user",
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.verificationCodes.generate",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate"
        },
        "invalidate": {
          "description": "Invalidate the current backup verification codes for the user.",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user",
              "location": "path",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.verificationCodes.invalidate",
          "httpMethod": "POST"
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "action": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "parameters": {
            "resourceId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of Mobile Device"
            },
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "id": "directory.mobiledevices.action",
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "description": "Take action on Mobile Device",
          "httpMethod": "POST"
        },
        "delete": {
          "id": "directory.mobiledevices.delete",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            },
            "resourceId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of Mobile Device",
              "required": true
            }
          },
          "description": "Delete Mobile Device",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ]
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "response": {
            "$ref": "MobileDevices"
          },
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "maxResults": {
              "minimum": "1",
              "type": "integer",
              "location": "query",
              "format": "int32",
              "maximum": "100",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "default": "100"
            },
            "projection": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "type": "string"
            },
            "orderBy": {
              "type": "string",
              "location": "query",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ]
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "location": "query",
              "type": "string"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "id": "directory.mobiledevices.list",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile"
        },
        "get": {
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "resourceId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of Mobile Device"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ]
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "MobileDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "description": "Retrieve Mobile Device",
          "id": "directory.mobiledevices.get"
        }
      }
    }
  },
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "baseUrl": "https://www.googleapis.com/",
  "revision": "20201013",
  "protocol": "rest",
  "parameters": {
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "alt": {
      "description": "Data format for response.",
      "location": "query",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ]
    },
    "prettyPrint": {
      "type": "boolean",
      "default": "true",
      "location": "query",
      "description": "Returns response with indentations and line breaks."
    }
  },
  "discoveryVersion": "v1",
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "basePath": "",
  "rootUrl": "https://www.googleapis.com/",
  "batchPath": "batch/admin/directory_v1",
  "servicePath": ""
}
