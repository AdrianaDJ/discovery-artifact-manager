{
  "canonicalName": "directory",
  "rootUrl": "https://www.googleapis.com/",
  "version": "directory_v1",
  "servicePath": "",
  "schemas": {
    "UserWebsite": {
      "id": "UserWebsite",
      "properties": {
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "value": {
          "type": "string",
          "description": "Website."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary website or not."
        }
      },
      "description": "JSON template for a website entry.",
      "type": "object"
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "properties": {
        "commandId": {
          "type": "string",
          "format": "int64",
          "description": "The unique ID of the issued command, used to retrieve the command status."
        }
      },
      "description": "A response for issuing a command.",
      "type": "object"
    },
    "DomainAliases": {
      "properties": {
        "domainAliases": {
          "description": "List of domain alias objects.",
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAliases",
          "type": "string"
        }
      },
      "id": "DomainAliases",
      "type": "object"
    },
    "Asp": {
      "type": "object",
      "id": "Asp",
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the ASP."
        },
        "userKey": {
          "description": "The unique ID of the user who issued the ASP.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created."
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#asp.",
          "default": "admin#directory#asp"
        },
        "lastTimeUsed": {
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "format": "int64",
          "type": "string"
        },
        "codeId": {
          "description": "The unique ID of the ASP.",
          "format": "int32",
          "type": "integer"
        },
        "creationTime": {
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "format": "int64",
          "type": "string"
        }
      }
    },
    "FeatureRename": {
      "properties": {
        "newName": {
          "description": "New name of the feature.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          }
        }
      },
      "id": "FeatureRename",
      "type": "object"
    },
    "VerificationCodes": {
      "type": "object",
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "VerificationCodes",
      "properties": {
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCodesList.",
          "type": "string",
          "default": "admin#directory#verificationCodesList"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "items": {
            "$ref": "VerificationCode"
          },
          "type": "array",
          "description": "A list of verification code resources."
        }
      }
    },
    "DomainAlias": {
      "id": "DomainAlias",
      "type": "object",
      "properties": {
        "domainAliasName": {
          "description": "The domain alias name.",
          "type": "string"
        },
        "parentDomainName": {
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "verified": {
          "description": "Indicates the verification state of a domain alias. (Read-only)",
          "type": "boolean"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAlias"
        },
        "creationTime": {
          "type": "string",
          "description": "The creation time of the domain alias. (Read-only).",
          "format": "int64"
        }
      }
    },
    "Group": {
      "type": "object",
      "id": "Group",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "Email of Group",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          }
        },
        "id": {
          "description": "Unique identifier of Group (Read-only)",
          "type": "string"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        },
        "nonEditableAliases": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of non editable aliases (Read-only)"
        },
        "description": {
          "description": "Description of the group",
          "type": "string"
        },
        "adminCreated": {
          "type": "boolean",
          "description": "Is the group created by admin (Read-only) *"
        },
        "directMembersCount": {
          "type": "string",
          "format": "int64",
          "description": "Group direct members count"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#group",
          "type": "string"
        },
        "aliases": {
          "description": "List of aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Aliases": {
      "id": "Aliases",
      "type": "object",
      "description": "JSON response template to list aliases in Directory API.",
      "properties": {
        "etag": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#aliases"
        },
        "aliases": {
          "items": {
            "type": "any"
          },
          "type": "array"
        }
      }
    },
    "Member": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "Email of member (Read-only)"
        },
        "status": {
          "description": "Status of member (Immutable)",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#member",
          "type": "string"
        },
        "delivery_settings": {
          "description": "Delivery settings of member",
          "type": "string"
        },
        "role": {
          "description": "Role of member",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Type of member (Immutable)"
        }
      },
      "type": "object",
      "id": "Member"
    },
    "ChromeOsDevice": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "platformVersion": {
          "description": "Chromebook platform version (Read-only)",
          "type": "string"
        },
        "orderNumber": {
          "type": "string",
          "description": "Chromebook order number (Read-only)"
        },
        "annotatedLocation": {
          "type": "string",
          "description": "Address or location of the device as noted by the administrator"
        },
        "bootMode": {
          "type": "string",
          "description": "Chromebook boot mode (Read-only)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "diskVolumeReports": {
          "type": "array",
          "description": "Reports of disk space and other info about mounted/connected volumes.",
          "items": {
            "type": "object",
            "properties": {
              "volumeInfo": {
                "type": "array",
                "description": "Disk volumes",
                "items": {
                  "type": "object",
                  "properties": {
                    "storageTotal": {
                      "format": "int64",
                      "description": "Total disk space [in bytes]",
                      "type": "string"
                    },
                    "storageFree": {
                      "type": "string",
                      "format": "int64",
                      "description": "Free disk space [in bytes]"
                    },
                    "volumeId": {
                      "type": "string",
                      "description": "Volume id"
                    }
                  }
                }
              }
            }
          }
        },
        "systemRamFreeReports": {
          "items": {
            "properties": {
              "reportTime": {
                "description": "Date and time the report was received.",
                "type": "string",
                "format": "date-time"
              },
              "systemRamFreeInfo": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "int64"
                }
              }
            },
            "type": "object"
          },
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "type": "array"
        },
        "ethernetMacAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)"
        },
        "model": {
          "type": "string",
          "description": "Chromebook Model (Read-only)"
        },
        "annotatedUser": {
          "type": "string",
          "description": "User of the device"
        },
        "status": {
          "description": "status of the device (Read-only)",
          "type": "string"
        },
        "recentUsers": {
          "type": "array",
          "description": "List of recent device users, in descending order by last login time (Read-only)",
          "items": {
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of the user"
              },
              "email": {
                "type": "string",
                "description": "Email address of the user. Present only if the user type is managed"
              }
            },
            "type": "object"
          }
        },
        "willAutoRenew": {
          "type": "boolean",
          "description": "Will Chromebook auto renew after support end date (Read-only)"
        },
        "manufactureDate": {
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
          "type": "string"
        },
        "lastEnrollmentTime": {
          "description": "Date and time the device was last enrolled (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "deviceId": {
          "type": "string",
          "description": "Unique identifier of Chrome OS Device (Read-only)"
        },
        "serialNumber": {
          "description": "Chromebook serial number (Read-only)",
          "type": "string"
        },
        "firmwareVersion": {
          "description": "Chromebook firmware version (Read-only)",
          "type": "string"
        },
        "annotatedAssetId": {
          "description": "AssetId specified during enrollment or through later annotation",
          "type": "string"
        },
        "activeTimeRanges": {
          "items": {
            "type": "object",
            "properties": {
              "activeTime": {
                "description": "Duration in milliseconds",
                "type": "integer",
                "format": "int32"
              },
              "date": {
                "format": "date",
                "type": "string",
                "description": "Date of usage"
              }
            }
          },
          "description": "List of active time ranges (Read-only)",
          "type": "array"
        },
        "orgUnitPath": {
          "description": "OrgUnit of the device",
          "type": "string"
        },
        "meid": {
          "type": "string",
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)"
        },
        "deviceFiles": {
          "items": {
            "type": "object",
            "properties": {
              "downloadUrl": {
                "description": "File download URL",
                "type": "string"
              },
              "name": {
                "type": "string",
                "description": "File name"
              },
              "createTime": {
                "format": "date-time",
                "type": "string",
                "description": "Date and time the file was created"
              },
              "type": {
                "type": "string",
                "description": "File type"
              }
            }
          },
          "type": "array",
          "description": "List of device files to download (Read-only)"
        },
        "tpmVersionInfo": {
          "type": "object",
          "properties": {
            "vendorSpecific": {
              "description": "Vendor-specific information such as Vendor ID.",
              "type": "string"
            },
            "firmwareVersion": {
              "type": "string",
              "description": "TPM firmware version."
            },
            "manufacturer": {
              "type": "string",
              "description": "TPM manufacturer code."
            },
            "specLevel": {
              "description": "TPM specification level.",
              "type": "string"
            },
            "tpmModel": {
              "type": "string",
              "description": "TPM model number."
            },
            "family": {
              "type": "string",
              "description": "TPM family."
            }
          },
          "description": "Trusted Platform Module (TPM) (Read-only)"
        },
        "dockMacAddress": {
          "type": "string",
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "lastKnownNetwork": {
          "description": "Contains last known network (Read-only)",
          "type": "array",
          "items": {
            "description": "Information for an ip address.",
            "properties": {
              "ipAddress": {
                "type": "string",
                "description": "The IP address."
              },
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              }
            },
            "type": "object"
          }
        },
        "osVersion": {
          "description": "Chromebook Os Version (Read-only)",
          "type": "string"
        },
        "notes": {
          "description": "Notes added by the administrator",
          "type": "string"
        },
        "systemRamTotal": {
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "format": "int64",
          "type": "string"
        },
        "supportEndDate": {
          "description": "Final date the device will be supported (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "autoUpdateExpiration": {
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "type": "string",
          "format": "int64"
        },
        "cpuStatusReports": {
          "description": "Reports of CPU utilization and temperature (Read-only)",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "cpuUtilizationPercentageInfo": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "reportTime": {
                "type": "string",
                "description": "Date and time the report was received.",
                "format": "date-time"
              },
              "cpuTemperatureInfo": {
                "items": {
                  "properties": {
                    "label": {
                      "type": "string",
                      "description": "CPU label"
                    },
                    "temperature": {
                      "type": "integer",
                      "description": "Temperature in Celsius degrees.",
                      "format": "int32"
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "description": "List of CPU temperature samples."
              }
            }
          }
        },
        "macAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on wifi network interface (Read-only)"
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#chromeosdevice",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "ethernetMacAddress0": {
          "type": "string",
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        }
      },
      "id": "ChromeOsDevice"
    },
    "Tokens": {
      "type": "object",
      "properties": {
        "items": {
          "description": "A list of Token resources.",
          "items": {
            "$ref": "Token"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#tokenList.",
          "default": "admin#directory#tokenList",
          "type": "string"
        }
      },
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Tokens"
    },
    "CalendarResources": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList."
        },
        "items": {
          "items": {
            "$ref": "CalendarResource"
          },
          "type": "array",
          "description": "The CalendarResources in this page of results."
        }
      },
      "description": "Public API: Resources.calendars",
      "type": "object",
      "id": "CalendarResources"
    },
    "UserIm": {
      "id": "UserIm",
      "type": "object",
      "description": "JSON template for instant messenger of an user.",
      "properties": {
        "primary": {
          "description": "If this is user's primary im. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "im": {
          "type": "string",
          "description": "Instant messenger id."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "customProtocol": {
          "description": "Custom protocol.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        }
      }
    },
    "Schemas": {
      "type": "object",
      "id": "Schemas",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "schemas": {
          "description": "List of UserSchema objects.",
          "items": {
            "$ref": "Schema"
          },
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#schemas",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserPosixAccount": {
      "id": "UserPosixAccount",
      "properties": {
        "accountId": {
          "type": "string",
          "description": "A POSIX account field identifier."
        },
        "uid": {
          "type": "string",
          "description": "The POSIX compliant user ID.",
          "format": "uint64"
        },
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "operatingSystemType": {
          "type": "string",
          "description": "The operating system type for this account."
        },
        "gecos": {
          "type": "string",
          "description": "The GECOS (user information) for this account."
        },
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        },
        "gid": {
          "type": "string",
          "description": "The default group ID.",
          "format": "uint64"
        },
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        },
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary account within the SystemId."
        }
      },
      "type": "object",
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix."
    },
    "BuildingAddress": {
      "type": "object",
      "properties": {
        "sublocality": {
          "type": "string",
          "description": "Optional. Sublocality of the address."
        },
        "postalCode": {
          "type": "string",
          "description": "Optional. Postal code of the address."
        },
        "administrativeArea": {
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region.",
          "type": "string"
        },
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        },
        "languageCode": {
          "description": "Optional. BCP-47 language code of the contents of this address (if known).",
          "type": "string"
        },
        "addressLines": {
          "description": "Unstructured address lines describing the lower levels of an address.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "locality": {
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.",
          "type": "string"
        }
      },
      "description": "Public API: Resources.buildings",
      "id": "BuildingAddress"
    },
    "DirectoryChromeosdevicesCommand": {
      "properties": {
        "payload": {
          "description": "The payload that the command specified, if any.",
          "type": "string"
        },
        "state": {
          "type": "string",
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "description": "Indicates the command state.",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ]
        },
        "issueTime": {
          "description": "The timestamp when the command was issued by the admin.",
          "format": "google-datetime",
          "type": "string"
        },
        "commandId": {
          "format": "int64",
          "description": "Unique ID of a device command.",
          "type": "string"
        },
        "commandResult": {
          "$ref": "DirectoryChromeosdevicesCommandResult",
          "description": "The result of the command execution."
        },
        "commandExpireTime": {
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.",
          "type": "string",
          "format": "google-datetime"
        },
        "type": {
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "type": "string",
          "description": "The type of the command.",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ]
        }
      },
      "type": "object",
      "description": "Information regarding a command that was issued to a device.",
      "id": "DirectoryChromeosdevicesCommand"
    },
    "UserRelation": {
      "id": "UserRelation",
      "type": "object",
      "description": "JSON template for a relation entry.",
      "properties": {
        "value": {
          "description": "The name of the relation.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      }
    },
    "Privileges": {
      "id": "Privileges",
      "properties": {
        "items": {
          "description": "A list of Privilege resources.",
          "type": "array",
          "items": {
            "$ref": "Privilege"
          }
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "default": "admin#directory#privileges"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object"
    },
    "Customer": {
      "id": "Customer",
      "properties": {
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain"
        },
        "postalAddress": {
          "$ref": "CustomerPostalAddress",
          "description": "The customer's postal address information."
        },
        "id": {
          "type": "string",
          "description": "The unique ID for the customer's G Suite account. (Readonly)"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The customer's contact phone number in E.164 format."
        },
        "customerCreationTime": {
          "format": "date-time",
          "type": "string",
          "description": "The customer's creation time (Readonly)"
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. The default value is en-US",
          "type": "string"
        },
        "kind": {
          "description": "Identifies the resource as a customer. Value: admin#directory#customer",
          "type": "string",
          "default": "admin#directory#customer"
        },
        "customerDomain": {
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "UserSshPublicKey": {
      "properties": {
        "key": {
          "description": "An SSH public key.",
          "type": "string"
        },
        "fingerprint": {
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "expirationTimeUsec": {
          "type": "string",
          "format": "int64",
          "description": "An expiration time in microseconds since epoch."
        }
      },
      "description": "JSON template for a POSIX account entry.",
      "type": "object",
      "id": "UserSshPublicKey"
    },
    "Feature": {
      "type": "object",
      "description": "JSON template for Feature object in Directory API.",
      "id": "Feature",
      "properties": {
        "name": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "description": "The name of the feature."
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#Feature"
        }
      }
    },
    "MembersHasMember": {
      "description": "JSON template for Has Member response in Directory API.",
      "type": "object",
      "properties": {
        "isMember": {
          "type": "boolean",
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "readOnly": true
        }
      },
      "id": "MembersHasMember"
    },
    "UserGender": {
      "id": "UserGender",
      "properties": {
        "addressMeAs": {
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their.",
          "type": "string"
        },
        "customGender": {
          "description": "Custom gender.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Gender."
        }
      },
      "type": "object"
    },
    "MobileDeviceAction": {
      "properties": {
        "action": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          },
          "description": "Action to be taken on the Mobile Device"
        }
      },
      "id": "MobileDeviceAction",
      "type": "object"
    },
    "OrgUnit": {
      "id": "OrgUnit",
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "blockInheritance": {
          "description": "Should block inheritance",
          "type": "boolean"
        },
        "parentOrgUnitPath": {
          "type": "string",
          "description": "Path of parent OrgUnit"
        },
        "parentOrgUnitId": {
          "type": "string",
          "description": "Id of parent OrgUnit"
        },
        "orgUnitId": {
          "description": "Id of OrgUnit",
          "type": "string"
        },
        "name": {
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          },
          "type": "string",
          "description": "Name of OrgUnit"
        },
        "description": {
          "type": "string",
          "description": "Description of OrgUnit"
        },
        "orgUnitPath": {
          "description": "Path of OrgUnit",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#orgUnit",
          "type": "string"
        }
      }
    },
    "Users": {
      "id": "Users",
      "properties": {
        "trigger_event": {
          "type": "string",
          "description": "Event that triggered this response (only used in case of Push Response)"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#users"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "users": {
          "description": "List of user objects.",
          "type": "array",
          "items": {
            "$ref": "User"
          }
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Roles": {
      "type": "object",
      "id": "Roles",
      "properties": {
        "nextPageToken": {
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#roles.",
          "type": "string",
          "default": "admin#directory#roles"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Role"
          },
          "description": "A list of Role resources."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "VerificationCode": {
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "VerificationCode",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "userId": {
          "description": "The obfuscated unique ID of the user.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#verificationCode",
          "description": "The type of the resource. This is always admin#directory#verificationCode."
        },
        "verificationCode": {
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserOrganization": {
      "type": "object",
      "properties": {
        "costCenter": {
          "type": "string",
          "description": "The cost center of the users department."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        },
        "fullTimeEquivalent": {
          "format": "int32",
          "type": "integer",
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%)."
        },
        "domain": {
          "type": "string",
          "description": "The domain to which the organization belongs to."
        },
        "department": {
          "type": "string",
          "description": "Department within the organization."
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "symbol": {
          "description": "Symbol of the organization.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "description": {
          "description": "Description of the organization.",
          "type": "string"
        },
        "primary": {
          "description": "If it user's primary organization.",
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "description": "Name of the organization"
        }
      },
      "id": "UserOrganization",
      "description": "JSON template for an organization entry."
    },
    "SchemaFieldSpec": {
      "properties": {
        "multiValued": {
          "type": "boolean",
          "description": "Boolean specifying whether this is a multi-valued field or not."
        },
        "numericIndexingSpec": {
          "properties": {
            "maxValue": {
              "format": "double",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "type": "number"
            },
            "minValue": {
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double",
              "type": "number"
            }
          },
          "type": "object",
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported."
        },
        "fieldName": {
          "description": "Name of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        },
        "readAccessType": {
          "default": "ALL_DOMAIN_USERS",
          "type": "string",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\"."
        },
        "kind": {
          "default": "admin#directory#schema#fieldspec",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "indexed": {
          "description": "Boolean specifying whether the field is indexed or not.",
          "default": "true",
          "type": "boolean"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "fieldType": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Type of the field."
        },
        "displayName": {
          "description": "Display Name of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        },
        "fieldId": {
          "type": "string",
          "description": "Unique identifier of Field (Read-only)"
        }
      },
      "type": "object",
      "id": "SchemaFieldSpec",
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Privilege": {
      "type": "object",
      "id": "Privilege",
      "properties": {
        "serviceName": {
          "type": "string",
          "description": "The name of the service this privilege is for."
        },
        "serviceId": {
          "type": "string",
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
        },
        "isOuScopable": {
          "type": "boolean",
          "description": "If the privilege can be restricted to an organization unit."
        },
        "privilegeName": {
          "type": "string",
          "description": "The name of the privilege."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "childPrivileges": {
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "items": {
            "$ref": "Privilege"
          },
          "type": "array"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#privilege.",
          "type": "string",
          "default": "admin#directory#privilege"
        }
      }
    },
    "UserLanguage": {
      "description": "JSON template for a language entry.",
      "id": "UserLanguage",
      "properties": {
        "languageCode": {
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.",
          "type": "string"
        },
        "customLanguage": {
          "type": "string",
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set"
        }
      },
      "type": "object"
    },
    "MobileDevice": {
      "type": "object",
      "id": "MobileDevice",
      "properties": {
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "manufacturer": {
          "description": "Mobile Device manufacturer (Read-only)",
          "type": "string"
        },
        "buildNumber": {
          "description": "Mobile Device Build number (Read-only)",
          "type": "string"
        },
        "bootloaderVersion": {
          "description": "Mobile Device Bootloader version (Read-only)",
          "type": "string"
        },
        "lastSync": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "brand": {
          "description": "Mobile Device Brand (Read-only)",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#mobiledevice",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "deviceId": {
          "type": "string",
          "description": "Mobile Device serial number (Read-only)"
        },
        "basebandVersion": {
          "description": "Mobile Device Baseband version (Read-only)",
          "type": "string"
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "model": {
          "description": "Name of the model of the device",
          "type": "string"
        },
        "securityPatchLevel": {
          "description": "Mobile Device Security patch level (Read-only)",
          "format": "int64",
          "type": "string"
        },
        "type": {
          "description": "The type of device (Read-only)",
          "type": "string"
        },
        "serialNumber": {
          "type": "string",
          "description": "Mobile Device SSN or Serial Number (Read-only)"
        },
        "hardwareId": {
          "description": "Mobile Device Hardware Id (Read-only)",
          "type": "string"
        },
        "email": {
          "type": "array",
          "description": "List of owner user's email addresses (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "networkOperator": {
          "description": "Mobile Device mobile or network operator (if available) (Read-only)",
          "type": "string"
        },
        "userAgent": {
          "description": "Mobile Device user agent",
          "type": "string"
        },
        "firstSync": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "encryptionStatus": {
          "type": "string",
          "description": "Mobile Device Encryption Status (Read-only)"
        },
        "hardware": {
          "type": "string",
          "description": "Mobile Device Hardware (Read-only)"
        },
        "resourceId": {
          "type": "string",
          "description": "Unique identifier of Mobile Device (Read-only)"
        },
        "deviceCompromisedStatus": {
          "description": "Mobile Device compromised status (Read-only)",
          "type": "string"
        },
        "status": {
          "description": "Status of the device (Read-only)",
          "type": "string"
        },
        "os": {
          "type": "string",
          "description": "Name of the mobile operating system"
        },
        "defaultLanguage": {
          "description": "The default locale used on the Mobile Device (Read-only)",
          "type": "string"
        },
        "applications": {
          "items": {
            "properties": {
              "displayName": {
                "description": "Display name of application",
                "type": "string"
              },
              "permission": {
                "description": "List of Permissions for application",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "versionName": {
                "type": "string",
                "description": "Version name of application"
              },
              "packageName": {
                "description": "Package name of application",
                "type": "string"
              },
              "versionCode": {
                "description": "Version code of application",
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "description": "List of applications installed on Mobile Device",
          "type": "array"
        },
        "devicePasswordStatus": {
          "description": "DevicePasswordStatus (Read-only)",
          "type": "string"
        },
        "wifiMacAddress": {
          "type": "string",
          "description": "Mobile Device WiFi MAC address (Read-only)"
        },
        "unknownSourcesStatus": {
          "description": "Unknown sources enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "privilege": {
          "type": "string",
          "description": "DMAgentPermission (Read-only)"
        },
        "kernelVersion": {
          "type": "string",
          "description": "Mobile Device Kernel version (Read-only)"
        },
        "supportsWorkProfile": {
          "type": "boolean",
          "description": "Work profile supported on device (Read-only)"
        },
        "developerOptionsStatus": {
          "type": "boolean",
          "description": "Developer options enabled or disabled on device (Read-only)"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "imei": {
          "description": "Mobile Device IMEI number (Read-only)",
          "type": "string"
        },
        "otherAccountsInfo": {
          "items": {
            "type": "string"
          },
          "description": "List of accounts added on device (Read-only)",
          "type": "array"
        },
        "meid": {
          "type": "string",
          "description": "Mobile Device MEID number (Read-only)"
        },
        "managedAccountIsOnOwnerProfile": {
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)",
          "type": "boolean"
        },
        "name": {
          "type": "array",
          "description": "List of owner user's names (Read-only)",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Domains": {
      "properties": {
        "isPrimary": {
          "type": "boolean",
          "description": "Indicates if the domain is a primary domain (Read-only)."
        },
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "description": "List of domain alias objects. (Read-only)",
          "type": "array"
        },
        "creationTime": {
          "type": "string",
          "description": "Creation time of the domain. (Read-only).",
          "format": "int64"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain. (Read-only)."
        },
        "domainName": {
          "description": "The domain name of the customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domain",
          "description": "Kind of resource this is."
        }
      },
      "type": "object",
      "id": "Domains"
    },
    "UserEmail": {
      "type": "object",
      "id": "UserEmail",
      "description": "JSON template for an email.",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary email. Only one entry could be marked as primary."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value."
        },
        "address": {
          "description": "Email id of the user.",
          "type": "string"
        }
      }
    },
    "FeatureInstance": {
      "description": "JSON template for a feature instance.",
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      },
      "type": "object",
      "id": "FeatureInstance"
    },
    "UserExternalId": {
      "properties": {
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "value": {
          "description": "The value of the id.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The type of the Id."
        }
      },
      "type": "object",
      "id": "UserExternalId",
      "description": "JSON template for an externalId entry."
    },
    "UserPhoto": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "width": {
          "description": "Width in pixels of the photo",
          "format": "int32",
          "type": "integer"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#user#photo",
          "description": "Kind of resource this is."
        },
        "photoData": {
          "format": "byte",
          "description": "Base64 encoded photo data",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          }
        },
        "height": {
          "type": "integer",
          "description": "Height in pixels of the photo",
          "format": "int32"
        },
        "mimeType": {
          "description": "Mime Type of the photo",
          "type": "string"
        },
        "primaryEmail": {
          "description": "Primary email of User (Read-only)",
          "type": "string"
        }
      },
      "id": "UserPhoto",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "User": {
      "properties": {
        "suspended": {
          "description": "Indicates if user is suspended.",
          "type": "boolean"
        },
        "locations": {
          "type": "any",
          "description": "Locations of User"
        },
        "etag": {
          "description": "Output only. ETag of the resource.",
          "readOnly": true,
          "type": "string"
        },
        "isEnforcedIn2Sv": {
          "type": "boolean",
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "readOnly": true
        },
        "deletionTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "posixAccounts": {
          "type": "any",
          "description": "The POSIX accounts of User"
        },
        "nonEditableAliases": {
          "description": "Output only. List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array",
          "readOnly": true
        },
        "thumbnailPhotoUrl": {
          "description": "Output only. Photo Url of the user (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        },
        "customerId": {
          "type": "string",
          "description": "Output only. CustomerId of User (Read-only)",
          "readOnly": true
        },
        "kind": {
          "readOnly": true,
          "default": "admin#directory#user",
          "type": "string",
          "description": "Output only. Kind of resource this is."
        },
        "keywords": {
          "type": "any",
          "description": "Keywords of User"
        },
        "externalIds": {
          "description": "The external Ids of User *",
          "type": "any"
        },
        "ims": {
          "type": "any",
          "description": "User's Instant Messenger"
        },
        "emails": {
          "description": "Emails of User",
          "type": "any"
        },
        "isDelegatedAdmin": {
          "type": "boolean",
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)",
          "readOnly": true
        },
        "websites": {
          "description": "Websites of User",
          "type": "any"
        },
        "isAdmin": {
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "customSchemas": {
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          },
          "description": "Custom fields of the user.",
          "type": "object"
        },
        "password": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string",
          "description": "User's password"
        },
        "phones": {
          "description": "Phone numbers of User",
          "type": "any"
        },
        "includeInGlobalAddressList": {
          "description": "Boolean indicating if user is included in Global Address List",
          "type": "boolean"
        },
        "sshPublicKeys": {
          "description": "The SSH public keys of User",
          "type": "any"
        },
        "thumbnailPhotoEtag": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. ETag of the user's photo (Read-only)"
        },
        "languages": {
          "description": "Languages of User",
          "type": "any"
        },
        "archived": {
          "type": "boolean",
          "description": "Indicates if user is archived."
        },
        "recoveryPhone": {
          "type": "string",
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*."
        },
        "notes": {
          "type": "any",
          "description": "Notes of User"
        },
        "suspensionReason": {
          "readOnly": true,
          "description": "Output only. Suspension reason if user is suspended (Read-only)",
          "type": "string"
        },
        "gender": {
          "description": "Gender of User",
          "type": "any"
        },
        "isMailboxSetup": {
          "readOnly": true,
          "description": "Output only. Is mailbox setup (Read-only)",
          "type": "boolean"
        },
        "isEnrolledIn2Sv": {
          "type": "boolean",
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "readOnly": true
        },
        "hashFunction": {
          "type": "string",
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt"
        },
        "name": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's name",
          "$ref": "UserName"
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "Boolean indicating if ip is whitelisted"
        },
        "relations": {
          "description": "The Relations of User *",
          "type": "any"
        },
        "recoveryEmail": {
          "type": "string",
          "description": "Recovery email of the user."
        },
        "changePasswordAtNextLogin": {
          "type": "boolean",
          "description": "Boolean indicating if the user should change password in next login"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "addresses": {
          "type": "any",
          "description": "Addresses of User"
        },
        "organizations": {
          "type": "any",
          "description": "Organizations of User"
        },
        "aliases": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          },
          "description": "Output only. List of aliases (Read-only)"
        },
        "agreedToTerms": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Indicates if user has agreed to terms (Read-only)"
        },
        "lastLoginTime": {
          "format": "date-time",
          "readOnly": true,
          "description": "User's last login time. (Read-only)",
          "type": "string"
        },
        "primaryEmail": {
          "description": "username of User",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "creationTime": {
          "readOnly": true,
          "format": "date-time",
          "description": "User's G Suite account creation time. (Read-only)",
          "type": "string"
        }
      },
      "id": "User",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "ChromeOsMoveDevicesToOu": {
      "properties": {
        "deviceIds": {
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "ChromeOs Devices to be moved to OU"
        }
      },
      "type": "object",
      "id": "ChromeOsMoveDevicesToOu"
    },
    "Groups": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Groups",
      "properties": {
        "groups": {
          "items": {
            "$ref": "Group"
          },
          "description": "List of group objects.",
          "type": "array"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#groups"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "Schema": {
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Schema",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Display name for the schema.",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "fields": {
          "type": "array",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "description": "Fields of Schema"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "schemaId": {
          "description": "Unique identifier of Schema (Read-only)",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#schema",
          "description": "Kind of resource this is."
        },
        "schemaName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "Schema name",
          "type": "string"
        }
      }
    },
    "CustomerPostalAddress": {
      "id": "CustomerPostalAddress",
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        },
        "contactName": {
          "type": "string",
          "description": "The customer contact's name."
        },
        "countryCode": {
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements.",
          "type": "string"
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        },
        "region": {
          "type": "string",
          "description": "Name of the region. An example of a region value is NY for the state of New York."
        },
        "addressLine3": {
          "description": "Address line 3 of the address.",
          "type": "string"
        },
        "addressLine2": {
          "description": "Address line 2 of the address.",
          "type": "string"
        },
        "postalCode": {
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element.",
          "type": "string"
        },
        "locality": {
          "description": "Name of the locality. An example of a locality value is the city of San Francisco.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserCustomProperties": {
      "additionalProperties": {
        "type": "any"
      },
      "type": "object",
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "id": "UserCustomProperties"
    },
    "Role": {
      "id": "Role",
      "properties": {
        "isSystemRole": {
          "type": "boolean",
          "description": "Returns true if this is a pre-defined system role."
        },
        "roleName": {
          "description": "Name of the role.",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "string"
        },
        "rolePrivileges": {
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "items": {
            "type": "object",
            "properties": {
              "serviceId": {
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
                "type": "string"
              },
              "privilegeName": {
                "description": "The name of the privilege.",
                "type": "string"
              }
            }
          },
          "type": "array",
          "description": "The set of privileges that are granted to this role."
        },
        "kind": {
          "default": "admin#directory#role",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#role."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "roleDescription": {
          "type": "string",
          "description": "A short description of the role."
        },
        "roleId": {
          "format": "int64",
          "type": "string",
          "description": "ID of the role."
        },
        "isSuperAdminRole": {
          "description": "Returns true if the role is a super admin role.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CalendarResource": {
      "properties": {
        "resourceType": {
          "description": "The type of the calendar resource, intended for non-room resources.",
          "type": "string"
        },
        "resourceEmail": {
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource.",
          "type": "string"
        },
        "floorSection": {
          "type": "string",
          "description": "Name of the section within a floor a resource is located in."
        },
        "resourceName": {
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          }
        },
        "resourceId": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string",
          "description": "The unique ID for the calendar resource."
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "resourceCategory": {
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.",
          "type": "string"
        },
        "floorName": {
          "type": "string",
          "description": "Name of the floor a resource is located on."
        },
        "featureInstances": {
          "type": "any",
          "description": "Instances of features for the calendar resource."
        },
        "generatedResourceName": {
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\".",
          "type": "string"
        },
        "capacity": {
          "description": "Capacity of a resource, number of seats in a room.",
          "format": "int32",
          "type": "integer"
        },
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "default": "admin#directory#resources#calendars#CalendarResource",
          "type": "string"
        },
        "buildingId": {
          "type": "string",
          "description": "Unique ID for the building a resource is located in."
        }
      },
      "type": "object",
      "id": "CalendarResource",
      "description": "Public API: Resources.calendars"
    },
    "UserPhone": {
      "id": "UserPhone",
      "description": "JSON template for a phone entry.",
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary phone or not."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "value": {
          "description": "Phone number.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Asps": {
      "properties": {
        "items": {
          "description": "A list of ASP resources.",
          "type": "array",
          "items": {
            "$ref": "Asp"
          }
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#aspList.",
          "default": "admin#directory#aspList"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object",
      "id": "Asps",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Domains2": {
      "type": "object",
      "properties": {
        "domains": {
          "description": "List of domain objects.",
          "items": {
            "$ref": "Domains"
          },
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#domains",
          "description": "Kind of resource this is.",
          "type": "string"
        }
      },
      "id": "Domains2"
    },
    "DirectoryChromeosdevicesCommandResult": {
      "id": "DirectoryChromeosdevicesCommandResult",
      "type": "object",
      "properties": {
        "result": {
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "type": "string",
          "description": "The result of the command.",
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ]
        },
        "executeTime": {
          "description": "The time at which the command was executed or failed to execute.",
          "format": "google-datetime",
          "type": "string"
        },
        "errorMessage": {
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed.",
          "type": "string"
        }
      },
      "description": "The result of executing a command."
    },
    "RoleAssignments": {
      "type": "object",
      "id": "RoleAssignments",
      "properties": {
        "nextPageToken": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#roleAssignments",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments ."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "description": "A list of RoleAssignment resources.",
          "items": {
            "$ref": "RoleAssignment"
          },
          "type": "array"
        }
      }
    },
    "UserAddress": {
      "type": "object",
      "properties": {
        "formatted": {
          "type": "string",
          "description": "Formatted address."
        },
        "countryCode": {
          "description": "Country code.",
          "type": "string"
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Locality."
        },
        "extendedAddress": {
          "type": "string",
          "description": "Extended Address."
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        },
        "region": {
          "description": "Region.",
          "type": "string"
        },
        "sourceIsStructured": {
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered.",
          "type": "boolean"
        },
        "poBox": {
          "description": "Other parts of address.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary address. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "streetAddress": {
          "description": "Street.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value."
        }
      },
      "id": "UserAddress",
      "description": "JSON template for address."
    },
    "Alias": {
      "id": "Alias",
      "properties": {
        "id": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#alias",
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for Alias object in Directory API."
    },
    "Token": {
      "id": "Token",
      "properties": {
        "displayText": {
          "description": "The displayable name of the application the token is issued to.",
          "type": "string"
        },
        "nativeApp": {
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device.",
          "type": "boolean"
        },
        "scopes": {
          "items": {
            "type": "string"
          },
          "description": "A list of authorization scopes the application is granted.",
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user that issued the token."
        },
        "clientId": {
          "type": "string",
          "description": "The Client ID of the application the token is issued to."
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#token.",
          "default": "admin#directory#token"
        },
        "anonymous": {
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID.",
          "type": "boolean"
        }
      },
      "type": "object",
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Buildings": {
      "id": "Buildings",
      "properties": {
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "buildings": {
          "type": "array",
          "items": {
            "$ref": "Building"
          },
          "description": "The Buildings in this page of results."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#buildings#buildingsList"
        }
      },
      "description": "Public API: Resources.buildings",
      "type": "object"
    },
    "RoleAssignment": {
      "type": "object",
      "id": "RoleAssignment",
      "properties": {
        "roleAssignmentId": {
          "description": "ID of this roleAssignment.",
          "type": "string",
          "format": "int64"
        },
        "orgUnitId": {
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.",
          "type": "string"
        },
        "roleId": {
          "format": "int64",
          "description": "The ID of the role that is assigned.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#roleAssignment",
          "description": "The type of the API resource. This is always admin#directory#roleAssignment."
        },
        "assignedTo": {
          "description": "The unique ID of the user this role is assigned to.",
          "type": "string"
        },
        "scopeType": {
          "type": "string",
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT "
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "MobileDevices": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#mobiledevices",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "mobiledevices": {
          "type": "array",
          "description": "List of Mobile Device objects.",
          "items": {
            "$ref": "MobileDevice"
          }
        }
      },
      "id": "MobileDevices"
    },
    "ChromeOsDeviceAction": {
      "type": "object",
      "id": "ChromeOsDeviceAction",
      "properties": {
        "action": {
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "description": "Action to be taken on the ChromeOs Device",
          "type": "string"
        },
        "deprovisionReason": {
          "type": "string"
        }
      }
    },
    "Building": {
      "description": "Public API: Resources.buildings",
      "id": "Building",
      "properties": {
        "buildingId": {
          "type": "string",
          "description": "Unique identifier for the building. The maximum length is 100 characters."
        },
        "floorNames": {
          "type": "array",
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "items": {
            "type": "string"
          }
        },
        "address": {
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required.",
          "$ref": "BuildingAddress"
        },
        "description": {
          "type": "string",
          "description": "A brief description of the building. For example, \"Chelsea Market\"."
        },
        "buildingName": {
          "type": "string",
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#buildings#Building"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "coordinates": {
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees.",
          "$ref": "BuildingCoordinates"
        }
      },
      "type": "object"
    },
    "BuildingCoordinates": {
      "type": "object",
      "id": "BuildingCoordinates",
      "description": "Public API: Resources.buildings",
      "properties": {
        "longitude": {
          "format": "double",
          "type": "number",
          "description": "Longitude in decimal degrees."
        },
        "latitude": {
          "description": "Latitude in decimal degrees.",
          "format": "double",
          "type": "number"
        }
      }
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "description": "A request for issuing a command.",
      "properties": {
        "commandType": {
          "type": "string",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "description": "The type of command."
        },
        "payload": {
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100].",
          "type": "string"
        }
      },
      "id": "DirectoryChromeosdevicesIssueCommandRequest",
      "type": "object"
    },
    "Features": {
      "id": "Features",
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#resources#features#featuresList",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "features": {
          "type": "array",
          "description": "The Features in this page of results.",
          "items": {
            "$ref": "Feature"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        }
      },
      "description": "Public API: Resources.features"
    },
    "ChromeOsDevices": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "ChromeOsDevices",
      "properties": {
        "kind": {
          "default": "admin#directory#chromeosdevices",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "chromeosdevices": {
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "description": "List of Chrome OS Device objects.",
          "type": "array"
        }
      }
    },
    "UserMakeAdmin": {
      "type": "object",
      "id": "UserMakeAdmin",
      "properties": {
        "status": {
          "type": "boolean",
          "description": "Boolean indicating new admin status of the user",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          }
        }
      }
    },
    "UserName": {
      "properties": {
        "fullName": {
          "type": "string",
          "description": "Full Name"
        },
        "familyName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string",
          "description": "Last Name"
        },
        "givenName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string",
          "description": "First Name"
        }
      },
      "type": "object",
      "id": "UserName"
    },
    "UserAbout": {
      "properties": {
        "contentType": {
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Actual value of notes."
        }
      },
      "description": "JSON template for About (notes) of a user in Directory API.",
      "id": "UserAbout",
      "type": "object"
    },
    "Channel": {
      "description": "An notification channel used to watch for resource changes.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "params": {
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "resourceId": {
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.",
          "type": "string"
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        },
        "id": {
          "description": "A UUID or similar unique string that identifies this channel.",
          "type": "string"
        },
        "payload": {
          "type": "boolean",
          "description": "A Boolean value to indicate whether payload is wanted. Optional."
        },
        "token": {
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.",
          "type": "string"
        },
        "kind": {
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "default": "api#channel",
          "type": "string"
        },
        "resourceUri": {
          "description": "A version-specific identifier for the watched resource.",
          "type": "string"
        },
        "expiration": {
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "type": "string",
          "format": "int64"
        }
      },
      "type": "object",
      "id": "Channel"
    },
    "OrgUnits": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#orgUnits"
        },
        "organizationUnits": {
          "type": "array",
          "description": "List of user objects.",
          "items": {
            "$ref": "OrgUnit"
          }
        }
      },
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "OrgUnits"
    },
    "Members": {
      "properties": {
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "members": {
          "items": {
            "$ref": "Member"
          },
          "description": "List of member objects.",
          "type": "array"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#members",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object",
      "id": "Members"
    },
    "UserLocation": {
      "type": "object",
      "id": "UserLocation",
      "description": "JSON template for a location entry.",
      "properties": {
        "buildingId": {
          "type": "string",
          "description": "Building Identifier."
        },
        "floorSection": {
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values.",
          "type": "string"
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        },
        "deskCode": {
          "description": "Most specific textual code of individual desk location.",
          "type": "string"
        },
        "floorName": {
          "description": "Floor name/number.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      }
    },
    "UserKeyword": {
      "properties": {
        "type": {
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "value": {
          "description": "Keyword.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "description": "JSON template for a keyword entry.",
      "type": "object",
      "id": "UserKeyword"
    },
    "UserUndelete": {
      "properties": {
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        }
      },
      "id": "UserUndelete",
      "type": "object"
    }
  },
  "ownerName": "Google",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "kind": "discovery#restDescription",
  "baseUrl": "https://www.googleapis.com/",
  "ownerDomain": "google.com",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "parameters": {
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "description": "V1 error format.",
      "location": "query",
      "enum": [
        "1",
        "2"
      ]
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "description": "Data format for response.",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    }
  },
  "batchPath": "batch/admin/directory_v1",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "name": "admin",
  "title": "Admin SDK",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        }
      }
    }
  },
  "discoveryVersion": "v1",
  "id": "admin:directory_v1",
  "revision": "20201013",
  "fullyEncodeReservedExpansion": true,
  "protocol": "rest",
  "resources": {
    "chromeosdevices": {
      "methods": {
        "patch": {
          "parameters": {
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "deviceId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of Chrome OS Device"
            }
          },
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "description": "Patch Chrome OS Device",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "httpMethod": "PATCH",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "id": "directory.chromeosdevices.patch",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ]
        },
        "get": {
          "id": "directory.chromeosdevices.get",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "httpMethod": "GET",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string"
            },
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "description": "Retrieve Chrome OS Device",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ]
        },
        "moveDevicesToOu": {
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "required": true,
              "description": "Full path of the target organizational unit or its ID",
              "location": "query"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "httpMethod": "POST"
        },
        "update": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "id": "directory.chromeosdevices.update",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "description": "Update Chrome OS Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "httpMethod": "PUT",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            },
            "deviceId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of Chrome OS Device"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query"
            }
          }
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "httpMethod": "GET",
          "parameters": {
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "location": "query",
              "type": "string"
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "location": "query",
              "type": "string"
            },
            "projection": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields."
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ],
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "description": "Maximum number of results to return.",
              "minimum": "1",
              "format": "int32",
              "default": "100",
              "location": "query",
              "type": "integer"
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query"
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.chromeosdevices.list"
        },
        "action": {
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "id": "directory.chromeosdevices.action",
          "parameters": {
            "resourceId": {
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "description": "Take action on Chrome OS Device",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "httpMethod": "POST"
        }
      }
    },
    "domains": {
      "methods": {
        "delete": {
          "id": "directory.domains.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "httpMethod": "DELETE",
          "description": "Deletes a domain of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "domainName": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Name of domain to be deleted"
            }
          }
        },
        "insert": {
          "response": {
            "$ref": "Domains"
          },
          "httpMethod": "POST",
          "id": "directory.domains.insert",
          "parameterOrder": [
            "customer"
          ],
          "description": "Inserts a domain of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "request": {
            "$ref": "Domains"
          }
        },
        "list": {
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/domains",
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "response": {
            "$ref": "Domains2"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.domains.list",
          "description": "Lists the domains of the customer."
        },
        "get": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "response": {
            "$ref": "Domains"
          },
          "parameters": {
            "domainName": {
              "required": true,
              "description": "Name of domain to be retrieved",
              "location": "path",
              "type": "string"
            },
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "id": "directory.domains.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "description": "Retrieves a domain of the customer."
        }
      }
    },
    "users": {
      "methods": {
        "watch": {
          "parameters": {
            "showDeleted": {
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "location": "query"
            },
            "domain": {
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\"",
              "location": "query"
            },
            "maxResults": {
              "description": "Maximum number of results to return.",
              "default": "100",
              "format": "int32",
              "maximum": "500",
              "location": "query",
              "type": "integer",
              "minimum": "1"
            },
            "projection": {
              "description": "What subset of fields to fetch for this user.",
              "location": "query",
              "default": "basic",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "type": "string",
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ]
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users"
            },
            "customFieldMask": {
              "location": "query",
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "viewType": {
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "type": "string",
              "location": "query",
              "default": "admin_view",
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "enum": [
                "admin_view",
                "domain_public"
              ]
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "type": "string",
              "location": "query"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "type": "string",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "location": "query"
            },
            "event": {
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "description": "Event on which subscription is intended",
              "location": "query",
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "type": "string"
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order.",
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "location": "query"
            }
          },
          "flatPath": "admin/directory/v1/users/watch",
          "id": "directory.users.watch",
          "request": {
            "$ref": "Channel"
          },
          "parameterOrder": [],
          "path": "admin/directory/v1/users/watch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "POST",
          "description": "Watch for changes in users list",
          "response": {
            "$ref": "Channel"
          }
        },
        "update": {
          "id": "directory.users.update",
          "description": "update user",
          "request": {
            "$ref": "User"
          },
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "httpMethod": "PUT",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "list": {
          "parameters": {
            "viewType": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "type": "string",
              "default": "admin_view"
            },
            "sortOrder": {
              "type": "string",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query",
              "description": "Whether to return results in ascending or descending order.",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "showDeleted": {
              "type": "string",
              "location": "query",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)"
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "location": "query",
              "type": "string"
            },
            "customer": {
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "type": "string"
            },
            "customFieldMask": {
              "location": "query",
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "maxResults": {
              "location": "query",
              "format": "int32",
              "type": "integer",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "maximum": "500",
              "default": "100"
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users"
            },
            "orderBy": {
              "location": "query",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "type": "string"
            },
            "projection": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "type": "string",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "default": "basic",
              "description": "What subset of fields to fetch for this user."
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            }
          },
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "directory.users.list",
          "httpMethod": "GET",
          "parameterOrder": [],
          "path": "admin/directory/v1/users",
          "flatPath": "admin/directory/v1/users",
          "response": {
            "$ref": "Users"
          }
        },
        "insert": {
          "httpMethod": "POST",
          "id": "directory.users.insert",
          "response": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameters": {},
          "flatPath": "admin/directory/v1/users",
          "parameterOrder": [],
          "request": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users",
          "description": "create user."
        },
        "signOut": {
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "id": "directory.users.signOut"
        },
        "patch": {
          "path": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object"
            }
          },
          "request": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "Patch Users via Apiary Patch Orchestration",
          "id": "directory.users.patch",
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "User"
          }
        },
        "undelete": {
          "request": {
            "$ref": "UserUndelete"
          },
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "id": "directory.users.undelete",
          "description": "Undelete a deleted user",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "The immutable id of the user"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/undelete"
        },
        "delete": {
          "httpMethod": "DELETE",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/users/{userKey}",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "description": "Delete user"
        },
        "get": {
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.get",
          "path": "admin/directory/v1/users/{userKey}",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          },
          "description": "retrieve user",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "parameters": {
            "projection": {
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "default": "basic",
              "location": "query",
              "description": "What subset of fields to fetch for this user."
            },
            "viewType": {
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "location": "query",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "default": "admin_view",
              "type": "string"
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query",
              "type": "string"
            },
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user",
              "location": "path",
              "required": true
            }
          }
        },
        "makeAdmin": {
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the user as admin",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "change admin status of a user",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.makeAdmin",
          "httpMethod": "POST"
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "id": "directory.users.aliases.delete",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "httpMethod": "DELETE",
              "description": "Remove a alias for the user",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "parameters": {
                "alias": {
                  "required": true,
                  "description": "The alias to be removed",
                  "location": "path",
                  "type": "string"
                },
                "userKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "parameterOrder": [
                "userKey",
                "alias"
              ]
            },
            "insert": {
              "parameterOrder": [
                "userKey"
              ],
              "httpMethod": "POST",
              "parameters": {
                "userKey": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Email or immutable ID of the user"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "description": "Add a alias for the user",
              "id": "directory.users.aliases.insert",
              "response": {
                "$ref": "Alias"
              },
              "request": {
                "$ref": "Alias"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases"
            },
            "watch": {
              "httpMethod": "POST",
              "parameterOrder": [
                "userKey"
              ],
              "description": "Watch for changes in users list",
              "parameters": {
                "event": {
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "location": "query",
                  "description": "Event on which subscription is intended (if subscribing)"
                },
                "userKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                }
              },
              "response": {
                "$ref": "Channel"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "request": {
                "$ref": "Channel"
              },
              "id": "directory.users.aliases.watch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases/watch"
            },
            "list": {
              "parameterOrder": [
                "userKey"
              ],
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "id": "directory.users.aliases.list",
              "httpMethod": "GET",
              "description": "List all aliases for a user",
              "response": {
                "$ref": "Aliases"
              }
            }
          }
        },
        "photos": {
          "methods": {
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "DELETE",
              "id": "directory.users.photos.delete",
              "description": "Remove photos for the user",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ],
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              }
            },
            "update": {
              "parameterOrder": [
                "userKey"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.update",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "request": {
                "$ref": "UserPhoto"
              },
              "httpMethod": "PUT",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Email or immutable ID of the user"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "description": "Add a photo for the user"
            },
            "get": {
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ],
              "response": {
                "$ref": "UserPhoto"
              },
              "id": "directory.users.photos.get",
              "description": "Retrieve photo of a user",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "GET",
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ]
            },
            "patch": {
              "httpMethod": "PATCH",
              "id": "directory.users.photos.patch",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "description": "Patch Photo via Apiary Patch Orchestration",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ],
              "request": {
                "$ref": "UserPhoto"
              }
            }
          }
        }
      }
    },
    "roles": {
      "methods": {
        "delete": {
          "id": "directory.roles.delete",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Deletes a role.",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "roleId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the role.",
              "type": "string"
            },
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "update": {
          "httpMethod": "PUT",
          "parameters": {
            "roleId": {
              "description": "Immutable ID of the role.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "id": "directory.roles.update",
          "description": "Updates a role.",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "response": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "request": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "id": "directory.roles.list",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "format": "int32",
              "location": "query",
              "maximum": "100",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "type": "integer"
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "httpMethod": "GET",
          "response": {
            "$ref": "Roles"
          }
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "httpMethod": "GET",
          "id": "directory.roles.get",
          "response": {
            "$ref": "Role"
          },
          "parameters": {
            "roleId": {
              "description": "Immutable ID of the role.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Retrieves a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "patch": {
          "httpMethod": "PATCH",
          "description": "Patch role via Apiary Patch Orchestration",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "request": {
            "$ref": "Role"
          },
          "parameters": {
            "roleId": {
              "description": "Immutable ID of the role.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "id": "directory.roles.patch",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "id": "directory.roles.insert",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "response": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "POST",
          "request": {
            "$ref": "Role"
          },
          "description": "Creates a role."
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "flatPath": "admin/directory_v1/channels/stop",
          "path": "admin/directory_v1/channels/stop",
          "id": "admin.channels.stop",
          "parameterOrder": [],
          "description": "Stop watching resources through this channel.",
          "parameters": {},
          "request": {
            "$ref": "Channel"
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "description": "Gets command data a specific command issued to the device.",
                      "httpMethod": "GET",
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "parameters": {
                        "deviceId": {
                          "location": "path",
                          "required": true,
                          "description": "Immutable. Immutable ID of Chrome OS Device.",
                          "type": "string"
                        },
                        "commandId": {
                          "required": true,
                          "location": "path",
                          "format": "int64",
                          "description": "Immutable. Immutable ID of Chrome OS Device Command.",
                          "type": "string"
                        },
                        "customerId": {
                          "type": "string",
                          "required": true,
                          "location": "path",
                          "description": "Immutable. Immutable ID of the G Suite account."
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "id": "admin.customer.devices.chromeos.commands.get",
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ]
                    }
                  }
                }
              },
              "methods": {
                "issueCommand": {
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "description": "Issues a command for the device to execute.",
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "parameters": {
                    "deviceId": {
                      "location": "path",
                      "required": true,
                      "description": "Immutable. Immutable ID of Chrome OS Device.",
                      "type": "string"
                    },
                    "customerId": {
                      "description": "Immutable. Immutable ID of the G Suite account.",
                      "required": true,
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ],
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "httpMethod": "POST"
                }
              }
            }
          }
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            },
            "maxResults": {
              "minimum": "1",
              "format": "int32",
              "default": "100",
              "type": "integer",
              "maximum": "100",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "location": "query"
            },
            "orderBy": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "description": "Column to use for sorting results",
              "type": "string",
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ]
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query",
              "type": "string",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            }
          },
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "parameterOrder": [
            "customerId"
          ],
          "response": {
            "$ref": "MobileDevices"
          },
          "id": "directory.mobiledevices.list",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "httpMethod": "GET"
        },
        "action": {
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "id": "directory.mobiledevices.action",
          "httpMethod": "POST",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "parameters": {
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "resourceId": {
              "required": true,
              "description": "Immutable ID of Mobile Device",
              "type": "string",
              "location": "path"
            }
          },
          "description": "Take action on Mobile Device"
        },
        "get": {
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "description": "Retrieve Mobile Device",
          "id": "directory.mobiledevices.get",
          "response": {
            "$ref": "MobileDevice"
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "resourceId": {
              "description": "Immutable ID of Mobile Device",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            }
          }
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "id": "directory.mobiledevices.delete",
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true
            },
            "resourceId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of Mobile Device",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "description": "Delete Mobile Device"
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.privileges.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "response": {
            "$ref": "Privileges"
          },
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges"
        }
      }
    },
    "domainAliases": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "domainAliasName": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Name of domain alias to be retrieved."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "response": {
            "$ref": "DomainAlias"
          },
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "id": "directory.domainAliases.get",
          "description": "Retrieves a domain alias of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ]
        },
        "delete": {
          "description": "Deletes a domain Alias of the customer.",
          "parameters": {
            "domainAliasName": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Name of domain alias to be retrieved."
            },
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "id": "directory.domainAliases.delete",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ]
        },
        "insert": {
          "description": "Inserts a domain alias of the customer.",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "response": {
            "$ref": "DomainAlias"
          },
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domainAliases.insert",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "request": {
            "$ref": "DomainAlias"
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases"
        },
        "list": {
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "description": "Lists the domain aliases of the customer.",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "DomainAliases"
          },
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            },
            "parentDomainName": {
              "location": "query",
              "description": "Name of the parent domain for which domain aliases are to be fetched.",
              "type": "string"
            }
          },
          "id": "directory.domainAliases.list",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "httpMethod": "GET"
        }
      }
    },
    "customers": {
      "methods": {
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "response": {
            "$ref": "Customer"
          },
          "parameters": {
            "customerKey": {
              "type": "string",
              "required": true,
              "description": "Id of the customer to be updated",
              "location": "path"
            }
          },
          "description": "Updates a customer.",
          "path": "admin/directory/v1/customers/{customerKey}",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.update",
          "httpMethod": "PUT",
          "request": {
            "$ref": "Customer"
          },
          "parameterOrder": [
            "customerKey"
          ]
        },
        "get": {
          "path": "admin/directory/v1/customers/{customerKey}",
          "parameters": {
            "customerKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Id of the customer to be retrieved"
            }
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "GET",
          "parameterOrder": [
            "customerKey"
          ],
          "response": {
            "$ref": "Customer"
          },
          "id": "directory.customers.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "description": "Retrieves a customer."
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "path": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Customer"
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "description": "Patch Customers via Apiary Patch Orchestration",
          "parameterOrder": [
            "customerKey"
          ],
          "id": "directory.customers.patch",
          "parameters": {
            "customerKey": {
              "required": true,
              "description": "Id of the customer to be updated",
              "type": "string",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Customer"
          }
        }
      }
    },
    "tokens": {
      "methods": {
        "list": {
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Tokens"
          },
          "id": "directory.tokens.list",
          "httpMethod": "GET",
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ]
        },
        "get": {
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "response": {
            "$ref": "Token"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "clientId": {
              "required": true,
              "description": "The Client ID of the application the token is issued to.",
              "type": "string",
              "location": "path"
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "id": "directory.tokens.get",
          "description": "Get information about an access token issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        },
        "delete": {
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "httpMethod": "DELETE",
          "parameters": {
            "clientId": {
              "required": true,
              "description": "The Client ID of the application the token is issued to.",
              "location": "path",
              "type": "string"
            },
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true
            }
          },
          "id": "directory.tokens.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Delete all access tokens issued by a user for an application.",
          "parameterOrder": [
            "userKey",
            "clientId"
          ]
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            }
          },
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "description": "Turn off 2-Step Verification for user.",
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.twoStepVerification.turnOff",
          "parameterOrder": [
            "userKey"
          ]
        }
      }
    },
    "orgunits": {
      "methods": {
        "delete": {
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "description": "Remove organizational unit",
          "id": "directory.orgunits.delete",
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "required": true,
              "type": "string",
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ]
        },
        "insert": {
          "parameterOrder": [
            "customerId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "id": "directory.orgunits.insert",
          "request": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "POST",
          "description": "Add organizational unit",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "response": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          }
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "parameters": {
            "orgUnitPath": {
              "pattern": "^.*$",
              "location": "path",
              "required": true,
              "description": "Full path of the organizational unit or its ID",
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "id": "directory.orgunits.get",
          "response": {
            "$ref": "OrgUnit"
          },
          "description": "Retrieve organizational unit"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "description": "Retrieve all organizational units",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameters": {
            "type": {
              "location": "query",
              "description": "Whether to return all sub-organizations or just immediate children",
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ],
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "type": "string"
            },
            "orgUnitPath": {
              "default": "",
              "type": "string",
              "location": "query",
              "description": "the URL-encoded organizational unit's path or its ID"
            },
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "OrgUnits"
          },
          "id": "directory.orgunits.list"
        },
        "update": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "response": {
            "$ref": "OrgUnit"
          },
          "description": "Update organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "required": true,
              "pattern": "^.*$",
              "location": "path"
            }
          },
          "request": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "id": "directory.orgunits.update"
        },
        "patch": {
          "httpMethod": "PATCH",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.orgunits.patch",
          "response": {
            "$ref": "OrgUnit"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            },
            "orgUnitPath": {
              "type": "string",
              "description": "Full path of the organizational unit or its ID",
              "location": "path",
              "required": true,
              "pattern": "^.*$"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "request": {
            "$ref": "OrgUnit"
          }
        }
      }
    },
    "members": {
      "methods": {
        "delete": {
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "memberKey": {
              "description": "Email or immutable ID of the member",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "description": "Remove membership.",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "id": "directory.members.delete"
        },
        "list": {
          "response": {
            "$ref": "Members"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.members.list",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "description": "Retrieve all members in a group (paginated)",
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "roles": {
              "type": "string",
              "location": "query",
              "description": "Comma separated role values to filter list results on."
            },
            "maxResults": {
              "type": "integer",
              "format": "int32",
              "default": "200",
              "minimum": "1",
              "location": "query",
              "description": "Maximum number of results to return. Max allowed value is 200."
            },
            "includeDerivedMembership": {
              "type": "boolean",
              "description": "Whether to list indirect memberships. Default: false.",
              "location": "query"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/members"
        },
        "get": {
          "description": "Retrieve Group Member",
          "httpMethod": "GET",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.members.get",
          "response": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "memberKey": {
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the member",
              "required": true
            },
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "required": true,
              "location": "path",
              "type": "string"
            }
          }
        },
        "update": {
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "response": {
            "$ref": "Member"
          },
          "id": "directory.members.update",
          "request": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "PUT",
          "description": "Update membership of a user in the specified group.",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "groupKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            },
            "memberKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ]
        },
        "hasMember": {
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "id": "directory.members.hasMember",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "memberKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID."
            }
          },
          "response": {
            "$ref": "MembersHasMember"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ]
        },
        "patch": {
          "description": "Patch Member via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "request": {
            "$ref": "Member"
          },
          "id": "directory.members.patch",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "type": "string",
              "required": true
            },
            "memberKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object"
            }
          },
          "response": {
            "$ref": "Member"
          }
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "id": "directory.members.insert",
          "description": "Add user to the specified group.",
          "request": {
            "$ref": "Member"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group"
            }
          },
          "httpMethod": "POST",
          "response": {
            "$ref": "Member"
          }
        }
      }
    },
    "groups": {
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "parameters": {
                "groupKey": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the group"
                },
                "alias": {
                  "required": true,
                  "description": "The alias to be removed",
                  "location": "path",
                  "type": "string"
                }
              },
              "httpMethod": "DELETE",
              "id": "directory.groups.aliases.delete",
              "description": "Remove a alias for the group"
            },
            "insert": {
              "description": "Add a alias for the group",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "response": {
                "$ref": "Alias"
              },
              "parameterOrder": [
                "groupKey"
              ],
              "request": {
                "$ref": "Alias"
              },
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "id": "directory.groups.aliases.insert",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              }
            },
            "list": {
              "description": "List all aliases for a group",
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameterOrder": [
                "groupKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "id": "directory.groups.aliases.list",
              "response": {
                "$ref": "Aliases"
              },
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases"
            }
          }
        }
      },
      "methods": {
        "list": {
          "httpMethod": "GET",
          "response": {
            "$ref": "Groups"
          },
          "path": "admin/directory/v1/groups",
          "flatPath": "admin/directory/v1/groups",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "parameters": {
            "domain": {
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.",
              "type": "string",
              "location": "query"
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used"
            },
            "customer": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain."
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "enum": [
                "orderByUndefined",
                "email"
              ]
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            },
            "userKey": {
              "type": "string",
              "location": "query",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object."
            },
            "maxResults": {
              "minimum": "1",
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "type": "integer",
              "location": "query",
              "default": "200"
            }
          },
          "id": "directory.groups.list"
        },
        "update": {
          "path": "admin/directory/v1/groups/{groupKey}",
          "description": "Update Group",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "httpMethod": "PUT",
          "response": {
            "$ref": "Group"
          },
          "request": {
            "$ref": "Group"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "id": "directory.groups.update",
          "parameters": {
            "groupKey": {
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true
            }
          }
        },
        "patch": {
          "path": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.patch",
          "parameterOrder": [
            "groupKey"
          ],
          "response": {
            "$ref": "Group"
          },
          "description": "Patch Groups via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "request": {
            "$ref": "Group"
          },
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ]
        },
        "get": {
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "httpMethod": "GET",
          "id": "directory.groups.get",
          "path": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "description": "Retrieve Group",
          "parameters": {
            "groupKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the group"
            }
          },
          "parameterOrder": [
            "groupKey"
          ]
        },
        "delete": {
          "httpMethod": "DELETE",
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "path": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.delete",
          "parameterOrder": [
            "groupKey"
          ],
          "description": "Delete Group",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ]
        },
        "insert": {
          "id": "directory.groups.insert",
          "response": {
            "$ref": "Group"
          },
          "request": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups",
          "parameterOrder": [],
          "parameters": {},
          "description": "Create Group",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "httpMethod": "POST",
          "path": "admin/directory/v1/groups"
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "id": "directory.verificationCodes.list",
          "response": {
            "$ref": "VerificationCodes"
          },
          "description": "Returns the current set of valid backup verification codes for the specified user."
        },
        "invalidate": {
          "description": "Invalidate the current backup verification codes for the user.",
          "id": "directory.verificationCodes.invalidate",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the user",
              "required": true
            }
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "generate": {
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.verificationCodes.generate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Generate new backup verification codes for the user.",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "httpMethod": "POST"
        }
      }
    },
    "schemas": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "id": "directory.schemas.list",
          "response": {
            "$ref": "Schemas"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "description": "Retrieve all schemas for a customer",
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas"
        },
        "update": {
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "request": {
            "$ref": "Schema"
          },
          "description": "Update schema",
          "parameters": {
            "schemaKey": {
              "required": true,
              "type": "string",
              "description": "Name or immutable ID of the schema.",
              "location": "path"
            },
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "id": "directory.schemas.update",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          }
        },
        "patch": {
          "id": "directory.schemas.patch",
          "description": "Patch Schema via Apiary Patch Orchestration",
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "schemaKey": {
              "location": "path",
              "description": "Name or immutable ID of the schema.",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "response": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "request": {
            "$ref": "Schema"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "PATCH"
        },
        "insert": {
          "description": "Create schema.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "response": {
            "$ref": "Schema"
          },
          "request": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            }
          },
          "id": "directory.schemas.insert",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "httpMethod": "POST"
        },
        "delete": {
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "parameters": {
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            },
            "schemaKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Name or immutable ID of the schema"
            }
          },
          "id": "directory.schemas.delete",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Delete schema"
        },
        "get": {
          "parameters": {
            "schemaKey": {
              "type": "string",
              "description": "Name or immutable ID of the schema",
              "required": true,
              "location": "path"
            },
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.get",
          "response": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "GET",
          "description": "Retrieve schema",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ]
        }
      }
    },
    "resources": {
      "resources": {
        "calendars": {
          "methods": {
            "insert": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "CalendarResource"
              },
              "httpMethod": "POST",
              "response": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.calendars.insert",
              "description": "Inserts a calendar resource.",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars"
            },
            "patch": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the calendar resource to update.",
                  "type": "string"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "id": "directory.resources.calendars.patch",
              "response": {
                "$ref": "CalendarResource"
              },
              "httpMethod": "PATCH",
              "request": {
                "$ref": "CalendarResource"
              }
            },
            "get": {
              "id": "directory.resources.calendars.get",
              "response": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameters": {
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "description": "Retrieves a calendar resource.",
              "httpMethod": "GET"
            },
            "delete": {
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Deletes a calendar resource.",
              "id": "directory.resources.calendars.delete",
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the calendar resource to delete.",
                  "location": "path"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "httpMethod": "DELETE"
            },
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "id": "directory.resources.calendars.update",
              "request": {
                "$ref": "CalendarResource"
              },
              "response": {
                "$ref": "CalendarResource"
              },
              "httpMethod": "PUT",
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "calendarResourceId": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the calendar resource to update.",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
            },
            "list": {
              "parameterOrder": [
                "customer"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "query": {
                  "type": "string",
                  "location": "query",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone."
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "location": "query",
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "maxResults": {
                  "location": "query",
                  "type": "integer",
                  "minimum": "1",
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "format": "int32"
                },
                "orderBy": {
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order.",
                  "type": "string",
                  "location": "query"
                }
              },
              "response": {
                "$ref": "CalendarResources"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "id": "directory.resources.calendars.list",
              "httpMethod": "GET",
              "description": "Retrieves a list of calendar resources for an account."
            }
          }
        },
        "buildings": {
          "methods": {
            "update": {
              "id": "directory.resources.buildings.update",
              "response": {
                "$ref": "Building"
              },
              "description": "Updates a building.",
              "httpMethod": "PUT",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "location": "query",
                  "default": "SOURCE_UNSPECIFIED",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "type": "string"
                },
                "buildingId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The id of the building to update."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "request": {
                "$ref": "Building"
              }
            },
            "patch": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.patch",
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "description": "The id of the building to update.",
                  "location": "path",
                  "required": true
                },
                "coordinatesSource": {
                  "type": "string",
                  "default": "SOURCE_UNSPECIFIED",
                  "description": "Source from which Building.coordinates are derived.",
                  "location": "query",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ]
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Patches a building via Apiary Patch Orchestration.",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "Building"
              }
            },
            "list": {
              "id": "directory.resources.buildings.list",
              "httpMethod": "GET",
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "maxResults": {
                  "description": "Maximum number of results to return.",
                  "type": "integer",
                  "maximum": "500",
                  "minimum": "1",
                  "location": "query",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "type": "string",
                  "location": "query"
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "response": {
                "$ref": "Buildings"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "description": "Retrieves a list of buildings for an account.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings"
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.buildings.delete",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "DELETE",
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                },
                "buildingId": {
                  "description": "The id of the building to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "description": "Deletes a building.",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "insert": {
              "description": "Inserts a building.",
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "request": {
                "$ref": "Building"
              },
              "response": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "httpMethod": "POST",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "location": "query",
                  "type": "string",
                  "default": "SOURCE_UNSPECIFIED",
                  "description": "Source from which Building.coordinates are derived.",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ]
                }
              },
              "id": "directory.resources.buildings.insert"
            },
            "get": {
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Retrieves a building.",
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "buildingId": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the building to retrieve.",
                  "type": "string"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.buildings.get"
            }
          }
        },
        "features": {
          "methods": {
            "insert": {
              "description": "Inserts a feature.",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "Feature"
              },
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                }
              },
              "id": "directory.resources.features.insert",
              "response": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "parameterOrder": [
                "customer"
              ]
            },
            "update": {
              "httpMethod": "PUT",
              "request": {
                "$ref": "Feature"
              },
              "description": "Updates a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.features.update",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "response": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the feature to update.",
                  "location": "path"
                }
              }
            },
            "patch": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                },
                "featureKey": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the feature to update.",
                  "required": true
                }
              },
              "request": {
                "$ref": "Feature"
              },
              "httpMethod": "PATCH",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "response": {
                "$ref": "Feature"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.patch",
              "description": "Patches a feature via Apiary Patch Orchestration."
            },
            "get": {
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "featureKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the feature to retrieve."
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.features.get",
              "description": "Retrieves a feature.",
              "response": {
                "$ref": "Feature"
              },
              "httpMethod": "GET"
            },
            "list": {
              "parameters": {
                "maxResults": {
                  "type": "integer",
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "minimum": "1",
                  "location": "query",
                  "format": "int32"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Token to specify the next page in the list."
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                }
              },
              "description": "Retrieves a list of features for an account.",
              "id": "directory.resources.features.list",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "response": {
                "$ref": "Features"
              },
              "parameterOrder": [
                "customer"
              ],
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features"
            },
            "delete": {
              "description": "Deletes a feature.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.features.delete",
              "httpMethod": "DELETE",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "featureKey": {
                  "required": true,
                  "description": "The unique ID of the feature to delete.",
                  "location": "path",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ]
            },
            "rename": {
              "parameters": {
                "oldName": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the feature to rename."
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "id": "directory.resources.features.rename",
              "description": "Renames a feature.",
              "request": {
                "$ref": "FeatureRename"
              }
            }
          }
        }
      }
    },
    "asps": {
      "methods": {
        "get": {
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "description": "Get information about an ASP issued by a user.",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameters": {
            "codeId": {
              "format": "int32",
              "description": "The unique ID of the ASP.",
              "location": "path",
              "required": true,
              "type": "integer"
            },
            "userKey": {
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Asp"
          },
          "httpMethod": "GET",
          "id": "directory.asps.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "delete": {
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "description": "Delete an ASP issued by a user.",
          "parameters": {
            "codeId": {
              "description": "The unique ID of the ASP to be deleted.",
              "format": "int32",
              "type": "integer",
              "required": true,
              "location": "path"
            },
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "id": "directory.asps.delete",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "httpMethod": "DELETE"
        },
        "list": {
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "response": {
            "$ref": "Asps"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.asps.list",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "description": "List the ASPs issued by a user.",
          "httpMethod": "GET",
          "path": "admin/directory/v1/users/{userKey}/asps"
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "insert": {
          "request": {
            "$ref": "RoleAssignment"
          },
          "description": "Creates a role assignment.",
          "httpMethod": "POST",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "RoleAssignment"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.roleAssignments.insert",
          "path": "admin/directory/v1/customer/{customer}/roleassignments"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "id": "directory.roleAssignments.list",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "description": "Retrieves a paginated list of all roleAssignments.",
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            },
            "userKey": {
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "type": "integer",
              "maximum": "200",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "minimum": "1",
              "location": "query"
            },
            "roleId": {
              "type": "string",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify the next page in the list.",
              "location": "query"
            }
          },
          "response": {
            "$ref": "RoleAssignments"
          },
          "parameterOrder": [
            "customer"
          ]
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "httpMethod": "DELETE",
          "id": "directory.roleAssignments.delete",
          "parameters": {
            "roleAssignmentId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the role assignment.",
              "required": true
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "description": "Deletes a role assignment."
        },
        "get": {
          "id": "directory.roleAssignments.get",
          "parameters": {
            "roleAssignmentId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role assignment."
            },
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "description": "Retrieve a role assignment.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "RoleAssignment"
          }
        }
      }
    }
  },
  "basePath": "",
  "packagePath": "admin"
}
