{
  "packagePath": "admin",
  "ownerDomain": "google.com",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "baseUrl": "https://www.googleapis.com/",
  "kind": "discovery#restDescription",
  "canonicalName": "directory",
  "parameters": {
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "alt": {
      "type": "string",
      "location": "query",
      "description": "Data format for response.",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "location": "query",
      "default": "true"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    }
  },
  "schemas": {
    "VerificationCodes": {
      "id": "VerificationCodes",
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#verificationCodesList",
          "description": "The type of the resource. This is always admin#directory#verificationCodesList."
        },
        "items": {
          "description": "A list of verification code resources.",
          "items": {
            "$ref": "VerificationCode"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object"
    },
    "UserIm": {
      "id": "UserIm",
      "properties": {
        "primary": {
          "description": "If this is user's primary im. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "customProtocol": {
          "type": "string",
          "description": "Custom protocol."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.",
          "type": "string"
        },
        "im": {
          "type": "string",
          "description": "Instant messenger id."
        }
      },
      "type": "object",
      "description": "JSON template for instant messenger of an user."
    },
    "ChromeOsDevice": {
      "id": "ChromeOsDevice",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "orderNumber": {
          "description": "Chromebook order number (Read-only)",
          "type": "string"
        },
        "lastEnrollmentTime": {
          "type": "string",
          "description": "Date and time the device was last enrolled (Read-only)",
          "format": "date-time"
        },
        "macAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on wifi network interface (Read-only)"
        },
        "autoUpdateExpiration": {
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "type": "string",
          "format": "int64"
        },
        "manufactureDate": {
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
          "type": "string"
        },
        "cpuStatusReports": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "cpuUtilizationPercentageInfo": {
                "type": "array",
                "items": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "cpuTemperatureInfo": {
                "items": {
                  "properties": {
                    "temperature": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Temperature in Celsius degrees."
                    },
                    "label": {
                      "type": "string",
                      "description": "CPU label"
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "description": "List of CPU temperature samples."
              },
              "reportTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time the report was received."
              }
            }
          },
          "description": "Reports of CPU utilization and temperature (Read-only)"
        },
        "activeTimeRanges": {
          "description": "List of active time ranges (Read-only)",
          "type": "array",
          "items": {
            "properties": {
              "date": {
                "description": "Date of usage",
                "format": "date",
                "type": "string"
              },
              "activeTime": {
                "format": "int32",
                "description": "Duration in milliseconds",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "deviceId": {
          "description": "Unique identifier of Chrome OS Device (Read-only)",
          "type": "string"
        },
        "osVersion": {
          "type": "string",
          "description": "Chromebook Os Version (Read-only)"
        },
        "serialNumber": {
          "type": "string",
          "description": "Chromebook serial number (Read-only)"
        },
        "deviceFiles": {
          "description": "List of device files to download (Read-only)",
          "type": "array",
          "items": {
            "properties": {
              "type": {
                "type": "string",
                "description": "File type"
              },
              "createTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time the file was created"
              },
              "name": {
                "type": "string",
                "description": "File name"
              },
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              }
            },
            "type": "object"
          }
        },
        "willAutoRenew": {
          "description": "Will Chromebook auto renew after support end date (Read-only)",
          "type": "boolean"
        },
        "systemRamTotal": {
          "type": "string",
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "format": "int64"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#chromeosdevice",
          "description": "Kind of resource this is."
        },
        "firmwareVersion": {
          "description": "Chromebook firmware version (Read-only)",
          "type": "string"
        },
        "ethernetMacAddress": {
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)",
          "type": "string"
        },
        "recentUsers": {
          "items": {
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of the user"
              },
              "email": {
                "description": "Email address of the user. Present only if the user type is managed",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "List of recent device users, in descending order by last login time (Read-only)"
        },
        "lastKnownNetwork": {
          "description": "Contains last known network (Read-only)",
          "items": {
            "description": "Information for an ip address.",
            "properties": {
              "ipAddress": {
                "description": "The IP address.",
                "type": "string"
              },
              "wanIpAddress": {
                "description": "The WAN IP address.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "notes": {
          "type": "string",
          "description": "Notes added by the administrator"
        },
        "tpmVersionInfo": {
          "properties": {
            "family": {
              "description": "TPM family.",
              "type": "string"
            },
            "tpmModel": {
              "description": "TPM model number.",
              "type": "string"
            },
            "specLevel": {
              "description": "TPM specification level.",
              "type": "string"
            },
            "firmwareVersion": {
              "description": "TPM firmware version.",
              "type": "string"
            },
            "vendorSpecific": {
              "description": "Vendor-specific information such as Vendor ID.",
              "type": "string"
            },
            "manufacturer": {
              "description": "TPM manufacturer code.",
              "type": "string"
            }
          },
          "type": "object",
          "description": "Trusted Platform Module (TPM) (Read-only)"
        },
        "annotatedLocation": {
          "type": "string",
          "description": "Address or location of the device as noted by the administrator"
        },
        "model": {
          "description": "Chromebook Model (Read-only)",
          "type": "string"
        },
        "supportEndDate": {
          "format": "date-time",
          "type": "string",
          "description": "Final date the device will be supported (Read-only)"
        },
        "status": {
          "type": "string",
          "description": "status of the device (Read-only)"
        },
        "ethernetMacAddress0": {
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "annotatedUser": {
          "type": "string",
          "description": "User of the device"
        },
        "systemRamFreeReports": {
          "items": {
            "type": "object",
            "properties": {
              "reportTime": {
                "format": "date-time",
                "description": "Date and time the report was received.",
                "type": "string"
              },
              "systemRamFreeInfo": {
                "items": {
                  "type": "string",
                  "format": "int64"
                },
                "type": "array"
              }
            }
          },
          "type": "array",
          "description": "Reports of amounts of available RAM memory (Read-only)"
        },
        "dockMacAddress": {
          "type": "string",
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "lastSync": {
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        },
        "bootMode": {
          "type": "string",
          "description": "Chromebook boot mode (Read-only)"
        },
        "platformVersion": {
          "type": "string",
          "description": "Chromebook platform version (Read-only)"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "annotatedAssetId": {
          "description": "AssetId specified during enrollment or through later annotation",
          "type": "string"
        },
        "meid": {
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)",
          "type": "string"
        },
        "orgUnitPath": {
          "description": "OrgUnit of the device",
          "type": "string"
        },
        "diskVolumeReports": {
          "description": "Reports of disk space and other info about mounted/connected volumes.",
          "items": {
            "properties": {
              "volumeInfo": {
                "description": "Disk volumes",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "storageFree": {
                      "type": "string",
                      "format": "int64",
                      "description": "Free disk space [in bytes]"
                    },
                    "storageTotal": {
                      "description": "Total disk space [in bytes]",
                      "type": "string",
                      "format": "int64"
                    },
                    "volumeId": {
                      "description": "Volume id",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "MobileDeviceAction": {
      "properties": {
        "action": {
          "description": "Action to be taken on the Mobile Device",
          "type": "string",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          }
        }
      },
      "type": "object",
      "id": "MobileDeviceAction"
    },
    "RoleAssignments": {
      "id": "RoleAssignments",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments .",
          "default": "admin#directory#roleAssignments"
        },
        "items": {
          "description": "A list of RoleAssignment resources.",
          "items": {
            "$ref": "RoleAssignment"
          },
          "type": "array"
        }
      }
    },
    "Channel": {
      "id": "Channel",
      "properties": {
        "resourceUri": {
          "description": "A version-specific identifier for the watched resource.",
          "type": "string"
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "type": "object"
        },
        "expiration": {
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "type": "string",
          "format": "int64"
        },
        "id": {
          "description": "A UUID or similar unique string that identifies this channel.",
          "type": "string"
        },
        "type": {
          "description": "The type of delivery mechanism used for this channel.",
          "type": "string"
        },
        "kind": {
          "default": "api#channel",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "type": "string"
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        },
        "token": {
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.",
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions."
        },
        "payload": {
          "description": "A Boolean value to indicate whether payload is wanted. Optional.",
          "type": "boolean"
        }
      },
      "type": "object",
      "description": "An notification channel used to watch for resource changes."
    },
    "Customer": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Customer",
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "description": "The customer's ISO 639-2 language code. The default value is en-US"
        },
        "customerDomain": {
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "The customer's contact phone number in E.164 format.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "id": {
          "type": "string",
          "description": "The unique ID for the customer's G Suite account. (Readonly)"
        },
        "postalAddress": {
          "description": "The customer's postal address information.",
          "$ref": "CustomerPostalAddress"
        },
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain"
        },
        "kind": {
          "default": "admin#directory#customer",
          "type": "string",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer"
        },
        "customerCreationTime": {
          "description": "The customer's creation time (Readonly)",
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "Schemas": {
      "type": "object",
      "id": "Schemas",
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "schemas": {
          "description": "List of UserSchema objects.",
          "type": "array",
          "items": {
            "$ref": "Schema"
          }
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#schemas",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "Group": {
      "properties": {
        "aliases": {
          "description": "List of aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#group",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "adminCreated": {
          "description": "Is the group created by admin (Read-only) *",
          "type": "boolean"
        },
        "email": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "description": "Email of Group"
        },
        "nonEditableAliases": {
          "items": {
            "type": "string"
          },
          "description": "List of non editable aliases (Read-only)",
          "type": "array"
        },
        "description": {
          "type": "string",
          "description": "Description of the group"
        },
        "id": {
          "description": "Unique identifier of Group (Read-only)",
          "type": "string"
        },
        "directMembersCount": {
          "type": "string",
          "format": "int64",
          "description": "Group direct members count"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        }
      },
      "id": "Group",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "ChromeOsDeviceAction": {
      "properties": {
        "deprovisionReason": {
          "type": "string"
        },
        "action": {
          "description": "Action to be taken on the ChromeOs Device",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "type": "string"
        }
      },
      "type": "object",
      "id": "ChromeOsDeviceAction"
    },
    "UserPosixAccount": {
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix.",
      "properties": {
        "systemId": {
          "type": "string",
          "description": "System identifier for which account Username or Uid apply to."
        },
        "gid": {
          "format": "uint64",
          "type": "string",
          "description": "The default group ID."
        },
        "accountId": {
          "description": "A POSIX account field identifier.",
          "type": "string"
        },
        "operatingSystemType": {
          "description": "The operating system type for this account.",
          "type": "string"
        },
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        },
        "homeDirectory": {
          "type": "string",
          "description": "The path to the home directory for this account."
        },
        "username": {
          "description": "The username of the account.",
          "type": "string"
        },
        "gecos": {
          "type": "string",
          "description": "The GECOS (user information) for this account."
        },
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        },
        "uid": {
          "description": "The POSIX compliant user ID.",
          "type": "string",
          "format": "uint64"
        }
      },
      "id": "UserPosixAccount",
      "type": "object"
    },
    "UserRelation": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner."
        },
        "value": {
          "type": "string",
          "description": "The name of the relation."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "description": "JSON template for a relation entry.",
      "id": "UserRelation"
    },
    "MembersHasMember": {
      "id": "MembersHasMember",
      "properties": {
        "isMember": {
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "type": "object",
      "description": "JSON template for Has Member response in Directory API."
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "description": "A response for issuing a command.",
      "properties": {
        "commandId": {
          "type": "string",
          "format": "int64",
          "description": "The unique ID of the issued command, used to retrieve the command status."
        }
      },
      "type": "object",
      "id": "DirectoryChromeosdevicesIssueCommandResponse"
    },
    "RoleAssignment": {
      "id": "RoleAssignment",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#roleAssignment",
          "description": "The type of the API resource. This is always admin#directory#roleAssignment."
        },
        "roleAssignmentId": {
          "format": "int64",
          "description": "ID of this roleAssignment.",
          "type": "string"
        },
        "assignedTo": {
          "description": "The unique ID of the user this role is assigned to.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "orgUnitId": {
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.",
          "type": "string"
        },
        "roleId": {
          "description": "The ID of the role that is assigned.",
          "format": "int64",
          "type": "string"
        },
        "scopeType": {
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT ",
          "type": "string"
        }
      }
    },
    "DomainAlias": {
      "id": "DomainAlias",
      "properties": {
        "domainAliasName": {
          "description": "The domain alias name.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAlias"
        },
        "verified": {
          "description": "Indicates the verification state of a domain alias. (Read-only)",
          "type": "boolean"
        },
        "parentDomainName": {
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        },
        "creationTime": {
          "format": "int64",
          "type": "string",
          "description": "The creation time of the domain alias. (Read-only)."
        }
      },
      "type": "object"
    },
    "UserEmail": {
      "id": "UserEmail",
      "description": "JSON template for an email.",
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "Email id of the user."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value."
        },
        "primary": {
          "description": "If this is user's primary email. Only one entry could be marked as primary.",
          "type": "boolean"
        }
      }
    },
    "VerificationCode": {
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCode.",
          "default": "admin#directory#verificationCode",
          "type": "string"
        },
        "userId": {
          "type": "string",
          "description": "The obfuscated unique ID of the user."
        },
        "verificationCode": {
          "type": "string",
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result."
        }
      },
      "id": "VerificationCode"
    },
    "UserPhoto": {
      "id": "UserPhoto",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "photoData": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "description": "Base64 encoded photo data",
          "format": "byte"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#user#photo",
          "description": "Kind of resource this is."
        },
        "height": {
          "description": "Height in pixels of the photo",
          "type": "integer",
          "format": "int32"
        },
        "primaryEmail": {
          "type": "string",
          "description": "Primary email of User (Read-only)"
        },
        "mimeType": {
          "description": "Mime Type of the photo",
          "type": "string"
        },
        "width": {
          "format": "int32",
          "type": "integer",
          "description": "Width in pixels of the photo"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "Aliases": {
      "properties": {
        "etag": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#aliases",
          "type": "string"
        },
        "aliases": {
          "items": {
            "type": "any"
          },
          "type": "array"
        }
      },
      "id": "Aliases",
      "type": "object",
      "description": "JSON response template to list aliases in Directory API."
    },
    "Members": {
      "type": "object",
      "id": "Members",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#members",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "Member"
          },
          "description": "List of member objects."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        }
      }
    },
    "UserCustomProperties": {
      "additionalProperties": {
        "type": "any"
      },
      "type": "object",
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "id": "UserCustomProperties"
    },
    "UserKeyword": {
      "id": "UserKeyword",
      "description": "JSON template for a keyword entry.",
      "type": "object",
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Keyword."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      }
    },
    "Privilege": {
      "id": "Privilege",
      "properties": {
        "childPrivileges": {
          "type": "array",
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "items": {
            "$ref": "Privilege"
          }
        },
        "serviceId": {
          "type": "string",
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
        },
        "serviceName": {
          "description": "The name of the service this privilege is for.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#privilege",
          "description": "The type of the API resource. This is always admin#directory#privilege.",
          "type": "string"
        },
        "privilegeName": {
          "type": "string",
          "description": "The name of the privilege."
        },
        "isOuScopable": {
          "description": "If the privilege can be restricted to an organization unit.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UserPhone": {
      "type": "object",
      "id": "UserPhone",
      "description": "JSON template for a phone entry.",
      "properties": {
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary phone or not.",
          "type": "boolean"
        },
        "value": {
          "description": "Phone number.",
          "type": "string"
        }
      }
    },
    "Buildings": {
      "properties": {
        "buildings": {
          "type": "array",
          "items": {
            "$ref": "Building"
          },
          "description": "The Buildings in this page of results."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#buildings#buildingsList",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "Public API: Resources.buildings",
      "id": "Buildings",
      "type": "object"
    },
    "UserLocation": {
      "properties": {
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.",
          "type": "string"
        },
        "deskCode": {
          "description": "Most specific textual code of individual desk location.",
          "type": "string"
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        },
        "floorName": {
          "description": "Floor name/number.",
          "type": "string"
        },
        "buildingId": {
          "description": "Building Identifier.",
          "type": "string"
        },
        "floorSection": {
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      },
      "description": "JSON template for a location entry.",
      "type": "object",
      "id": "UserLocation"
    },
    "Users": {
      "id": "Users",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "users": {
          "items": {
            "$ref": "User"
          },
          "type": "array",
          "description": "List of user objects."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#users",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "trigger_event": {
          "type": "string",
          "description": "Event that triggered this response (only used in case of Push Response)"
        }
      },
      "type": "object"
    },
    "Features": {
      "properties": {
        "features": {
          "description": "The Features in this page of results.",
          "type": "array",
          "items": {
            "$ref": "Feature"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#featuresList"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        }
      },
      "id": "Features",
      "type": "object",
      "description": "Public API: Resources.features"
    },
    "UserOrganization": {
      "description": "JSON template for an organization entry.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
        },
        "domain": {
          "description": "The domain to which the organization belongs to.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        },
        "costCenter": {
          "type": "string",
          "description": "The cost center of the users department."
        },
        "symbol": {
          "description": "Symbol of the organization.",
          "type": "string"
        },
        "description": {
          "description": "Description of the organization.",
          "type": "string"
        },
        "fullTimeEquivalent": {
          "type": "integer",
          "format": "int32",
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%)."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "primary": {
          "type": "boolean",
          "description": "If it user's primary organization."
        },
        "name": {
          "type": "string",
          "description": "Name of the organization"
        },
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserOrganization"
    },
    "CalendarResource": {
      "description": "Public API: Resources.calendars",
      "type": "object",
      "properties": {
        "resourceCategory": {
          "type": "string",
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN."
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "default": "admin#directory#resources#calendars#CalendarResource",
          "type": "string"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "Capacity of a resource, number of seats in a room."
        },
        "resourceEmail": {
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource.",
          "type": "string"
        },
        "floorName": {
          "type": "string",
          "description": "Name of the floor a resource is located on."
        },
        "floorSection": {
          "description": "Name of the section within a floor a resource is located in.",
          "type": "string"
        },
        "resourceId": {
          "description": "The unique ID for the calendar resource.",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string"
        },
        "generatedResourceName": {
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\".",
          "type": "string"
        },
        "buildingId": {
          "type": "string",
          "description": "Unique ID for the building a resource is located in."
        },
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        },
        "resourceName": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "type": "string"
        },
        "resourceType": {
          "type": "string",
          "description": "The type of the calendar resource, intended for non-room resources."
        },
        "featureInstances": {
          "type": "any",
          "description": "Instances of features for the calendar resource."
        }
      },
      "id": "CalendarResource"
    },
    "MobileDevices": {
      "properties": {
        "mobiledevices": {
          "items": {
            "$ref": "MobileDevice"
          },
          "description": "List of Mobile Device objects.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#mobiledevices",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "MobileDevices",
      "type": "object"
    },
    "Role": {
      "properties": {
        "rolePrivileges": {
          "description": "The set of privileges that are granted to this role.",
          "items": {
            "type": "object",
            "properties": {
              "privilegeName": {
                "type": "string",
                "description": "The name of the privilege."
              },
              "serviceId": {
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
                "type": "string"
              }
            }
          },
          "type": "array",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          }
        },
        "isSuperAdminRole": {
          "description": "Returns true if the role is a super admin role.",
          "type": "boolean"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "roleId": {
          "type": "string",
          "format": "int64",
          "description": "ID of the role."
        },
        "roleName": {
          "type": "string",
          "description": "Name of the role.",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          }
        },
        "isSystemRole": {
          "type": "boolean",
          "description": "Returns true if this is a pre-defined system role."
        },
        "kind": {
          "default": "admin#directory#role",
          "description": "The type of the API resource. This is always admin#directory#role.",
          "type": "string"
        },
        "roleDescription": {
          "description": "A short description of the role.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Role"
    },
    "Domains2": {
      "id": "Domains2",
      "type": "object",
      "properties": {
        "domains": {
          "description": "List of domain objects.",
          "type": "array",
          "items": {
            "$ref": "Domains"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#domains",
          "type": "string",
          "description": "Kind of resource this is."
        }
      }
    },
    "UserAddress": {
      "id": "UserAddress",
      "type": "object",
      "properties": {
        "extendedAddress": {
          "type": "string",
          "description": "Extended Address."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "region": {
          "description": "Region.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary address. Only one entry could be marked as primary."
        },
        "postalCode": {
          "description": "Postal code.",
          "type": "string"
        },
        "countryCode": {
          "type": "string",
          "description": "Country code."
        },
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "formatted": {
          "type": "string",
          "description": "Formatted address."
        },
        "locality": {
          "type": "string",
          "description": "Locality."
        },
        "poBox": {
          "type": "string",
          "description": "Other parts of address."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "streetAddress": {
          "type": "string",
          "description": "Street."
        }
      },
      "description": "JSON template for address."
    },
    "Building": {
      "description": "Public API: Resources.buildings",
      "type": "object",
      "id": "Building",
      "properties": {
        "buildingName": {
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters.",
          "type": "string"
        },
        "coordinates": {
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees.",
          "$ref": "BuildingCoordinates"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "address": {
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required.",
          "$ref": "BuildingAddress"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#buildings#Building",
          "description": "Kind of resource this is."
        },
        "description": {
          "description": "A brief description of the building. For example, \"Chelsea Market\".",
          "type": "string"
        },
        "buildingId": {
          "description": "Unique identifier for the building. The maximum length is 100 characters.",
          "type": "string"
        },
        "floorNames": {
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Schema": {
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "Display name for the schema.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#schema"
        },
        "schemaName": {
          "type": "string",
          "description": "Schema name",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "schemaId": {
          "description": "Unique identifier of Schema (Read-only)",
          "type": "string"
        },
        "fields": {
          "description": "Fields of Schema",
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "type": "array",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        }
      },
      "id": "Schema",
      "type": "object"
    },
    "BuildingAddress": {
      "description": "Public API: Resources.buildings",
      "type": "object",
      "id": "BuildingAddress",
      "properties": {
        "administrativeArea": {
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region.",
          "type": "string"
        },
        "addressLines": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Unstructured address lines describing the lower levels of an address."
        },
        "languageCode": {
          "description": "Optional. BCP-47 language code of the contents of this address (if known).",
          "type": "string"
        },
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        },
        "sublocality": {
          "type": "string",
          "description": "Optional. Sublocality of the address."
        },
        "postalCode": {
          "description": "Optional. Postal code of the address.",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines."
        }
      }
    },
    "SchemaFieldSpec": {
      "id": "SchemaFieldSpec",
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "fieldName": {
          "description": "Name of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        },
        "readAccessType": {
          "type": "string",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\".",
          "default": "ALL_DOMAIN_USERS"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema#fieldspec"
        },
        "fieldId": {
          "type": "string",
          "description": "Unique identifier of Field (Read-only)"
        },
        "fieldType": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Type of the field."
        },
        "numericIndexingSpec": {
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "type": "object",
          "properties": {
            "maxValue": {
              "format": "double",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "type": "number"
            },
            "minValue": {
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double",
              "type": "number"
            }
          }
        },
        "multiValued": {
          "description": "Boolean specifying whether this is a multi-valued field or not.",
          "type": "boolean"
        },
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string",
          "description": "Display Name of the field."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "indexed": {
          "type": "boolean",
          "default": "true",
          "description": "Boolean specifying whether the field is indexed or not."
        }
      },
      "type": "object"
    },
    "User": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "id": "User",
      "properties": {
        "isAdmin": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is admin (Read-only)"
        },
        "recoveryEmail": {
          "description": "Recovery email of the user.",
          "type": "string"
        },
        "addresses": {
          "description": "Addresses of User",
          "type": "any"
        },
        "changePasswordAtNextLogin": {
          "description": "Boolean indicating if the user should change password in next login",
          "type": "boolean"
        },
        "primaryEmail": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "username of User"
        },
        "suspended": {
          "description": "Indicates if user is suspended.",
          "type": "boolean"
        },
        "includeInGlobalAddressList": {
          "description": "Boolean indicating if user is included in Global Address List",
          "type": "boolean"
        },
        "languages": {
          "description": "Languages of User",
          "type": "any"
        },
        "etag": {
          "description": "Output only. ETag of the resource.",
          "type": "string",
          "readOnly": true
        },
        "relations": {
          "type": "any",
          "description": "The Relations of User *"
        },
        "externalIds": {
          "type": "any",
          "description": "The external Ids of User *"
        },
        "isEnrolledIn2Sv": {
          "type": "boolean",
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "readOnly": true
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. List of aliases (Read-only)",
          "readOnly": true
        },
        "archived": {
          "description": "Indicates if user is archived.",
          "type": "boolean"
        },
        "phones": {
          "description": "Phone numbers of User",
          "type": "any"
        },
        "locations": {
          "type": "any",
          "description": "Locations of User"
        },
        "customerId": {
          "readOnly": true,
          "description": "Output only. CustomerId of User (Read-only)",
          "type": "string"
        },
        "thumbnailPhotoEtag": {
          "description": "Output only. ETag of the user's photo (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        },
        "posixAccounts": {
          "type": "any",
          "description": "The POSIX accounts of User"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "isMailboxSetup": {
          "description": "Output only. Is mailbox setup (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "keywords": {
          "description": "Keywords of User",
          "type": "any"
        },
        "nonEditableAliases": {
          "items": {
            "type": "string"
          },
          "description": "Output only. List of non editable aliases (Read-only)",
          "readOnly": true,
          "type": "array"
        },
        "customSchemas": {
          "description": "Custom fields of the user.",
          "type": "object",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          }
        },
        "recoveryPhone": {
          "type": "string",
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*."
        },
        "kind": {
          "readOnly": true,
          "default": "admin#directory#user",
          "description": "Output only. Kind of resource this is.",
          "type": "string"
        },
        "isEnforcedIn2Sv": {
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "password": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's password",
          "type": "string"
        },
        "creationTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "User's G Suite account creation time. (Read-only)"
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "Boolean indicating if ip is whitelisted"
        },
        "deletionTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        },
        "hashFunction": {
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt",
          "type": "string"
        },
        "gender": {
          "description": "Gender of User",
          "type": "any"
        },
        "isDelegatedAdmin": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)"
        },
        "notes": {
          "type": "any",
          "description": "Notes of User"
        },
        "lastLoginTime": {
          "readOnly": true,
          "format": "date-time",
          "type": "string",
          "description": "User's last login time. (Read-only)"
        },
        "sshPublicKeys": {
          "type": "any",
          "description": "The SSH public keys of User"
        },
        "websites": {
          "description": "Websites of User",
          "type": "any"
        },
        "organizations": {
          "description": "Organizations of User",
          "type": "any"
        },
        "name": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "$ref": "UserName",
          "description": "User's name"
        },
        "agreedToTerms": {
          "description": "Output only. Indicates if user has agreed to terms (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "thumbnailPhotoUrl": {
          "type": "string",
          "description": "Output only. Photo Url of the user (Read-only)",
          "readOnly": true
        },
        "ims": {
          "description": "User's Instant Messenger",
          "type": "any"
        },
        "emails": {
          "description": "Emails of User",
          "type": "any"
        },
        "suspensionReason": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Suspension reason if user is suspended (Read-only)"
        }
      },
      "type": "object"
    },
    "DirectoryChromeosdevicesCommand": {
      "description": "Information regarding a command that was issued to a device.",
      "id": "DirectoryChromeosdevicesCommand",
      "type": "object",
      "properties": {
        "commandId": {
          "format": "int64",
          "description": "Unique ID of a device command.",
          "type": "string"
        },
        "commandResult": {
          "$ref": "DirectoryChromeosdevicesCommandResult",
          "description": "The result of the command execution."
        },
        "commandExpireTime": {
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.",
          "format": "google-datetime",
          "type": "string"
        },
        "state": {
          "description": "Indicates the command state.",
          "type": "string",
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ]
        },
        "issueTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The timestamp when the command was issued by the admin."
        },
        "type": {
          "description": "The type of the command.",
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "type": "string"
        },
        "payload": {
          "description": "The payload that the command specified, if any.",
          "type": "string"
        }
      }
    },
    "UserGender": {
      "id": "UserGender",
      "type": "object",
      "properties": {
        "addressMeAs": {
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their.",
          "type": "string"
        },
        "customGender": {
          "type": "string",
          "description": "Custom gender."
        },
        "type": {
          "type": "string",
          "description": "Gender."
        }
      }
    },
    "Tokens": {
      "id": "Tokens",
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of Token resources.",
          "items": {
            "$ref": "Token"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#tokenList.",
          "default": "admin#directory#tokenList",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "MobileDevice": {
      "type": "object",
      "properties": {
        "brand": {
          "type": "string",
          "description": "Mobile Device Brand (Read-only)"
        },
        "buildNumber": {
          "type": "string",
          "description": "Mobile Device Build number (Read-only)"
        },
        "resourceId": {
          "type": "string",
          "description": "Unique identifier of Mobile Device (Read-only)"
        },
        "model": {
          "description": "Name of the model of the device",
          "type": "string"
        },
        "bootloaderVersion": {
          "description": "Mobile Device Bootloader version (Read-only)",
          "type": "string"
        },
        "os": {
          "description": "Name of the mobile operating system",
          "type": "string"
        },
        "applications": {
          "type": "array",
          "items": {
            "properties": {
              "packageName": {
                "description": "Package name of application",
                "type": "string"
              },
              "displayName": {
                "description": "Display name of application",
                "type": "string"
              },
              "permission": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "List of Permissions for application"
              },
              "versionCode": {
                "type": "integer",
                "format": "int32",
                "description": "Version code of application"
              },
              "versionName": {
                "description": "Version name of application",
                "type": "string"
              }
            },
            "type": "object"
          },
          "description": "List of applications installed on Mobile Device"
        },
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "name": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of owner user's names (Read-only)"
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "manufacturer": {
          "type": "string",
          "description": "Mobile Device manufacturer (Read-only)"
        },
        "kernelVersion": {
          "description": "Mobile Device Kernel version (Read-only)",
          "type": "string"
        },
        "serialNumber": {
          "description": "Mobile Device SSN or Serial Number (Read-only)",
          "type": "string"
        },
        "devicePasswordStatus": {
          "type": "string",
          "description": "DevicePasswordStatus (Read-only)"
        },
        "managedAccountIsOnOwnerProfile": {
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)",
          "type": "boolean"
        },
        "userAgent": {
          "description": "Mobile Device user agent",
          "type": "string"
        },
        "email": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of owner user's email addresses (Read-only)"
        },
        "deviceId": {
          "type": "string",
          "description": "Mobile Device serial number (Read-only)"
        },
        "privilege": {
          "type": "string",
          "description": "DMAgentPermission (Read-only)"
        },
        "securityPatchLevel": {
          "format": "int64",
          "type": "string",
          "description": "Mobile Device Security patch level (Read-only)"
        },
        "status": {
          "description": "Status of the device (Read-only)",
          "type": "string"
        },
        "defaultLanguage": {
          "description": "The default locale used on the Mobile Device (Read-only)",
          "type": "string"
        },
        "releaseVersion": {
          "type": "string",
          "description": "Mobile Device release version version (Read-only)"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "meid": {
          "description": "Mobile Device MEID number (Read-only)",
          "type": "string"
        },
        "supportsWorkProfile": {
          "description": "Work profile supported on device (Read-only)",
          "type": "boolean"
        },
        "deviceCompromisedStatus": {
          "description": "Mobile Device compromised status (Read-only)",
          "type": "string"
        },
        "hardware": {
          "type": "string",
          "description": "Mobile Device Hardware (Read-only)"
        },
        "firstSync": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "otherAccountsInfo": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of accounts added on device (Read-only)"
        },
        "hardwareId": {
          "description": "Mobile Device Hardware Id (Read-only)",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The type of device (Read-only)"
        },
        "networkOperator": {
          "type": "string",
          "description": "Mobile Device mobile or network operator (if available) (Read-only)"
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "unknownSourcesStatus": {
          "description": "Unknown sources enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "imei": {
          "description": "Mobile Device IMEI number (Read-only)",
          "type": "string"
        },
        "wifiMacAddress": {
          "type": "string",
          "description": "Mobile Device WiFi MAC address (Read-only)"
        },
        "encryptionStatus": {
          "description": "Mobile Device Encryption Status (Read-only)",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#mobiledevice",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "basebandVersion": {
          "type": "string",
          "description": "Mobile Device Baseband version (Read-only)"
        }
      },
      "id": "MobileDevice"
    },
    "Asp": {
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Asp",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the ASP."
        },
        "kind": {
          "default": "admin#directory#asp",
          "description": "The type of the API resource. This is always admin#directory#asp.",
          "type": "string"
        },
        "name": {
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created.",
          "type": "string"
        },
        "creationTime": {
          "format": "int64",
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "type": "string"
        },
        "lastTimeUsed": {
          "type": "string",
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "format": "int64"
        },
        "codeId": {
          "description": "The unique ID of the ASP.",
          "type": "integer",
          "format": "int32"
        },
        "userKey": {
          "description": "The unique ID of the user who issued the ASP.",
          "type": "string"
        }
      }
    },
    "CalendarResources": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "type": "array",
          "description": "The CalendarResources in this page of results.",
          "items": {
            "$ref": "CalendarResource"
          }
        },
        "kind": {
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList.",
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        }
      },
      "type": "object",
      "id": "CalendarResources",
      "description": "Public API: Resources.calendars"
    },
    "UserSshPublicKey": {
      "description": "JSON template for a POSIX account entry.",
      "type": "object",
      "properties": {
        "key": {
          "description": "An SSH public key.",
          "type": "string"
        },
        "fingerprint": {
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "expirationTimeUsec": {
          "type": "string",
          "description": "An expiration time in microseconds since epoch.",
          "format": "int64"
        }
      },
      "id": "UserSshPublicKey"
    },
    "Groups": {
      "type": "object",
      "properties": {
        "groups": {
          "description": "List of group objects.",
          "type": "array",
          "items": {
            "$ref": "Group"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "kind": {
          "default": "admin#directory#groups",
          "description": "Kind of resource this is.",
          "type": "string"
        }
      },
      "id": "Groups",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserMakeAdmin": {
      "type": "object",
      "id": "UserMakeAdmin",
      "properties": {
        "status": {
          "type": "boolean",
          "description": "Boolean indicating new admin status of the user",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          }
        }
      }
    },
    "ChromeOsDevices": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#chromeosdevices",
          "type": "string"
        },
        "chromeosdevices": {
          "description": "List of Chrome OS Device objects.",
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "type": "array"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "ChromeOsDevices"
    },
    "BuildingCoordinates": {
      "id": "BuildingCoordinates",
      "properties": {
        "longitude": {
          "description": "Longitude in decimal degrees.",
          "format": "double",
          "type": "number"
        },
        "latitude": {
          "description": "Latitude in decimal degrees.",
          "format": "double",
          "type": "number"
        }
      },
      "description": "Public API: Resources.buildings",
      "type": "object"
    },
    "Roles": {
      "id": "Roles",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#roles",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roles."
        },
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "description": "A list of Role resources.",
          "type": "array",
          "items": {
            "$ref": "Role"
          }
        }
      },
      "type": "object"
    },
    "Alias": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#alias"
        },
        "id": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        }
      },
      "id": "Alias",
      "description": "JSON template for Alias object in Directory API."
    },
    "UserAbout": {
      "description": "JSON template for About (notes) of a user in Directory API.",
      "properties": {
        "value": {
          "description": "Actual value of notes.",
          "type": "string"
        },
        "contentType": {
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.",
          "type": "string"
        }
      },
      "id": "UserAbout",
      "type": "object"
    },
    "UserLanguage": {
      "properties": {
        "customLanguage": {
          "type": "string",
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set"
        },
        "languageCode": {
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.",
          "type": "string"
        }
      },
      "description": "JSON template for a language entry.",
      "id": "UserLanguage",
      "type": "object"
    },
    "OrgUnits": {
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "OrgUnits",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#orgUnits"
        },
        "organizationUnits": {
          "type": "array",
          "description": "List of user objects.",
          "items": {
            "$ref": "OrgUnit"
          }
        }
      }
    },
    "Member": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey.",
          "type": "string"
        },
        "delivery_settings": {
          "type": "string",
          "description": "Delivery settings of member"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#member"
        },
        "email": {
          "description": "Email of member (Read-only)",
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Status of member (Immutable)"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "type": {
          "description": "Type of member (Immutable)",
          "type": "string"
        },
        "role": {
          "description": "Role of member",
          "type": "string"
        }
      },
      "id": "Member"
    },
    "UserName": {
      "properties": {
        "familyName": {
          "description": "Last Name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string"
        },
        "fullName": {
          "description": "Full Name",
          "type": "string"
        },
        "givenName": {
          "type": "string",
          "description": "First Name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        }
      },
      "id": "UserName",
      "type": "object"
    },
    "Asps": {
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of ASP resources.",
          "items": {
            "$ref": "Asp"
          }
        },
        "kind": {
          "default": "admin#directory#aspList",
          "description": "The type of the API resource. This is always admin#directory#aspList.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Asps"
    },
    "UserWebsite": {
      "type": "object",
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary website or not."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "value": {
          "type": "string",
          "description": "Website."
        }
      },
      "description": "JSON template for a website entry.",
      "id": "UserWebsite"
    },
    "FeatureInstance": {
      "description": "JSON template for a feature instance.",
      "id": "FeatureInstance",
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      },
      "type": "object"
    },
    "UserExternalId": {
      "id": "UserExternalId",
      "type": "object",
      "description": "JSON template for an externalId entry.",
      "properties": {
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "type": {
          "description": "The type of the Id.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The value of the id."
        }
      }
    },
    "Privileges": {
      "id": "Privileges",
      "properties": {
        "items": {
          "description": "A list of Privilege resources.",
          "items": {
            "$ref": "Privilege"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#privileges",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privileges."
        }
      },
      "type": "object"
    },
    "DomainAliases": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "domainAliases": {
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          },
          "description": "List of domain alias objects."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAliases",
          "type": "string"
        }
      },
      "type": "object",
      "id": "DomainAliases"
    },
    "Token": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#token.",
          "default": "admin#directory#token"
        },
        "displayText": {
          "type": "string",
          "description": "The displayable name of the application the token is issued to."
        },
        "clientId": {
          "description": "The Client ID of the application the token is issued to.",
          "type": "string"
        },
        "scopes": {
          "description": "A list of authorization scopes the application is granted.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "userKey": {
          "description": "The unique ID of the user that issued the token.",
          "type": "string"
        },
        "nativeApp": {
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device.",
          "type": "boolean"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "anonymous": {
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID.",
          "type": "boolean"
        }
      },
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Token"
    },
    "ChromeOsMoveDevicesToOu": {
      "type": "object",
      "properties": {
        "deviceIds": {
          "description": "ChromeOs Devices to be moved to OU",
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "ChromeOsMoveDevicesToOu"
    },
    "Feature": {
      "id": "Feature",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#features#Feature",
          "description": "Kind of resource this is."
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "name": {
          "description": "The name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "type": "string"
        }
      },
      "description": "JSON template for Feature object in Directory API."
    },
    "CustomerPostalAddress": {
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "id": "CustomerPostalAddress",
      "type": "object",
      "properties": {
        "contactName": {
          "description": "The customer contact's name.",
          "type": "string"
        },
        "addressLine2": {
          "type": "string",
          "description": "Address line 2 of the address."
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        },
        "countryCode": {
          "type": "string",
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements."
        },
        "addressLine3": {
          "type": "string",
          "description": "Address line 3 of the address."
        },
        "postalCode": {
          "type": "string",
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element."
        },
        "addressLine1": {
          "type": "string",
          "description": "A customer's physical address. The address can be composed of one to three lines."
        },
        "locality": {
          "description": "Name of the locality. An example of a locality value is the city of San Francisco.",
          "type": "string"
        },
        "region": {
          "description": "Name of the region. An example of a region value is NY for the state of New York.",
          "type": "string"
        }
      }
    },
    "UserUndelete": {
      "id": "UserUndelete",
      "properties": {
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        }
      },
      "type": "object"
    },
    "Domains": {
      "properties": {
        "domainAliases": {
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          },
          "description": "List of domain alias objects. (Read-only)"
        },
        "domainName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The domain name of the customer."
        },
        "creationTime": {
          "type": "string",
          "description": "Creation time of the domain. (Read-only).",
          "format": "int64"
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Indicates if the domain is a primary domain (Read-only)."
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain. (Read-only)."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#domain"
        }
      },
      "type": "object",
      "id": "Domains"
    },
    "FeatureRename": {
      "type": "object",
      "id": "FeatureRename",
      "properties": {
        "newName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          },
          "description": "New name of the feature."
        }
      }
    },
    "OrgUnit": {
      "id": "OrgUnit",
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "name": {
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          },
          "type": "string",
          "description": "Name of OrgUnit"
        },
        "orgUnitId": {
          "description": "Id of OrgUnit",
          "type": "string"
        },
        "description": {
          "description": "Description of OrgUnit",
          "type": "string"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "Path of OrgUnit"
        },
        "parentOrgUnitId": {
          "description": "Id of parent OrgUnit",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#orgUnit"
        },
        "blockInheritance": {
          "description": "Should block inheritance",
          "type": "boolean"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "parentOrgUnitPath": {
          "description": "Path of parent OrgUnit",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DirectoryChromeosdevicesCommandResult": {
      "properties": {
        "errorMessage": {
          "type": "string",
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed."
        },
        "result": {
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ],
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "type": "string",
          "description": "The result of the command."
        },
        "executeTime": {
          "description": "The time at which the command was executed or failed to execute.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "type": "object",
      "id": "DirectoryChromeosdevicesCommandResult",
      "description": "The result of executing a command."
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "id": "DirectoryChromeosdevicesIssueCommandRequest",
      "type": "object",
      "properties": {
        "commandType": {
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "type": "string",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "description": "The type of command."
        },
        "payload": {
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a stringified JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100].",
          "type": "string"
        }
      },
      "description": "A request for issuing a command."
    }
  },
  "revision": "20201020",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        }
      }
    }
  },
  "basePath": "",
  "protocol": "rest",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "version": "directory_v1",
  "discoveryVersion": "v1",
  "fullyEncodeReservedExpansion": true,
  "name": "admin",
  "rootUrl": "https://www.googleapis.com/",
  "title": "Admin SDK",
  "ownerName": "Google",
  "resources": {
    "tokens": {
      "methods": {
        "delete": {
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameters": {
            "clientId": {
              "location": "path",
              "description": "The Client ID of the application the token is issued to.",
              "type": "string",
              "required": true
            },
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true
            }
          },
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Delete all access tokens issued by a user for an application.",
          "id": "directory.tokens.delete"
        },
        "list": {
          "response": {
            "$ref": "Tokens"
          },
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.tokens.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "httpMethod": "GET",
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "description": "Returns the set of tokens specified user has issued to 3rd party applications."
        },
        "get": {
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.tokens.get",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "clientId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "The Client ID of the application the token is issued to."
            }
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Get information about an access token issued by a user.",
          "response": {
            "$ref": "Token"
          }
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "response": {
            "$ref": "Privileges"
          },
          "id": "directory.privileges.list",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer"
          ]
        }
      }
    },
    "customers": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "description": "Retrieves a customer.",
          "parameterOrder": [
            "customerKey"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameters": {
            "customerKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Id of the customer to be retrieved"
            }
          },
          "response": {
            "$ref": "Customer"
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ]
        },
        "patch": {
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "response": {
            "$ref": "Customer"
          },
          "parameters": {
            "customerKey": {
              "type": "string",
              "description": "Id of the customer to be updated",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.customers.patch",
          "description": "Patch Customers via Apiary Patch Orchestration",
          "path": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Customer"
          },
          "parameterOrder": [
            "customerKey"
          ]
        },
        "update": {
          "description": "Updates a customer.",
          "parameterOrder": [
            "customerKey"
          ],
          "response": {
            "$ref": "Customer"
          },
          "id": "directory.customers.update",
          "path": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "PUT",
          "request": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameters": {
            "customerKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Id of the customer to be updated"
            }
          }
        }
      }
    },
    "schemas": {
      "methods": {
        "patch": {
          "description": "Patch Schema via Apiary Patch Orchestration",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "id": "directory.schemas.patch",
          "request": {
            "$ref": "Schema"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "schemaKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Name or immutable ID of the schema."
            }
          },
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "response": {
            "$ref": "Schema"
          }
        },
        "update": {
          "request": {
            "$ref": "Schema"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "response": {
            "$ref": "Schema"
          },
          "parameters": {
            "schemaKey": {
              "required": true,
              "description": "Name or immutable ID of the schema.",
              "location": "path",
              "type": "string"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "id": "directory.schemas.update",
          "httpMethod": "PUT",
          "description": "Update schema",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "description": "Retrieve all schemas for a customer",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "GET",
          "id": "directory.schemas.list",
          "response": {
            "$ref": "Schemas"
          }
        },
        "get": {
          "response": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "description": "Retrieve schema",
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "schemaKey": {
              "required": true,
              "type": "string",
              "description": "Name or immutable ID of the schema",
              "location": "path"
            }
          },
          "id": "directory.schemas.get",
          "httpMethod": "GET"
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "response": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId"
          ],
          "request": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.insert",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "description": "Create schema.",
          "httpMethod": "POST"
        },
        "delete": {
          "parameters": {
            "schemaKey": {
              "type": "string",
              "description": "Name or immutable ID of the schema",
              "required": true,
              "location": "path"
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            }
          },
          "description": "Delete schema",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.delete"
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "list": {
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "description": "Retrieves a paginated list of all roleAssignments.",
          "response": {
            "$ref": "RoleAssignments"
          },
          "id": "directory.roleAssignments.list",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "roleId": {
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "minimum": "1",
              "maximum": "200",
              "location": "query",
              "format": "int32",
              "type": "integer",
              "description": "Maximum number of results to return."
            },
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify the next page in the list.",
              "type": "string"
            },
            "userKey": {
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "type": "string",
              "location": "query"
            }
          }
        },
        "get": {
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "response": {
            "$ref": "RoleAssignment"
          },
          "description": "Retrieve a role assignment.",
          "id": "directory.roleAssignments.get",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "httpMethod": "GET",
          "parameters": {
            "roleAssignmentId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role assignment."
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ]
        },
        "insert": {
          "description": "Creates a role assignment.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "POST",
          "id": "directory.roleAssignments.insert",
          "request": {
            "$ref": "RoleAssignment"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "response": {
            "$ref": "RoleAssignment"
          }
        },
        "delete": {
          "id": "directory.roleAssignments.delete",
          "description": "Deletes a role assignment.",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "parameters": {
            "roleAssignmentId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role assignment."
            },
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        }
      }
    },
    "groups": {
      "methods": {
        "list": {
          "response": {
            "$ref": "Groups"
          },
          "parameterOrder": [],
          "id": "directory.groups.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "path": "admin/directory/v1/groups",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "default": "200",
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 200."
            },
            "orderBy": {
              "type": "string",
              "enum": [
                "orderByUndefined",
                "email"
              ],
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "description": "Column to use for sorting results",
              "location": "query"
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "location": "query",
              "type": "string"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "type": "string",
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used"
            },
            "domain": {
              "type": "string",
              "location": "query",
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead."
            },
            "userKey": {
              "type": "string",
              "location": "query",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object."
            }
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups"
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameterOrder": [],
          "description": "Create Group",
          "path": "admin/directory/v1/groups",
          "parameters": {},
          "httpMethod": "POST",
          "request": {
            "$ref": "Group"
          },
          "id": "directory.groups.insert",
          "flatPath": "admin/directory/v1/groups",
          "response": {
            "$ref": "Group"
          }
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "response": {
            "$ref": "Group"
          },
          "id": "directory.groups.patch",
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "description": "Patch Groups via Apiary Patch Orchestration",
          "parameterOrder": [
            "groupKey"
          ]
        },
        "get": {
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the group",
              "type": "string"
            }
          },
          "description": "Retrieve Group",
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.groups.get",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "GET",
          "parameterOrder": [
            "groupKey"
          ]
        },
        "delete": {
          "description": "Delete Group",
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "DELETE",
          "id": "directory.groups.delete",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ]
        },
        "update": {
          "httpMethod": "PUT",
          "response": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "request": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "groupKey"
          ],
          "description": "Update Group",
          "path": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.update"
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "list": {
              "id": "directory.groups.aliases.list",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "response": {
                "$ref": "Aliases"
              },
              "description": "List all aliases for a group",
              "httpMethod": "GET",
              "parameters": {
                "groupKey": {
                  "required": true,
                  "location": "path",
                  "description": "Email or immutable ID of the group",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "groupKey"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ]
            },
            "insert": {
              "id": "directory.groups.aliases.insert",
              "description": "Add a alias for the group",
              "request": {
                "$ref": "Alias"
              },
              "parameters": {
                "groupKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the group",
                  "type": "string",
                  "required": true
                }
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameterOrder": [
                "groupKey"
              ],
              "httpMethod": "POST",
              "response": {
                "$ref": "Alias"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases"
            },
            "delete": {
              "httpMethod": "DELETE",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "alias": {
                  "type": "string",
                  "description": "The alias to be removed",
                  "required": true,
                  "location": "path"
                }
              },
              "description": "Remove a alias for the group",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "id": "directory.groups.aliases.delete",
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}"
            }
          }
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "description": "Stop watching resources through this channel.",
          "id": "admin.channels.stop",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "flatPath": "admin/directory_v1/channels/stop",
          "parameterOrder": [],
          "request": {
            "$ref": "Channel"
          },
          "path": "admin/directory_v1/channels/stop",
          "parameters": {}
        }
      }
    },
    "domainAliases": {
      "methods": {
        "delete": {
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "description": "Deletes a domain Alias of the customer.",
          "id": "directory.domainAliases.delete",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "httpMethod": "DELETE",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "domainAliasName": {
              "type": "string",
              "description": "Name of domain alias to be retrieved.",
              "required": true,
              "location": "path"
            }
          }
        },
        "get": {
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "id": "directory.domainAliases.get",
          "description": "Retrieves a domain alias of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "response": {
            "$ref": "DomainAlias"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            },
            "domainAliasName": {
              "location": "path",
              "description": "Name of domain alias to be retrieved.",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ]
        },
        "list": {
          "id": "directory.domainAliases.list",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "DomainAliases"
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "httpMethod": "GET",
          "parameters": {
            "parentDomainName": {
              "location": "query",
              "description": "Name of the parent domain for which domain aliases are to be fetched.",
              "type": "string"
            },
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "description": "Lists the domain aliases of the customer."
        },
        "insert": {
          "httpMethod": "POST",
          "request": {
            "$ref": "DomainAlias"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domainAliases.insert",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "description": "Inserts a domain alias of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "response": {
            "$ref": "DomainAlias"
          }
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "delete": {
          "httpMethod": "DELETE",
          "id": "directory.mobiledevices.delete",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameters": {
            "resourceId": {
              "required": true,
              "description": "Immutable ID of Mobile Device",
              "location": "path",
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "description": "Delete Mobile Device"
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "httpMethod": "GET",
          "id": "directory.mobiledevices.list",
          "parameters": {
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "maxResults": {
              "maximum": "100",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "type": "integer",
              "default": "100",
              "minimum": "1",
              "format": "int32",
              "location": "query"
            },
            "orderBy": {
              "location": "query",
              "description": "Column to use for sorting results",
              "type": "string",
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ]
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            }
          },
          "response": {
            "$ref": "MobileDevices"
          },
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "parameterOrder": [
            "customerId"
          ]
        },
        "action": {
          "description": "Take action on Mobile Device",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "id": "directory.mobiledevices.action",
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "resourceId": {
              "required": true,
              "description": "Immutable ID of Mobile Device",
              "location": "path",
              "type": "string"
            }
          },
          "request": {
            "$ref": "MobileDeviceAction"
          }
        },
        "get": {
          "response": {
            "$ref": "MobileDevice"
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "httpMethod": "GET",
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "projection": {
              "location": "query",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields."
            },
            "resourceId": {
              "description": "Immutable ID of Mobile Device",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.mobiledevices.get",
          "description": "Retrieve Mobile Device",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ]
        }
      }
    },
    "asps": {
      "methods": {
        "list": {
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.asps.list",
          "description": "List the ASPs issued by a user.",
          "response": {
            "$ref": "Asps"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps"
        },
        "delete": {
          "httpMethod": "DELETE",
          "id": "directory.asps.delete",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "codeId": {
              "format": "int32",
              "location": "path",
              "type": "integer",
              "required": true,
              "description": "The unique ID of the ASP to be deleted."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "description": "Delete an ASP issued by a user."
        },
        "get": {
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "description": "Get information about an ASP issued by a user.",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            },
            "codeId": {
              "description": "The unique ID of the ASP.",
              "required": true,
              "location": "path",
              "format": "int32",
              "type": "integer"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.get",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Asp"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "list": {
          "id": "directory.verificationCodes.list",
          "httpMethod": "GET",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string"
            }
          },
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "response": {
            "$ref": "VerificationCodes"
          },
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "invalidate": {
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST",
          "description": "Invalidate the current backup verification codes for the user.",
          "id": "directory.verificationCodes.invalidate",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "generate": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "description": "Generate new backup verification codes for the user.",
          "id": "directory.verificationCodes.generate",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the user"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameterOrder": [
            "userKey"
          ]
        }
      }
    },
    "users": {
      "resources": {
        "photos": {
          "methods": {
            "get": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              },
              "response": {
                "$ref": "UserPhoto"
              },
              "id": "directory.users.photos.get",
              "description": "Retrieve photo of a user",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "GET"
            },
            "delete": {
              "id": "directory.users.photos.delete",
              "parameterOrder": [
                "userKey"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "description": "Remove photos for the user",
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user"
                }
              }
            },
            "patch": {
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "description": "Patch Photo via Apiary Patch Orchestration",
              "parameterOrder": [
                "userKey"
              ],
              "httpMethod": "PATCH",
              "request": {
                "$ref": "UserPhoto"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "id": "directory.users.photos.patch",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user"
                }
              }
            },
            "update": {
              "request": {
                "$ref": "UserPhoto"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user"
                }
              },
              "response": {
                "$ref": "UserPhoto"
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "PUT",
              "description": "Add a photo for the user",
              "id": "directory.users.photos.update"
            }
          }
        },
        "aliases": {
          "methods": {
            "insert": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "id": "directory.users.aliases.insert",
              "description": "Add a alias for the user",
              "parameterOrder": [
                "userKey"
              ],
              "request": {
                "$ref": "Alias"
              },
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Email or immutable ID of the user"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "response": {
                "$ref": "Alias"
              },
              "httpMethod": "POST",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases"
            },
            "list": {
              "httpMethod": "GET",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "description": "List all aliases for a user",
              "response": {
                "$ref": "Aliases"
              },
              "id": "directory.users.aliases.list",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases"
            },
            "watch": {
              "description": "Watch for changes in users list",
              "parameterOrder": [
                "userKey"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "id": "directory.users.aliases.watch",
              "request": {
                "$ref": "Channel"
              },
              "parameters": {
                "event": {
                  "location": "query",
                  "description": "Event on which subscription is intended (if subscribing)",
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ]
                },
                "userKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "required": true
                }
              },
              "response": {
                "$ref": "Channel"
              },
              "httpMethod": "POST",
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ]
            },
            "delete": {
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "description": "Remove a alias for the user",
              "parameters": {
                "alias": {
                  "description": "The alias to be removed",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "userKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "id": "directory.users.aliases.delete"
            }
          }
        }
      },
      "methods": {
        "patch": {
          "httpMethod": "PATCH",
          "description": "Patch Users via Apiary Patch Orchestration",
          "path": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "response": {
            "$ref": "User"
          },
          "request": {
            "$ref": "User"
          },
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.patch",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "type": "string",
              "required": true,
              "location": "path"
            }
          }
        },
        "signOut": {
          "id": "directory.users.signOut",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            }
          }
        },
        "makeAdmin": {
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the user as admin",
              "location": "path"
            }
          },
          "id": "directory.users.makeAdmin",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "description": "change admin status of a user",
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ],
          "request": {
            "$ref": "UserMakeAdmin"
          }
        },
        "undelete": {
          "parameters": {
            "userKey": {
              "description": "The immutable id of the user",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "id": "directory.users.undelete",
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "Undelete a deleted user",
          "request": {
            "$ref": "UserUndelete"
          }
        },
        "get": {
          "id": "directory.users.get",
          "httpMethod": "GET",
          "description": "retrieve user",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "projection": {
              "default": "basic",
              "description": "What subset of fields to fetch for this user.",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "location": "query"
            },
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user",
              "required": true,
              "location": "path"
            },
            "viewType": {
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "location": "query",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "type": "string",
              "default": "admin_view",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ]
            },
            "customFieldMask": {
              "type": "string",
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            }
          },
          "response": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "flatPath": "admin/directory/v1/users/{userKey}"
        },
        "delete": {
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "description": "Delete user",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.delete",
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user",
              "type": "string",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/users/{userKey}"
        },
        "insert": {
          "parameters": {},
          "path": "admin/directory/v1/users",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameterOrder": [],
          "request": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users",
          "id": "directory.users.insert",
          "description": "create user.",
          "httpMethod": "POST",
          "response": {
            "$ref": "User"
          }
        },
        "list": {
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "parameters": {
            "sortOrder": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order.",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query"
            },
            "customer": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "viewType": {
              "default": "admin_view",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "type": "string",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "location": "query",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ]
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "type": "string",
              "location": "query"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "type": "string",
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ]
            },
            "showDeleted": {
              "location": "query",
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)"
            },
            "query": {
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "location": "query"
            },
            "projection": {
              "description": "What subset of fields to fetch for this user.",
              "location": "query",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "default": "basic",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "type": "string"
            },
            "maxResults": {
              "maximum": "500",
              "description": "Maximum number of results to return.",
              "default": "100",
              "minimum": "1",
              "type": "integer",
              "location": "query",
              "format": "int32"
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string",
              "location": "query"
            }
          },
          "response": {
            "$ref": "Users"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "flatPath": "admin/directory/v1/users",
          "parameterOrder": [],
          "id": "directory.users.list",
          "path": "admin/directory/v1/users",
          "httpMethod": "GET"
        },
        "update": {
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "response": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "update user",
          "parameterOrder": [
            "userKey"
          ],
          "request": {
            "$ref": "User"
          },
          "id": "directory.users.update"
        },
        "watch": {
          "response": {
            "$ref": "Channel"
          },
          "description": "Watch for changes in users list",
          "parameterOrder": [],
          "path": "admin/directory/v1/users/watch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "Channel"
          },
          "parameters": {
            "viewType": {
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "location": "query",
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "type": "string"
            },
            "showDeleted": {
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "type": "string",
              "default": "basic",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "description": "What subset of fields to fetch for this user.",
              "location": "query",
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ]
            },
            "orderBy": {
              "type": "string",
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "description": "Column to use for sorting results"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order.",
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "customer": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string",
              "location": "query"
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\"",
              "type": "string",
              "location": "query"
            },
            "event": {
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "type": "string",
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "description": "Event on which subscription is intended",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "maximum": "500",
              "description": "Maximum number of results to return.",
              "default": "100",
              "type": "integer",
              "format": "int32",
              "minimum": "1"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "customFieldMask": {
              "location": "query",
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            }
          },
          "id": "directory.users.watch",
          "flatPath": "admin/directory/v1/users/watch",
          "httpMethod": "POST"
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "methods": {
                "issueCommand": {
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "parameters": {
                    "deviceId": {
                      "location": "path",
                      "description": "Immutable. Immutable ID of Chrome OS Device.",
                      "type": "string",
                      "required": true
                    },
                    "customerId": {
                      "required": true,
                      "description": "Immutable. Immutable ID of the G Suite account.",
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "description": "Issues a command for the device to execute.",
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ]
                }
              },
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "httpMethod": "GET",
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "parameters": {
                        "customerId": {
                          "location": "path",
                          "type": "string",
                          "required": true,
                          "description": "Immutable. Immutable ID of the G Suite account."
                        },
                        "deviceId": {
                          "type": "string",
                          "description": "Immutable. Immutable ID of Chrome OS Device.",
                          "location": "path",
                          "required": true
                        },
                        "commandId": {
                          "description": "Immutable. Immutable ID of Chrome OS Device Command.",
                          "location": "path",
                          "type": "string",
                          "format": "int64",
                          "required": true
                        }
                      },
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "description": "Gets command data a specific command issued to the device.",
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ],
                      "id": "admin.customer.devices.chromeos.commands.get"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "orgunits": {
      "methods": {
        "delete": {
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "orgUnitPath": {
              "type": "string",
              "location": "path",
              "description": "Full path of the organizational unit or its ID",
              "required": true,
              "pattern": "^.*$"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "id": "directory.orgunits.delete",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "description": "Remove organizational unit",
          "httpMethod": "DELETE"
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.orgunits.update",
          "parameters": {
            "orgUnitPath": {
              "pattern": "^.*$",
              "type": "string",
              "description": "Full path of the organizational unit or its ID",
              "required": true,
              "location": "path"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "request": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "description": "Update organizational unit",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}"
        },
        "patch": {
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "id": "directory.orgunits.patch",
          "httpMethod": "PATCH",
          "parameters": {
            "orgUnitPath": {
              "pattern": "^.*$",
              "required": true,
              "location": "path",
              "description": "Full path of the organizational unit or its ID",
              "type": "string"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "request": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "description": "Patch organization unit via Apiary Patch Orchestration"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.get",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "description": "Retrieve organizational unit",
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "type": "string",
              "required": true,
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID"
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            }
          },
          "httpMethod": "GET"
        },
        "list": {
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "type": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "description": "Whether to return all sub-organizations or just immediate children",
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ]
            },
            "orgUnitPath": {
              "default": "",
              "location": "query",
              "description": "the URL-encoded organizational unit's path or its ID",
              "type": "string"
            }
          },
          "id": "directory.orgunits.list",
          "response": {
            "$ref": "OrgUnits"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "description": "Retrieve all organizational units",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits"
        },
        "insert": {
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.orgunits.insert",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "description": "Add organizational unit",
          "response": {
            "$ref": "OrgUnit"
          },
          "request": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            }
          }
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "patch": {
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "description": "Patch Chrome OS Device",
          "httpMethod": "PATCH",
          "parameters": {
            "projection": {
              "location": "query",
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "id": "directory.chromeosdevices.patch"
        },
        "get": {
          "id": "directory.chromeosdevices.get",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            },
            "deviceId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of Chrome OS Device"
            },
            "projection": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields."
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "description": "Retrieve Chrome OS Device",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ]
        },
        "action": {
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "description": "Take action on Chrome OS Device",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "resourceId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of Chrome OS Device"
            }
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "id": "directory.chromeosdevices.action",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action"
        },
        "update": {
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "deviceId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of Chrome OS Device"
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.update",
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "description": "Update Chrome OS Device"
        },
        "moveDevicesToOu": {
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "httpMethod": "POST",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            },
            "orgUnitPath": {
              "location": "query",
              "required": true,
              "description": "Full path of the target organizational unit or its ID",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu"
        },
        "list": {
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.chromeosdevices.list",
          "parameters": {
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            },
            "orgUnitPath": {
              "location": "query",
              "description": "Full path of the organizational unit or its ID",
              "type": "string"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "sortOrder": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used"
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "type": "string",
              "location": "query"
            },
            "orderBy": {
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ],
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "description": "Column to use for sorting results",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "minimum": "1",
              "type": "integer",
              "description": "Maximum number of results to return.",
              "default": "100",
              "location": "query",
              "format": "int32"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            }
          },
          "httpMethod": "GET",
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos"
        }
      }
    },
    "domains": {
      "methods": {
        "insert": {
          "request": {
            "$ref": "Domains"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domains.insert",
          "description": "Inserts a domain of the customer.",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "response": {
            "$ref": "Domains"
          },
          "path": "admin/directory/v1/customer/{customer}/domains",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "parameterOrder": [
            "customer"
          ]
        },
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "description": "Deletes a domain of the customer.",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "id": "directory.domains.delete",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "domainName": {
              "description": "Name of domain to be deleted",
              "location": "path",
              "required": true,
              "type": "string"
            }
          }
        },
        "list": {
          "path": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "description": "Lists the domains of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "response": {
            "$ref": "Domains2"
          },
          "id": "directory.domains.list"
        },
        "get": {
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "response": {
            "$ref": "Domains"
          },
          "description": "Retrieves a domain of the customer.",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "id": "directory.domains.get",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "domainName": {
              "required": true,
              "description": "Name of domain to be retrieved",
              "type": "string",
              "location": "path"
            }
          }
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "POST",
          "description": "Turn off 2-Step Verification for user.",
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "id": "directory.twoStepVerification.turnOff",
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          }
        }
      }
    },
    "resources": {
      "resources": {
        "buildings": {
          "methods": {
            "patch": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "coordinatesSource": {
                  "default": "SOURCE_UNSPECIFIED",
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "location": "query"
                },
                "buildingId": {
                  "location": "path",
                  "description": "The id of the building to update.",
                  "type": "string",
                  "required": true
                }
              },
              "id": "directory.resources.buildings.patch",
              "description": "Patches a building via Apiary Patch Orchestration.",
              "response": {
                "$ref": "Building"
              },
              "request": {
                "$ref": "Building"
              },
              "httpMethod": "PATCH",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "list": {
              "id": "directory.resources.buildings.list",
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "Buildings"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Token to specify the next page in the list."
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "maxResults": {
                  "location": "query",
                  "type": "integer",
                  "minimum": "1",
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "format": "int32"
                }
              },
              "description": "Retrieves a list of buildings for an account."
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "id": "directory.resources.buildings.delete",
              "parameters": {
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "buildingId": {
                  "description": "The id of the building to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "description": "Deletes a building.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "insert": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "coordinatesSource": {
                  "description": "Source from which Building.coordinates are derived.",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "type": "string",
                  "location": "query",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ]
                }
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "customer"
              ],
              "request": {
                "$ref": "Building"
              },
              "description": "Inserts a building.",
              "id": "directory.resources.buildings.insert",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings"
            },
            "get": {
              "id": "directory.resources.buildings.get",
              "response": {
                "$ref": "Building"
              },
              "httpMethod": "GET",
              "parameters": {
                "buildingId": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the building to retrieve.",
                  "type": "string"
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "description": "Retrieves a building.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "update": {
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "coordinatesSource": {
                  "default": "SOURCE_UNSPECIFIED",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "location": "query",
                  "type": "string",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ]
                },
                "buildingId": {
                  "required": true,
                  "description": "The id of the building to update.",
                  "type": "string",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "request": {
                "$ref": "Building"
              },
              "httpMethod": "PUT",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              },
              "description": "Updates a building.",
              "id": "directory.resources.buildings.update"
            }
          }
        },
        "calendars": {
          "methods": {
            "patch": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.patch",
              "response": {
                "$ref": "CalendarResource"
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "calendarResourceId": {
                  "type": "string",
                  "description": "The unique ID of the calendar resource to update.",
                  "location": "path",
                  "required": true
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                }
              },
              "httpMethod": "PATCH",
              "request": {
                "$ref": "CalendarResource"
              }
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Deletes a calendar resource.",
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the calendar resource to delete."
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              },
              "id": "directory.resources.calendars.delete",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "DELETE"
            },
            "get": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "id": "directory.resources.calendars.get",
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Retrieves a calendar resource.",
              "response": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "calendarResourceId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the calendar resource to retrieve."
                }
              }
            },
            "insert": {
              "response": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "request": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "id": "directory.resources.calendars.insert",
              "httpMethod": "POST",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "description": "Inserts a calendar resource.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer"
              ]
            },
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the calendar resource to update.",
                  "location": "path"
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              },
              "id": "directory.resources.calendars.update",
              "httpMethod": "PUT",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "request": {
                "$ref": "CalendarResource"
              }
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.calendars.list",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "description": "Retrieves a list of calendar resources for an account.",
              "parameters": {
                "orderBy": {
                  "location": "query",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order.",
                  "type": "string"
                },
                "query": {
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone.",
                  "type": "string",
                  "location": "query"
                },
                "maxResults": {
                  "location": "query",
                  "description": "Maximum number of results to return.",
                  "type": "integer",
                  "minimum": "1",
                  "format": "int32",
                  "maximum": "500"
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Token to specify the next page in the list."
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "response": {
                "$ref": "CalendarResources"
              },
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars"
            }
          }
        },
        "features": {
          "methods": {
            "patch": {
              "response": {
                "$ref": "Feature"
              },
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                },
                "featureKey": {
                  "description": "The unique ID of the feature to update.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "id": "directory.resources.features.patch",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "featureKey"
              ]
            },
            "insert": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "description": "Inserts a feature.",
              "id": "directory.resources.features.insert",
              "response": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "httpMethod": "POST"
            },
            "delete": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Deletes a feature.",
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "featureKey": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the feature to delete.",
                  "location": "path"
                },
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.delete"
            },
            "get": {
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "GET",
              "response": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Retrieves a feature.",
              "id": "directory.resources.features.get",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameters": {
                "featureKey": {
                  "description": "The unique ID of the feature to retrieve.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              }
            },
            "update": {
              "description": "Updates a feature.",
              "parameters": {
                "featureKey": {
                  "description": "The unique ID of the feature to update.",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "response": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "httpMethod": "PUT",
              "id": "directory.resources.features.update",
              "request": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "rename": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "description": "Renames a feature.",
              "id": "directory.resources.features.rename",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                },
                "oldName": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the feature to rename."
                }
              },
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "request": {
                "$ref": "FeatureRename"
              },
              "httpMethod": "POST"
            },
            "list": {
              "response": {
                "$ref": "Features"
              },
              "parameters": {
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "type": "string",
                  "location": "query"
                },
                "maxResults": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": "1",
                  "maximum": "500",
                  "location": "query",
                  "description": "Maximum number of results to return."
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                }
              },
              "id": "directory.resources.features.list",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameterOrder": [
                "customer"
              ],
              "httpMethod": "GET",
              "description": "Retrieves a list of features for an account."
            }
          }
        }
      }
    },
    "roles": {
      "methods": {
        "list": {
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "id": "directory.roles.list",
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "minimum": "1",
              "format": "int32",
              "maximum": "100"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles",
          "response": {
            "$ref": "Roles"
          }
        },
        "update": {
          "parameters": {
            "roleId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the role."
            },
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "request": {
            "$ref": "Role"
          },
          "response": {
            "$ref": "Role"
          },
          "id": "directory.roles.update",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "httpMethod": "PUT",
          "description": "Updates a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "delete": {
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "roleId": {
              "location": "path",
              "description": "Immutable ID of the role.",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.delete",
          "description": "Deletes a role.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "get": {
          "response": {
            "$ref": "Role"
          },
          "id": "directory.roles.get",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "description": "Retrieves a role.",
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            },
            "roleId": {
              "type": "string",
              "description": "Immutable ID of the role.",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "patch": {
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "roleId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role."
            }
          },
          "id": "directory.roles.patch",
          "request": {
            "$ref": "Role"
          },
          "response": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "httpMethod": "PATCH",
          "description": "Patch role via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "insert": {
          "httpMethod": "POST",
          "description": "Creates a role.",
          "request": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "Role"
          },
          "id": "directory.roles.insert",
          "flatPath": "admin/directory/v1/customer/{customer}/roles"
        }
      }
    },
    "members": {
      "methods": {
        "list": {
          "response": {
            "$ref": "Members"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "id": "directory.members.list",
          "httpMethod": "GET",
          "description": "Retrieve all members in a group (paginated)",
          "parameters": {
            "maxResults": {
              "default": "200",
              "location": "query",
              "type": "integer",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "minimum": "1",
              "format": "int32"
            },
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "type": "string",
              "location": "path",
              "required": true
            },
            "roles": {
              "description": "Comma separated role values to filter list results on.",
              "location": "query",
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "includeDerivedMembership": {
              "type": "boolean",
              "description": "Whether to list indirect memberships. Default: false.",
              "location": "query"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "parameterOrder": [
            "groupKey"
          ]
        },
        "get": {
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "memberKey": {
              "description": "Email or immutable ID of the member",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "id": "directory.members.get",
          "httpMethod": "GET",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Retrieve Group Member",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          }
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "required": true
            },
            "memberKey": {
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.members.patch",
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Member"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "description": "Patch Member via Apiary Patch Orchestration",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "hasMember": {
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "groupKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID."
            },
            "memberKey": {
              "type": "string",
              "location": "path",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "required": true
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "response": {
            "$ref": "MembersHasMember"
          },
          "id": "directory.members.hasMember",
          "httpMethod": "GET",
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested."
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "description": "Update membership of a user in the specified group.",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          },
          "httpMethod": "PUT",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "request": {
            "$ref": "Member"
          },
          "id": "directory.members.update",
          "parameters": {
            "memberKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "type": "string",
              "location": "path",
              "required": true
            },
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        },
        "delete": {
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.delete",
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group",
              "required": true,
              "location": "path"
            },
            "memberKey": {
              "description": "Email or immutable ID of the member",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "description": "Remove membership.",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ]
        },
        "insert": {
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "response": {
            "$ref": "Member"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group"
            }
          },
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "id": "directory.members.insert",
          "description": "Add user to the specified group.",
          "request": {
            "$ref": "Member"
          }
        }
      }
    }
  },
  "servicePath": "",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "batchPath": "batch/admin/directory_v1",
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "id": "admin:directory_v1"
}
