{
  "canonicalName": "directory",
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "packagePath": "admin",
  "revision": "20200810",
  "schemas": {
    "Schemas": {
      "id": "Schemas",
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "schemas": {
          "items": {
            "$ref": "Schema"
          },
          "type": "array",
          "description": "List of UserSchema objects."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#schemas",
          "description": "Kind of resource this is.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Channel": {
      "properties": {
        "expiration": {
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "format": "int64",
          "type": "string"
        },
        "payload": {
          "type": "boolean",
          "description": "A Boolean value to indicate whether payload is wanted. Optional."
        },
        "token": {
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "kind": {
          "default": "api#channel",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "type": "string"
        },
        "id": {
          "description": "A UUID or similar unique string that identifies this channel.",
          "type": "string"
        },
        "params": {
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "resourceId": {
          "type": "string",
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions."
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        }
      },
      "id": "Channel",
      "description": "An notification channel used to watch for resource changes.",
      "type": "object"
    },
    "UserAbout": {
      "id": "UserAbout",
      "properties": {
        "value": {
          "description": "Actual value of notes.",
          "type": "string"
        },
        "contentType": {
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.",
          "type": "string"
        }
      },
      "description": "JSON template for About (notes) of a user in Directory API.",
      "type": "object"
    },
    "UserCustomProperties": {
      "id": "UserCustomProperties",
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "type": "object"
    },
    "CalendarResource": {
      "type": "object",
      "properties": {
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        },
        "generatedResourceName": {
          "type": "string",
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\"."
        },
        "buildingId": {
          "type": "string",
          "description": "Unique ID for the building a resource is located in."
        },
        "resourceName": {
          "type": "string",
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          }
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "floorName": {
          "description": "Name of the floor a resource is located on.",
          "type": "string"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "resourceType": {
          "description": "The type of the calendar resource, intended for non-room resources.",
          "type": "string"
        },
        "resourceId": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "description": "The unique ID for the calendar resource.",
          "type": "string"
        },
        "featureInstances": {
          "type": "any",
          "description": "Instances of features for the calendar resource."
        },
        "resourceEmail": {
          "type": "string",
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource."
        },
        "floorSection": {
          "description": "Name of the section within a floor a resource is located in.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#calendars#CalendarResource",
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource."
        },
        "resourceCategory": {
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.",
          "type": "string"
        },
        "capacity": {
          "type": "integer",
          "description": "Capacity of a resource, number of seats in a room.",
          "format": "int32"
        }
      },
      "id": "CalendarResource",
      "description": "Public API: Resources.calendars"
    },
    "UserPhoto": {
      "properties": {
        "photoData": {
          "description": "Base64 encoded photo data",
          "format": "byte",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          }
        },
        "mimeType": {
          "description": "Mime Type of the photo",
          "type": "string"
        },
        "primaryEmail": {
          "description": "Primary email of User (Read-only)",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "height": {
          "type": "integer",
          "description": "Height in pixels of the photo",
          "format": "int32"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#user#photo",
          "description": "Kind of resource this is."
        },
        "width": {
          "description": "Width in pixels of the photo",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "UserPhoto"
    },
    "Domains2": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domains"
        },
        "domains": {
          "description": "List of domain objects.",
          "type": "array",
          "items": {
            "$ref": "Domains"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Domains2",
      "type": "object"
    },
    "UserLocation": {
      "id": "UserLocation",
      "properties": {
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        },
        "deskCode": {
          "description": "Most specific textual code of individual desk location.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "floorSection": {
          "type": "string",
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values."
        },
        "floorName": {
          "type": "string",
          "description": "Floor name/number."
        },
        "buildingId": {
          "description": "Building Identifier.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value."
        }
      },
      "type": "object",
      "description": "JSON template for a location entry."
    },
    "Building": {
      "id": "Building",
      "properties": {
        "coordinates": {
          "$ref": "BuildingCoordinates",
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees."
        },
        "buildingId": {
          "type": "string",
          "description": "Unique identifier for the building. The maximum length is 100 characters."
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "floorNames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry."
        },
        "buildingName": {
          "type": "string",
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters."
        },
        "address": {
          "$ref": "BuildingAddress",
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#buildings#Building"
        },
        "description": {
          "type": "string",
          "description": "A brief description of the building. For example, \"Chelsea Market\"."
        }
      },
      "description": "Public API: Resources.buildings",
      "type": "object"
    },
    "Tokens": {
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "items": {
          "items": {
            "$ref": "Token"
          },
          "type": "array",
          "description": "A list of Token resources."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#tokenList.",
          "type": "string",
          "default": "admin#directory#tokenList"
        }
      },
      "type": "object",
      "id": "Tokens"
    },
    "User": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "isEnforcedIn2Sv": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Is 2-step verification enforced (Read-only)"
        },
        "suspended": {
          "type": "boolean",
          "description": "Indicates if user is suspended."
        },
        "changePasswordAtNextLogin": {
          "type": "boolean",
          "description": "Boolean indicating if the user should change password in next login"
        },
        "customSchemas": {
          "description": "Custom fields of the user.",
          "type": "object",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          }
        },
        "lastLoginTime": {
          "type": "string",
          "format": "date-time",
          "description": "User's last login time. (Read-only)",
          "readOnly": true
        },
        "etag": {
          "description": "Output only. ETag of the resource.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "$ref": "UserName",
          "description": "User's name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "languages": {
          "type": "any",
          "description": "Languages of User"
        },
        "customerId": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. CustomerId of User (Read-only)"
        },
        "organizations": {
          "type": "any",
          "description": "Organizations of User"
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "Boolean indicating if ip is whitelisted"
        },
        "keywords": {
          "type": "any",
          "description": "Keywords of User"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "archived": {
          "description": "Indicates if user is archived.",
          "type": "boolean"
        },
        "isDelegatedAdmin": {
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)",
          "type": "boolean"
        },
        "isMailboxSetup": {
          "description": "Output only. Is mailbox setup (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "emails": {
          "type": "any",
          "description": "Emails of User"
        },
        "suspensionReason": {
          "description": "Output only. Suspension reason if user is suspended (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "includeInGlobalAddressList": {
          "type": "boolean",
          "description": "Boolean indicating if user is included in Global Address List"
        },
        "nonEditableAliases": {
          "readOnly": true,
          "description": "Output only. List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "recoveryEmail": {
          "description": "Recovery email of the user.",
          "type": "string"
        },
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        },
        "relations": {
          "description": "The Relations of User *",
          "type": "any"
        },
        "isEnrolledIn2Sv": {
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "locations": {
          "type": "any",
          "description": "Locations of User"
        },
        "isAdmin": {
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "agreedToTerms": {
          "description": "Output only. Indicates if user has agreed to terms (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "kind": {
          "description": "Output only. Kind of resource this is.",
          "default": "admin#directory#user",
          "type": "string",
          "readOnly": true
        },
        "notes": {
          "description": "Notes of User",
          "type": "any"
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "description": "Output only. List of aliases (Read-only)",
          "readOnly": true,
          "type": "array"
        },
        "ims": {
          "type": "any",
          "description": "User's Instant Messenger"
        },
        "addresses": {
          "type": "any",
          "description": "Addresses of User"
        },
        "hashFunction": {
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt",
          "type": "string"
        },
        "thumbnailPhotoUrl": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Photo Url of the user (Read-only)"
        },
        "phones": {
          "type": "any",
          "description": "Phone numbers of User"
        },
        "thumbnailPhotoEtag": {
          "description": "Output only. ETag of the user's photo (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "sshPublicKeys": {
          "description": "The SSH public keys of User",
          "type": "any"
        },
        "deletionTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "posixAccounts": {
          "description": "The POSIX accounts of User",
          "type": "any"
        },
        "primaryEmail": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "username of User"
        },
        "creationTime": {
          "format": "date-time",
          "readOnly": true,
          "type": "string",
          "description": "User's G Suite account creation time. (Read-only)"
        },
        "recoveryPhone": {
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
          "type": "string"
        },
        "websites": {
          "description": "Websites of User",
          "type": "any"
        },
        "externalIds": {
          "type": "any",
          "description": "The external Ids of User *"
        },
        "password": {
          "description": "User's password",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string"
        },
        "gender": {
          "description": "Gender of User",
          "type": "any"
        }
      },
      "id": "User",
      "type": "object"
    },
    "BuildingCoordinates": {
      "id": "BuildingCoordinates",
      "type": "object",
      "description": "Public API: Resources.buildings",
      "properties": {
        "latitude": {
          "description": "Latitude in decimal degrees.",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "Longitude in decimal degrees.",
          "format": "double",
          "type": "number"
        }
      }
    },
    "Group": {
      "id": "Group",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of the group",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of Group (Read-only)"
        },
        "directMembersCount": {
          "type": "string",
          "description": "Group direct members count",
          "format": "int64"
        },
        "nonEditableAliases": {
          "type": "array",
          "description": "List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "adminCreated": {
          "type": "boolean",
          "description": "Is the group created by admin (Read-only) *"
        },
        "aliases": {
          "type": "array",
          "description": "List of aliases (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#group",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "email": {
          "description": "Email of Group",
          "type": "string",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          }
        },
        "name": {
          "type": "string",
          "description": "Group name"
        }
      }
    },
    "UserMakeAdmin": {
      "id": "UserMakeAdmin",
      "properties": {
        "status": {
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "description": "Boolean indicating new admin status of the user",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UserLanguage": {
      "properties": {
        "customLanguage": {
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set",
          "type": "string"
        },
        "languageCode": {
          "type": "string",
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException."
        }
      },
      "type": "object",
      "description": "JSON template for a language entry.",
      "id": "UserLanguage"
    },
    "Members": {
      "type": "object",
      "id": "Members",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#members",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "members": {
          "type": "array",
          "description": "List of member objects.",
          "items": {
            "$ref": "Member"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        }
      }
    },
    "Feature": {
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#Feature",
          "type": "string"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "name": {
          "type": "string",
          "description": "The name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          }
        }
      },
      "description": "JSON template for Feature object in Directory API.",
      "type": "object",
      "id": "Feature"
    },
    "Privileges": {
      "id": "Privileges",
      "properties": {
        "kind": {
          "default": "admin#directory#privileges",
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "type": "array",
          "description": "A list of Privilege resources.",
          "items": {
            "$ref": "Privilege"
          }
        }
      },
      "type": "object"
    },
    "SchemaFieldSpec": {
      "id": "SchemaFieldSpec",
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "indexed": {
          "default": "true",
          "description": "Boolean specifying whether the field is indexed or not.",
          "type": "boolean"
        },
        "displayName": {
          "description": "Display Name of the field.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "multiValued": {
          "description": "Boolean specifying whether this is a multi-valued field or not.",
          "type": "boolean"
        },
        "readAccessType": {
          "default": "ALL_DOMAIN_USERS",
          "type": "string",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\"."
        },
        "fieldName": {
          "description": "Name of the field.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#schema#fieldspec",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "fieldType": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Type of the field.",
          "type": "string"
        },
        "fieldId": {
          "description": "Unique identifier of Field (Read-only)",
          "type": "string"
        },
        "numericIndexingSpec": {
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "type": "object",
          "properties": {
            "minValue": {
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double",
              "type": "number"
            },
            "maxValue": {
              "type": "number",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double"
            }
          }
        }
      }
    },
    "DomainAliases": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array",
          "description": "List of domain alias objects."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAliases",
          "type": "string"
        }
      },
      "id": "DomainAliases"
    },
    "MobileDevices": {
      "id": "MobileDevices",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#mobiledevices"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "mobiledevices": {
          "items": {
            "$ref": "MobileDevice"
          },
          "description": "List of Mobile Device objects.",
          "type": "array"
        }
      }
    },
    "MobileDevice": {
      "id": "MobileDevice",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "hardware": {
          "type": "string",
          "description": "Mobile Device Hardware (Read-only)"
        },
        "firstSync": {
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "deviceId": {
          "description": "Mobile Device serial number (Read-only)",
          "type": "string"
        },
        "buildNumber": {
          "type": "string",
          "description": "Mobile Device Build number (Read-only)"
        },
        "supportsWorkProfile": {
          "description": "Work profile supported on device (Read-only)",
          "type": "boolean"
        },
        "defaultLanguage": {
          "description": "The default locale used on the Mobile Device (Read-only)",
          "type": "string"
        },
        "meid": {
          "type": "string",
          "description": "Mobile Device MEID number (Read-only)"
        },
        "privilege": {
          "type": "string",
          "description": "DMAgentPermission (Read-only)"
        },
        "basebandVersion": {
          "description": "Mobile Device Baseband version (Read-only)",
          "type": "string"
        },
        "manufacturer": {
          "type": "string",
          "description": "Mobile Device manufacturer (Read-only)"
        },
        "wifiMacAddress": {
          "description": "Mobile Device WiFi MAC address (Read-only)",
          "type": "string"
        },
        "serialNumber": {
          "description": "Mobile Device SSN or Serial Number (Read-only)",
          "type": "string"
        },
        "unknownSourcesStatus": {
          "description": "Unknown sources enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "lastSync": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "brand": {
          "description": "Mobile Device Brand (Read-only)",
          "type": "string"
        },
        "devicePasswordStatus": {
          "type": "string",
          "description": "DevicePasswordStatus (Read-only)"
        },
        "networkOperator": {
          "description": "Mobile Device mobile or network operator (if available) (Read-only)",
          "type": "string"
        },
        "os": {
          "description": "Name of the mobile operating system",
          "type": "string"
        },
        "deviceCompromisedStatus": {
          "type": "string",
          "description": "Mobile Device compromised status (Read-only)"
        },
        "email": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of owner user's email addresses (Read-only)"
        },
        "encryptionStatus": {
          "type": "string",
          "description": "Mobile Device Encryption Status (Read-only)"
        },
        "status": {
          "description": "Status of the device (Read-only)",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#mobiledevice",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "securityPatchLevel": {
          "format": "int64",
          "description": "Mobile Device Security patch level (Read-only)",
          "type": "string"
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "resourceId": {
          "description": "Unique identifier of Mobile Device (Read-only)",
          "type": "string"
        },
        "name": {
          "type": "array",
          "description": "List of owner user's names (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "bootloaderVersion": {
          "type": "string",
          "description": "Mobile Device Bootloader version (Read-only)"
        },
        "applications": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "versionName": {
                "description": "Version name of application",
                "type": "string"
              },
              "packageName": {
                "type": "string",
                "description": "Package name of application"
              },
              "versionCode": {
                "description": "Version code of application",
                "format": "int32",
                "type": "integer"
              },
              "permission": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of Permissions for application"
              },
              "displayName": {
                "type": "string",
                "description": "Display name of application"
              }
            }
          },
          "description": "List of applications installed on Mobile Device"
        },
        "userAgent": {
          "type": "string",
          "description": "Mobile Device user agent"
        },
        "otherAccountsInfo": {
          "description": "List of accounts added on device (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "managedAccountIsOnOwnerProfile": {
          "type": "boolean",
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)"
        },
        "hardwareId": {
          "description": "Mobile Device Hardware Id (Read-only)",
          "type": "string"
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "kernelVersion": {
          "description": "Mobile Device Kernel version (Read-only)",
          "type": "string"
        },
        "model": {
          "description": "Name of the model of the device",
          "type": "string"
        },
        "type": {
          "description": "The type of device (Read-only)",
          "type": "string"
        },
        "imei": {
          "type": "string",
          "description": "Mobile Device IMEI number (Read-only)"
        }
      }
    },
    "Features": {
      "type": "object",
      "id": "Features",
      "description": "Public API: Resources.features",
      "properties": {
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "features": {
          "description": "The Features in this page of results.",
          "type": "array",
          "items": {
            "$ref": "Feature"
          }
        },
        "kind": {
          "default": "admin#directory#resources#features#featuresList",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "ChromeOsDeviceAction": {
      "properties": {
        "deprovisionReason": {
          "type": "string"
        },
        "action": {
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "description": "Action to be taken on the ChromeOs Device",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ChromeOsDeviceAction"
    },
    "Groups": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "groups": {
          "description": "List of group objects.",
          "type": "array",
          "items": {
            "$ref": "Group"
          }
        },
        "kind": {
          "default": "admin#directory#groups",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "id": "Groups",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "CustomerPostalAddress": {
      "properties": {
        "region": {
          "description": "Name of the region. An example of a region value is NY for the state of New York.",
          "type": "string"
        },
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        },
        "locality": {
          "description": "Name of the locality. An example of a locality value is the city of San Francisco.",
          "type": "string"
        },
        "contactName": {
          "description": "The customer contact's name.",
          "type": "string"
        },
        "addressLine3": {
          "description": "Address line 3 of the address.",
          "type": "string"
        },
        "countryCode": {
          "type": "string",
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements."
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        },
        "postalCode": {
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element.",
          "type": "string"
        },
        "addressLine2": {
          "type": "string",
          "description": "Address line 2 of the address."
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "id": "CustomerPostalAddress",
      "type": "object"
    },
    "UserWebsite": {
      "id": "UserWebsite",
      "description": "JSON template for a website entry.",
      "properties": {
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary website or not."
        },
        "value": {
          "description": "Website.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      },
      "type": "object"
    },
    "MobileDeviceAction": {
      "id": "MobileDeviceAction",
      "type": "object",
      "properties": {
        "action": {
          "description": "Action to be taken on the Mobile Device",
          "type": "string",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          }
        }
      }
    },
    "Schema": {
      "type": "object",
      "id": "Schema",
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "fields": {
          "type": "array",
          "description": "Fields of Schema",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "items": {
            "$ref": "SchemaFieldSpec"
          }
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema"
        },
        "schemaName": {
          "type": "string",
          "description": "Schema name",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "displayName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "Display name for the schema."
        },
        "schemaId": {
          "type": "string",
          "description": "Unique identifier of Schema (Read-only)"
        }
      }
    },
    "Role": {
      "properties": {
        "roleId": {
          "format": "int64",
          "type": "string",
          "description": "ID of the role."
        },
        "rolePrivileges": {
          "description": "The set of privileges that are granted to this role.",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "items": {
            "type": "object",
            "properties": {
              "serviceId": {
                "type": "string",
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
              },
              "privilegeName": {
                "description": "The name of the privilege.",
                "type": "string"
              }
            }
          },
          "type": "array"
        },
        "isSystemRole": {
          "description": "Returns true if this is a pre-defined system role.",
          "type": "boolean"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "isSuperAdminRole": {
          "type": "boolean",
          "description": "Returns true if the role is a super admin role."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#role.",
          "default": "admin#directory#role",
          "type": "string"
        },
        "roleName": {
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "description": "Name of the role.",
          "type": "string"
        },
        "roleDescription": {
          "description": "A short description of the role.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Role"
    },
    "UserPosixAccount": {
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix.",
      "properties": {
        "uid": {
          "format": "uint64",
          "description": "The POSIX compliant user ID.",
          "type": "string"
        },
        "systemId": {
          "type": "string",
          "description": "System identifier for which account Username or Uid apply to."
        },
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "gecos": {
          "description": "The GECOS (user information) for this account.",
          "type": "string"
        },
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        },
        "accountId": {
          "type": "string",
          "description": "A POSIX account field identifier."
        },
        "shell": {
          "type": "string",
          "description": "The path to the login shell for this account."
        },
        "gid": {
          "type": "string",
          "format": "uint64",
          "description": "The default group ID."
        },
        "operatingSystemType": {
          "description": "The operating system type for this account.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "UserPosixAccount"
    },
    "UserSshPublicKey": {
      "description": "JSON template for a POSIX account entry.",
      "type": "object",
      "properties": {
        "fingerprint": {
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "description": "An SSH public key."
        },
        "expirationTimeUsec": {
          "format": "int64",
          "type": "string",
          "description": "An expiration time in microseconds since epoch."
        }
      },
      "id": "UserSshPublicKey"
    },
    "CalendarResources": {
      "type": "object",
      "description": "Public API: Resources.calendars",
      "properties": {
        "kind": {
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList.",
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "items": {
          "description": "The CalendarResources in this page of results.",
          "type": "array",
          "items": {
            "$ref": "CalendarResource"
          }
        }
      },
      "id": "CalendarResources"
    },
    "Asps": {
      "id": "Asps",
      "type": "object",
      "properties": {
        "items": {
          "description": "A list of ASP resources.",
          "items": {
            "$ref": "Asp"
          },
          "type": "array"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#aspList.",
          "type": "string",
          "default": "admin#directory#aspList"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "DomainAlias": {
      "id": "DomainAlias",
      "properties": {
        "kind": {
          "default": "admin#directory#domainAlias",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain alias. (Read-only)"
        },
        "creationTime": {
          "format": "int64",
          "description": "The creation time of the domain alias. (Read-only).",
          "type": "string"
        },
        "parentDomainName": {
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "type": "string"
        },
        "domainAliasName": {
          "type": "string",
          "description": "The domain alias name."
        }
      },
      "type": "object"
    },
    "MembersHasMember": {
      "properties": {
        "isMember": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested."
        }
      },
      "type": "object",
      "description": "JSON template for Has Member response in Directory API.",
      "id": "MembersHasMember"
    },
    "Alias": {
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#alias"
        },
        "etag": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        }
      },
      "id": "Alias",
      "description": "JSON template for Alias object in Directory API.",
      "type": "object"
    },
    "Buildings": {
      "type": "object",
      "description": "Public API: Resources.buildings",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#buildings#buildingsList",
          "description": "Kind of resource this is."
        },
        "buildings": {
          "items": {
            "$ref": "Building"
          },
          "description": "The Buildings in this page of results.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        }
      },
      "id": "Buildings"
    },
    "UserGender": {
      "type": "object",
      "id": "UserGender",
      "properties": {
        "type": {
          "description": "Gender.",
          "type": "string"
        },
        "customGender": {
          "description": "Custom gender.",
          "type": "string"
        },
        "addressMeAs": {
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their.",
          "type": "string"
        }
      }
    },
    "ChromeOsDevice": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "ChromeOsDevice",
      "properties": {
        "macAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on wifi network interface (Read-only)"
        },
        "platformVersion": {
          "type": "string",
          "description": "Chromebook platform version (Read-only)"
        },
        "diskVolumeReports": {
          "description": "Reports of disk space and other info about mounted/connected volumes.",
          "items": {
            "type": "object",
            "properties": {
              "volumeInfo": {
                "items": {
                  "properties": {
                    "volumeId": {
                      "type": "string",
                      "description": "Volume id"
                    },
                    "storageTotal": {
                      "type": "string",
                      "description": "Total disk space [in bytes]",
                      "format": "int64"
                    },
                    "storageFree": {
                      "format": "int64",
                      "description": "Free disk space [in bytes]",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "description": "Disk volumes"
              }
            }
          },
          "type": "array"
        },
        "autoUpdateExpiration": {
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "type": "string",
          "format": "int64"
        },
        "activeTimeRanges": {
          "description": "List of active time ranges (Read-only)",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "date": {
                "description": "Date of usage",
                "format": "date",
                "type": "string"
              },
              "activeTime": {
                "description": "Duration in milliseconds",
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "orderNumber": {
          "type": "string",
          "description": "Chromebook order number (Read-only)"
        },
        "bootMode": {
          "type": "string",
          "description": "Chromebook boot mode (Read-only)"
        },
        "supportEndDate": {
          "format": "date-time",
          "type": "string",
          "description": "Final date the device will be supported (Read-only)"
        },
        "lastEnrollmentTime": {
          "description": "Date and time the device was last enrolled (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#chromeosdevice"
        },
        "serialNumber": {
          "type": "string",
          "description": "Chromebook serial number (Read-only)"
        },
        "recentUsers": {
          "description": "List of recent device users, in descending order by last login time (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "Email address of the user. Present only if the user type is managed"
              },
              "type": {
                "description": "The type of the user",
                "type": "string"
              }
            }
          },
          "type": "array"
        },
        "orgUnitPath": {
          "description": "OrgUnit of the device",
          "type": "string"
        },
        "deviceId": {
          "type": "string",
          "description": "Unique identifier of Chrome OS Device (Read-only)"
        },
        "notes": {
          "type": "string",
          "description": "Notes added by the administrator"
        },
        "annotatedLocation": {
          "type": "string",
          "description": "Address or location of the device as noted by the administrator"
        },
        "lastSync": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "deviceFiles": {
          "description": "List of device files to download (Read-only)",
          "type": "array",
          "items": {
            "properties": {
              "createTime": {
                "description": "Date and time the file was created",
                "format": "date-time",
                "type": "string"
              },
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              },
              "name": {
                "description": "File name",
                "type": "string"
              },
              "type": {
                "type": "string",
                "description": "File type"
              }
            },
            "type": "object"
          }
        },
        "dockMacAddress": {
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "model": {
          "description": "Chromebook Model (Read-only)",
          "type": "string"
        },
        "manufactureDate": {
          "type": "string",
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format."
        },
        "lastKnownNetwork": {
          "type": "array",
          "items": {
            "properties": {
              "ipAddress": {
                "type": "string",
                "description": "The IP address."
              },
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              }
            },
            "description": "Information for an ip address.",
            "type": "object"
          },
          "description": "Contains last known network (Read-only)"
        },
        "status": {
          "type": "string",
          "description": "status of the device (Read-only)"
        },
        "firmwareVersion": {
          "type": "string",
          "description": "Chromebook firmware version (Read-only)"
        },
        "systemRamTotal": {
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "format": "int64",
          "type": "string"
        },
        "annotatedUser": {
          "description": "User of the device",
          "type": "string"
        },
        "annotatedAssetId": {
          "description": "AssetId specified during enrollment or through later annotation",
          "type": "string"
        },
        "tpmVersionInfo": {
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "properties": {
            "manufacturer": {
              "description": "TPM manufacturer code.",
              "type": "string"
            },
            "firmwareVersion": {
              "type": "string",
              "description": "TPM firmware version."
            },
            "family": {
              "description": "TPM family.",
              "type": "string"
            },
            "specLevel": {
              "description": "TPM specification level.",
              "type": "string"
            },
            "tpmModel": {
              "description": "TPM model number.",
              "type": "string"
            },
            "vendorSpecific": {
              "description": "Vendor-specific information such as Vendor ID.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "willAutoRenew": {
          "description": "Will Chromebook auto renew after support end date (Read-only)",
          "type": "boolean"
        },
        "ethernetMacAddress": {
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)",
          "type": "string"
        },
        "systemRamFreeReports": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "reportTime": {
                "description": "Date and time the report was received.",
                "format": "date-time",
                "type": "string"
              },
              "systemRamFreeInfo": {
                "items": {
                  "type": "string",
                  "format": "int64"
                },
                "type": "array"
              }
            }
          },
          "description": "Reports of amounts of available RAM memory (Read-only)"
        },
        "ethernetMacAddress0": {
          "type": "string",
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "osVersion": {
          "type": "string",
          "description": "Chromebook Os Version (Read-only)"
        },
        "cpuStatusReports": {
          "type": "array",
          "items": {
            "properties": {
              "reportTime": {
                "format": "date-time",
                "description": "Date and time the report was received.",
                "type": "string"
              },
              "cpuUtilizationPercentageInfo": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "cpuTemperatureInfo": {
                "type": "array",
                "description": "List of CPU temperature samples.",
                "items": {
                  "properties": {
                    "temperature": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Temperature in Celsius degrees."
                    },
                    "label": {
                      "type": "string",
                      "description": "CPU label"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "type": "object"
          },
          "description": "Reports of CPU utilization and temperature (Read-only)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "meid": {
          "type": "string",
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)"
        }
      }
    },
    "Token": {
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Token",
      "properties": {
        "displayText": {
          "description": "The displayable name of the application the token is issued to.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#token",
          "description": "The type of the API resource. This is always admin#directory#token.",
          "type": "string"
        },
        "clientId": {
          "type": "string",
          "description": "The Client ID of the application the token is issued to."
        },
        "anonymous": {
          "type": "boolean",
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID."
        },
        "nativeApp": {
          "type": "boolean",
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device."
        },
        "scopes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of authorization scopes the application is granted."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user that issued the token."
        }
      }
    },
    "UserAddress": {
      "id": "UserAddress",
      "description": "JSON template for address.",
      "type": "object",
      "properties": {
        "locality": {
          "description": "Locality.",
          "type": "string"
        },
        "formatted": {
          "type": "string",
          "description": "Formatted address."
        },
        "countryCode": {
          "description": "Country code.",
          "type": "string"
        },
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "region": {
          "description": "Region.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "streetAddress": {
          "description": "Street.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "poBox": {
          "type": "string",
          "description": "Other parts of address."
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary address. Only one entry could be marked as primary."
        },
        "extendedAddress": {
          "type": "string",
          "description": "Extended Address."
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        }
      }
    },
    "BuildingAddress": {
      "id": "BuildingAddress",
      "properties": {
        "addressLines": {
          "type": "array",
          "description": "Unstructured address lines describing the lower levels of an address.",
          "items": {
            "type": "string"
          }
        },
        "postalCode": {
          "type": "string",
          "description": "Optional. Postal code of the address."
        },
        "languageCode": {
          "type": "string",
          "description": "Optional. BCP-47 language code of the contents of this address (if known)."
        },
        "administrativeArea": {
          "type": "string",
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region."
        },
        "sublocality": {
          "description": "Optional. Sublocality of the address.",
          "type": "string"
        },
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        },
        "locality": {
          "type": "string",
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines."
        }
      },
      "description": "Public API: Resources.buildings",
      "type": "object"
    },
    "RoleAssignment": {
      "id": "RoleAssignment",
      "properties": {
        "assignedTo": {
          "type": "string",
          "description": "The unique ID of the user this role is assigned to."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#roleAssignment.",
          "default": "admin#directory#roleAssignment",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "orgUnitId": {
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.",
          "type": "string"
        },
        "roleAssignmentId": {
          "description": "ID of this roleAssignment.",
          "format": "int64",
          "type": "string"
        },
        "scopeType": {
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT ",
          "type": "string"
        },
        "roleId": {
          "format": "int64",
          "type": "string",
          "description": "The ID of the role that is assigned."
        }
      },
      "type": "object"
    },
    "VerificationCodes": {
      "properties": {
        "kind": {
          "default": "admin#directory#verificationCodesList",
          "description": "The type of the resource. This is always admin#directory#verificationCodesList.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "VerificationCode"
          },
          "description": "A list of verification code resources."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "VerificationCodes",
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "OrgUnits": {
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#orgUnits",
          "type": "string"
        },
        "organizationUnits": {
          "description": "List of user objects.",
          "items": {
            "$ref": "OrgUnit"
          },
          "type": "array"
        }
      },
      "id": "OrgUnits"
    },
    "Asp": {
      "type": "object",
      "id": "Asp",
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "codeId": {
          "format": "int32",
          "description": "The unique ID of the ASP.",
          "type": "integer"
        },
        "name": {
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#asp.",
          "default": "admin#directory#asp",
          "type": "string"
        },
        "creationTime": {
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "type": "string",
          "format": "int64"
        },
        "etag": {
          "description": "ETag of the ASP.",
          "type": "string"
        },
        "lastTimeUsed": {
          "type": "string",
          "format": "int64",
          "description": "The time when the ASP was last used. Expressed in Unix time format."
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user who issued the ASP."
        }
      }
    },
    "UserName": {
      "id": "UserName",
      "type": "object",
      "properties": {
        "givenName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "First Name"
        },
        "familyName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "Last Name",
          "type": "string"
        },
        "fullName": {
          "description": "Full Name",
          "type": "string"
        }
      }
    },
    "Privilege": {
      "id": "Privilege",
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string",
          "description": "The name of the service this privilege is for."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "childPrivileges": {
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "items": {
            "$ref": "Privilege"
          },
          "type": "array"
        },
        "serviceId": {
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
          "type": "string"
        },
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        },
        "isOuScopable": {
          "type": "boolean",
          "description": "If the privilege can be restricted to an organization unit."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#privilege.",
          "type": "string",
          "default": "admin#directory#privilege"
        }
      }
    },
    "OrgUnit": {
      "type": "object",
      "id": "OrgUnit",
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "parentOrgUnitId": {
          "type": "string",
          "description": "Id of parent OrgUnit"
        },
        "kind": {
          "default": "admin#directory#orgUnit",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "blockInheritance": {
          "type": "boolean",
          "description": "Should block inheritance"
        },
        "description": {
          "type": "string",
          "description": "Description of OrgUnit"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "parentOrgUnitPath": {
          "description": "Path of parent OrgUnit",
          "type": "string"
        },
        "orgUnitId": {
          "description": "Id of OrgUnit",
          "type": "string"
        },
        "name": {
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          },
          "type": "string",
          "description": "Name of OrgUnit"
        },
        "orgUnitPath": {
          "description": "Path of OrgUnit",
          "type": "string"
        }
      }
    },
    "UserPhone": {
      "id": "UserPhone",
      "type": "object",
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "primary": {
          "description": "If this is user's primary phone or not.",
          "type": "boolean"
        },
        "value": {
          "description": "Phone number.",
          "type": "string"
        }
      },
      "description": "JSON template for a phone entry."
    },
    "UserEmail": {
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "address": {
          "description": "Email id of the user.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary email. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value."
        }
      },
      "type": "object",
      "id": "UserEmail",
      "description": "JSON template for an email."
    },
    "VerificationCode": {
      "id": "VerificationCode",
      "properties": {
        "kind": {
          "default": "admin#directory#verificationCode",
          "description": "The type of the resource. This is always admin#directory#verificationCode.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "userId": {
          "description": "The obfuscated unique ID of the user.",
          "type": "string"
        },
        "verificationCode": {
          "type": "string",
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result."
        }
      },
      "type": "object",
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Roles": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "A list of Role resources.",
          "items": {
            "$ref": "Role"
          }
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#roles",
          "description": "The type of the API resource. This is always admin#directory#roles."
        }
      },
      "id": "Roles",
      "type": "object"
    },
    "ChromeOsDevices": {
      "id": "ChromeOsDevices",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#chromeosdevices"
        },
        "chromeosdevices": {
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "type": "array",
          "description": "List of Chrome OS Device objects."
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        }
      }
    },
    "UserExternalId": {
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "value": {
          "type": "string",
          "description": "The value of the id."
        },
        "type": {
          "type": "string",
          "description": "The type of the Id."
        }
      },
      "id": "UserExternalId",
      "description": "JSON template for an externalId entry.",
      "type": "object"
    },
    "FeatureInstance": {
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      },
      "description": "JSON template for a feature instance.",
      "id": "FeatureInstance",
      "type": "object"
    },
    "FeatureRename": {
      "properties": {
        "newName": {
          "type": "string",
          "description": "New name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          }
        }
      },
      "type": "object",
      "id": "FeatureRename"
    },
    "UserIm": {
      "id": "UserIm",
      "type": "object",
      "description": "JSON template for instant messenger of an user.",
      "properties": {
        "customProtocol": {
          "description": "Custom protocol.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "protocol": {
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.",
          "type": "string"
        },
        "im": {
          "type": "string",
          "description": "Instant messenger id."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary im. Only one entry could be marked as primary."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value."
        }
      }
    },
    "UserKeyword": {
      "description": "JSON template for a keyword entry.",
      "id": "UserKeyword",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "value": {
          "type": "string",
          "description": "Keyword."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      }
    },
    "UserOrganization": {
      "id": "UserOrganization",
      "type": "object",
      "properties": {
        "domain": {
          "description": "The domain to which the organization belongs to.",
          "type": "string"
        },
        "department": {
          "type": "string",
          "description": "Department within the organization."
        },
        "location": {
          "description": "Location of the organization. This need not be fully qualified address.",
          "type": "string"
        },
        "name": {
          "description": "Name of the organization",
          "type": "string"
        },
        "primary": {
          "description": "If it user's primary organization.",
          "type": "boolean"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol of the organization.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        },
        "fullTimeEquivalent": {
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "description": "Description of the organization.",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "costCenter": {
          "type": "string",
          "description": "The cost center of the users department."
        }
      },
      "description": "JSON template for an organization entry."
    },
    "Customer": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "customerCreationTime": {
          "format": "date-time",
          "type": "string",
          "description": "The customer's creation time (Readonly)"
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. The default value is en-US",
          "type": "string"
        },
        "alternateEmail": {
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain",
          "type": "string"
        },
        "postalAddress": {
          "description": "The customer's postal address information.",
          "$ref": "CustomerPostalAddress"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The customer's contact phone number in E.164 format."
        },
        "id": {
          "description": "The unique ID for the customer's G Suite account. (Readonly)",
          "type": "string"
        },
        "customerDomain": {
          "type": "string",
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#customer",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Customer"
    },
    "Member": {
      "id": "Member",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of member (Immutable)"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "delivery_settings": {
          "description": "Delivery settings of member",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#member",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "id": {
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey.",
          "type": "string"
        },
        "role": {
          "description": "Role of member",
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Status of member (Immutable)"
        },
        "email": {
          "type": "string",
          "description": "Email of member (Read-only)"
        }
      },
      "type": "object"
    },
    "RoleAssignments": {
      "type": "object",
      "id": "RoleAssignments",
      "properties": {
        "nextPageToken": {
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments .",
          "default": "admin#directory#roleAssignments"
        },
        "items": {
          "items": {
            "$ref": "RoleAssignment"
          },
          "type": "array",
          "description": "A list of RoleAssignment resources."
        }
      }
    },
    "Users": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "trigger_event": {
          "description": "Event that triggered this response (only used in case of Push Response)",
          "type": "string"
        },
        "users": {
          "description": "List of user objects.",
          "type": "array",
          "items": {
            "$ref": "User"
          }
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#users",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "Users"
    },
    "ChromeOsMoveDevicesToOu": {
      "type": "object",
      "properties": {
        "deviceIds": {
          "items": {
            "type": "string"
          },
          "description": "ChromeOs Devices to be moved to OU",
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "type": "array"
        }
      },
      "id": "ChromeOsMoveDevicesToOu"
    },
    "Aliases": {
      "type": "object",
      "id": "Aliases",
      "description": "JSON response template to list aliases in Directory API.",
      "properties": {
        "kind": {
          "default": "admin#directory#aliases",
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        }
      }
    },
    "UserRelation": {
      "id": "UserRelation",
      "properties": {
        "value": {
          "type": "string",
          "description": "The name of the relation."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "type": "string",
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner."
        }
      },
      "type": "object",
      "description": "JSON template for a relation entry."
    },
    "UserUndelete": {
      "id": "UserUndelete",
      "properties": {
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Domains": {
      "type": "object",
      "id": "Domains",
      "properties": {
        "verified": {
          "description": "Indicates the verification state of a domain. (Read-only).",
          "type": "boolean"
        },
        "kind": {
          "default": "admin#directory#domain",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "isPrimary": {
          "description": "Indicates if the domain is a primary domain (Read-only).",
          "type": "boolean"
        },
        "domainAliases": {
          "description": "List of domain alias objects. (Read-only)",
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array"
        },
        "creationTime": {
          "description": "Creation time of the domain. (Read-only).",
          "format": "int64",
          "type": "string"
        },
        "domainName": {
          "description": "The domain name of the customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "type": "string"
        }
      }
    }
  },
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "discoveryVersion": "v1",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "servicePath": "",
  "id": "admin:directory_v1",
  "ownerName": "Google",
  "resources": {
    "members": {
      "methods": {
        "patch": {
          "description": "Patch Member via Apiary Patch Orchestration",
          "id": "directory.members.patch",
          "request": {
            "$ref": "Member"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "memberKey": {
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "location": "path",
              "required": true
            },
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "required": true
            }
          },
          "response": {
            "$ref": "Member"
          },
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ]
        },
        "update": {
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "request": {
            "$ref": "Member"
          },
          "response": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameters": {
            "memberKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "type": "string",
              "location": "path",
              "required": true
            },
            "groupKey": {
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path"
            }
          },
          "description": "Update membership of a user in the specified group.",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "PUT",
          "id": "directory.members.update"
        },
        "delete": {
          "httpMethod": "DELETE",
          "parameters": {
            "memberKey": {
              "description": "Email or immutable ID of the member",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.members.delete",
          "description": "Remove membership.",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "insert": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the group",
              "type": "string"
            }
          },
          "description": "Add user to the specified group.",
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "response": {
            "$ref": "Member"
          },
          "id": "directory.members.insert",
          "request": {
            "$ref": "Member"
          }
        },
        "get": {
          "id": "directory.members.get",
          "description": "Retrieve Group Member",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "httpMethod": "GET",
          "parameters": {
            "memberKey": {
              "required": true,
              "description": "Email or immutable ID of the member",
              "type": "string",
              "location": "path"
            },
            "groupKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group"
            }
          }
        },
        "list": {
          "description": "Retrieve all members in a group (paginated)",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "response": {
            "$ref": "Members"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "id": "directory.members.list",
          "parameters": {
            "roles": {
              "description": "Comma separated role values to filter list results on.",
              "location": "query",
              "type": "string"
            },
            "groupKey": {
              "required": true,
              "description": "Email or immutable ID of the group",
              "type": "string",
              "location": "path"
            },
            "maxResults": {
              "default": "200",
              "format": "int32",
              "type": "integer",
              "minimum": "1",
              "location": "query",
              "description": "Maximum number of results to return. Max allowed value is 200."
            },
            "includeDerivedMembership": {
              "location": "query",
              "description": "Whether to list indirect memberships. Default: false.",
              "type": "boolean"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/members"
        },
        "hasMember": {
          "response": {
            "$ref": "MembersHasMember"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "id": "directory.members.hasMember",
          "httpMethod": "GET",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "memberKey": {
              "location": "path",
              "type": "string",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "required": true
            },
            "groupKey": {
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ]
        }
      }
    },
    "domainAliases": {
      "methods": {
        "get": {
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "id": "directory.domainAliases.get",
          "description": "Retrieves a domain alias of the customer.",
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            },
            "domainAliasName": {
              "required": true,
              "type": "string",
              "description": "Name of domain alias to be retrieved.",
              "location": "path"
            }
          },
          "response": {
            "$ref": "DomainAlias"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ]
        },
        "insert": {
          "response": {
            "$ref": "DomainAlias"
          },
          "id": "directory.domainAliases.insert",
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "POST",
          "request": {
            "$ref": "DomainAlias"
          },
          "description": "Inserts a domain alias of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            }
          }
        },
        "list": {
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameters": {
            "parentDomainName": {
              "location": "query",
              "type": "string",
              "description": "Name of the parent domain for which domain aliases are to be fetched."
            },
            "customer": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "response": {
            "$ref": "DomainAliases"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameterOrder": [
            "customer"
          ],
          "description": "Lists the domain aliases of the customer.",
          "id": "directory.domainAliases.list"
        },
        "delete": {
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "parameters": {
            "domainAliasName": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Name of domain alias to be retrieved."
            },
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "id": "directory.domainAliases.delete",
          "description": "Deletes a domain Alias of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "httpMethod": "DELETE"
        }
      }
    },
    "groups": {
      "methods": {
        "get": {
          "parameterOrder": [
            "groupKey"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "description": "Retrieve Group",
          "id": "directory.groups.get"
        },
        "update": {
          "id": "directory.groups.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameterOrder": [
            "groupKey"
          ],
          "httpMethod": "PUT",
          "path": "admin/directory/v1/groups/{groupKey}",
          "description": "Update Group",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            }
          },
          "request": {
            "$ref": "Group"
          }
        },
        "list": {
          "flatPath": "admin/directory/v1/groups",
          "parameterOrder": [],
          "parameters": {
            "query": {
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "location": "query"
            },
            "userKey": {
              "type": "string",
              "location": "query",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object."
            },
            "orderBy": {
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "enum": [
                "ORDER_BY_UNDEFINED",
                "EMAIL"
              ],
              "description": "Column to use for sorting results",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "format": "int32",
              "minimum": "1",
              "type": "integer",
              "default": "200",
              "location": "query"
            },
            "domain": {
              "type": "string",
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify next page in the list"
            },
            "customer": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain."
            },
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used"
            }
          },
          "path": "admin/directory/v1/groups",
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "httpMethod": "GET",
          "response": {
            "$ref": "Groups"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.groups.list"
        },
        "patch": {
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "request": {
            "$ref": "Group"
          },
          "description": "Patch Groups via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "id": "directory.groups.patch",
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true,
              "location": "path"
            }
          }
        },
        "insert": {
          "httpMethod": "POST",
          "parameters": {},
          "response": {
            "$ref": "Group"
          },
          "description": "Create Group",
          "id": "directory.groups.insert",
          "path": "admin/directory/v1/groups",
          "parameterOrder": [],
          "flatPath": "admin/directory/v1/groups",
          "request": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ]
        },
        "delete": {
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "description": "Delete Group",
          "parameterOrder": [
            "groupKey"
          ],
          "id": "directory.groups.delete",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}"
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "description": "Remove a alias for the group",
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "parameters": {
                "alias": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The alias to be removed"
                },
                "groupKey": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Email or immutable ID of the group"
                }
              },
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "id": "directory.groups.aliases.delete"
            },
            "list": {
              "parameterOrder": [
                "groupKey"
              ],
              "id": "directory.groups.aliases.list",
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "description": "List all aliases for a group",
              "parameters": {
                "groupKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the group",
                  "required": true,
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "response": {
                "$ref": "Aliases"
              }
            },
            "insert": {
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "id": "directory.groups.aliases.insert",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "httpMethod": "POST",
              "parameters": {
                "groupKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the group",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "response": {
                "$ref": "Alias"
              },
              "request": {
                "$ref": "Alias"
              },
              "parameterOrder": [
                "groupKey"
              ],
              "description": "Add a alias for the group"
            }
          }
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "get": {
          "id": "directory.chromeosdevices.get",
          "description": "Retrieve Chrome OS Device",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "parameters": {
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "description": "Restrict information returned to a set of selected fields."
            },
            "deviceId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of Chrome OS Device"
            },
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ]
        },
        "list": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.chromeosdevices.list",
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameters": {
            "orderBy": {
              "type": "string",
              "location": "query",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ],
              "enum": [
                "ORDER_BY_UNDEFINED",
                "ANNOTATED_LOCATION",
                "ANNOTATED_USER",
                "LAST_SYNC",
                "NOTES",
                "SERIAL_NUMBER",
                "STATUS",
                "SUPPORT_END_DATE"
              ]
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "maxResults": {
              "type": "integer",
              "location": "query",
              "description": "Maximum number of results to return.",
              "format": "int32",
              "minimum": "1",
              "default": "100"
            },
            "orgUnitPath": {
              "type": "string",
              "location": "query",
              "description": "Full path of the organizational unit or its ID"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "type": "string"
            }
          }
        },
        "update": {
          "description": "Update Chrome OS Device",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.update",
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameters": {
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            },
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "deviceId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of Chrome OS Device",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ]
        },
        "patch": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "httpMethod": "PATCH",
          "id": "directory.chromeosdevices.patch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameters": {
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "description": "Patch Chrome OS Device",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ]
        },
        "action": {
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "parameters": {
            "resourceId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of Chrome OS Device"
            },
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "id": "directory.chromeosdevices.action",
          "description": "Take action on Chrome OS Device",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action"
        },
        "moveDevicesToOu": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "httpMethod": "POST",
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            },
            "orgUnitPath": {
              "required": true,
              "description": "Full path of the target organizational unit or its ID",
              "location": "query",
              "type": "string"
            }
          },
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          }
        }
      }
    },
    "domains": {
      "methods": {
        "list": {
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "GET",
          "id": "directory.domains.list",
          "description": "Lists the domains of the customer.",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "response": {
            "$ref": "Domains2"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "path": "admin/directory/v1/customer/{customer}/domains"
        },
        "insert": {
          "response": {
            "$ref": "Domains"
          },
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "path": "admin/directory/v1/customer/{customer}/domains",
          "description": "Inserts a domain of the customer.",
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domains.insert",
          "request": {
            "$ref": "Domains"
          }
        },
        "get": {
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "description": "Retrieves a domain of the customer.",
          "httpMethod": "GET",
          "parameters": {
            "domainName": {
              "type": "string",
              "description": "Name of domain to be retrieved",
              "location": "path",
              "required": true
            },
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "id": "directory.domains.get",
          "response": {
            "$ref": "Domains"
          }
        },
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "id": "directory.domains.delete",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "description": "Deletes a domain of the customer.",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "domainName": {
              "required": true,
              "description": "Name of domain to be deleted",
              "location": "path",
              "type": "string"
            }
          }
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "httpMethod": "POST",
          "parameterOrder": [],
          "path": "admin/directory_v1/channels/stop",
          "parameters": {},
          "flatPath": "admin/directory_v1/channels/stop",
          "id": "admin.channels.stop",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "description": "Stop watching resources through this channel.",
          "request": {
            "$ref": "Channel"
          }
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "id": "directory.verificationCodes.list",
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "response": {
            "$ref": "VerificationCodes"
          },
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          }
        },
        "generate": {
          "id": "directory.verificationCodes.generate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ],
          "description": "Generate new backup verification codes for the user."
        },
        "invalidate": {
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Invalidate the current backup verification codes for the user.",
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "id": "directory.verificationCodes.invalidate"
        }
      }
    },
    "resources": {
      "resources": {
        "features": {
          "methods": {
            "delete": {
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Deletes a feature.",
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "id": "directory.resources.features.delete",
              "parameters": {
                "featureKey": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the feature to delete.",
                  "location": "path"
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              }
            },
            "get": {
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Retrieves a feature.",
              "id": "directory.resources.features.get",
              "parameters": {
                "featureKey": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the feature to retrieve."
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "response": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "rename": {
              "httpMethod": "POST",
              "description": "Renames a feature.",
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "id": "directory.resources.features.rename",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "parameters": {
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "oldName": {
                  "description": "The unique ID of the feature to rename.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "request": {
                "$ref": "FeatureRename"
              }
            },
            "list": {
              "parameterOrder": [
                "customer"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "description": "Retrieves a list of features for an account.",
              "parameters": {
                "maxResults": {
                  "type": "integer",
                  "description": "Maximum number of results to return.",
                  "location": "query",
                  "format": "int32",
                  "minimum": "1",
                  "maximum": "500"
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Token to specify the next page in the list."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.features.list",
              "httpMethod": "GET",
              "response": {
                "$ref": "Features"
              }
            },
            "insert": {
              "parameters": {
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "parameterOrder": [
                "customer"
              ],
              "description": "Inserts a feature.",
              "response": {
                "$ref": "Feature"
              },
              "httpMethod": "POST",
              "id": "directory.resources.features.insert",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "request": {
                "$ref": "Feature"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "patch": {
              "response": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.patch",
              "httpMethod": "PATCH",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "description": "The unique ID of the feature to update.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "update": {
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "id": "directory.resources.features.update",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "featureKey": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the feature to update.",
                  "type": "string"
                }
              },
              "request": {
                "$ref": "Feature"
              },
              "description": "Updates a feature.",
              "response": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "PUT",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            }
          }
        },
        "calendars": {
          "methods": {
            "delete": {
              "description": "Deletes a calendar resource.",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "DELETE",
              "id": "directory.resources.calendars.delete",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID of the calendar resource to delete."
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "list": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "description": "Retrieves a list of calendar resources for an account.",
              "id": "directory.resources.calendars.list",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string"
                },
                "maxResults": {
                  "location": "query",
                  "maximum": "500",
                  "format": "int32",
                  "description": "Maximum number of results to return.",
                  "minimum": "1",
                  "type": "integer"
                },
                "query": {
                  "type": "string",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone.",
                  "location": "query"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Token to specify the next page in the list."
                },
                "orderBy": {
                  "location": "query",
                  "type": "string",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order."
                }
              },
              "parameterOrder": [
                "customer"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "CalendarResources"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "get": {
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "parameters": {
                "calendarResourceId": {
                  "type": "string",
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "location": "path",
                  "required": true
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "httpMethod": "GET",
              "id": "directory.resources.calendars.get",
              "description": "Retrieves a calendar resource.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
            },
            "insert": {
              "parameterOrder": [
                "customer"
              ],
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.calendars.insert",
              "request": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "description": "Inserts a calendar resource.",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "response": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              }
            },
            "update": {
              "response": {
                "$ref": "CalendarResource"
              },
              "id": "directory.resources.calendars.update",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "PUT",
              "request": {
                "$ref": "CalendarResource"
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "parameters": {
                "calendarResourceId": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the calendar resource to update."
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              }
            },
            "patch": {
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "request": {
                "$ref": "CalendarResource"
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                },
                "calendarResourceId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the calendar resource to update."
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.patch",
              "httpMethod": "PATCH"
            }
          }
        },
        "buildings": {
          "methods": {
            "update": {
              "id": "directory.resources.buildings.update",
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                },
                "buildingId": {
                  "type": "string",
                  "description": "The id of the building to update.",
                  "location": "path",
                  "required": true
                },
                "coordinatesSource": {
                  "location": "query",
                  "default": "SOURCE_UNSPECIFIED",
                  "type": "string",
                  "description": "Source from which Building.coordinates are derived.",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ]
                }
              },
              "description": "Updates a building.",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "request": {
                "$ref": "Building"
              },
              "response": {
                "$ref": "Building"
              },
              "httpMethod": "PUT",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "insert": {
              "parameterOrder": [
                "customer"
              ],
              "description": "Inserts a building.",
              "request": {
                "$ref": "Building"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.insert",
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "parameters": {
                "coordinatesSource": {
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "type": "string",
                  "location": "query"
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                }
              }
            },
            "get": {
              "parameters": {
                "buildingId": {
                  "required": true,
                  "description": "The unique ID of the building to retrieve.",
                  "location": "path",
                  "type": "string"
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a building.",
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.get",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              }
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "DELETE",
              "id": "directory.resources.buildings.delete",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Deletes a building.",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "buildingId": {
                  "description": "The id of the building to delete.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ]
            },
            "patch": {
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                },
                "buildingId": {
                  "description": "The id of the building to update.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED",
                  "location": "query",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Patches a building via Apiary Patch Orchestration.",
              "response": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "httpMethod": "PATCH",
              "id": "directory.resources.buildings.patch"
            },
            "list": {
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                },
                "maxResults": {
                  "format": "int32",
                  "minimum": "1",
                  "location": "query",
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "type": "integer"
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                }
              },
              "id": "directory.resources.buildings.list",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a list of buildings for an account.",
              "parameterOrder": [
                "customer"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "response": {
                "$ref": "Buildings"
              }
            }
          }
        }
      }
    },
    "orgunits": {
      "methods": {
        "patch": {
          "id": "directory.orgunits.patch",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "request": {
            "$ref": "OrgUnit"
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "type": "string",
              "required": true,
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ]
        },
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "description": "Add organizational unit",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "POST",
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "id": "directory.orgunits.insert",
          "request": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "response": {
            "$ref": "OrgUnit"
          }
        },
        "list": {
          "description": "Retrieve all organizational units",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "id": "directory.orgunits.list",
          "response": {
            "$ref": "OrgUnits"
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "default": "",
              "location": "query",
              "description": "the URL-encoded organizational unit's path or its ID"
            },
            "type": {
              "description": "Whether to return all sub-organizations or just immediate children",
              "type": "string",
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "location": "query",
              "enum": [
                "TYPE_UNDEFINED",
                "ALL",
                "CHILDREN"
              ]
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "id": "directory.orgunits.get",
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            },
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "location": "path",
              "required": true,
              "type": "string",
              "pattern": "^.*$"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "response": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "GET",
          "description": "Retrieve organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "orgUnitPath": {
              "type": "string",
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.orgunits.delete",
          "description": "Remove organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}"
        },
        "update": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "description": "Update organizational unit",
          "response": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "orgUnitPath": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$"
            }
          },
          "id": "directory.orgunits.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "request": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "PUT",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        }
      }
    },
    "schemas": {
      "methods": {
        "insert": {
          "id": "directory.schemas.insert",
          "response": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "parameterOrder": [
            "customerId"
          ],
          "description": "Create schema.",
          "httpMethod": "POST",
          "request": {
            "$ref": "Schema"
          },
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas"
        },
        "list": {
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            }
          },
          "description": "Retrieve all schemas for a customer",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "id": "directory.schemas.list",
          "response": {
            "$ref": "Schemas"
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "parameterOrder": [
            "customerId"
          ]
        },
        "get": {
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "GET",
          "description": "Retrieve schema",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "id": "directory.schemas.get",
          "parameters": {
            "schemaKey": {
              "required": true,
              "description": "Name or immutable ID of the schema",
              "type": "string",
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Schema"
          }
        },
        "delete": {
          "description": "Delete schema",
          "id": "directory.schemas.delete",
          "parameters": {
            "schemaKey": {
              "required": true,
              "description": "Name or immutable ID of the schema",
              "type": "string",
              "location": "path"
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ]
        },
        "patch": {
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          },
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            },
            "schemaKey": {
              "description": "Name or immutable ID of the schema.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "request": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.patch",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "description": "Patch Schema via Apiary Patch Orchestration"
        },
        "update": {
          "response": {
            "$ref": "Schema"
          },
          "parameters": {
            "schemaKey": {
              "required": true,
              "description": "Name or immutable ID of the schema.",
              "type": "string",
              "location": "path"
            },
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Update schema",
          "id": "directory.schemas.update",
          "request": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ]
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "action": {
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "resourceId": {
              "location": "path",
              "description": "Immutable ID of Mobile Device",
              "required": true,
              "type": "string"
            }
          },
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "description": "Take action on Mobile Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "id": "directory.mobiledevices.action",
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action"
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "description": "Delete Mobile Device",
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            },
            "resourceId": {
              "description": "Immutable ID of Mobile Device",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.mobiledevices.delete"
        },
        "get": {
          "httpMethod": "GET",
          "response": {
            "$ref": "MobileDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "id": "directory.mobiledevices.get",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "description": "Retrieve Mobile Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "location": "query"
            },
            "resourceId": {
              "description": "Immutable ID of Mobile Device",
              "required": true,
              "location": "path",
              "type": "string"
            }
          }
        },
        "list": {
          "response": {
            "$ref": "MobileDevices"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "parameters": {
            "orderBy": {
              "type": "string",
              "location": "query",
              "enum": [
                "ORDER_BY_UNDEFINED",
                "DEVICE_ID",
                "EMAIL",
                "LAST_SYNC",
                "MODEL",
                "NAME",
                "OS",
                "STATUS",
                "TYPE"
              ],
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ]
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ]
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query"
            },
            "maxResults": {
              "default": "100",
              "type": "integer",
              "minimum": "1",
              "location": "query",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "maximum": "100",
              "format": "int32"
            }
          },
          "id": "directory.mobiledevices.list",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "description": "Retrieve all Mobile Devices of a customer (paginated)"
        }
      }
    },
    "tokens": {
      "methods": {
        "list": {
          "response": {
            "$ref": "Tokens"
          },
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "id": "directory.tokens.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string"
            }
          }
        },
        "delete": {
          "description": "Delete all access tokens issued by a user for an application.",
          "parameters": {
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true
            }
          },
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "id": "directory.tokens.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "get": {
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameters": {
            "clientId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "The Client ID of the application the token is issued to."
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "response": {
            "$ref": "Token"
          },
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.tokens.get",
          "httpMethod": "GET",
          "description": "Get information about an access token issued by a user."
        }
      }
    },
    "asps": {
      "methods": {
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            },
            "codeId": {
              "location": "path",
              "type": "integer",
              "required": true,
              "format": "int32",
              "description": "The unique ID of the ASP to be deleted."
            }
          },
          "httpMethod": "DELETE",
          "id": "directory.asps.delete",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "description": "Delete an ASP issued by a user."
        },
        "list": {
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "GET",
          "description": "List the ASPs issued by a user.",
          "response": {
            "$ref": "Asps"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.asps.list",
          "path": "admin/directory/v1/users/{userKey}/asps",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "get": {
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "httpMethod": "GET",
          "description": "Get information about an ASP issued by a user.",
          "response": {
            "$ref": "Asp"
          },
          "id": "directory.asps.get",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "parameters": {
            "codeId": {
              "type": "integer",
              "description": "The unique ID of the ASP.",
              "location": "path",
              "format": "int32",
              "required": true
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        }
      }
    },
    "users": {
      "resources": {
        "photos": {
          "methods": {
            "get": {
              "parameterOrder": [
                "userKey"
              ],
              "httpMethod": "GET",
              "description": "Retrieve photo of a user",
              "response": {
                "$ref": "UserPhoto"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "id": "directory.users.photos.get",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "description": "Patch Photo via Apiary Patch Orchestration",
              "request": {
                "$ref": "UserPhoto"
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "id": "directory.users.photos.patch",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "PATCH",
              "parameterOrder": [
                "userKey"
              ]
            },
            "delete": {
              "parameters": {
                "userKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Remove photos for the user",
              "id": "directory.users.photos.delete",
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "parameterOrder": [
                "userKey"
              ]
            },
            "update": {
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "request": {
                "$ref": "UserPhoto"
              },
              "httpMethod": "PUT",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.update",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the user"
                }
              },
              "description": "Add a photo for the user",
              "parameterOrder": [
                "userKey"
              ]
            }
          }
        },
        "aliases": {
          "methods": {
            "insert": {
              "response": {
                "$ref": "Alias"
              },
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              },
              "description": "Add a alias for the user",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "request": {
                "$ref": "Alias"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.aliases.insert",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "httpMethod": "POST"
            },
            "watch": {
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "parameters": {
                "event": {
                  "location": "query",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "type": "string",
                  "enum": [
                    "EVENT_UNDEFINED",
                    "ADD",
                    "DELETE"
                  ],
                  "description": "Event on which subscription is intended (if subscribing)"
                },
                "userKey": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user"
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "response": {
                "$ref": "Channel"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "httpMethod": "POST",
              "request": {
                "$ref": "Channel"
              },
              "id": "directory.users.aliases.watch",
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "description": "Watch for changes in users list"
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "parameters": {
                "alias": {
                  "location": "path",
                  "required": true,
                  "description": "The alias to be removed",
                  "type": "string"
                },
                "userKey": {
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "type": "string"
                }
              },
              "description": "Remove a alias for the user",
              "id": "directory.users.aliases.delete",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "httpMethod": "DELETE",
              "parameterOrder": [
                "userKey",
                "alias"
              ]
            },
            "list": {
              "parameters": {
                "userKey": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the user"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "httpMethod": "GET",
              "id": "directory.users.aliases.list",
              "description": "List all aliases for a user",
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "response": {
                "$ref": "Aliases"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases"
            }
          }
        }
      },
      "methods": {
        "delete": {
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.delete",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the user",
              "location": "path"
            }
          },
          "httpMethod": "DELETE",
          "description": "Delete user",
          "flatPath": "admin/directory/v1/users/{userKey}"
        },
        "get": {
          "flatPath": "admin/directory/v1/users/{userKey}",
          "path": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "projection": {
              "location": "query",
              "default": "basic",
              "type": "string",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "CUSTOM",
                "FULL"
              ],
              "description": "What subset of fields to fetch for this user."
            },
            "customFieldMask": {
              "location": "query",
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "viewType": {
              "location": "query",
              "type": "string",
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enum": [
                "VIEW_TYPE_UNDEFINED",
                "ADMIN_VIEW",
                "DOMAIN_PUBLIC"
              ],
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ]
            }
          },
          "id": "directory.users.get",
          "response": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "description": "retrieve user",
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey"
          ]
        },
        "update": {
          "httpMethod": "PUT",
          "description": "update user",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          },
          "request": {
            "$ref": "User"
          },
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.update"
        },
        "patch": {
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "type": "string",
              "location": "path"
            }
          },
          "response": {
            "$ref": "User"
          },
          "request": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.patch",
          "description": "Patch Users via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}"
        },
        "list": {
          "parameterOrder": [],
          "path": "admin/directory/v1/users",
          "flatPath": "admin/directory/v1/users",
          "parameters": {
            "domain": {
              "location": "query",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "type": "string"
            },
            "projection": {
              "default": "basic",
              "type": "string",
              "location": "query",
              "description": "What subset of fields to fetch for this user.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "CUSTOM",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ]
            },
            "orderBy": {
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "enum": [
                "ORDER_BY_UNDEFINED",
                "EMAIL",
                "FAMILY_NAME",
                "GIVEN_NAME"
              ],
              "type": "string",
              "location": "query",
              "description": "Column to use for sorting results"
            },
            "viewType": {
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "enum": [
                "VIEW_TYPE_UNDEFINED",
                "ADMIN_VIEW",
                "DOMAIN_PUBLIC"
              ],
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "type": "string",
              "location": "query"
            },
            "customFieldMask": {
              "location": "query",
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users"
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order.",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify next page in the list"
            },
            "maxResults": {
              "type": "integer",
              "minimum": "1",
              "maximum": "500",
              "location": "query",
              "format": "int32",
              "default": "100",
              "description": "Maximum number of results to return."
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "location": "query",
              "type": "string"
            },
            "showDeleted": {
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "location": "query"
            }
          },
          "response": {
            "$ref": "Users"
          },
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "directory.users.list"
        },
        "undelete": {
          "description": "Undelete a deleted user",
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "request": {
            "$ref": "UserUndelete"
          },
          "id": "directory.users.undelete",
          "parameters": {
            "userKey": {
              "description": "The immutable id of the user",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "insert": {
          "parameterOrder": [],
          "parameters": {},
          "description": "create user.",
          "httpMethod": "POST",
          "path": "admin/directory/v1/users",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.insert",
          "request": {
            "$ref": "User"
          },
          "response": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users"
        },
        "makeAdmin": {
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "description": "change admin status of a user",
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user as admin",
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST",
          "id": "directory.users.makeAdmin",
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "watch": {
          "description": "Watch for changes in users list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "request": {
            "$ref": "Channel"
          },
          "response": {
            "$ref": "Channel"
          },
          "path": "admin/directory/v1/users/watch",
          "id": "directory.users.watch",
          "parameters": {
            "domain": {
              "location": "query",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\"",
              "type": "string"
            },
            "customer": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            },
            "event": {
              "type": "string",
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "description": "Event on which subscription is intended",
              "location": "query",
              "enum": [
                "EVENT_TYPE_UNSPECIFIED",
                "ADD",
                "DELETE",
                "MAKE_ADMIN",
                "UNDELETE",
                "UPDATE"
              ]
            }
          },
          "parameterOrder": [],
          "flatPath": "admin/directory/v1/users/watch",
          "httpMethod": "POST"
        }
      }
    },
    "customers": {
      "methods": {
        "patch": {
          "httpMethod": "PATCH",
          "parameters": {
            "customerKey": {
              "type": "string",
              "location": "path",
              "description": "Id of the customer to be updated",
              "required": true
            }
          },
          "response": {
            "$ref": "Customer"
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "path": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ],
          "id": "directory.customers.patch",
          "request": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "description": "Patch Customers via Apiary Patch Orchestration"
        },
        "get": {
          "httpMethod": "GET",
          "parameters": {
            "customerKey": {
              "location": "path",
              "description": "Id of the customer to be retrieved",
              "type": "string",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.get",
          "description": "Retrieves a customer.",
          "response": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "path": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ]
        },
        "update": {
          "request": {
            "$ref": "Customer"
          },
          "httpMethod": "PUT",
          "parameters": {
            "customerKey": {
              "location": "path",
              "description": "Id of the customer to be updated",
              "required": true,
              "type": "string"
            }
          },
          "response": {
            "$ref": "Customer"
          },
          "id": "directory.customers.update",
          "path": "admin/directory/v1/customers/{customerKey}",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "description": "Updates a customer.",
          "parameterOrder": [
            "customerKey"
          ]
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "httpMethod": "GET",
          "id": "directory.roleAssignments.get",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameters": {
            "roleAssignmentId": {
              "type": "string",
              "description": "Immutable ID of the role assignment.",
              "required": true,
              "location": "path"
            },
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "description": "Retrieve a role assignment.",
          "response": {
            "$ref": "RoleAssignment"
          }
        },
        "insert": {
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "description": "Creates a role assignment.",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.roleAssignments.insert",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "response": {
            "$ref": "RoleAssignment"
          },
          "request": {
            "$ref": "RoleAssignment"
          }
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameters": {
            "roleAssignmentId": {
              "description": "Immutable ID of the role assignment.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "id": "directory.roleAssignments.delete",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "description": "Deletes a role assignment."
        },
        "list": {
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "id": "directory.roleAssignments.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "response": {
            "$ref": "RoleAssignments"
          },
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify the next page in the list.",
              "type": "string"
            },
            "maxResults": {
              "format": "int32",
              "maximum": "200",
              "type": "integer",
              "description": "Maximum number of results to return.",
              "location": "query",
              "minimum": "1"
            },
            "userKey": {
              "type": "string",
              "location": "query",
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user."
            },
            "roleId": {
              "type": "string",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "location": "query"
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "description": "Retrieves a paginated list of all roleAssignments."
        }
      }
    },
    "roles": {
      "methods": {
        "patch": {
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "response": {
            "$ref": "Role"
          },
          "httpMethod": "PATCH",
          "id": "directory.roles.patch",
          "description": "Patch role via Apiary Patch Orchestration",
          "request": {
            "$ref": "Role"
          },
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "roleId": {
              "description": "Immutable ID of the role.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "insert": {
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "description": "Creates a role.",
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roles.insert",
          "httpMethod": "POST",
          "request": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles"
        },
        "get": {
          "response": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "roleId": {
              "description": "Immutable ID of the role.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "description": "Retrieves a role.",
          "id": "directory.roles.get",
          "httpMethod": "GET"
        },
        "delete": {
          "id": "directory.roles.delete",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            },
            "roleId": {
              "description": "Immutable ID of the role.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Deletes a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true
            },
            "maxResults": {
              "type": "integer",
              "format": "int32",
              "maximum": "100",
              "description": "Maximum number of results to return.",
              "minimum": "1",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify the next page in the list."
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles",
          "response": {
            "$ref": "Roles"
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "id": "directory.roles.list",
          "description": "Retrieves a paginated list of all the roles in a domain."
        },
        "update": {
          "httpMethod": "PUT",
          "id": "directory.roles.update",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "request": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Updates a role.",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            },
            "roleId": {
              "description": "Immutable ID of the role.",
              "location": "path",
              "type": "string",
              "required": true
            }
          }
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "Privileges"
          },
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            }
          },
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "id": "directory.privileges.list",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges"
        }
      }
    }
  },
  "fullyEncodeReservedExpansion": true,
  "name": "admin",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        }
      }
    }
  },
  "protocol": "rest",
  "parameters": {
    "prettyPrint": {
      "type": "boolean",
      "default": "true",
      "location": "query",
      "description": "Returns response with indentations and line breaks."
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "alt": {
      "description": "Data format for response.",
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ]
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "$.xgafv": {
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ]
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    }
  },
  "basePath": "",
  "version": "directory_v1",
  "baseUrl": "https://www.googleapis.com/",
  "title": "Admin SDK",
  "kind": "discovery#restDescription",
  "ownerDomain": "google.com",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "rootUrl": "https://www.googleapis.com/",
  "batchPath": "batch/admin/directory_v1"
}
