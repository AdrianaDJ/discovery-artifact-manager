{
  "parameters": {
    "alt": {
      "default": "json",
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query",
      "type": "boolean"
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "location": "query"
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    }
  },
  "ownerName": "Google",
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "rootUrl": "https://www.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "schemas": {
    "BuildingAddress": {
      "id": "BuildingAddress",
      "description": "Public API: Resources.buildings",
      "properties": {
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        },
        "administrativeArea": {
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region.",
          "type": "string"
        },
        "locality": {
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.",
          "type": "string"
        },
        "postalCode": {
          "description": "Optional. Postal code of the address.",
          "type": "string"
        },
        "addressLines": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unstructured address lines describing the lower levels of an address."
        },
        "languageCode": {
          "description": "Optional. BCP-47 language code of the contents of this address (if known).",
          "type": "string"
        },
        "sublocality": {
          "description": "Optional. Sublocality of the address.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Group": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "description": {
          "description": "Description of the group",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of Group (Read-only)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#group",
          "description": "Kind of resource this is."
        },
        "directMembersCount": {
          "type": "string",
          "description": "Group direct members count",
          "format": "int64"
        },
        "nonEditableAliases": {
          "description": "List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Group name"
        },
        "aliases": {
          "description": "List of aliases (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "adminCreated": {
          "type": "boolean",
          "description": "Is the group created by admin (Read-only) *"
        },
        "email": {
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "type": "string",
          "description": "Email of Group"
        }
      },
      "type": "object",
      "id": "Group"
    },
    "UserWebsite": {
      "type": "object",
      "id": "UserWebsite",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "primary": {
          "description": "If this is user's primary website or not.",
          "type": "boolean"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "value": {
          "description": "Website.",
          "type": "string"
        }
      },
      "description": "JSON template for a website entry."
    },
    "MobileDevices": {
      "properties": {
        "mobiledevices": {
          "description": "List of Mobile Device objects.",
          "items": {
            "$ref": "MobileDevice"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#mobiledevices"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object",
      "id": "MobileDevices"
    },
    "Domains2": {
      "properties": {
        "domains": {
          "items": {
            "$ref": "Domains"
          },
          "description": "List of domain objects.",
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#domains",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object",
      "id": "Domains2"
    },
    "FeatureInstance": {
      "description": "JSON template for a feature instance.",
      "type": "object",
      "id": "FeatureInstance",
      "properties": {
        "feature": {
          "$ref": "Feature",
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature."
        }
      }
    },
    "RoleAssignments": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#roleAssignments",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments .",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "RoleAssignment"
          },
          "description": "A list of RoleAssignment resources.",
          "type": "array"
        }
      },
      "id": "RoleAssignments",
      "type": "object"
    },
    "Schema": {
      "properties": {
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "Display name for the schema.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "schemaName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "Schema name"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#schema",
          "description": "Kind of resource this is."
        },
        "fields": {
          "description": "Fields of Schema",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "array",
          "items": {
            "$ref": "SchemaFieldSpec"
          }
        },
        "schemaId": {
          "description": "Unique identifier of Schema (Read-only)",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Schema",
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserExternalId": {
      "id": "UserExternalId",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "value": {
          "description": "The value of the id.",
          "type": "string"
        },
        "type": {
          "description": "The type of the Id.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for an externalId entry."
    },
    "Member": {
      "properties": {
        "email": {
          "description": "Email of member (Read-only)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#member",
          "description": "Kind of resource this is."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey."
        },
        "role": {
          "description": "Role of member",
          "type": "string"
        },
        "delivery_settings": {
          "type": "string",
          "description": "Delivery settings of member"
        },
        "type": {
          "type": "string",
          "description": "Type of member (Immutable)"
        },
        "status": {
          "description": "Status of member (Immutable)",
          "type": "string"
        }
      },
      "id": "Member",
      "type": "object"
    },
    "Feature": {
      "description": "JSON template for Feature object in Directory API.",
      "id": "Feature",
      "properties": {
        "name": {
          "description": "The name of the feature.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          }
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#resources#features#Feature",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "type": "object"
    },
    "UserAbout": {
      "id": "UserAbout",
      "properties": {
        "value": {
          "type": "string",
          "description": "Actual value of notes."
        },
        "contentType": {
          "type": "string",
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text."
        }
      },
      "description": "JSON template for About (notes) of a user in Directory API.",
      "type": "object"
    },
    "UserPhone": {
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary phone or not."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Phone number."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "description": "JSON template for a phone entry.",
      "id": "UserPhone",
      "type": "object"
    },
    "OrgUnit": {
      "properties": {
        "orgUnitId": {
          "type": "string",
          "description": "Id of OrgUnit"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "Path of OrgUnit"
        },
        "description": {
          "description": "Description of OrgUnit",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "blockInheritance": {
          "description": "Should block inheritance",
          "type": "boolean"
        },
        "parentOrgUnitPath": {
          "description": "Path of parent OrgUnit",
          "type": "string"
        },
        "name": {
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          },
          "description": "Name of OrgUnit",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#orgUnit",
          "description": "Kind of resource this is."
        },
        "parentOrgUnitId": {
          "type": "string",
          "description": "Id of parent OrgUnit"
        }
      },
      "type": "object",
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "OrgUnit"
    },
    "Token": {
      "properties": {
        "displayText": {
          "description": "The displayable name of the application the token is issued to.",
          "type": "string"
        },
        "anonymous": {
          "type": "boolean",
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "scopes": {
          "description": "A list of authorization scopes the application is granted.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nativeApp": {
          "type": "boolean",
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device."
        },
        "userKey": {
          "description": "The unique ID of the user that issued the token.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#token.",
          "default": "admin#directory#token"
        },
        "clientId": {
          "type": "string",
          "description": "The Client ID of the application the token is issued to."
        }
      },
      "type": "object",
      "id": "Token",
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserSshPublicKey": {
      "description": "JSON template for a POSIX account entry.",
      "properties": {
        "fingerprint": {
          "readOnly": true,
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
          "type": "string"
        },
        "key": {
          "description": "An SSH public key.",
          "type": "string"
        },
        "expirationTimeUsec": {
          "format": "int64",
          "type": "string",
          "description": "An expiration time in microseconds since epoch."
        }
      },
      "id": "UserSshPublicKey",
      "type": "object"
    },
    "ChromeOsDevices": {
      "id": "ChromeOsDevices",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#chromeosdevices",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "chromeosdevices": {
          "type": "array",
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "description": "List of Chrome OS Device objects."
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        }
      }
    },
    "UserLanguage": {
      "id": "UserLanguage",
      "type": "object",
      "description": "JSON template for a language entry.",
      "properties": {
        "customLanguage": {
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set",
          "type": "string"
        },
        "languageCode": {
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.",
          "type": "string"
        }
      }
    },
    "ChromeOsDeviceAction": {
      "type": "object",
      "id": "ChromeOsDeviceAction",
      "properties": {
        "deprovisionReason": {
          "type": "string"
        },
        "action": {
          "description": "Action to be taken on the ChromeOs Device",
          "type": "string",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          }
        }
      }
    },
    "CustomerPostalAddress": {
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "contactName": {
          "type": "string",
          "description": "The customer contact's name."
        },
        "region": {
          "type": "string",
          "description": "Name of the region. An example of a region value is NY for the state of New York."
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        },
        "locality": {
          "type": "string",
          "description": "Name of the locality. An example of a locality value is the city of San Francisco."
        },
        "addressLine2": {
          "description": "Address line 2 of the address.",
          "type": "string"
        },
        "addressLine3": {
          "description": "Address line 3 of the address.",
          "type": "string"
        },
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        },
        "postalCode": {
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element.",
          "type": "string"
        },
        "countryCode": {
          "type": "string",
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements."
        }
      },
      "id": "CustomerPostalAddress"
    },
    "Features": {
      "description": "Public API: Resources.features",
      "type": "object",
      "id": "Features",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "features": {
          "type": "array",
          "items": {
            "$ref": "Feature"
          },
          "description": "The Features in this page of results."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#features#featuresList"
        }
      }
    },
    "Users": {
      "properties": {
        "users": {
          "description": "List of user objects.",
          "type": "array",
          "items": {
            "$ref": "User"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "trigger_event": {
          "description": "Event that triggered this response (only used in case of Push Response)",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#users",
          "type": "string"
        }
      },
      "id": "Users",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Aliases": {
      "description": "JSON response template to list aliases in Directory API.",
      "properties": {
        "etag": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#aliases",
          "type": "string"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        }
      },
      "type": "object",
      "id": "Aliases"
    },
    "UserIm": {
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary im. Only one entry could be marked as primary."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customProtocol": {
          "type": "string",
          "description": "Custom protocol."
        },
        "im": {
          "description": "Instant messenger id.",
          "type": "string"
        },
        "protocol": {
          "type": "string",
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field."
        }
      },
      "description": "JSON template for instant messenger of an user.",
      "id": "UserIm",
      "type": "object"
    },
    "MembersHasMember": {
      "properties": {
        "isMember": {
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "type": "object",
      "description": "JSON template for Has Member response in Directory API.",
      "id": "MembersHasMember"
    },
    "Members": {
      "type": "object",
      "id": "Members",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#members"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "members": {
          "description": "List of member objects.",
          "items": {
            "$ref": "Member"
          },
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "UserGender": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Gender."
        },
        "addressMeAs": {
          "type": "string",
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their."
        },
        "customGender": {
          "description": "Custom gender.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserGender"
    },
    "Domains": {
      "id": "Domains",
      "type": "object",
      "properties": {
        "isPrimary": {
          "type": "boolean",
          "description": "Indicates if the domain is a primary domain (Read-only)."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "domainName": {
          "description": "The domain name of the customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "type": "string"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain. (Read-only)."
        },
        "creationTime": {
          "format": "int64",
          "description": "Creation time of the domain. (Read-only).",
          "type": "string"
        },
        "domainAliases": {
          "type": "array",
          "description": "List of domain alias objects. (Read-only)",
          "items": {
            "$ref": "DomainAlias"
          }
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domain",
          "description": "Kind of resource this is."
        }
      }
    },
    "UserPhoto": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "width": {
          "type": "integer",
          "description": "Width in pixels of the photo",
          "format": "int32"
        },
        "kind": {
          "default": "admin#directory#user#photo",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "height": {
          "type": "integer",
          "description": "Height in pixels of the photo",
          "format": "int32"
        },
        "mimeType": {
          "description": "Mime Type of the photo",
          "type": "string"
        },
        "primaryEmail": {
          "type": "string",
          "description": "Primary email of User (Read-only)"
        },
        "photoData": {
          "format": "byte",
          "type": "string",
          "description": "Base64 encoded photo data",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          }
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        }
      },
      "id": "UserPhoto",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "VerificationCode": {
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "verificationCode": {
          "type": "string",
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#verificationCode",
          "description": "The type of the resource. This is always admin#directory#verificationCode."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "userId": {
          "type": "string",
          "description": "The obfuscated unique ID of the user."
        }
      },
      "id": "VerificationCode"
    },
    "CalendarResources": {
      "id": "CalendarResources",
      "properties": {
        "kind": {
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList.",
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "description": "The CalendarResources in this page of results.",
          "type": "array",
          "items": {
            "$ref": "CalendarResource"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        }
      },
      "description": "Public API: Resources.calendars",
      "type": "object"
    },
    "Roles": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#roles",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roles."
        },
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "description": "A list of Role resources.",
          "type": "array",
          "items": {
            "$ref": "Role"
          }
        }
      },
      "id": "Roles"
    },
    "CalendarResource": {
      "description": "Public API: Resources.calendars",
      "id": "CalendarResource",
      "type": "object",
      "properties": {
        "kind": {
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "default": "admin#directory#resources#calendars#CalendarResource",
          "type": "string"
        },
        "resourceType": {
          "description": "The type of the calendar resource, intended for non-room resources.",
          "type": "string"
        },
        "buildingId": {
          "type": "string",
          "description": "Unique ID for the building a resource is located in."
        },
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        },
        "floorName": {
          "type": "string",
          "description": "Name of the floor a resource is located on."
        },
        "resourceName": {
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          }
        },
        "featureInstances": {
          "type": "any",
          "description": "Instances of features for the calendar resource."
        },
        "resourceCategory": {
          "type": "string",
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN."
        },
        "resourceId": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string",
          "description": "The unique ID for the calendar resource."
        },
        "floorSection": {
          "type": "string",
          "description": "Name of the section within a floor a resource is located in."
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "Capacity of a resource, number of seats in a room."
        },
        "generatedResourceName": {
          "type": "string",
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\"."
        },
        "resourceEmail": {
          "type": "string",
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource."
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "Tokens": {
      "type": "object",
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Tokens",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#tokenList.",
          "default": "admin#directory#tokenList"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Token"
          },
          "description": "A list of Token resources."
        }
      }
    },
    "UserOrganization": {
      "id": "UserOrganization",
      "type": "object",
      "description": "JSON template for an organization entry.",
      "properties": {
        "title": {
          "description": "Title (designation) of the user in the organization.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "primary": {
          "type": "boolean",
          "description": "If it user's primary organization."
        },
        "description": {
          "description": "Description of the organization.",
          "type": "string"
        },
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "domain": {
          "type": "string",
          "description": "The domain to which the organization belongs to."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.",
          "type": "string"
        },
        "fullTimeEquivalent": {
          "format": "int32",
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
          "type": "integer"
        },
        "name": {
          "type": "string",
          "description": "Name of the organization"
        },
        "symbol": {
          "description": "Symbol of the organization.",
          "type": "string"
        },
        "costCenter": {
          "type": "string",
          "description": "The cost center of the users department."
        }
      }
    },
    "RoleAssignment": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "roleId": {
          "description": "The ID of the role that is assigned.",
          "format": "int64",
          "type": "string"
        },
        "orgUnitId": {
          "type": "string",
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to."
        },
        "scopeType": {
          "type": "string",
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT "
        },
        "roleAssignmentId": {
          "description": "ID of this roleAssignment.",
          "type": "string",
          "format": "int64"
        },
        "kind": {
          "default": "admin#directory#roleAssignment",
          "description": "The type of the API resource. This is always admin#directory#roleAssignment.",
          "type": "string"
        },
        "assignedTo": {
          "description": "The unique ID of the user this role is assigned to.",
          "type": "string"
        }
      },
      "id": "RoleAssignment",
      "type": "object"
    },
    "FeatureRename": {
      "properties": {
        "newName": {
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          },
          "type": "string",
          "description": "New name of the feature."
        }
      },
      "id": "FeatureRename",
      "type": "object"
    },
    "Customer": {
      "type": "object",
      "properties": {
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain"
        },
        "customerDomain": {
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer.",
          "type": "string"
        },
        "postalAddress": {
          "$ref": "CustomerPostalAddress",
          "description": "The customer's postal address information."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#customer",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer"
        },
        "id": {
          "description": "The unique ID for the customer's G Suite account. (Readonly)",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "customerCreationTime": {
          "description": "The customer's creation time (Readonly)",
          "type": "string",
          "format": "date-time"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The customer's contact phone number in E.164 format."
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. The default value is en-US",
          "type": "string"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Customer"
    },
    "UserAddress": {
      "id": "UserAddress",
      "description": "JSON template for address.",
      "type": "object",
      "properties": {
        "countryCode": {
          "description": "Country code.",
          "type": "string"
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "streetAddress": {
          "type": "string",
          "description": "Street."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "formatted": {
          "description": "Formatted address.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary address. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "poBox": {
          "type": "string",
          "description": "Other parts of address."
        },
        "locality": {
          "description": "Locality.",
          "type": "string"
        },
        "country": {
          "type": "string",
          "description": "Country."
        },
        "sourceIsStructured": {
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered.",
          "type": "boolean"
        },
        "region": {
          "type": "string",
          "description": "Region."
        },
        "extendedAddress": {
          "type": "string",
          "description": "Extended Address."
        }
      }
    },
    "UserUndelete": {
      "properties": {
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        }
      },
      "id": "UserUndelete",
      "type": "object"
    },
    "MobileDeviceAction": {
      "id": "MobileDeviceAction",
      "properties": {
        "action": {
          "type": "string",
          "description": "Action to be taken on the Mobile Device",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          }
        }
      },
      "type": "object"
    },
    "Privilege": {
      "type": "object",
      "properties": {
        "childPrivileges": {
          "items": {
            "$ref": "Privilege"
          },
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "type": "array"
        },
        "isOuScopable": {
          "description": "If the privilege can be restricted to an organization unit.",
          "type": "boolean"
        },
        "serviceId": {
          "type": "string",
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
        },
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#privilege",
          "description": "The type of the API resource. This is always admin#directory#privilege."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "serviceName": {
          "type": "string",
          "description": "The name of the service this privilege is for."
        }
      },
      "id": "Privilege"
    },
    "UserCustomProperties": {
      "id": "UserCustomProperties",
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "type": "object"
    },
    "UserPosixAccount": {
      "properties": {
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        },
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        },
        "gid": {
          "format": "uint64",
          "description": "The default group ID.",
          "type": "string"
        },
        "gecos": {
          "description": "The GECOS (user information) for this account.",
          "type": "string"
        },
        "uid": {
          "description": "The POSIX compliant user ID.",
          "type": "string",
          "format": "uint64"
        },
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "operatingSystemType": {
          "description": "The operating system type for this account.",
          "type": "string"
        },
        "accountId": {
          "type": "string",
          "description": "A POSIX account field identifier."
        },
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        },
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        }
      },
      "id": "UserPosixAccount",
      "type": "object",
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix."
    },
    "UserLocation": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value."
        },
        "deskCode": {
          "description": "Most specific textual code of individual desk location.",
          "type": "string"
        },
        "buildingId": {
          "type": "string",
          "description": "Building Identifier."
        },
        "floorName": {
          "description": "Floor name/number.",
          "type": "string"
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "floorSection": {
          "type": "string",
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values."
        }
      },
      "description": "JSON template for a location entry.",
      "type": "object",
      "id": "UserLocation"
    },
    "ChromeOsMoveDevicesToOu": {
      "id": "ChromeOsMoveDevicesToOu",
      "properties": {
        "deviceIds": {
          "description": "ChromeOs Devices to be moved to OU",
          "type": "array",
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "VerificationCodes": {
      "type": "object",
      "id": "VerificationCodes",
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#verificationCodesList",
          "description": "The type of the resource. This is always admin#directory#verificationCodesList."
        },
        "items": {
          "description": "A list of verification code resources.",
          "items": {
            "$ref": "VerificationCode"
          },
          "type": "array"
        }
      }
    },
    "Asps": {
      "id": "Asps",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "description": "A list of ASP resources.",
          "items": {
            "$ref": "Asp"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#aspList.",
          "default": "admin#directory#aspList"
        }
      }
    },
    "Schemas": {
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#schemas",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "schemas": {
          "type": "array",
          "description": "List of UserSchema objects.",
          "items": {
            "$ref": "Schema"
          }
        }
      },
      "id": "Schemas"
    },
    "BuildingCoordinates": {
      "id": "BuildingCoordinates",
      "type": "object",
      "description": "Public API: Resources.buildings",
      "properties": {
        "latitude": {
          "format": "double",
          "type": "number",
          "description": "Latitude in decimal degrees."
        },
        "longitude": {
          "type": "number",
          "description": "Longitude in decimal degrees.",
          "format": "double"
        }
      }
    },
    "UserName": {
      "properties": {
        "givenName": {
          "type": "string",
          "description": "First Name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "familyName": {
          "type": "string",
          "description": "Last Name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "fullName": {
          "type": "string",
          "description": "Full Name"
        }
      },
      "id": "UserName",
      "type": "object"
    },
    "UserMakeAdmin": {
      "type": "object",
      "id": "UserMakeAdmin",
      "properties": {
        "status": {
          "description": "Boolean indicating new admin status of the user",
          "type": "boolean",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          }
        }
      }
    },
    "UserEmail": {
      "description": "JSON template for an email.",
      "properties": {
        "address": {
          "description": "Email id of the user.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary email. Only one entry could be marked as primary."
        }
      },
      "id": "UserEmail",
      "type": "object"
    },
    "Role": {
      "id": "Role",
      "properties": {
        "roleDescription": {
          "type": "string",
          "description": "A short description of the role."
        },
        "roleId": {
          "type": "string",
          "format": "int64",
          "description": "ID of the role."
        },
        "kind": {
          "default": "admin#directory#role",
          "description": "The type of the API resource. This is always admin#directory#role.",
          "type": "string"
        },
        "rolePrivileges": {
          "description": "The set of privileges that are granted to this role.",
          "items": {
            "properties": {
              "serviceId": {
                "type": "string",
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
              },
              "privilegeName": {
                "description": "The name of the privilege.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          }
        },
        "isSystemRole": {
          "description": "Returns true if this is a pre-defined system role.",
          "type": "boolean"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "isSuperAdminRole": {
          "type": "boolean",
          "description": "Returns true if the role is a super admin role."
        },
        "roleName": {
          "description": "Name of the role.",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "string"
        }
      },
      "type": "object"
    },
    "Asp": {
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Asp",
      "type": "object",
      "properties": {
        "lastTimeUsed": {
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "format": "int64",
          "type": "string"
        },
        "codeId": {
          "type": "integer",
          "format": "int32",
          "description": "The unique ID of the ASP."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#asp",
          "description": "The type of the API resource. This is always admin#directory#asp."
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user who issued the ASP."
        },
        "name": {
          "type": "string",
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created."
        },
        "creationTime": {
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "format": "int64",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the ASP.",
          "type": "string"
        }
      }
    },
    "DomainAliases": {
      "id": "DomainAliases",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAliases"
        },
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "description": "List of domain alias objects.",
          "type": "array"
        }
      }
    },
    "Privileges": {
      "id": "Privileges",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "description": "A list of Privilege resources.",
          "type": "array",
          "items": {
            "$ref": "Privilege"
          }
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "type": "string",
          "default": "admin#directory#privileges"
        }
      },
      "type": "object"
    },
    "MobileDevice": {
      "properties": {
        "deviceId": {
          "type": "string",
          "description": "Mobile Device serial number (Read-only)"
        },
        "hardwareId": {
          "description": "Mobile Device Hardware Id (Read-only)",
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Status of the device (Read-only)"
        },
        "unknownSourcesStatus": {
          "description": "Unknown sources enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "wifiMacAddress": {
          "type": "string",
          "description": "Mobile Device WiFi MAC address (Read-only)"
        },
        "encryptionStatus": {
          "type": "string",
          "description": "Mobile Device Encryption Status (Read-only)"
        },
        "adbStatus": {
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "networkOperator": {
          "description": "Mobile Device mobile or network operator (if available) (Read-only)",
          "type": "string"
        },
        "otherAccountsInfo": {
          "type": "array",
          "description": "List of accounts added on device (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "userAgent": {
          "description": "Mobile Device user agent",
          "type": "string"
        },
        "defaultLanguage": {
          "description": "The default locale used on the Mobile Device (Read-only)",
          "type": "string"
        },
        "buildNumber": {
          "type": "string",
          "description": "Mobile Device Build number (Read-only)"
        },
        "devicePasswordStatus": {
          "type": "string",
          "description": "DevicePasswordStatus (Read-only)"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "developerOptionsStatus": {
          "type": "boolean",
          "description": "Developer options enabled or disabled on device (Read-only)"
        },
        "imei": {
          "type": "string",
          "description": "Mobile Device IMEI number (Read-only)"
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "securityPatchLevel": {
          "format": "int64",
          "type": "string",
          "description": "Mobile Device Security patch level (Read-only)"
        },
        "bootloaderVersion": {
          "description": "Mobile Device Bootloader version (Read-only)",
          "type": "string"
        },
        "privilege": {
          "type": "string",
          "description": "DMAgentPermission (Read-only)"
        },
        "kind": {
          "default": "admin#directory#mobiledevice",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "supportsWorkProfile": {
          "description": "Work profile supported on device (Read-only)",
          "type": "boolean"
        },
        "applications": {
          "description": "List of applications installed on Mobile Device",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "permission": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "List of Permissions for application"
              },
              "versionCode": {
                "type": "integer",
                "format": "int32",
                "description": "Version code of application"
              },
              "versionName": {
                "description": "Version name of application",
                "type": "string"
              },
              "displayName": {
                "description": "Display name of application",
                "type": "string"
              },
              "packageName": {
                "description": "Package name of application",
                "type": "string"
              }
            }
          }
        },
        "serialNumber": {
          "description": "Mobile Device SSN or Serial Number (Read-only)",
          "type": "string"
        },
        "deviceCompromisedStatus": {
          "type": "string",
          "description": "Mobile Device compromised status (Read-only)"
        },
        "type": {
          "type": "string",
          "description": "The type of device (Read-only)"
        },
        "firstSync": {
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "kernelVersion": {
          "type": "string",
          "description": "Mobile Device Kernel version (Read-only)"
        },
        "basebandVersion": {
          "description": "Mobile Device Baseband version (Read-only)",
          "type": "string"
        },
        "lastSync": {
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        },
        "os": {
          "description": "Name of the mobile operating system",
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "description": "Unique identifier of Mobile Device (Read-only)"
        },
        "brand": {
          "description": "Mobile Device Brand (Read-only)",
          "type": "string"
        },
        "manufacturer": {
          "description": "Mobile Device manufacturer (Read-only)",
          "type": "string"
        },
        "managedAccountIsOnOwnerProfile": {
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)",
          "type": "boolean"
        },
        "model": {
          "type": "string",
          "description": "Name of the model of the device"
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "email": {
          "items": {
            "type": "string"
          },
          "description": "List of owner user's email addresses (Read-only)",
          "type": "array"
        },
        "name": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of owner user's names (Read-only)"
        },
        "meid": {
          "type": "string",
          "description": "Mobile Device MEID number (Read-only)"
        }
      },
      "id": "MobileDevice",
      "type": "object"
    },
    "DomainAlias": {
      "id": "DomainAlias",
      "properties": {
        "parentDomainName": {
          "type": "string",
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        },
        "domainAliasName": {
          "type": "string",
          "description": "The domain alias name."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "creationTime": {
          "type": "string",
          "description": "The creation time of the domain alias. (Read-only).",
          "format": "int64"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain alias. (Read-only)"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAlias",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserRelation": {
      "type": "object",
      "description": "JSON template for a relation entry.",
      "properties": {
        "type": {
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "value": {
          "description": "The name of the relation.",
          "type": "string"
        }
      },
      "id": "UserRelation"
    },
    "User": {
      "id": "User",
      "type": "object",
      "properties": {
        "isEnforcedIn2Sv": {
          "type": "boolean",
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "readOnly": true
        },
        "changePasswordAtNextLogin": {
          "description": "Boolean indicating if the user should change password in next login",
          "type": "boolean"
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array",
          "description": "Output only. List of aliases (Read-only)"
        },
        "etag": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. ETag of the resource."
        },
        "sshPublicKeys": {
          "type": "any",
          "description": "The SSH public keys of User"
        },
        "suspensionReason": {
          "description": "Output only. Suspension reason if user is suspended (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "isEnrolledIn2Sv": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Is enrolled in 2-step verification (Read-only)"
        },
        "ims": {
          "type": "any",
          "description": "User's Instant Messenger"
        },
        "thumbnailPhotoUrl": {
          "description": "Output only. Photo Url of the user (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "externalIds": {
          "description": "The external Ids of User *",
          "type": "any"
        },
        "name": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's name",
          "$ref": "UserName"
        },
        "hashFunction": {
          "type": "string",
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt"
        },
        "thumbnailPhotoEtag": {
          "description": "Output only. ETag of the user's photo (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "primaryEmail": {
          "type": "string",
          "description": "username of User",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "notes": {
          "type": "any",
          "description": "Notes of User"
        },
        "relations": {
          "type": "any",
          "description": "The Relations of User *"
        },
        "locations": {
          "description": "Locations of User",
          "type": "any"
        },
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        },
        "recoveryEmail": {
          "description": "Recovery email of the user.",
          "type": "string"
        },
        "recoveryPhone": {
          "type": "string",
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*."
        },
        "isAdmin": {
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "creationTime": {
          "format": "date-time",
          "readOnly": true,
          "type": "string",
          "description": "User's G Suite account creation time. (Read-only)"
        },
        "archived": {
          "description": "Indicates if user is archived.",
          "type": "boolean"
        },
        "password": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's password",
          "type": "string"
        },
        "languages": {
          "description": "Languages of User",
          "type": "any"
        },
        "isDelegatedAdmin": {
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "customSchemas": {
          "description": "Custom fields of the user.",
          "type": "object",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          }
        },
        "lastLoginTime": {
          "readOnly": true,
          "description": "User's last login time. (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "emails": {
          "description": "Emails of User",
          "type": "any"
        },
        "kind": {
          "default": "admin#directory#user",
          "description": "Output only. Kind of resource this is.",
          "readOnly": true,
          "type": "string"
        },
        "organizations": {
          "type": "any",
          "description": "Organizations of User"
        },
        "phones": {
          "type": "any",
          "description": "Phone numbers of User"
        },
        "deletionTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "websites": {
          "description": "Websites of User",
          "type": "any"
        },
        "gender": {
          "type": "any",
          "description": "Gender of User"
        },
        "nonEditableAliases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. List of non editable aliases (Read-only)",
          "readOnly": true
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "Boolean indicating if ip is whitelisted"
        },
        "agreedToTerms": {
          "readOnly": true,
          "description": "Output only. Indicates if user has agreed to terms (Read-only)",
          "type": "boolean"
        },
        "isMailboxSetup": {
          "readOnly": true,
          "description": "Output only. Is mailbox setup (Read-only)",
          "type": "boolean"
        },
        "customerId": {
          "type": "string",
          "description": "Output only. CustomerId of User (Read-only)",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "posixAccounts": {
          "description": "The POSIX accounts of User",
          "type": "any"
        },
        "includeInGlobalAddressList": {
          "type": "boolean",
          "description": "Boolean indicating if user is included in Global Address List"
        },
        "keywords": {
          "description": "Keywords of User",
          "type": "any"
        },
        "suspended": {
          "description": "Indicates if user is suspended.",
          "type": "boolean"
        },
        "addresses": {
          "description": "Addresses of User",
          "type": "any"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)"
    },
    "SchemaFieldSpec": {
      "id": "SchemaFieldSpec",
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "indexed": {
          "type": "boolean",
          "default": "true",
          "description": "Boolean specifying whether the field is indexed or not."
        },
        "numericIndexingSpec": {
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "type": "object",
          "properties": {
            "maxValue": {
              "format": "double",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "type": "number"
            },
            "minValue": {
              "type": "number",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double"
            }
          }
        },
        "readAccessType": {
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\".",
          "type": "string",
          "default": "ALL_DOMAIN_USERS"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#schema#fieldspec"
        },
        "multiValued": {
          "description": "Boolean specifying whether this is a multi-valued field or not.",
          "type": "boolean"
        },
        "fieldId": {
          "description": "Unique identifier of Field (Read-only)",
          "type": "string"
        },
        "fieldName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Name of the field."
        },
        "fieldType": {
          "description": "Type of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        },
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string",
          "description": "Display Name of the field."
        }
      },
      "type": "object"
    },
    "OrgUnits": {
      "properties": {
        "kind": {
          "default": "admin#directory#orgUnits",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "organizationUnits": {
          "items": {
            "$ref": "OrgUnit"
          },
          "description": "List of user objects.",
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "OrgUnits",
      "type": "object",
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "ChromeOsDevice": {
      "type": "object",
      "id": "ChromeOsDevice",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "status": {
          "type": "string",
          "description": "status of the device (Read-only)"
        },
        "systemRamFreeReports": {
          "type": "array",
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "systemRamFreeInfo": {
                "items": {
                  "type": "string",
                  "format": "int64"
                },
                "type": "array"
              },
              "reportTime": {
                "format": "date-time",
                "type": "string",
                "description": "Date and time the report was received."
              }
            }
          }
        },
        "bootMode": {
          "description": "Chromebook boot mode (Read-only)",
          "type": "string"
        },
        "willAutoRenew": {
          "description": "Will Chromebook auto renew after support end date (Read-only)",
          "type": "boolean"
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "annotatedUser": {
          "description": "User of the device",
          "type": "string"
        },
        "lastEnrollmentTime": {
          "description": "Date and time the device was last enrolled (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "deviceId": {
          "type": "string",
          "description": "Unique identifier of Chrome OS Device (Read-only)"
        },
        "annotatedAssetId": {
          "description": "AssetId specified during enrollment or through later annotation",
          "type": "string"
        },
        "annotatedLocation": {
          "type": "string",
          "description": "Address or location of the device as noted by the administrator"
        },
        "manufactureDate": {
          "type": "string",
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format."
        },
        "orgUnitPath": {
          "description": "OrgUnit of the device",
          "type": "string"
        },
        "platformVersion": {
          "type": "string",
          "description": "Chromebook platform version (Read-only)"
        },
        "systemRamTotal": {
          "type": "string",
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "format": "int64"
        },
        "cpuStatusReports": {
          "description": "Reports of CPU utilization and temperature (Read-only)",
          "items": {
            "properties": {
              "cpuUtilizationPercentageInfo": {
                "type": "array",
                "items": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "cpuTemperatureInfo": {
                "type": "array",
                "description": "List of CPU temperature samples.",
                "items": {
                  "properties": {
                    "temperature": {
                      "format": "int32",
                      "type": "integer",
                      "description": "Temperature in Celsius degrees."
                    },
                    "label": {
                      "description": "CPU label",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "reportTime": {
                "format": "date-time",
                "type": "string",
                "description": "Date and time the report was received."
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "ethernetMacAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)"
        },
        "firmwareVersion": {
          "type": "string",
          "description": "Chromebook firmware version (Read-only)"
        },
        "activeTimeRanges": {
          "description": "List of active time ranges (Read-only)",
          "items": {
            "properties": {
              "date": {
                "description": "Date of usage",
                "format": "date",
                "type": "string"
              },
              "activeTime": {
                "description": "Duration in milliseconds",
                "type": "integer",
                "format": "int32"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "notes": {
          "type": "string",
          "description": "Notes added by the administrator"
        },
        "autoUpdateExpiration": {
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "format": "int64",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#chromeosdevice"
        },
        "tpmVersionInfo": {
          "properties": {
            "specLevel": {
              "type": "string",
              "description": "TPM specification level."
            },
            "tpmModel": {
              "description": "TPM model number.",
              "type": "string"
            },
            "family": {
              "description": "TPM family.",
              "type": "string"
            },
            "vendorSpecific": {
              "type": "string",
              "description": "Vendor-specific information such as Vendor ID."
            },
            "firmwareVersion": {
              "description": "TPM firmware version.",
              "type": "string"
            },
            "manufacturer": {
              "type": "string",
              "description": "TPM manufacturer code."
            }
          },
          "type": "object",
          "description": "Trusted Platform Module (TPM) (Read-only)"
        },
        "orderNumber": {
          "type": "string",
          "description": "Chromebook order number (Read-only)"
        },
        "deviceFiles": {
          "description": "List of device files to download (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "downloadUrl": {
                "description": "File download URL",
                "type": "string"
              },
              "name": {
                "type": "string",
                "description": "File name"
              },
              "createTime": {
                "description": "Date and time the file was created",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "File type",
                "type": "string"
              }
            }
          },
          "type": "array"
        },
        "supportEndDate": {
          "format": "date-time",
          "type": "string",
          "description": "Final date the device will be supported (Read-only)"
        },
        "lastKnownNetwork": {
          "type": "array",
          "description": "Contains last known network (Read-only)",
          "items": {
            "properties": {
              "ipAddress": {
                "description": "The IP address.",
                "type": "string"
              },
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              }
            },
            "type": "object",
            "description": "Information for an ip address."
          }
        },
        "ethernetMacAddress0": {
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "model": {
          "description": "Chromebook Model (Read-only)",
          "type": "string"
        },
        "recentUsers": {
          "description": "List of recent device users, in descending order by last login time (Read-only)",
          "items": {
            "properties": {
              "email": {
                "description": "Email address of the user. Present only if the user type is managed",
                "type": "string"
              },
              "type": {
                "description": "The type of the user",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "dockMacAddress": {
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "osVersion": {
          "description": "Chromebook Os Version (Read-only)",
          "type": "string"
        },
        "serialNumber": {
          "description": "Chromebook serial number (Read-only)",
          "type": "string"
        },
        "macAddress": {
          "description": "Chromebook Mac Address on wifi network interface (Read-only)",
          "type": "string"
        },
        "meid": {
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)",
          "type": "string"
        },
        "diskVolumeReports": {
          "description": "Reports of disk space and other info about mounted/connected volumes.",
          "items": {
            "type": "object",
            "properties": {
              "volumeInfo": {
                "items": {
                  "properties": {
                    "volumeId": {
                      "type": "string",
                      "description": "Volume id"
                    },
                    "storageTotal": {
                      "type": "string",
                      "description": "Total disk space [in bytes]",
                      "format": "int64"
                    },
                    "storageFree": {
                      "format": "int64",
                      "type": "string",
                      "description": "Free disk space [in bytes]"
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "description": "Disk volumes"
              }
            }
          },
          "type": "array"
        }
      }
    },
    "Building": {
      "properties": {
        "coordinates": {
          "$ref": "BuildingCoordinates",
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#buildings#Building",
          "description": "Kind of resource this is."
        },
        "buildingId": {
          "description": "Unique identifier for the building. The maximum length is 100 characters.",
          "type": "string"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "address": {
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required.",
          "$ref": "BuildingAddress"
        },
        "floorNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry."
        },
        "buildingName": {
          "type": "string",
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the building. For example, \"Chelsea Market\"."
        }
      },
      "id": "Building",
      "description": "Public API: Resources.buildings",
      "type": "object"
    },
    "Alias": {
      "type": "object",
      "id": "Alias",
      "description": "JSON template for Alias object in Directory API.",
      "properties": {
        "id": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#alias"
        },
        "alias": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        }
      }
    },
    "UserKeyword": {
      "properties": {
        "type": {
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "value": {
          "description": "Keyword.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserKeyword",
      "description": "JSON template for a keyword entry."
    },
    "Buildings": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#buildings#buildingsList",
          "description": "Kind of resource this is."
        },
        "buildings": {
          "items": {
            "$ref": "Building"
          },
          "description": "The Buildings in this page of results.",
          "type": "array"
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Public API: Resources.buildings",
      "id": "Buildings"
    },
    "Groups": {
      "id": "Groups",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#groups",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "Group"
          },
          "description": "List of group objects."
        }
      }
    },
    "Channel": {
      "properties": {
        "payload": {
          "type": "boolean",
          "description": "A Boolean value to indicate whether payload is wanted. Optional."
        },
        "kind": {
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "default": "api#channel",
          "type": "string"
        },
        "token": {
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.",
          "type": "string"
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        },
        "resourceId": {
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "id": {
          "type": "string",
          "description": "A UUID or similar unique string that identifies this channel."
        },
        "expiration": {
          "format": "int64",
          "type": "string",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional."
        },
        "params": {
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object",
      "description": "An notification channel used to watch for resource changes.",
      "id": "Channel"
    }
  },
  "batchPath": "batch/admin/directory_v1",
  "packagePath": "admin",
  "ownerDomain": "google.com",
  "discoveryVersion": "v1",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "revision": "20200819",
  "baseUrl": "https://www.googleapis.com/",
  "resources": {
    "domains": {
      "methods": {
        "get": {
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "description": "Retrieves a domain of the customer.",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            },
            "domainName": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Name of domain to be retrieved"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "id": "directory.domains.get",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Domains"
          }
        },
        "delete": {
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domains.delete",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "description": "Deletes a domain of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameters": {
            "domainName": {
              "type": "string",
              "description": "Name of domain to be deleted",
              "required": true,
              "location": "path"
            },
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          }
        },
        "list": {
          "path": "admin/directory/v1/customer/{customer}/domains",
          "id": "directory.domains.list",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "response": {
            "$ref": "Domains2"
          },
          "description": "Lists the domains of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          }
        },
        "insert": {
          "path": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "POST",
          "id": "directory.domains.insert",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "description": "Inserts a domain of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "response": {
            "$ref": "Domains"
          },
          "request": {
            "$ref": "Domains"
          }
        }
      }
    },
    "tokens": {
      "methods": {
        "list": {
          "httpMethod": "GET",
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "response": {
            "$ref": "Tokens"
          },
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "id": "directory.tokens.list",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "get": {
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Get information about an access token issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "response": {
            "$ref": "Token"
          },
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "id": "directory.tokens.get",
          "httpMethod": "GET",
          "parameters": {
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          }
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            },
            "clientId": {
              "location": "path",
              "type": "string",
              "description": "The Client ID of the application the token is issued to.",
              "required": true
            }
          },
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "id": "directory.tokens.delete",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "description": "Delete all access tokens issued by a user for an application.",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "moveDevicesToOu": {
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "httpMethod": "POST",
          "parameters": {
            "orgUnitPath": {
              "description": "Full path of the target organizational unit or its ID",
              "required": true,
              "location": "query",
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.chromeosdevices.moveDevicesToOu"
        },
        "action": {
          "id": "directory.chromeosdevices.action",
          "httpMethod": "POST",
          "description": "Take action on Chrome OS Device",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "resourceId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of Chrome OS Device"
            }
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action"
        },
        "list": {
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            },
            "projection": {
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            },
            "orderBy": {
              "type": "string",
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "description": "Column to use for sorting results",
              "location": "query",
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ]
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333"
            },
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "maxResults": {
              "default": "100",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "format": "int32",
              "location": "query",
              "minimum": "1"
            }
          },
          "httpMethod": "GET",
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "parameterOrder": [
            "customerId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "id": "directory.chromeosdevices.list"
        },
        "get": {
          "description": "Retrieve Chrome OS Device",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "parameters": {
            "projection": {
              "type": "string",
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            },
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "deviceId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of Chrome OS Device",
              "type": "string"
            }
          },
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "httpMethod": "GET",
          "id": "directory.chromeosdevices.get",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ]
        },
        "patch": {
          "description": "Patch Chrome OS Device",
          "parameters": {
            "deviceId": {
              "required": true,
              "description": "Immutable ID of Chrome OS Device",
              "type": "string",
              "location": "path"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.chromeosdevices.patch",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "httpMethod": "PATCH"
        },
        "update": {
          "id": "directory.chromeosdevices.update",
          "description": "Update Chrome OS Device",
          "httpMethod": "PUT",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameters": {
            "projection": {
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query"
            },
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "deviceId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of Chrome OS Device",
              "type": "string"
            }
          },
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        }
      }
    },
    "orgunits": {
      "methods": {
        "patch": {
          "request": {
            "$ref": "OrgUnit"
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "id": "directory.orgunits.patch",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "required": true,
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$",
              "location": "path"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "description": "Patch organization unit via Apiary Patch Orchestration"
        },
        "list": {
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "type": {
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ],
              "type": "string",
              "location": "query",
              "description": "Whether to return all sub-organizations or just immediate children",
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ]
            },
            "orgUnitPath": {
              "type": "string",
              "description": "the URL-encoded organizational unit's path or its ID",
              "location": "query",
              "default": ""
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "response": {
            "$ref": "OrgUnits"
          },
          "httpMethod": "GET",
          "id": "directory.orgunits.list",
          "parameterOrder": [
            "customerId"
          ],
          "description": "Retrieve all organizational units",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ]
        },
        "get": {
          "httpMethod": "GET",
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$",
              "type": "string",
              "required": true
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "response": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.get",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "description": "Retrieve organizational unit"
        },
        "update": {
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "orgUnitPath": {
              "pattern": "^.*$",
              "required": true,
              "description": "Full path of the organizational unit or its ID",
              "location": "path",
              "type": "string"
            }
          },
          "description": "Update organizational unit",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "request": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "PUT",
          "id": "directory.orgunits.update",
          "response": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}"
        },
        "insert": {
          "description": "Add organizational unit",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "request": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.orgunits.insert",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits"
        },
        "delete": {
          "parameters": {
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "required": true,
              "location": "path",
              "type": "string",
              "pattern": "^.*$"
            },
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "description": "Remove organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "id": "directory.orgunits.delete"
        }
      }
    },
    "asps": {
      "methods": {
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Delete an ASP issued by a user.",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "httpMethod": "DELETE",
          "id": "directory.asps.delete",
          "parameters": {
            "codeId": {
              "location": "path",
              "format": "int32",
              "required": true,
              "type": "integer",
              "description": "The unique ID of the ASP to be deleted."
            },
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        },
        "get": {
          "id": "directory.asps.get",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "GET",
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true
            },
            "codeId": {
              "description": "The unique ID of the ASP.",
              "format": "int32",
              "location": "path",
              "required": true,
              "type": "integer"
            }
          },
          "description": "Get information about an ASP issued by a user.",
          "response": {
            "$ref": "Asp"
          },
          "parameterOrder": [
            "userKey",
            "codeId"
          ]
        },
        "list": {
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "GET",
          "description": "List the ASPs issued by a user.",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.asps.list",
          "response": {
            "$ref": "Asps"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "path": "admin/directory/v1/users/{userKey}/asps"
        }
      }
    },
    "groups": {
      "resources": {
        "aliases": {
          "methods": {
            "insert": {
              "id": "directory.groups.aliases.insert",
              "response": {
                "$ref": "Alias"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "request": {
                "$ref": "Alias"
              },
              "description": "Add a alias for the group",
              "parameterOrder": [
                "groupKey"
              ],
              "parameters": {
                "groupKey": {
                  "location": "path",
                  "type": "string",
                  "description": "Email or immutable ID of the group",
                  "required": true
                }
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "httpMethod": "POST"
            },
            "list": {
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "description": "List all aliases for a group",
              "httpMethod": "GET",
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "response": {
                "$ref": "Aliases"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "parameterOrder": [
                "groupKey"
              ],
              "id": "directory.groups.aliases.list"
            },
            "delete": {
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "id": "directory.groups.aliases.delete",
              "parameters": {
                "alias": {
                  "description": "The alias to be removed",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "description": "Remove a alias for the group"
            }
          }
        }
      },
      "methods": {
        "get": {
          "parameterOrder": [
            "groupKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.groups.get",
          "description": "Retrieve Group",
          "httpMethod": "GET"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "response": {
            "$ref": "Groups"
          },
          "id": "directory.groups.list",
          "flatPath": "admin/directory/v1/groups",
          "parameters": {
            "maxResults": {
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "location": "query",
              "default": "200",
              "minimum": "1",
              "format": "int32",
              "type": "integer"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "customer": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain."
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "location": "query",
              "enum": [
                "orderByUndefined",
                "email"
              ],
              "type": "string"
            },
            "userKey": {
              "location": "query",
              "type": "string",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object."
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups"
            },
            "domain": {
              "location": "query",
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.",
              "type": "string"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "location": "query",
              "type": "string",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            }
          },
          "path": "admin/directory/v1/groups",
          "httpMethod": "GET",
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "parameterOrder": []
        },
        "patch": {
          "response": {
            "$ref": "Group"
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.patch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            }
          },
          "request": {
            "$ref": "Group"
          },
          "description": "Patch Groups via Apiary Patch Orchestration"
        },
        "insert": {
          "request": {
            "$ref": "Group"
          },
          "id": "directory.groups.insert",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/groups",
          "description": "Create Group",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "response": {
            "$ref": "Group"
          },
          "parameterOrder": [],
          "parameters": {},
          "path": "admin/directory/v1/groups"
        },
        "update": {
          "description": "Update Group",
          "request": {
            "$ref": "Group"
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.update"
        },
        "delete": {
          "parameters": {
            "groupKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the group"
            }
          },
          "id": "directory.groups.delete",
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "httpMethod": "DELETE",
          "description": "Delete Group",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "path": "admin/directory/v1/groups/{groupKey}"
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "response": {
            "$ref": "Privileges"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "id": "directory.privileges.list"
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "RoleAssignments"
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "id": "directory.roleAssignments.list",
          "parameters": {
            "userKey": {
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "minimum": "1",
              "maximum": "200",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "location": "query",
              "format": "int32"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "type": "string",
              "location": "query"
            },
            "roleId": {
              "location": "query",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "type": "string"
            }
          },
          "description": "Retrieves a paginated list of all roleAssignments."
        },
        "delete": {
          "id": "directory.roleAssignments.delete",
          "description": "Deletes a role assignment.",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            },
            "roleAssignmentId": {
              "required": true,
              "description": "Immutable ID of the role assignment.",
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "httpMethod": "DELETE"
        },
        "get": {
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "httpMethod": "GET",
          "description": "Retrieve a role assignment.",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "roleAssignmentId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role assignment.",
              "required": true
            },
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "id": "directory.roleAssignments.get",
          "response": {
            "$ref": "RoleAssignment"
          }
        },
        "insert": {
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roleAssignments.insert",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            }
          },
          "request": {
            "$ref": "RoleAssignment"
          },
          "response": {
            "$ref": "RoleAssignment"
          },
          "description": "Creates a role assignment.",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ]
        }
      }
    },
    "members": {
      "methods": {
        "list": {
          "response": {
            "$ref": "Members"
          },
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "format": "int32",
              "type": "integer",
              "default": "200",
              "minimum": "1",
              "location": "query",
              "description": "Maximum number of results to return. Max allowed value is 200."
            },
            "roles": {
              "description": "Comma separated role values to filter list results on.",
              "type": "string",
              "location": "query"
            },
            "includeDerivedMembership": {
              "location": "query",
              "description": "Whether to list indirect memberships. Default: false.",
              "type": "boolean"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.members.list",
          "description": "Retrieve all members in a group (paginated)",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "parameterOrder": [
            "groupKey"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/groups/{groupKey}/members"
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "id": "directory.members.update",
          "request": {
            "$ref": "Member"
          },
          "httpMethod": "PUT",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "memberKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "required": true
            }
          },
          "response": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "description": "Update membership of a user in the specified group.",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "delete": {
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.delete",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "description": "Remove membership.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "memberKey": {
              "description": "Email or immutable ID of the member",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "groupKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group"
            }
          },
          "httpMethod": "DELETE"
        },
        "patch": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          },
          "id": "directory.members.patch",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "request": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "description": "Patch Member via Apiary Patch Orchestration",
          "parameters": {
            "memberKey": {
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "type": "string",
              "required": true
            },
            "groupKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "httpMethod": "PATCH"
        },
        "get": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "GET",
          "response": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "id": "directory.members.get",
          "description": "Retrieve Group Member",
          "parameters": {
            "memberKey": {
              "type": "string",
              "description": "Email or immutable ID of the member",
              "required": true,
              "location": "path"
            },
            "groupKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the group",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ]
        },
        "insert": {
          "response": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "id": "directory.members.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameterOrder": [
            "groupKey"
          ],
          "request": {
            "$ref": "Member"
          },
          "httpMethod": "POST",
          "description": "Add user to the specified group.",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group",
              "location": "path",
              "required": true
            }
          }
        },
        "hasMember": {
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "response": {
            "$ref": "MembersHasMember"
          },
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.members.hasMember",
          "parameters": {
            "memberKey": {
              "type": "string",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "required": true,
              "location": "path"
            },
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "httpMethod": "GET"
        }
      }
    },
    "domainAliases": {
      "methods": {
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "httpMethod": "DELETE",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "domainAliasName": {
              "description": "Name of domain alias to be retrieved.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "description": "Deletes a domain Alias of the customer.",
          "id": "directory.domainAliases.delete"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "description": "Retrieves a domain alias of the customer.",
          "id": "directory.domainAliases.get",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "response": {
            "$ref": "DomainAlias"
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            },
            "domainAliasName": {
              "description": "Name of domain alias to be retrieved.",
              "location": "path",
              "type": "string",
              "required": true
            }
          }
        },
        "list": {
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "response": {
            "$ref": "DomainAliases"
          },
          "parameters": {
            "parentDomainName": {
              "description": "Name of the parent domain for which domain aliases are to be fetched.",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "httpMethod": "GET",
          "id": "directory.domainAliases.list",
          "description": "Lists the domain aliases of the customer."
        },
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "response": {
            "$ref": "DomainAlias"
          },
          "request": {
            "$ref": "DomainAlias"
          },
          "id": "directory.domainAliases.insert",
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "description": "Inserts a domain alias of the customer."
        }
      }
    },
    "resources": {
      "resources": {
        "features": {
          "methods": {
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Updates a feature.",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "PUT",
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                },
                "featureKey": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the feature to update.",
                  "required": true
                }
              },
              "request": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "id": "directory.resources.features.update",
              "response": {
                "$ref": "Feature"
              }
            },
            "list": {
              "description": "Retrieves a list of features for an account.",
              "parameters": {
                "maxResults": {
                  "description": "Maximum number of results to return.",
                  "format": "int32",
                  "minimum": "1",
                  "maximum": "500",
                  "type": "integer",
                  "location": "query"
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "type": "string",
                  "location": "query"
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "customer"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "response": {
                "$ref": "Features"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.features.list",
              "httpMethod": "GET"
            },
            "insert": {
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "response": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.features.insert",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "httpMethod": "POST",
              "request": {
                "$ref": "Feature"
              },
              "description": "Inserts a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              }
            },
            "delete": {
              "description": "Deletes a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameters": {
                "featureKey": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the feature to delete."
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                }
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "id": "directory.resources.features.delete",
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "rename": {
              "id": "directory.resources.features.rename",
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                },
                "oldName": {
                  "description": "The unique ID of the feature to rename.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "request": {
                "$ref": "FeatureRename"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "description": "Renames a feature.",
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "httpMethod": "POST"
            },
            "get": {
              "id": "directory.resources.features.get",
              "httpMethod": "GET",
              "description": "Retrieves a feature.",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "featureKey": {
                  "required": true,
                  "description": "The unique ID of the feature to retrieve.",
                  "location": "path",
                  "type": "string"
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                }
              },
              "response": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "patch": {
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "httpMethod": "PATCH",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                },
                "featureKey": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the feature to update.",
                  "type": "string"
                }
              },
              "id": "directory.resources.features.patch",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "response": {
                "$ref": "Feature"
              },
              "request": {
                "$ref": "Feature"
              }
            }
          }
        },
        "calendars": {
          "methods": {
            "get": {
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a calendar resource.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.get",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ]
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameterOrder": [
                "customer"
              ],
              "description": "Retrieves a list of calendar resources for an account.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "orderBy": {
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order.",
                  "location": "query",
                  "type": "string"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Token to specify the next page in the list."
                },
                "maxResults": {
                  "format": "int32",
                  "type": "integer",
                  "maximum": "500",
                  "location": "query",
                  "minimum": "1",
                  "description": "Maximum number of results to return."
                },
                "query": {
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone.",
                  "type": "string",
                  "location": "query"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "response": {
                "$ref": "CalendarResources"
              },
              "httpMethod": "GET",
              "id": "directory.resources.calendars.list"
            },
            "insert": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "description": "Inserts a calendar resource.",
              "request": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              },
              "id": "directory.resources.calendars.insert",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "patch": {
              "response": {
                "$ref": "CalendarResource"
              },
              "httpMethod": "PATCH",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "request": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.patch",
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "description": "The unique ID of the calendar resource to update.",
                  "type": "string",
                  "location": "path"
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              }
            },
            "update": {
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "PUT",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "request": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "calendarResourceId": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the calendar resource to update.",
                  "type": "string"
                }
              },
              "id": "directory.resources.calendars.update",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ]
            },
            "delete": {
              "description": "Deletes a calendar resource.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "DELETE",
              "id": "directory.resources.calendars.delete",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "parameters": {
                "calendarResourceId": {
                  "location": "path",
                  "description": "The unique ID of the calendar resource to delete.",
                  "required": true,
                  "type": "string"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
            }
          }
        },
        "buildings": {
          "methods": {
            "get": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "id": "directory.resources.buildings.get",
              "parameters": {
                "buildingId": {
                  "description": "The unique ID of the building to retrieve.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "GET",
              "description": "Retrieves a building.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              }
            },
            "list": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "description": "Retrieves a list of buildings for an account.",
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "type": "string",
                  "location": "query"
                },
                "maxResults": {
                  "format": "int32",
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "type": "integer",
                  "location": "query",
                  "minimum": "1"
                }
              },
              "id": "directory.resources.buildings.list",
              "httpMethod": "GET",
              "response": {
                "$ref": "Buildings"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameterOrder": [
                "customer"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings"
            },
            "insert": {
              "id": "directory.resources.buildings.insert",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "Building"
              },
              "response": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer"
              ],
              "httpMethod": "POST",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "coordinatesSource": {
                  "location": "query",
                  "description": "Source from which Building.coordinates are derived.",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "type": "string",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ]
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "description": "Inserts a building.",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings"
            },
            "delete": {
              "description": "Deletes a building.",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "required": true,
                  "description": "The id of the building to delete.",
                  "location": "path"
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "DELETE",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "id": "directory.resources.buildings.delete"
            },
            "patch": {
              "httpMethod": "PATCH",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "request": {
                "$ref": "Building"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.patch",
              "description": "Patches a building via Apiary Patch Orchestration.",
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "buildingId": {
                  "type": "string",
                  "location": "path",
                  "description": "The id of the building to update.",
                  "required": true
                },
                "coordinatesSource": {
                  "description": "Source from which Building.coordinates are derived.",
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "location": "query"
                }
              },
              "response": {
                "$ref": "Building"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "update": {
              "description": "Updates a building.",
              "request": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.update",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "coordinatesSource": {
                  "description": "Source from which Building.coordinates are derived.",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "location": "query",
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "default": "SOURCE_UNSPECIFIED"
                },
                "buildingId": {
                  "location": "path",
                  "description": "The id of the building to update.",
                  "required": true,
                  "type": "string"
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "PUT",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "response": {
                "$ref": "Building"
              }
            }
          }
        }
      }
    },
    "schemas": {
      "methods": {
        "update": {
          "request": {
            "$ref": "Schema"
          },
          "parameters": {
            "schemaKey": {
              "type": "string",
              "description": "Name or immutable ID of the schema.",
              "required": true,
              "location": "path"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "response": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.update",
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Update schema",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ]
        },
        "list": {
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "id": "directory.schemas.list",
          "description": "Retrieve all schemas for a customer",
          "parameterOrder": [
            "customerId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "httpMethod": "GET",
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "response": {
            "$ref": "Schemas"
          }
        },
        "patch": {
          "response": {
            "$ref": "Schema"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "id": "directory.schemas.patch",
          "description": "Patch Schema via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "request": {
            "$ref": "Schema"
          },
          "parameters": {
            "schemaKey": {
              "type": "string",
              "description": "Name or immutable ID of the schema.",
              "location": "path",
              "required": true
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          }
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.delete",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "description": "Delete schema",
          "parameters": {
            "schemaKey": {
              "description": "Name or immutable ID of the schema",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          }
        },
        "get": {
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Retrieve schema",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "id": "directory.schemas.get",
          "httpMethod": "GET",
          "parameters": {
            "schemaKey": {
              "type": "string",
              "required": true,
              "description": "Name or immutable ID of the schema",
              "location": "path"
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "response": {
            "$ref": "Schema"
          }
        },
        "insert": {
          "id": "directory.schemas.insert",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "response": {
            "$ref": "Schema"
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "request": {
            "$ref": "Schema"
          },
          "description": "Create schema."
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "list": {
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path"
            }
          },
          "response": {
            "$ref": "VerificationCodes"
          },
          "id": "directory.verificationCodes.list",
          "httpMethod": "GET",
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes"
        },
        "invalidate": {
          "httpMethod": "POST",
          "id": "directory.verificationCodes.invalidate",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "parameterOrder": [
            "userKey"
          ],
          "description": "Invalidate the current backup verification codes for the user.",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the user",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "generate": {
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.verificationCodes.generate",
          "description": "Generate new backup verification codes for the user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ]
        }
      }
    },
    "customers": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be retrieved",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "id": "directory.customers.get",
          "path": "admin/directory/v1/customers/{customerKey}",
          "description": "Retrieves a customer.",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ],
          "response": {
            "$ref": "Customer"
          }
        },
        "patch": {
          "path": "admin/directory/v1/customers/{customerKey}",
          "description": "Patch Customers via Apiary Patch Orchestration",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "httpMethod": "PATCH",
          "response": {
            "$ref": "Customer"
          },
          "parameters": {
            "customerKey": {
              "required": true,
              "type": "string",
              "description": "Id of the customer to be updated",
              "location": "path"
            }
          },
          "request": {
            "$ref": "Customer"
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ],
          "id": "directory.customers.patch"
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "parameters": {
            "customerKey": {
              "required": true,
              "description": "Id of the customer to be updated",
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerKey"
          ],
          "httpMethod": "PUT",
          "request": {
            "$ref": "Customer"
          },
          "response": {
            "$ref": "Customer"
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.update",
          "description": "Updates a customer.",
          "path": "admin/directory/v1/customers/{customerKey}"
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "httpMethod": "DELETE",
          "description": "Delete Mobile Device",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            },
            "resourceId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of Mobile Device"
            }
          },
          "id": "directory.mobiledevices.delete",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ]
        },
        "get": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "description": "Retrieve Mobile Device",
          "parameters": {
            "resourceId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of Mobile Device",
              "type": "string"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            }
          },
          "httpMethod": "GET",
          "id": "directory.mobiledevices.get",
          "response": {
            "$ref": "MobileDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ]
        },
        "list": {
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "id": "directory.mobiledevices.list",
          "response": {
            "$ref": "MobileDevices"
          },
          "parameters": {
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ]
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "maxResults": {
              "minimum": "1",
              "default": "100",
              "maximum": "100",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "orderBy": {
              "type": "string",
              "location": "query",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ]
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "query": {
              "type": "string",
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "location": "query"
            }
          },
          "httpMethod": "GET"
        },
        "action": {
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "id": "directory.mobiledevices.action",
          "httpMethod": "POST",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "parameters": {
            "resourceId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of Mobile Device",
              "type": "string"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "description": "Take action on Mobile Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ]
        }
      }
    },
    "users": {
      "resources": {
        "photos": {
          "methods": {
            "get": {
              "response": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ],
              "description": "Retrieve photo of a user",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "GET",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "id": "directory.users.photos.get"
            },
            "delete": {
              "parameters": {
                "userKey": {
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "httpMethod": "DELETE",
              "id": "directory.users.photos.delete",
              "description": "Remove photos for the user",
              "parameterOrder": [
                "userKey"
              ]
            },
            "update": {
              "description": "Add a photo for the user",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "request": {
                "$ref": "UserPhoto"
              },
              "response": {
                "$ref": "UserPhoto"
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "httpMethod": "PUT",
              "id": "directory.users.photos.update",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "patch": {
              "description": "Patch Photo via Apiary Patch Orchestration",
              "httpMethod": "PATCH",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "request": {
                "$ref": "UserPhoto"
              },
              "id": "directory.users.photos.patch",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "parameterOrder": [
                "userKey"
              ],
              "response": {
                "$ref": "UserPhoto"
              }
            }
          }
        },
        "aliases": {
          "methods": {
            "insert": {
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "parameterOrder": [
                "userKey"
              ],
              "description": "Add a alias for the user",
              "id": "directory.users.aliases.insert",
              "request": {
                "$ref": "Alias"
              },
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "response": {
                "$ref": "Alias"
              },
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ]
            },
            "delete": {
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "description": "Remove a alias for the user",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "id": "directory.users.aliases.delete",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                },
                "alias": {
                  "required": true,
                  "type": "string",
                  "description": "The alias to be removed",
                  "location": "path"
                }
              },
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}"
            },
            "watch": {
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "httpMethod": "POST",
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "response": {
                "$ref": "Channel"
              },
              "parameters": {
                "event": {
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "location": "query",
                  "description": "Event on which subscription is intended (if subscribing)",
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ]
                },
                "userKey": {
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "request": {
                "$ref": "Channel"
              },
              "description": "Watch for changes in users list",
              "id": "directory.users.aliases.watch"
            },
            "list": {
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "description": "List all aliases for a user",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "parameterOrder": [
                "userKey"
              ],
              "response": {
                "$ref": "Aliases"
              },
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user"
                }
              },
              "id": "directory.users.aliases.list"
            }
          }
        }
      },
      "methods": {
        "watch": {
          "description": "Watch for changes in users list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "parameters": {
            "domain": {
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\"",
              "location": "query"
            },
            "customer": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            },
            "event": {
              "type": "string",
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "description": "Event on which subscription is intended",
              "location": "query",
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ]
            }
          },
          "flatPath": "admin/directory/v1/users/watch",
          "request": {
            "$ref": "Channel"
          },
          "parameterOrder": [],
          "id": "directory.users.watch",
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/watch",
          "response": {
            "$ref": "Channel"
          }
        },
        "patch": {
          "request": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "type": "string"
            }
          },
          "response": {
            "$ref": "User"
          },
          "description": "Patch Users via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.patch"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "Delete user",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "httpMethod": "DELETE",
          "id": "directory.users.delete",
          "path": "admin/directory/v1/users/{userKey}"
        },
        "get": {
          "response": {
            "$ref": "User"
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "viewType": {
              "type": "string",
              "default": "admin_view",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "location": "query"
            },
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user",
              "location": "path",
              "type": "string"
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query",
              "type": "string"
            },
            "projection": {
              "default": "basic",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "description": "What subset of fields to fetch for this user.",
              "type": "string",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "location": "query"
            }
          },
          "description": "retrieve user",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "path": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.get"
        },
        "list": {
          "flatPath": "admin/directory/v1/users",
          "httpMethod": "GET",
          "path": "admin/directory/v1/users",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "parameterOrder": [],
          "parameters": {
            "projection": {
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "type": "string",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "location": "query",
              "description": "What subset of fields to fetch for this user.",
              "default": "basic"
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "location": "query",
              "type": "string"
            },
            "viewType": {
              "location": "query",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "type": "string",
              "default": "admin_view"
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "maximum": "500",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "default": "100"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order.",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "location": "query",
              "type": "string"
            },
            "showDeleted": {
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "location": "query"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "customFieldMask": {
              "type": "string",
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            }
          },
          "id": "directory.users.list",
          "response": {
            "$ref": "Users"
          }
        },
        "undelete": {
          "request": {
            "$ref": "UserUndelete"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "id": "directory.users.undelete",
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "description": "Undelete a deleted user",
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "description": "The immutable id of the user",
              "required": true,
              "type": "string",
              "location": "path"
            }
          }
        },
        "insert": {
          "path": "admin/directory/v1/users",
          "parameters": {},
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.insert",
          "flatPath": "admin/directory/v1/users",
          "response": {
            "$ref": "User"
          },
          "parameterOrder": [],
          "request": {
            "$ref": "User"
          },
          "httpMethod": "POST",
          "description": "create user."
        },
        "update": {
          "httpMethod": "PUT",
          "description": "update user",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.update",
          "request": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          },
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object"
            }
          }
        },
        "makeAdmin": {
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user as admin",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.users.makeAdmin",
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "description": "change admin status of a user"
        }
      }
    },
    "roles": {
      "methods": {
        "insert": {
          "request": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "httpMethod": "POST",
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          },
          "description": "Creates a role.",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "id": "directory.roles.insert",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles"
        },
        "delete": {
          "description": "Deletes a role.",
          "id": "directory.roles.delete",
          "parameters": {
            "roleId": {
              "description": "Immutable ID of the role.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "update": {
          "description": "Updates a role.",
          "response": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "roleId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role.",
              "required": true
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.roles.update",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "httpMethod": "PUT",
          "request": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "get": {
          "description": "Retrieves a role.",
          "response": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "id": "directory.roles.get",
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            },
            "roleId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ]
        },
        "list": {
          "path": "admin/directory/v1/customer/{customer}/roles",
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "id": "directory.roles.list",
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            },
            "maxResults": {
              "minimum": "1",
              "type": "integer",
              "location": "query",
              "maximum": "100",
              "description": "Maximum number of results to return.",
              "format": "int32"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify the next page in the list.",
              "location": "query"
            }
          },
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "response": {
            "$ref": "Roles"
          }
        },
        "patch": {
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "roleId": {
              "description": "Immutable ID of the role.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Patch role via Apiary Patch Orchestration",
          "request": {
            "$ref": "Role"
          },
          "id": "directory.roles.patch",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "response": {
            "$ref": "Role"
          },
          "httpMethod": "PATCH"
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "description": "Stop watching resources through this channel.",
          "httpMethod": "POST",
          "parameters": {},
          "path": "admin/directory_v1/channels/stop",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "request": {
            "$ref": "Channel"
          },
          "flatPath": "admin/directory_v1/channels/stop",
          "id": "admin.channels.stop"
        }
      }
    }
  },
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "title": "Admin SDK",
  "fullyEncodeReservedExpansion": true,
  "id": "admin:directory_v1",
  "basePath": "",
  "canonicalName": "directory",
  "name": "admin",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "protocol": "rest",
  "kind": "discovery#restDescription",
  "version": "directory_v1",
  "servicePath": ""
}
