{
  "packagePath": "admin",
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "name": "admin",
  "protocol": "rest",
  "batchPath": "batch/admin/directory_v1",
  "title": "Admin SDK",
  "discoveryVersion": "v1",
  "id": "admin:directory_v1",
  "fullyEncodeReservedExpansion": true,
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "revision": "20201013",
  "baseUrl": "https://www.googleapis.com/",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "schemas": {
    "MobileDevice": {
      "id": "MobileDevice",
      "properties": {
        "deviceCompromisedStatus": {
          "description": "Mobile Device compromised status (Read-only)",
          "type": "string"
        },
        "defaultLanguage": {
          "description": "The default locale used on the Mobile Device (Read-only)",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#mobiledevice",
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Status of the device (Read-only)"
        },
        "firstSync": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "deviceId": {
          "type": "string",
          "description": "Mobile Device serial number (Read-only)"
        },
        "imei": {
          "type": "string",
          "description": "Mobile Device IMEI number (Read-only)"
        },
        "resourceId": {
          "type": "string",
          "description": "Unique identifier of Mobile Device (Read-only)"
        },
        "applications": {
          "description": "List of applications installed on Mobile Device",
          "items": {
            "type": "object",
            "properties": {
              "permission": {
                "description": "List of Permissions for application",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "displayName": {
                "description": "Display name of application",
                "type": "string"
              },
              "versionName": {
                "type": "string",
                "description": "Version name of application"
              },
              "packageName": {
                "description": "Package name of application",
                "type": "string"
              },
              "versionCode": {
                "type": "integer",
                "format": "int32",
                "description": "Version code of application"
              }
            }
          },
          "type": "array"
        },
        "email": {
          "items": {
            "type": "string"
          },
          "description": "List of owner user's email addresses (Read-only)",
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "os": {
          "type": "string",
          "description": "Name of the mobile operating system"
        },
        "securityPatchLevel": {
          "format": "int64",
          "description": "Mobile Device Security patch level (Read-only)",
          "type": "string"
        },
        "wifiMacAddress": {
          "type": "string",
          "description": "Mobile Device WiFi MAC address (Read-only)"
        },
        "encryptionStatus": {
          "description": "Mobile Device Encryption Status (Read-only)",
          "type": "string"
        },
        "serialNumber": {
          "description": "Mobile Device SSN or Serial Number (Read-only)",
          "type": "string"
        },
        "supportsWorkProfile": {
          "type": "boolean",
          "description": "Work profile supported on device (Read-only)"
        },
        "otherAccountsInfo": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of accounts added on device (Read-only)"
        },
        "devicePasswordStatus": {
          "description": "DevicePasswordStatus (Read-only)",
          "type": "string"
        },
        "developerOptionsStatus": {
          "type": "boolean",
          "description": "Developer options enabled or disabled on device (Read-only)"
        },
        "kernelVersion": {
          "type": "string",
          "description": "Mobile Device Kernel version (Read-only)"
        },
        "adbStatus": {
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "releaseVersion": {
          "type": "string",
          "description": "Mobile Device release version version (Read-only)"
        },
        "basebandVersion": {
          "description": "Mobile Device Baseband version (Read-only)",
          "type": "string"
        },
        "userAgent": {
          "type": "string",
          "description": "Mobile Device user agent"
        },
        "managedAccountIsOnOwnerProfile": {
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)",
          "type": "boolean"
        },
        "privilege": {
          "type": "string",
          "description": "DMAgentPermission (Read-only)"
        },
        "buildNumber": {
          "type": "string",
          "description": "Mobile Device Build number (Read-only)"
        },
        "hardwareId": {
          "description": "Mobile Device Hardware Id (Read-only)",
          "type": "string"
        },
        "name": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of owner user's names (Read-only)"
        },
        "type": {
          "description": "The type of device (Read-only)",
          "type": "string"
        },
        "networkOperator": {
          "type": "string",
          "description": "Mobile Device mobile or network operator (if available) (Read-only)"
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "manufacturer": {
          "description": "Mobile Device manufacturer (Read-only)",
          "type": "string"
        },
        "unknownSourcesStatus": {
          "type": "boolean",
          "description": "Unknown sources enabled or disabled on device (Read-only)"
        },
        "meid": {
          "type": "string",
          "description": "Mobile Device MEID number (Read-only)"
        },
        "brand": {
          "description": "Mobile Device Brand (Read-only)",
          "type": "string"
        },
        "model": {
          "description": "Name of the model of the device",
          "type": "string"
        },
        "bootloaderVersion": {
          "description": "Mobile Device Bootloader version (Read-only)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Feature": {
      "description": "JSON template for Feature object in Directory API.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          }
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#features#Feature",
          "description": "Kind of resource this is."
        }
      },
      "type": "object",
      "id": "Feature"
    },
    "Channel": {
      "id": "Channel",
      "properties": {
        "expiration": {
          "format": "int64",
          "type": "string",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional."
        },
        "type": {
          "description": "The type of delivery mechanism used for this channel.",
          "type": "string"
        },
        "payload": {
          "description": "A Boolean value to indicate whether payload is wanted. Optional.",
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "description": "A UUID or similar unique string that identifies this channel."
        },
        "kind": {
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "type": "string",
          "default": "api#channel"
        },
        "token": {
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.",
          "type": "string"
        },
        "params": {
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "address": {
          "type": "string",
          "description": "The address where notifications are delivered for this channel."
        },
        "resourceId": {
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.",
          "type": "string"
        },
        "resourceUri": {
          "description": "A version-specific identifier for the watched resource.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "An notification channel used to watch for resource changes."
    },
    "UserWebsite": {
      "description": "JSON template for a website entry.",
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Website."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "primary": {
          "description": "If this is user's primary website or not.",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "UserWebsite"
    },
    "ChromeOsDevice": {
      "id": "ChromeOsDevice",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "ethernetMacAddress": {
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)",
          "type": "string"
        },
        "macAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on wifi network interface (Read-only)"
        },
        "deviceId": {
          "type": "string",
          "description": "Unique identifier of Chrome OS Device (Read-only)"
        },
        "meid": {
          "type": "string",
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)"
        },
        "deviceFiles": {
          "items": {
            "type": "object",
            "properties": {
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              },
              "type": {
                "description": "File type",
                "type": "string"
              },
              "createTime": {
                "description": "Date and time the file was created",
                "format": "date-time",
                "type": "string"
              },
              "name": {
                "type": "string",
                "description": "File name"
              }
            }
          },
          "type": "array",
          "description": "List of device files to download (Read-only)"
        },
        "willAutoRenew": {
          "description": "Will Chromebook auto renew after support end date (Read-only)",
          "type": "boolean"
        },
        "systemRamTotal": {
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "type": "string",
          "format": "int64"
        },
        "orderNumber": {
          "description": "Chromebook order number (Read-only)",
          "type": "string"
        },
        "annotatedAssetId": {
          "description": "AssetId specified during enrollment or through later annotation",
          "type": "string"
        },
        "cpuStatusReports": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "cpuTemperatureInfo": {
                "type": "array",
                "description": "List of CPU temperature samples.",
                "items": {
                  "properties": {
                    "label": {
                      "type": "string",
                      "description": "CPU label"
                    },
                    "temperature": {
                      "format": "int32",
                      "description": "Temperature in Celsius degrees.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "reportTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time the report was received."
              },
              "cpuUtilizationPercentageInfo": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              }
            }
          },
          "description": "Reports of CPU utilization and temperature (Read-only)"
        },
        "manufactureDate": {
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
          "type": "string"
        },
        "recentUsers": {
          "description": "List of recent device users, in descending order by last login time (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "description": "The type of the user",
                "type": "string"
              },
              "email": {
                "type": "string",
                "description": "Email address of the user. Present only if the user type is managed"
              }
            }
          },
          "type": "array"
        },
        "diskVolumeReports": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "volumeInfo": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "volumeId": {
                      "type": "string",
                      "description": "Volume id"
                    },
                    "storageFree": {
                      "format": "int64",
                      "type": "string",
                      "description": "Free disk space [in bytes]"
                    },
                    "storageTotal": {
                      "type": "string",
                      "format": "int64",
                      "description": "Total disk space [in bytes]"
                    }
                  }
                },
                "description": "Disk volumes"
              }
            }
          },
          "description": "Reports of disk space and other info about mounted/connected volumes."
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of the device"
        },
        "lastEnrollmentTime": {
          "description": "Date and time the device was last enrolled (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "model": {
          "description": "Chromebook Model (Read-only)",
          "type": "string"
        },
        "lastSync": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "ethernetMacAddress0": {
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#chromeosdevice",
          "type": "string"
        },
        "bootMode": {
          "type": "string",
          "description": "Chromebook boot mode (Read-only)"
        },
        "tpmVersionInfo": {
          "properties": {
            "firmwareVersion": {
              "type": "string",
              "description": "TPM firmware version."
            },
            "tpmModel": {
              "type": "string",
              "description": "TPM model number."
            },
            "family": {
              "description": "TPM family.",
              "type": "string"
            },
            "manufacturer": {
              "description": "TPM manufacturer code.",
              "type": "string"
            },
            "specLevel": {
              "description": "TPM specification level.",
              "type": "string"
            },
            "vendorSpecific": {
              "type": "string",
              "description": "Vendor-specific information such as Vendor ID."
            }
          },
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "type": "object"
        },
        "activeTimeRanges": {
          "description": "List of active time ranges (Read-only)",
          "type": "array",
          "items": {
            "properties": {
              "date": {
                "description": "Date of usage",
                "format": "date",
                "type": "string"
              },
              "activeTime": {
                "type": "integer",
                "description": "Duration in milliseconds",
                "format": "int32"
              }
            },
            "type": "object"
          }
        },
        "lastKnownNetwork": {
          "items": {
            "properties": {
              "ipAddress": {
                "type": "string",
                "description": "The IP address."
              },
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              }
            },
            "type": "object",
            "description": "Information for an ip address."
          },
          "description": "Contains last known network (Read-only)",
          "type": "array"
        },
        "status": {
          "type": "string",
          "description": "status of the device (Read-only)"
        },
        "platformVersion": {
          "type": "string",
          "description": "Chromebook platform version (Read-only)"
        },
        "systemRamFreeReports": {
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "items": {
            "properties": {
              "reportTime": {
                "format": "date-time",
                "type": "string",
                "description": "Date and time the report was received."
              },
              "systemRamFreeInfo": {
                "type": "array",
                "items": {
                  "format": "int64",
                  "type": "string"
                }
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "firmwareVersion": {
          "description": "Chromebook firmware version (Read-only)",
          "type": "string"
        },
        "notes": {
          "description": "Notes added by the administrator",
          "type": "string"
        },
        "dockMacAddress": {
          "type": "string",
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "osVersion": {
          "type": "string",
          "description": "Chromebook Os Version (Read-only)"
        },
        "serialNumber": {
          "description": "Chromebook serial number (Read-only)",
          "type": "string"
        },
        "annotatedLocation": {
          "description": "Address or location of the device as noted by the administrator",
          "type": "string"
        },
        "supportEndDate": {
          "description": "Final date the device will be supported (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "annotatedUser": {
          "description": "User of the device",
          "type": "string"
        },
        "autoUpdateExpiration": {
          "format": "int64",
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "type": "string"
        }
      }
    },
    "Role": {
      "id": "Role",
      "properties": {
        "roleName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "description": "Name of the role."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "isSuperAdminRole": {
          "description": "Returns true if the role is a super admin role.",
          "type": "boolean"
        },
        "roleId": {
          "format": "int64",
          "type": "string",
          "description": "ID of the role."
        },
        "isSystemRole": {
          "description": "Returns true if this is a pre-defined system role.",
          "type": "boolean"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#role.",
          "default": "admin#directory#role",
          "type": "string"
        },
        "rolePrivileges": {
          "items": {
            "properties": {
              "privilegeName": {
                "description": "The name of the privilege.",
                "type": "string"
              },
              "serviceId": {
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
                "type": "string"
              }
            },
            "type": "object"
          },
          "description": "The set of privileges that are granted to this role.",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "array"
        },
        "roleDescription": {
          "type": "string",
          "description": "A short description of the role."
        }
      },
      "type": "object"
    },
    "User": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "sshPublicKeys": {
          "type": "any",
          "description": "The SSH public keys of User"
        },
        "agreedToTerms": {
          "description": "Output only. Indicates if user has agreed to terms (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "customerId": {
          "description": "Output only. CustomerId of User (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "nonEditableAliases": {
          "description": "Output only. List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "phones": {
          "type": "any",
          "description": "Phone numbers of User"
        },
        "posixAccounts": {
          "type": "any",
          "description": "The POSIX accounts of User"
        },
        "etag": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. ETag of the resource."
        },
        "externalIds": {
          "description": "The external Ids of User *",
          "type": "any"
        },
        "archived": {
          "type": "boolean",
          "description": "Indicates if user is archived."
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "Boolean indicating if ip is whitelisted"
        },
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        },
        "recoveryPhone": {
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
          "type": "string"
        },
        "addresses": {
          "type": "any",
          "description": "Addresses of User"
        },
        "primaryEmail": {
          "description": "username of User",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "isDelegatedAdmin": {
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "languages": {
          "type": "any",
          "description": "Languages of User"
        },
        "deletionTime": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "aliases": {
          "readOnly": true,
          "description": "Output only. List of aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isEnforcedIn2Sv": {
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "thumbnailPhotoEtag": {
          "type": "string",
          "description": "Output only. ETag of the user's photo (Read-only)",
          "readOnly": true
        },
        "suspended": {
          "type": "boolean",
          "description": "Indicates if user is suspended."
        },
        "keywords": {
          "description": "Keywords of User",
          "type": "any"
        },
        "suspensionReason": {
          "type": "string",
          "description": "Output only. Suspension reason if user is suspended (Read-only)",
          "readOnly": true
        },
        "name": {
          "$ref": "UserName",
          "description": "User's name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "password": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's password"
        },
        "changePasswordAtNextLogin": {
          "description": "Boolean indicating if the user should change password in next login",
          "type": "boolean"
        },
        "customSchemas": {
          "description": "Custom fields of the user.",
          "type": "object",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          }
        },
        "recoveryEmail": {
          "type": "string",
          "description": "Recovery email of the user."
        },
        "isAdmin": {
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "kind": {
          "description": "Output only. Kind of resource this is.",
          "default": "admin#directory#user",
          "type": "string",
          "readOnly": true
        },
        "gender": {
          "type": "any",
          "description": "Gender of User"
        },
        "organizations": {
          "type": "any",
          "description": "Organizations of User"
        },
        "emails": {
          "description": "Emails of User",
          "type": "any"
        },
        "relations": {
          "type": "any",
          "description": "The Relations of User *"
        },
        "isMailboxSetup": {
          "description": "Output only. Is mailbox setup (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "websites": {
          "type": "any",
          "description": "Websites of User"
        },
        "includeInGlobalAddressList": {
          "type": "boolean",
          "description": "Boolean indicating if user is included in Global Address List"
        },
        "thumbnailPhotoUrl": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Photo Url of the user (Read-only)"
        },
        "lastLoginTime": {
          "readOnly": true,
          "description": "User's last login time. (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "locations": {
          "type": "any",
          "description": "Locations of User"
        },
        "notes": {
          "type": "any",
          "description": "Notes of User"
        },
        "creationTime": {
          "format": "date-time",
          "description": "User's G Suite account creation time. (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "hashFunction": {
          "type": "string",
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt"
        },
        "isEnrolledIn2Sv": {
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "ims": {
          "description": "User's Instant Messenger",
          "type": "any"
        }
      },
      "id": "User",
      "type": "object"
    },
    "Domains2": {
      "type": "object",
      "id": "Domains2",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domains"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "domains": {
          "description": "List of domain objects.",
          "type": "array",
          "items": {
            "$ref": "Domains"
          }
        }
      }
    },
    "Asp": {
      "id": "Asp",
      "type": "object",
      "properties": {
        "userKey": {
          "description": "The unique ID of the user who issued the ASP.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the ASP.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#asp",
          "description": "The type of the API resource. This is always admin#directory#asp."
        },
        "codeId": {
          "type": "integer",
          "format": "int32",
          "description": "The unique ID of the ASP."
        },
        "creationTime": {
          "format": "int64",
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "type": "string"
        },
        "lastTimeUsed": {
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "format": "int64",
          "type": "string"
        }
      },
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserMakeAdmin": {
      "type": "object",
      "id": "UserMakeAdmin",
      "properties": {
        "status": {
          "type": "boolean",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "description": "Boolean indicating new admin status of the user"
        }
      }
    },
    "Buildings": {
      "type": "object",
      "id": "Buildings",
      "properties": {
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "buildings": {
          "description": "The Buildings in this page of results.",
          "items": {
            "$ref": "Building"
          },
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#buildings#buildingsList",
          "type": "string"
        }
      },
      "description": "Public API: Resources.buildings"
    },
    "Customer": {
      "id": "Customer",
      "properties": {
        "alternateEmail": {
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain",
          "type": "string"
        },
        "language": {
          "type": "string",
          "description": "The customer's ISO 639-2 language code. The default value is en-US"
        },
        "postalAddress": {
          "description": "The customer's postal address information.",
          "$ref": "CustomerPostalAddress"
        },
        "customerDomain": {
          "type": "string",
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer."
        },
        "kind": {
          "description": "Identifies the resource as a customer. Value: admin#directory#customer",
          "type": "string",
          "default": "admin#directory#customer"
        },
        "id": {
          "description": "The unique ID for the customer's G Suite account. (Readonly)",
          "type": "string"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The customer's contact phone number in E.164 format."
        },
        "customerCreationTime": {
          "format": "date-time",
          "description": "The customer's creation time (Readonly)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "ChromeOsDeviceAction": {
      "properties": {
        "action": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "description": "Action to be taken on the ChromeOs Device"
        },
        "deprovisionReason": {
          "type": "string"
        }
      },
      "type": "object",
      "id": "ChromeOsDeviceAction"
    },
    "UserSshPublicKey": {
      "id": "UserSshPublicKey",
      "type": "object",
      "description": "JSON template for a POSIX account entry.",
      "properties": {
        "expirationTimeUsec": {
          "description": "An expiration time in microseconds since epoch.",
          "format": "int64",
          "type": "string"
        },
        "key": {
          "type": "string",
          "description": "An SSH public key."
        },
        "fingerprint": {
          "readOnly": true,
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
          "type": "string"
        }
      }
    },
    "OrgUnits": {
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "organizationUnits": {
          "items": {
            "$ref": "OrgUnit"
          },
          "type": "array",
          "description": "List of user objects."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#orgUnits"
        }
      },
      "id": "OrgUnits",
      "type": "object"
    },
    "CalendarResources": {
      "type": "object",
      "description": "Public API: Resources.calendars",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "CalendarResource"
          },
          "type": "array",
          "description": "The CalendarResources in this page of results."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "kind": {
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList.",
          "type": "string"
        }
      },
      "id": "CalendarResources"
    },
    "SchemaFieldSpec": {
      "properties": {
        "readAccessType": {
          "default": "ALL_DOMAIN_USERS",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\".",
          "type": "string"
        },
        "fieldId": {
          "type": "string",
          "description": "Unique identifier of Field (Read-only)"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema#fieldspec"
        },
        "numericIndexingSpec": {
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "type": "object",
          "properties": {
            "maxValue": {
              "format": "double",
              "type": "number",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            },
            "minValue": {
              "type": "number",
              "format": "double",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            }
          }
        },
        "fieldName": {
          "type": "string",
          "description": "Name of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "fieldType": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Type of the field."
        },
        "indexed": {
          "type": "boolean",
          "default": "true",
          "description": "Boolean specifying whether the field is indexed or not."
        },
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Display Name of the field.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "multiValued": {
          "description": "Boolean specifying whether this is a multi-valued field or not.",
          "type": "boolean"
        }
      },
      "id": "SchemaFieldSpec",
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "DirectoryChromeosdevicesCommand": {
      "id": "DirectoryChromeosdevicesCommand",
      "type": "object",
      "properties": {
        "commandExpireTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired."
        },
        "commandId": {
          "description": "Unique ID of a device command.",
          "format": "int64",
          "type": "string"
        },
        "issueTime": {
          "description": "The timestamp when the command was issued by the admin.",
          "type": "string",
          "format": "google-datetime"
        },
        "payload": {
          "type": "string",
          "description": "The payload that the command specified, if any."
        },
        "type": {
          "description": "The type of the command.",
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "type": "string"
        },
        "commandResult": {
          "description": "The result of the command execution.",
          "$ref": "DirectoryChromeosdevicesCommandResult"
        },
        "state": {
          "description": "Indicates the command state.",
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ],
          "type": "string"
        }
      },
      "description": "Information regarding a command that was issued to a device."
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "description": "A request for issuing a command.",
      "properties": {
        "commandType": {
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "type": "string",
          "description": "The type of command.",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ]
        },
        "payload": {
          "type": "string",
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100]."
        }
      },
      "type": "object",
      "id": "DirectoryChromeosdevicesIssueCommandRequest"
    },
    "UserCustomProperties": {
      "id": "UserCustomProperties",
      "type": "object",
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "additionalProperties": {
        "type": "any"
      }
    },
    "Privileges": {
      "id": "Privileges",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "default": "admin#directory#privileges"
        },
        "items": {
          "description": "A list of Privilege resources.",
          "items": {
            "$ref": "Privilege"
          },
          "type": "array"
        }
      }
    },
    "Users": {
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "trigger_event": {
          "type": "string",
          "description": "Event that triggered this response (only used in case of Push Response)"
        },
        "users": {
          "items": {
            "$ref": "User"
          },
          "description": "List of user objects.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#users",
          "description": "Kind of resource this is."
        }
      },
      "id": "Users"
    },
    "Aliases": {
      "id": "Aliases",
      "type": "object",
      "description": "JSON response template to list aliases in Directory API.",
      "properties": {
        "kind": {
          "default": "admin#directory#aliases",
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        }
      }
    },
    "VerificationCode": {
      "properties": {
        "userId": {
          "type": "string",
          "description": "The obfuscated unique ID of the user."
        },
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCode.",
          "type": "string",
          "default": "admin#directory#verificationCode"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "verificationCode": {
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.",
          "type": "string"
        }
      },
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "VerificationCode"
    },
    "MobileDevices": {
      "properties": {
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#mobiledevices",
          "type": "string"
        },
        "mobiledevices": {
          "type": "array",
          "description": "List of Mobile Device objects.",
          "items": {
            "$ref": "MobileDevice"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "MobileDevices",
      "type": "object"
    },
    "UserLanguage": {
      "type": "object",
      "id": "UserLanguage",
      "properties": {
        "customLanguage": {
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set",
          "type": "string"
        },
        "languageCode": {
          "type": "string",
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException."
        }
      },
      "description": "JSON template for a language entry."
    },
    "FeatureRename": {
      "id": "FeatureRename",
      "type": "object",
      "properties": {
        "newName": {
          "type": "string",
          "description": "New name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          }
        }
      }
    },
    "RoleAssignment": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "orgUnitId": {
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#roleAssignment",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roleAssignment."
        },
        "scopeType": {
          "type": "string",
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT "
        },
        "roleId": {
          "type": "string",
          "description": "The ID of the role that is assigned.",
          "format": "int64"
        },
        "assignedTo": {
          "description": "The unique ID of the user this role is assigned to.",
          "type": "string"
        },
        "roleAssignmentId": {
          "description": "ID of this roleAssignment.",
          "type": "string",
          "format": "int64"
        }
      },
      "type": "object",
      "id": "RoleAssignment"
    },
    "BuildingAddress": {
      "type": "object",
      "id": "BuildingAddress",
      "description": "Public API: Resources.buildings",
      "properties": {
        "administrativeArea": {
          "type": "string",
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region."
        },
        "postalCode": {
          "description": "Optional. Postal code of the address.",
          "type": "string"
        },
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        },
        "addressLines": {
          "type": "array",
          "description": "Unstructured address lines describing the lower levels of an address.",
          "items": {
            "type": "string"
          }
        },
        "languageCode": {
          "description": "Optional. BCP-47 language code of the contents of this address (if known).",
          "type": "string"
        },
        "sublocality": {
          "type": "string",
          "description": "Optional. Sublocality of the address."
        },
        "locality": {
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.",
          "type": "string"
        }
      }
    },
    "Alias": {
      "description": "JSON template for Alias object in Directory API.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#alias"
        },
        "etag": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        }
      },
      "id": "Alias"
    },
    "Schema": {
      "id": "Schema",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "schemaId": {
          "description": "Unique identifier of Schema (Read-only)",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#schema"
        },
        "schemaName": {
          "description": "Schema name",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "Display name for the schema.",
          "type": "string"
        },
        "fields": {
          "description": "Fields of Schema",
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "array"
        }
      },
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "UserLocation": {
      "description": "JSON template for a location entry.",
      "type": "object",
      "id": "UserLocation",
      "properties": {
        "buildingId": {
          "type": "string",
          "description": "Building Identifier."
        },
        "floorSection": {
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "deskCode": {
          "description": "Most specific textual code of individual desk location.",
          "type": "string"
        },
        "floorName": {
          "description": "Floor name/number.",
          "type": "string"
        },
        "area": {
          "type": "string",
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''"
        }
      }
    },
    "UserExternalId": {
      "id": "UserExternalId",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the Id."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "value": {
          "description": "The value of the id.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for an externalId entry."
    },
    "UserPhoto": {
      "id": "UserPhoto",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "mimeType": {
          "type": "string",
          "description": "Mime Type of the photo"
        },
        "height": {
          "type": "integer",
          "description": "Height in pixels of the photo",
          "format": "int32"
        },
        "photoData": {
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "description": "Base64 encoded photo data",
          "type": "string",
          "format": "byte"
        },
        "primaryEmail": {
          "type": "string",
          "description": "Primary email of User (Read-only)"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#user#photo"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "width": {
          "type": "integer",
          "description": "Width in pixels of the photo",
          "format": "int32"
        }
      }
    },
    "UserKeyword": {
      "properties": {
        "value": {
          "type": "string",
          "description": "Keyword."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "id": "UserKeyword",
      "type": "object",
      "description": "JSON template for a keyword entry."
    },
    "ChromeOsDevices": {
      "id": "ChromeOsDevices",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "chromeosdevices": {
          "description": "List of Chrome OS Device objects.",
          "type": "array",
          "items": {
            "$ref": "ChromeOsDevice"
          }
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#chromeosdevices",
          "description": "Kind of resource this is."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        }
      }
    },
    "Domains": {
      "type": "object",
      "properties": {
        "verified": {
          "description": "Indicates the verification state of a domain. (Read-only).",
          "type": "boolean"
        },
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array",
          "description": "List of domain alias objects. (Read-only)"
        },
        "isPrimary": {
          "description": "Indicates if the domain is a primary domain (Read-only).",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domain",
          "type": "string"
        },
        "creationTime": {
          "description": "Creation time of the domain. (Read-only).",
          "type": "string",
          "format": "int64"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "domainName": {
          "type": "string",
          "description": "The domain name of the customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        }
      },
      "id": "Domains"
    },
    "UserIm": {
      "type": "object",
      "properties": {
        "customProtocol": {
          "type": "string",
          "description": "Custom protocol."
        },
        "im": {
          "type": "string",
          "description": "Instant messenger id."
        },
        "primary": {
          "description": "If this is user's primary im. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.",
          "type": "string"
        }
      },
      "id": "UserIm",
      "description": "JSON template for instant messenger of an user."
    },
    "DomainAlias": {
      "type": "object",
      "id": "DomainAlias",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#domainAlias",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "parentDomainName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer."
        },
        "domainAliasName": {
          "description": "The domain alias name.",
          "type": "string"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain alias. (Read-only)"
        },
        "creationTime": {
          "format": "int64",
          "description": "The creation time of the domain alias. (Read-only).",
          "type": "string"
        }
      }
    },
    "Features": {
      "id": "Features",
      "description": "Public API: Resources.features",
      "type": "object",
      "properties": {
        "features": {
          "type": "array",
          "description": "The Features in this page of results.",
          "items": {
            "$ref": "Feature"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "kind": {
          "default": "admin#directory#resources#features#featuresList",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "Building": {
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#buildings#Building"
        },
        "buildingId": {
          "description": "Unique identifier for the building. The maximum length is 100 characters.",
          "type": "string"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "floorNames": {
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "buildingName": {
          "type": "string",
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters."
        },
        "coordinates": {
          "$ref": "BuildingCoordinates",
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees."
        },
        "address": {
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required.",
          "$ref": "BuildingAddress"
        },
        "description": {
          "description": "A brief description of the building. For example, \"Chelsea Market\".",
          "type": "string"
        }
      },
      "description": "Public API: Resources.buildings",
      "id": "Building"
    },
    "Schemas": {
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#schemas",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "schemas": {
          "type": "array",
          "description": "List of UserSchema objects.",
          "items": {
            "$ref": "Schema"
          }
        }
      },
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Schemas"
    },
    "Tokens": {
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#tokenList.",
          "type": "string",
          "default": "admin#directory#tokenList"
        },
        "items": {
          "description": "A list of Token resources.",
          "items": {
            "$ref": "Token"
          },
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Tokens",
      "type": "object"
    },
    "UserPhone": {
      "properties": {
        "value": {
          "description": "Phone number.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary phone or not."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserPhone",
      "description": "JSON template for a phone entry."
    },
    "UserOrganization": {
      "description": "JSON template for an organization entry.",
      "properties": {
        "fullTimeEquivalent": {
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
          "format": "int32",
          "type": "integer"
        },
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        },
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "primary": {
          "type": "boolean",
          "description": "If it user's primary organization."
        },
        "name": {
          "description": "Name of the organization",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol of the organization.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Description of the organization."
        },
        "domain": {
          "type": "string",
          "description": "The domain to which the organization belongs to."
        },
        "costCenter": {
          "description": "The cost center of the users department.",
          "type": "string"
        },
        "location": {
          "description": "Location of the organization. This need not be fully qualified address.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserOrganization"
    },
    "DirectoryChromeosdevicesCommandResult": {
      "properties": {
        "errorMessage": {
          "type": "string",
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed."
        },
        "result": {
          "description": "The result of the command.",
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ],
          "type": "string"
        },
        "executeTime": {
          "description": "The time at which the command was executed or failed to execute.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "id": "DirectoryChromeosdevicesCommandResult",
      "type": "object",
      "description": "The result of executing a command."
    },
    "OrgUnit": {
      "type": "object",
      "properties": {
        "parentOrgUnitPath": {
          "description": "Path of parent OrgUnit",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Description of OrgUnit"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "parentOrgUnitId": {
          "description": "Id of parent OrgUnit",
          "type": "string"
        },
        "orgUnitPath": {
          "description": "Path of OrgUnit",
          "type": "string"
        },
        "orgUnitId": {
          "type": "string",
          "description": "Id of OrgUnit"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#orgUnit"
        },
        "blockInheritance": {
          "description": "Should block inheritance",
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "description": "Name of OrgUnit",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          }
        }
      },
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "OrgUnit"
    },
    "UserAbout": {
      "description": "JSON template for About (notes) of a user in Directory API.",
      "properties": {
        "contentType": {
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Actual value of notes."
        }
      },
      "type": "object",
      "id": "UserAbout"
    },
    "Privilege": {
      "type": "object",
      "id": "Privilege",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "serviceName": {
          "type": "string",
          "description": "The name of the service this privilege is for."
        },
        "childPrivileges": {
          "items": {
            "$ref": "Privilege"
          },
          "type": "array",
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege."
        },
        "privilegeName": {
          "type": "string",
          "description": "The name of the privilege."
        },
        "isOuScopable": {
          "type": "boolean",
          "description": "If the privilege can be restricted to an organization unit."
        },
        "serviceId": {
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privilege.",
          "default": "admin#directory#privilege"
        }
      }
    },
    "Token": {
      "properties": {
        "displayText": {
          "description": "The displayable name of the application the token is issued to.",
          "type": "string"
        },
        "anonymous": {
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID.",
          "type": "boolean"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nativeApp": {
          "type": "boolean",
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device."
        },
        "clientId": {
          "description": "The Client ID of the application the token is issued to.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#token.",
          "default": "admin#directory#token"
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user that issued the token."
        },
        "scopes": {
          "description": "A list of authorization scopes the application is granted.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "Token",
      "type": "object",
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "description": "A response for issuing a command.",
      "properties": {
        "commandId": {
          "type": "string",
          "description": "The unique ID of the issued command, used to retrieve the command status.",
          "format": "int64"
        }
      },
      "type": "object"
    },
    "Member": {
      "id": "Member",
      "properties": {
        "email": {
          "description": "Email of member (Read-only)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "delivery_settings": {
          "description": "Delivery settings of member",
          "type": "string"
        },
        "role": {
          "description": "Role of member",
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Status of member (Immutable)"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey."
        },
        "type": {
          "description": "Type of member (Immutable)",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#member",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "type": "object"
    },
    "ChromeOsMoveDevicesToOu": {
      "type": "object",
      "id": "ChromeOsMoveDevicesToOu",
      "properties": {
        "deviceIds": {
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "ChromeOs Devices to be moved to OU"
        }
      }
    },
    "CustomerPostalAddress": {
      "properties": {
        "contactName": {
          "description": "The customer contact's name.",
          "type": "string"
        },
        "addressLine1": {
          "type": "string",
          "description": "A customer's physical address. The address can be composed of one to three lines."
        },
        "countryCode": {
          "type": "string",
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements."
        },
        "locality": {
          "description": "Name of the locality. An example of a locality value is the city of San Francisco.",
          "type": "string"
        },
        "region": {
          "type": "string",
          "description": "Name of the region. An example of a region value is NY for the state of New York."
        },
        "addressLine3": {
          "type": "string",
          "description": "Address line 3 of the address."
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        },
        "postalCode": {
          "type": "string",
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element."
        },
        "addressLine2": {
          "type": "string",
          "description": "Address line 2 of the address."
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "id": "CustomerPostalAddress",
      "type": "object"
    },
    "VerificationCodes": {
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of verification code resources.",
          "items": {
            "$ref": "VerificationCode"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCodesList.",
          "type": "string",
          "default": "admin#directory#verificationCodesList"
        }
      },
      "type": "object",
      "id": "VerificationCodes"
    },
    "CalendarResource": {
      "id": "CalendarResource",
      "properties": {
        "resourceCategory": {
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.",
          "type": "string"
        },
        "resourceType": {
          "type": "string",
          "description": "The type of the calendar resource, intended for non-room resources."
        },
        "userVisibleDescription": {
          "type": "string",
          "description": "Description of the resource, visible to users and admins."
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "generatedResourceName": {
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\".",
          "type": "string"
        },
        "capacity": {
          "description": "Capacity of a resource, number of seats in a room.",
          "format": "int32",
          "type": "integer"
        },
        "resourceName": {
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          }
        },
        "floorSection": {
          "description": "Name of the section within a floor a resource is located in.",
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "description": "The unique ID for the calendar resource."
        },
        "kind": {
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "type": "string",
          "default": "admin#directory#resources#calendars#CalendarResource"
        },
        "featureInstances": {
          "description": "Instances of features for the calendar resource.",
          "type": "any"
        },
        "buildingId": {
          "type": "string",
          "description": "Unique ID for the building a resource is located in."
        },
        "floorName": {
          "description": "Name of the floor a resource is located on.",
          "type": "string"
        },
        "resourceEmail": {
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Public API: Resources.calendars"
    },
    "Group": {
      "type": "object",
      "id": "Group",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "directMembersCount": {
          "description": "Group direct members count",
          "type": "string",
          "format": "int64"
        },
        "adminCreated": {
          "description": "Is the group created by admin (Read-only) *",
          "type": "boolean"
        },
        "nonEditableAliases": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of non editable aliases (Read-only)"
        },
        "kind": {
          "default": "admin#directory#group",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of Group (Read-only)"
        },
        "description": {
          "description": "Description of the group",
          "type": "string"
        },
        "aliases": {
          "type": "array",
          "description": "List of aliases (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "description": "Group name"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "Email of Group",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          }
        }
      }
    },
    "MembersHasMember": {
      "description": "JSON template for Has Member response in Directory API.",
      "type": "object",
      "id": "MembersHasMember",
      "properties": {
        "isMember": {
          "type": "boolean",
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "readOnly": true
        }
      }
    },
    "DomainAliases": {
      "id": "DomainAliases",
      "type": "object",
      "properties": {
        "domainAliases": {
          "description": "List of domain alias objects.",
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#domainAliases",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "Asps": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of ASP resources.",
          "items": {
            "$ref": "Asp"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#aspList.",
          "default": "admin#directory#aspList",
          "type": "string"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Asps"
    },
    "UserUndelete": {
      "type": "object",
      "properties": {
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        }
      },
      "id": "UserUndelete"
    },
    "UserEmail": {
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "address": {
          "description": "Email id of the user.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary email. Only one entry could be marked as primary.",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "UserEmail",
      "description": "JSON template for an email."
    },
    "UserGender": {
      "type": "object",
      "id": "UserGender",
      "properties": {
        "customGender": {
          "type": "string",
          "description": "Custom gender."
        },
        "addressMeAs": {
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their.",
          "type": "string"
        },
        "type": {
          "description": "Gender.",
          "type": "string"
        }
      }
    },
    "MobileDeviceAction": {
      "properties": {
        "action": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          },
          "description": "Action to be taken on the Mobile Device"
        }
      },
      "type": "object",
      "id": "MobileDeviceAction"
    },
    "Groups": {
      "id": "Groups",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "groups": {
          "items": {
            "$ref": "Group"
          },
          "type": "array",
          "description": "List of group objects."
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#groups"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        }
      }
    },
    "FeatureInstance": {
      "properties": {
        "feature": {
          "$ref": "Feature",
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature."
        }
      },
      "description": "JSON template for a feature instance.",
      "type": "object",
      "id": "FeatureInstance"
    },
    "UserName": {
      "type": "object",
      "properties": {
        "fullName": {
          "description": "Full Name",
          "type": "string"
        },
        "givenName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string",
          "description": "First Name"
        },
        "familyName": {
          "description": "Last Name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string"
        }
      },
      "id": "UserName"
    },
    "Roles": {
      "properties": {
        "kind": {
          "default": "admin#directory#roles",
          "description": "The type of the API resource. This is always admin#directory#roles.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "Role"
          },
          "description": "A list of Role resources.",
          "type": "array"
        }
      },
      "id": "Roles",
      "type": "object"
    },
    "UserAddress": {
      "type": "object",
      "description": "JSON template for address.",
      "id": "UserAddress",
      "properties": {
        "countryCode": {
          "description": "Country code.",
          "type": "string"
        },
        "extendedAddress": {
          "type": "string",
          "description": "Extended Address."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value."
        },
        "region": {
          "description": "Region.",
          "type": "string"
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        },
        "locality": {
          "description": "Locality.",
          "type": "string"
        },
        "formatted": {
          "description": "Formatted address.",
          "type": "string"
        },
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary address. Only one entry could be marked as primary."
        },
        "poBox": {
          "description": "Other parts of address.",
          "type": "string"
        },
        "streetAddress": {
          "description": "Street.",
          "type": "string"
        },
        "country": {
          "type": "string",
          "description": "Country."
        }
      }
    },
    "BuildingCoordinates": {
      "type": "object",
      "description": "Public API: Resources.buildings",
      "properties": {
        "longitude": {
          "description": "Longitude in decimal degrees.",
          "format": "double",
          "type": "number"
        },
        "latitude": {
          "description": "Latitude in decimal degrees.",
          "type": "number",
          "format": "double"
        }
      },
      "id": "BuildingCoordinates"
    },
    "UserPosixAccount": {
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix.",
      "id": "UserPosixAccount",
      "properties": {
        "shell": {
          "type": "string",
          "description": "The path to the login shell for this account."
        },
        "gecos": {
          "description": "The GECOS (user information) for this account.",
          "type": "string"
        },
        "gid": {
          "type": "string",
          "description": "The default group ID.",
          "format": "uint64"
        },
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "operatingSystemType": {
          "type": "string",
          "description": "The operating system type for this account."
        },
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        },
        "accountId": {
          "description": "A POSIX account field identifier.",
          "type": "string"
        },
        "systemId": {
          "type": "string",
          "description": "System identifier for which account Username or Uid apply to."
        },
        "uid": {
          "format": "uint64",
          "type": "string",
          "description": "The POSIX compliant user ID."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary account within the SystemId."
        }
      },
      "type": "object"
    },
    "Members": {
      "id": "Members",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "Member"
          },
          "description": "List of member objects."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#members"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        }
      }
    },
    "UserRelation": {
      "properties": {
        "type": {
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "value": {
          "type": "string",
          "description": "The name of the relation."
        }
      },
      "description": "JSON template for a relation entry.",
      "id": "UserRelation",
      "type": "object"
    },
    "RoleAssignments": {
      "id": "RoleAssignments",
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "RoleAssignment"
          },
          "description": "A list of RoleAssignment resources."
        },
        "kind": {
          "default": "admin#directory#roleAssignments",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments .",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    }
  },
  "servicePath": "",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "basePath": "",
  "parameters": {
    "prettyPrint": {
      "type": "boolean",
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "default": "true"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "alt": {
      "default": "json",
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "description": "Data format for response."
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    }
  },
  "ownerDomain": "google.com",
  "resources": {
    "privileges": {
      "methods": {
        "list": {
          "id": "directory.privileges.list",
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Privileges"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer"
          ]
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "list": {
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "roleId": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID."
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify the next page in the list.",
              "type": "string"
            },
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "maxResults": {
              "maximum": "200",
              "minimum": "1",
              "location": "query",
              "format": "int32",
              "type": "integer",
              "description": "Maximum number of results to return."
            },
            "userKey": {
              "location": "query",
              "type": "string",
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user."
            }
          },
          "id": "directory.roleAssignments.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "response": {
            "$ref": "RoleAssignments"
          },
          "description": "Retrieves a paginated list of all roleAssignments.",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments"
        },
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "description": "Creates a role assignment.",
          "httpMethod": "POST",
          "request": {
            "$ref": "RoleAssignment"
          },
          "id": "directory.roleAssignments.insert",
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "response": {
            "$ref": "RoleAssignment"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "description": "Deletes a role assignment.",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameters": {
            "roleAssignmentId": {
              "description": "Immutable ID of the role assignment.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "id": "directory.roleAssignments.delete",
          "httpMethod": "DELETE"
        },
        "get": {
          "description": "Retrieve a role assignment.",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "response": {
            "$ref": "RoleAssignment"
          },
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "id": "directory.roleAssignments.get",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "roleAssignmentId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the role assignment.",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ]
        }
      }
    },
    "users": {
      "methods": {
        "watch": {
          "flatPath": "admin/directory/v1/users/watch",
          "path": "admin/directory/v1/users/watch",
          "description": "Watch for changes in users list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "Channel"
          },
          "request": {
            "$ref": "Channel"
          },
          "id": "directory.users.watch",
          "parameterOrder": [],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "location": "query",
              "type": "string"
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\"",
              "location": "query",
              "type": "string"
            },
            "showDeleted": {
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "location": "query"
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query",
              "type": "string",
              "description": "Whether to return results in ascending or descending order."
            },
            "projection": {
              "location": "query",
              "description": "What subset of fields to fetch for this user.",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ],
              "default": "basic",
              "type": "string"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string",
              "location": "query"
            },
            "orderBy": {
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "description": "Column to use for sorting results",
              "type": "string",
              "location": "query"
            },
            "event": {
              "type": "string",
              "description": "Event on which subscription is intended",
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ]
            },
            "maxResults": {
              "default": "100",
              "location": "query",
              "description": "Maximum number of results to return.",
              "maximum": "500",
              "minimum": "1",
              "type": "integer",
              "format": "int32"
            },
            "viewType": {
              "default": "admin_view",
              "type": "string",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "location": "query",
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ]
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users"
            }
          },
          "httpMethod": "POST"
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "create user.",
          "parameters": {},
          "flatPath": "admin/directory/v1/users",
          "parameterOrder": [],
          "path": "admin/directory/v1/users",
          "httpMethod": "POST",
          "id": "directory.users.insert",
          "request": {
            "$ref": "User"
          },
          "response": {
            "$ref": "User"
          }
        },
        "get": {
          "flatPath": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "id": "directory.users.get",
          "response": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "description": "retrieve user",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "location": "path",
              "type": "string",
              "required": true
            },
            "customFieldMask": {
              "type": "string",
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "projection": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "default": "basic",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "description": "What subset of fields to fetch for this user.",
              "type": "string"
            },
            "viewType": {
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "default": "admin_view",
              "type": "string"
            }
          },
          "httpMethod": "GET"
        },
        "delete": {
          "id": "directory.users.delete",
          "httpMethod": "DELETE",
          "description": "Delete user",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey"
          ]
        },
        "makeAdmin": {
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "id": "directory.users.makeAdmin",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "httpMethod": "POST",
          "description": "change admin status of a user",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user as admin",
              "type": "string",
              "required": true,
              "location": "path"
            }
          }
        },
        "update": {
          "path": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          },
          "httpMethod": "PUT",
          "request": {
            "$ref": "User"
          },
          "parameterOrder": [
            "userKey"
          ],
          "description": "update user",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "type": "string",
              "required": true
            }
          },
          "id": "directory.users.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "signOut": {
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST",
          "id": "directory.users.signOut",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/signOut"
        },
        "undelete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "Undelete a deleted user",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "parameters": {
            "userKey": {
              "description": "The immutable id of the user",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "request": {
            "$ref": "UserUndelete"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "id": "directory.users.undelete",
          "httpMethod": "POST"
        },
        "list": {
          "httpMethod": "GET",
          "response": {
            "$ref": "Users"
          },
          "flatPath": "admin/directory/v1/users",
          "parameterOrder": [],
          "id": "directory.users.list",
          "parameters": {
            "maxResults": {
              "type": "integer",
              "location": "query",
              "minimum": "1",
              "default": "100",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "maximum": "500"
            },
            "customFieldMask": {
              "type": "string",
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "query": {
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string"
            },
            "showDeleted": {
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "location": "query",
              "type": "string"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order.",
              "type": "string",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query"
            },
            "projection": {
              "location": "query",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "description": "What subset of fields to fetch for this user.",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "type": "string",
              "default": "basic"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "customer": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "type": "string",
              "description": "Column to use for sorting results"
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "location": "query",
              "type": "string"
            },
            "viewType": {
              "type": "string",
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ]
            }
          },
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "admin/directory/v1/users"
        },
        "patch": {
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "User"
          },
          "httpMethod": "PATCH",
          "description": "Patch Users via Apiary Patch Orchestration",
          "request": {
            "$ref": "User"
          },
          "id": "directory.users.patch",
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}"
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "description": "Remove a alias for the user",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "httpMethod": "DELETE",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "required": true
                },
                "alias": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The alias to be removed"
                }
              },
              "id": "directory.users.aliases.delete"
            },
            "insert": {
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "id": "directory.users.aliases.insert",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "httpMethod": "POST",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Alias"
              },
              "parameterOrder": [
                "userKey"
              ],
              "request": {
                "$ref": "Alias"
              },
              "description": "Add a alias for the user",
              "path": "admin/directory/v1/users/{userKey}/aliases"
            },
            "list": {
              "parameters": {
                "userKey": {
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "location": "path"
                }
              },
              "id": "directory.users.aliases.list",
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "response": {
                "$ref": "Aliases"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "httpMethod": "GET",
              "description": "List all aliases for a user"
            },
            "watch": {
              "id": "directory.users.aliases.watch",
              "httpMethod": "POST",
              "description": "Watch for changes in users list",
              "response": {
                "$ref": "Channel"
              },
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "event": {
                  "description": "Event on which subscription is intended (if subscribing)",
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "request": {
                "$ref": "Channel"
              },
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ]
            }
          }
        },
        "photos": {
          "methods": {
            "delete": {
              "httpMethod": "DELETE",
              "id": "directory.users.photos.delete",
              "description": "Remove photos for the user",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ]
            },
            "patch": {
              "id": "directory.users.photos.patch",
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "httpMethod": "PATCH",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "request": {
                "$ref": "UserPhoto"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "description": "Patch Photo via Apiary Patch Orchestration"
            },
            "get": {
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.get",
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Retrieve photo of a user",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "response": {
                "$ref": "UserPhoto"
              },
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "update": {
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "request": {
                "$ref": "UserPhoto"
              },
              "description": "Add a photo for the user",
              "response": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.update",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              },
              "httpMethod": "PUT"
            }
          }
        }
      }
    },
    "tokens": {
      "methods": {
        "delete": {
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string"
            },
            "clientId": {
              "location": "path",
              "required": true,
              "description": "The Client ID of the application the token is issued to.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Delete all access tokens issued by a user for an application.",
          "id": "directory.tokens.delete",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        },
        "get": {
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "response": {
            "$ref": "Token"
          },
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Get information about an access token issued by a user.",
          "id": "directory.tokens.get",
          "httpMethod": "GET"
        },
        "list": {
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.tokens.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Tokens"
          },
          "httpMethod": "GET"
        }
      }
    },
    "asps": {
      "methods": {
        "list": {
          "response": {
            "$ref": "Asps"
          },
          "id": "directory.asps.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "GET",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "description": "List the ASPs issued by a user.",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "path": "admin/directory/v1/users/{userKey}/asps"
        },
        "get": {
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.asps.get",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "response": {
            "$ref": "Asp"
          },
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string"
            },
            "codeId": {
              "required": true,
              "location": "path",
              "format": "int32",
              "description": "The unique ID of the ASP.",
              "type": "integer"
            }
          },
          "description": "Get information about an ASP issued by a user.",
          "parameterOrder": [
            "userKey",
            "codeId"
          ]
        },
        "delete": {
          "id": "directory.asps.delete",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "codeId": {
              "type": "integer",
              "format": "int32",
              "location": "path",
              "description": "The unique ID of the ASP to be deleted.",
              "required": true
            }
          },
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "description": "Delete an ASP issued by a user."
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "methods": {
                "issueCommand": {
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ],
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "parameters": {
                    "customerId": {
                      "type": "string",
                      "description": "Immutable. Immutable ID of the G Suite account.",
                      "location": "path",
                      "required": true
                    },
                    "deviceId": {
                      "description": "Immutable. Immutable ID of Chrome OS Device.",
                      "type": "string",
                      "location": "path",
                      "required": true
                    }
                  },
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "description": "Issues a command for the device to execute."
                }
              },
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "parameters": {
                        "customerId": {
                          "required": true,
                          "location": "path",
                          "type": "string",
                          "description": "Immutable. Immutable ID of the G Suite account."
                        },
                        "deviceId": {
                          "description": "Immutable. Immutable ID of Chrome OS Device.",
                          "type": "string",
                          "required": true,
                          "location": "path"
                        },
                        "commandId": {
                          "location": "path",
                          "required": true,
                          "description": "Immutable. Immutable ID of Chrome OS Device Command.",
                          "type": "string",
                          "format": "int64"
                        }
                      },
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "description": "Gets command data a specific command issued to the device.",
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "id": "admin.customer.devices.chromeos.commands.get",
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "methods": {
        "patch": {
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "request": {
            "$ref": "Schema"
          },
          "response": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.patch",
          "httpMethod": "PATCH",
          "parameters": {
            "schemaKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Name or immutable ID of the schema."
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "description": "Patch Schema via Apiary Patch Orchestration",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ]
        },
        "update": {
          "request": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          },
          "parameters": {
            "schemaKey": {
              "required": true,
              "type": "string",
              "description": "Name or immutable ID of the schema.",
              "location": "path"
            },
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "httpMethod": "PUT",
          "description": "Update schema",
          "id": "directory.schemas.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        },
        "list": {
          "parameterOrder": [
            "customerId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "id": "directory.schemas.list",
          "parameters": {
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "description": "Retrieve all schemas for a customer",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "httpMethod": "GET",
          "response": {
            "$ref": "Schemas"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ]
        },
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Schema"
          },
          "description": "Create schema.",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "id": "directory.schemas.insert",
          "request": {
            "$ref": "Schema"
          }
        },
        "get": {
          "description": "Retrieve schema",
          "response": {
            "$ref": "Schema"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "id": "directory.schemas.get",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "schemaKey": {
              "description": "Name or immutable ID of the schema",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            }
          }
        },
        "delete": {
          "description": "Delete schema",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.delete",
          "parameters": {
            "schemaKey": {
              "description": "Name or immutable ID of the schema",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            }
          }
        }
      }
    },
    "domainAliases": {
      "methods": {
        "insert": {
          "response": {
            "$ref": "DomainAlias"
          },
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "id": "directory.domainAliases.insert",
          "request": {
            "$ref": "DomainAlias"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "httpMethod": "POST",
          "description": "Inserts a domain alias of the customer."
        },
        "list": {
          "description": "Lists the domain aliases of the customer.",
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "response": {
            "$ref": "DomainAliases"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "parentDomainName": {
              "location": "query",
              "type": "string",
              "description": "Name of the parent domain for which domain aliases are to be fetched."
            }
          },
          "id": "directory.domainAliases.list"
        },
        "delete": {
          "description": "Deletes a domain Alias of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "httpMethod": "DELETE",
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            },
            "domainAliasName": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Name of domain alias to be retrieved."
            }
          },
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "id": "directory.domainAliases.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}"
        },
        "get": {
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "domainAliasName": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Name of domain alias to be retrieved."
            }
          },
          "id": "directory.domainAliases.get",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "response": {
            "$ref": "DomainAlias"
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "description": "Retrieves a domain alias of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}"
        }
      }
    },
    "resources": {
      "resources": {
        "calendars": {
          "methods": {
            "list": {
              "id": "directory.resources.calendars.list",
              "description": "Retrieves a list of calendar resources for an account.",
              "httpMethod": "GET",
              "parameterOrder": [
                "customer"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                },
                "query": {
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone.",
                  "type": "string",
                  "location": "query"
                },
                "maxResults": {
                  "type": "integer",
                  "format": "int32",
                  "maximum": "500",
                  "location": "query",
                  "description": "Maximum number of results to return.",
                  "minimum": "1"
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "location": "query",
                  "type": "string"
                },
                "orderBy": {
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order.",
                  "type": "string",
                  "location": "query"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "response": {
                "$ref": "CalendarResources"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars"
            },
            "update": {
              "httpMethod": "PUT",
              "request": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "id": "directory.resources.calendars.update",
              "parameters": {
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to update.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              }
            },
            "insert": {
              "description": "Inserts a calendar resource.",
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "request": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "id": "directory.resources.calendars.insert",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameterOrder": [
                "customer"
              ],
              "httpMethod": "POST"
            },
            "delete": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.delete",
              "httpMethod": "DELETE",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "calendarResourceId": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID of the calendar resource to delete.",
                  "required": true
                }
              },
              "description": "Deletes a calendar resource.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ]
            },
            "get": {
              "response": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                },
                "calendarResourceId": {
                  "type": "string",
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "location": "path",
                  "required": true
                }
              },
              "id": "directory.resources.calendars.get",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Retrieves a calendar resource."
            },
            "patch": {
              "id": "directory.resources.calendars.patch",
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                },
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to update.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "request": {
                "$ref": "CalendarResource"
              },
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "httpMethod": "PATCH",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            }
          }
        },
        "features": {
          "methods": {
            "delete": {
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.delete",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "DELETE",
              "description": "Deletes a feature.",
              "parameters": {
                "featureKey": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the feature to delete.",
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              }
            },
            "update": {
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the feature to update.",
                  "type": "string"
                }
              },
              "request": {
                "$ref": "Feature"
              },
              "description": "Updates a feature.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "PUT",
              "id": "directory.resources.features.update",
              "response": {
                "$ref": "Feature"
              }
            },
            "list": {
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                },
                "maxResults": {
                  "format": "int32",
                  "location": "query",
                  "maximum": "500",
                  "minimum": "1",
                  "description": "Maximum number of results to return.",
                  "type": "integer"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.features.list",
              "description": "Retrieves a list of features for an account.",
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "Features"
              }
            },
            "insert": {
              "id": "directory.resources.features.insert",
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "response": {
                "$ref": "Feature"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Inserts a feature.",
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "request": {
                "$ref": "Feature"
              }
            },
            "rename": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "httpMethod": "POST",
              "description": "Renames a feature.",
              "parameters": {
                "oldName": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the feature to rename."
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.features.rename",
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "request": {
                "$ref": "FeatureRename"
              }
            },
            "patch": {
              "response": {
                "$ref": "Feature"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "featureKey": {
                  "description": "The unique ID of the feature to update.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "request": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.patch",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "httpMethod": "PATCH"
            },
            "get": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "response": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Retrieves a feature.",
              "httpMethod": "GET",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "featureKey": {
                  "required": true,
                  "description": "The unique ID of the feature to retrieve.",
                  "location": "path",
                  "type": "string"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.features.get"
            }
          }
        },
        "buildings": {
          "methods": {
            "insert": {
              "response": {
                "$ref": "Building"
              },
              "description": "Inserts a building.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "coordinatesSource": {
                  "description": "Source from which Building.coordinates are derived.",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "location": "query",
                  "default": "SOURCE_UNSPECIFIED",
                  "type": "string"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "id": "directory.resources.buildings.insert",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "request": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer"
              ]
            },
            "update": {
              "id": "directory.resources.buildings.update",
              "description": "Updates a building.",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "buildingId": {
                  "description": "The id of the building to update.",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "coordinatesSource": {
                  "type": "string",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED",
                  "location": "query"
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "Building"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "request": {
                "$ref": "Building"
              },
              "httpMethod": "PUT",
              "parameterOrder": [
                "customer",
                "buildingId"
              ]
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "response": {
                "$ref": "Buildings"
              },
              "parameterOrder": [
                "customer"
              ],
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "id": "directory.resources.buildings.list",
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "description": "Token to specify the next page in the list.",
                  "location": "query"
                },
                "maxResults": {
                  "description": "Maximum number of results to return.",
                  "type": "integer",
                  "location": "query",
                  "maximum": "500",
                  "minimum": "1",
                  "format": "int32"
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                }
              },
              "description": "Retrieves a list of buildings for an account.",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings"
            },
            "delete": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "buildingId": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The id of the building to delete."
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "httpMethod": "DELETE",
              "id": "directory.resources.buildings.delete",
              "description": "Deletes a building.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "patch": {
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "description": "Patches a building via Apiary Patch Orchestration.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.patch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "Building"
              },
              "parameters": {
                "coordinatesSource": {
                  "location": "query",
                  "default": "SOURCE_UNSPECIFIED",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "type": "string"
                },
                "buildingId": {
                  "description": "The id of the building to update.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              }
            },
            "get": {
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "buildingId": {
                  "description": "The unique ID of the building to retrieve.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "response": {
                "$ref": "Building"
              },
              "description": "Retrieves a building.",
              "id": "directory.resources.buildings.get"
            }
          }
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "delete": {
          "httpMethod": "DELETE",
          "id": "directory.mobiledevices.delete",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "description": "Delete Mobile Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "resourceId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of Mobile Device"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}"
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "response": {
            "$ref": "MobileDevices"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "id": "directory.mobiledevices.list",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "orderBy": {
              "location": "query",
              "description": "Column to use for sorting results",
              "type": "string",
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ]
            },
            "maxResults": {
              "maximum": "100",
              "default": "100",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "minimum": "1",
              "type": "integer",
              "format": "int32",
              "location": "query"
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            }
          },
          "description": "Retrieve all Mobile Devices of a customer (paginated)"
        },
        "action": {
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "id": "directory.mobiledevices.action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "parameters": {
            "resourceId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of Mobile Device",
              "required": true
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            }
          },
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "description": "Take action on Mobile Device",
          "httpMethod": "POST"
        },
        "get": {
          "parameters": {
            "resourceId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of Mobile Device"
            },
            "projection": {
              "type": "string",
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            }
          },
          "description": "Retrieve Mobile Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "id": "directory.mobiledevices.get",
          "response": {
            "$ref": "MobileDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}"
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "list": {
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.verificationCodes.list",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "response": {
            "$ref": "VerificationCodes"
          }
        },
        "generate": {
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "httpMethod": "POST",
          "id": "directory.verificationCodes.generate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "description": "Generate new backup verification codes for the user.",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "required": true,
              "type": "string",
              "location": "path"
            }
          }
        },
        "invalidate": {
          "description": "Invalidate the current backup verification codes for the user.",
          "id": "directory.verificationCodes.invalidate",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the user"
            }
          }
        }
      }
    },
    "orgunits": {
      "methods": {
        "get": {
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "httpMethod": "GET",
          "description": "Retrieve organizational unit",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "response": {
            "$ref": "OrgUnit"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            },
            "orgUnitPath": {
              "pattern": "^.*$",
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Full path of the organizational unit or its ID"
            }
          },
          "id": "directory.orgunits.get"
        },
        "update": {
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "description": "Update organizational unit",
          "id": "directory.orgunits.update",
          "request": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            },
            "orgUnitPath": {
              "pattern": "^.*$",
              "type": "string",
              "location": "path",
              "description": "Full path of the organizational unit or its ID",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "response": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        },
        "insert": {
          "response": {
            "$ref": "OrgUnit"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "httpMethod": "POST",
          "request": {
            "$ref": "OrgUnit"
          },
          "description": "Add organizational unit",
          "id": "directory.orgunits.insert"
        },
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "id": "directory.orgunits.delete",
          "description": "Remove organizational unit",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "orgUnitPath": {
              "required": true,
              "location": "path",
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID",
              "type": "string"
            },
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "httpMethod": "DELETE"
        },
        "patch": {
          "httpMethod": "PATCH",
          "id": "directory.orgunits.patch",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "request": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            },
            "orgUnitPath": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$"
            }
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "description": "Patch organization unit via Apiary Patch Orchestration"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "httpMethod": "GET",
          "description": "Retrieve all organizational units",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.orgunits.list",
          "response": {
            "$ref": "OrgUnits"
          },
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "orgUnitPath": {
              "location": "query",
              "description": "the URL-encoded organizational unit's path or its ID",
              "type": "string",
              "default": ""
            },
            "type": {
              "location": "query",
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ],
              "description": "Whether to return all sub-organizations or just immediate children",
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "type": "string"
            }
          }
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "request": {
            "$ref": "Channel"
          },
          "httpMethod": "POST",
          "description": "Stop watching resources through this channel.",
          "parameters": {},
          "parameterOrder": [],
          "id": "admin.channels.stop",
          "path": "admin/directory_v1/channels/stop",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "flatPath": "admin/directory_v1/channels/stop"
        }
      }
    },
    "groups": {
      "methods": {
        "update": {
          "response": {
            "$ref": "Group"
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "request": {
            "$ref": "Group"
          },
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.groups.update",
          "description": "Update Group",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "httpMethod": "PUT"
        },
        "insert": {
          "description": "Create Group",
          "flatPath": "admin/directory/v1/groups",
          "request": {
            "$ref": "Group"
          },
          "id": "directory.groups.insert",
          "httpMethod": "POST",
          "path": "admin/directory/v1/groups",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameterOrder": [],
          "response": {
            "$ref": "Group"
          },
          "parameters": {}
        },
        "delete": {
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "description": "Delete Group",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "id": "directory.groups.delete",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the group",
              "type": "string"
            }
          }
        },
        "get": {
          "response": {
            "$ref": "Group"
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group",
              "location": "path",
              "required": true
            }
          },
          "httpMethod": "GET",
          "description": "Retrieve Group",
          "id": "directory.groups.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameterOrder": [
            "groupKey"
          ]
        },
        "list": {
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "parameters": {
            "maxResults": {
              "minimum": "1",
              "default": "200",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "format": "int32",
              "type": "integer",
              "location": "query"
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain.",
              "location": "query"
            },
            "sortOrder": {
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "query": {
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "type": "string"
            },
            "userKey": {
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "type": "string",
              "location": "query"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUndefined",
                "email"
              ],
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "location": "query",
              "type": "string"
            },
            "domain": {
              "location": "query",
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/groups",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "response": {
            "$ref": "Groups"
          },
          "id": "directory.groups.list",
          "parameterOrder": [],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups"
        },
        "patch": {
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Group"
          },
          "response": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.patch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameters": {
            "groupKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            }
          },
          "description": "Patch Groups via Apiary Patch Orchestration",
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ]
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "insert": {
              "parameters": {
                "groupKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the group"
                }
              },
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "description": "Add a alias for the group",
              "httpMethod": "POST",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "request": {
                "$ref": "Alias"
              },
              "parameterOrder": [
                "groupKey"
              ],
              "response": {
                "$ref": "Alias"
              },
              "id": "directory.groups.aliases.insert"
            },
            "list": {
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameters": {
                "groupKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the group",
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "description": "List all aliases for a group",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "id": "directory.groups.aliases.list",
              "httpMethod": "GET",
              "parameterOrder": [
                "groupKey"
              ],
              "response": {
                "$ref": "Aliases"
              }
            },
            "delete": {
              "id": "directory.groups.aliases.delete",
              "parameters": {
                "groupKey": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the group"
                },
                "alias": {
                  "location": "path",
                  "type": "string",
                  "description": "The alias to be removed",
                  "required": true
                }
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "description": "Remove a alias for the group",
              "httpMethod": "DELETE",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ]
            }
          }
        }
      }
    },
    "domains": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "description": "Retrieves a domain of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "response": {
            "$ref": "Domains"
          },
          "id": "directory.domains.get",
          "parameters": {
            "domainName": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Name of domain to be retrieved"
            },
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          }
        },
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "id": "directory.domains.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "httpMethod": "DELETE",
          "description": "Deletes a domain of the customer.",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "domainName": {
              "location": "path",
              "type": "string",
              "description": "Name of domain to be deleted",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}"
        },
        "insert": {
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "POST",
          "description": "Inserts a domain of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "response": {
            "$ref": "Domains"
          },
          "request": {
            "$ref": "Domains"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "id": "directory.domains.insert",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domains"
        },
        "list": {
          "path": "admin/directory/v1/customer/{customer}/domains",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "response": {
            "$ref": "Domains2"
          },
          "id": "directory.domains.list",
          "description": "Lists the domains of the customer.",
          "parameterOrder": [
            "customer"
          ]
        }
      }
    },
    "customers": {
      "methods": {
        "get": {
          "response": {
            "$ref": "Customer"
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "id": "directory.customers.get",
          "description": "Retrieves a customer.",
          "parameters": {
            "customerKey": {
              "required": true,
              "description": "Id of the customer to be retrieved",
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "GET"
        },
        "update": {
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "id": "directory.customers.update",
          "description": "Updates a customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "path": "admin/directory/v1/customers/{customerKey}",
          "request": {
            "$ref": "Customer"
          },
          "parameters": {
            "customerKey": {
              "location": "path",
              "description": "Id of the customer to be updated",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "customerKey"
          ],
          "httpMethod": "PUT"
        },
        "patch": {
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "description": "Patch Customers via Apiary Patch Orchestration",
          "parameterOrder": [
            "customerKey"
          ],
          "response": {
            "$ref": "Customer"
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "parameters": {
            "customerKey": {
              "type": "string",
              "required": true,
              "description": "Id of the customer to be updated",
              "location": "path"
            }
          },
          "id": "directory.customers.patch"
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "httpMethod": "POST",
          "description": "Turn off 2-Step Verification for user.",
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.twoStepVerification.turnOff",
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true
            }
          }
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "update": {
          "parameters": {
            "projection": {
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string"
            },
            "deviceId": {
              "required": true,
              "description": "Immutable ID of Chrome OS Device",
              "type": "string",
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "id": "directory.chromeosdevices.update",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "description": "Update Chrome OS Device"
        },
        "moveDevicesToOu": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            },
            "orgUnitPath": {
              "required": true,
              "location": "query",
              "description": "Full path of the target organizational unit or its ID",
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "id": "directory.chromeosdevices.get",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "parameters": {
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query"
            },
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "location": "path",
              "type": "string",
              "required": true
            },
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "description": "Retrieve Chrome OS Device",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ]
        },
        "action": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "id": "directory.chromeosdevices.action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "httpMethod": "POST",
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "parameters": {
            "resourceId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of Chrome OS Device",
              "location": "path"
            },
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "description": "Take action on Chrome OS Device",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action"
        },
        "list": {
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "id": "directory.chromeosdevices.list",
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "parameters": {
            "maxResults": {
              "default": "100",
              "type": "integer",
              "minimum": "1",
              "location": "query",
              "format": "int32",
              "description": "Maximum number of results to return."
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            },
            "orderBy": {
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ],
              "description": "Column to use for sorting results",
              "location": "query",
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "type": "string"
            },
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "type": "string",
              "description": "Restrict information returned to a set of selected fields."
            },
            "sortOrder": {
              "location": "query",
              "type": "string",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            }
          },
          "parameterOrder": [
            "customerId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "httpMethod": "GET"
        },
        "patch": {
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "description": "Patch Chrome OS Device",
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameters": {
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "type": "string",
              "location": "path",
              "required": true
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields."
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.patch"
        }
      }
    },
    "members": {
      "methods": {
        "hasMember": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "response": {
            "$ref": "MembersHasMember"
          },
          "parameters": {
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "memberKey": {
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "httpMethod": "GET",
          "id": "directory.members.hasMember",
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested."
        },
        "list": {
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "response": {
            "$ref": "Members"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "description": "Retrieve all members in a group (paginated)",
          "parameters": {
            "maxResults": {
              "location": "query",
              "type": "integer",
              "default": "200",
              "format": "int32",
              "minimum": "1",
              "description": "Maximum number of results to return. Max allowed value is 200."
            },
            "roles": {
              "type": "string",
              "description": "Comma separated role values to filter list results on.",
              "location": "query"
            },
            "includeDerivedMembership": {
              "type": "boolean",
              "location": "query",
              "description": "Whether to list indirect memberships. Default: false."
            },
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            }
          },
          "id": "directory.members.list",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ]
        },
        "delete": {
          "id": "directory.members.delete",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "memberKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the member",
              "type": "string"
            },
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "description": "Remove membership.",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "DELETE"
        },
        "update": {
          "description": "Update membership of a user in the specified group.",
          "response": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            },
            "memberKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object"
            }
          },
          "request": {
            "$ref": "Member"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "httpMethod": "PUT",
          "id": "directory.members.update"
        },
        "get": {
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "memberKey": {
              "required": true,
              "description": "Email or immutable ID of the member",
              "type": "string",
              "location": "path"
            },
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.get",
          "response": {
            "$ref": "Member"
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "description": "Retrieve Group Member"
        },
        "patch": {
          "description": "Patch Member via Apiary Patch Orchestration",
          "request": {
            "$ref": "Member"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "memberKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.patch",
          "response": {
            "$ref": "Member"
          }
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameters": {
            "groupKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group",
              "required": true
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "httpMethod": "POST",
          "id": "directory.members.insert",
          "parameterOrder": [
            "groupKey"
          ],
          "response": {
            "$ref": "Member"
          },
          "description": "Add user to the specified group.",
          "request": {
            "$ref": "Member"
          }
        }
      }
    },
    "roles": {
      "methods": {
        "insert": {
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "id": "directory.roles.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "Role"
          },
          "description": "Creates a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "httpMethod": "POST",
          "request": {
            "$ref": "Role"
          }
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roles.delete",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "description": "Deletes a role.",
          "parameters": {
            "roleId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role.",
              "required": true
            },
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "update": {
          "request": {
            "$ref": "Role"
          },
          "id": "directory.roles.update",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "roleId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role.",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "response": {
            "$ref": "Role"
          },
          "description": "Updates a role.",
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "patch": {
          "request": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "httpMethod": "PATCH",
          "parameters": {
            "roleId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role."
            },
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roles.patch",
          "description": "Patch role via Apiary Patch Orchestration",
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "get": {
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "roleId": {
              "location": "path",
              "description": "Immutable ID of the role.",
              "required": true,
              "type": "string"
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "id": "directory.roles.get",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "description": "Retrieves a role.",
          "httpMethod": "GET"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Roles"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles",
          "id": "directory.roles.list",
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "parameters": {
            "maxResults": {
              "description": "Maximum number of results to return.",
              "type": "integer",
              "minimum": "1",
              "location": "query",
              "maximum": "100",
              "format": "int32"
            },
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            }
          }
        }
      }
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        }
      }
    }
  },
  "ownerName": "Google",
  "canonicalName": "directory",
  "version": "directory_v1",
  "kind": "discovery#restDescription",
  "rootUrl": "https://www.googleapis.com/"
}
