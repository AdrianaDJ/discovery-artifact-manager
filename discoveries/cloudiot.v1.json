{
  "baseUrl": "https://cloudiot.googleapis.com/",
  "kind": "discovery#restDescription",
  "description": "Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform.\n",
  "servicePath": "",
  "basePath": "",
  "id": "cloudiot:v1",
  "documentationLink": "https://cloud.google.com/iot",
  "revision": "20180516",
  "discoveryVersion": "v1",
  "version_module": true,
  "schemas": {
    "ListDeviceConfigVersionsResponse": {
      "properties": {
        "deviceConfigs": {
          "description": "The device configuration for the last few versions. Versions are listed\nin decreasing order, starting from the most recent one.",
          "type": "array",
          "items": {
            "$ref": "DeviceConfig"
          }
        }
      },
      "id": "ListDeviceConfigVersionsResponse",
      "description": "Response for `ListDeviceConfigVersions`.",
      "type": "object"
    },
    "X509CertificateDetails": {
      "properties": {
        "signatureAlgorithm": {
          "description": "The algorithm used to sign the certificate.",
          "type": "string"
        },
        "startTime": {
          "description": "The time the certificate becomes valid.",
          "format": "google-datetime",
          "type": "string"
        },
        "expiryTime": {
          "description": "The time the certificate becomes invalid.",
          "format": "google-datetime",
          "type": "string"
        },
        "subject": {
          "description": "The entity the certificate and public key belong to.",
          "type": "string"
        },
        "issuer": {
          "description": "The entity that signed the certificate.",
          "type": "string"
        },
        "publicKeyType": {
          "description": "The type of public key in the certificate.",
          "type": "string"
        }
      },
      "id": "X509CertificateDetails",
      "description": "Details of an X.509 certificate. For informational purposes only.",
      "type": "object"
    },
    "EventNotificationConfig": {
      "description": "The configuration for forwarding telemetry events.",
      "type": "object",
      "properties": {
        "subfolderMatches": {
          "description": "If the subfolder name matches this string exactly, this configuration will\nbe used. The string must not include the leading '/' character. If empty,\nall strings are matched. This field is used only for telemetry events;\nsubfolders are not supported for state changes.",
          "type": "string"
        },
        "pubsubTopicName": {
          "description": "A Cloud Pub/Sub topic name. For example,\n`projects/myProject/topics/deviceEvents`.",
          "type": "string"
        }
      },
      "id": "EventNotificationConfig"
    },
    "SetIamPolicyRequest": {
      "description": "Request message for `SetIamPolicy` method.",
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "Policy",
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of\nthe policy is limited to a few 10s of KB. An empty policy is a\nvalid policy but certain Cloud Platform services (such as Projects)\nmight reject them."
        }
      },
      "id": "SetIamPolicyRequest"
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object",
      "properties": {},
      "id": "Empty"
    },
    "PublicKeyCredential": {
      "description": "A public key format and data.",
      "type": "object",
      "properties": {
        "key": {
          "description": "The key data.",
          "type": "string"
        },
        "format": {
          "description": "The format of the key.",
          "type": "string",
          "enumDescriptions": [
            "The format has not been specified. This is an invalid default value and\nmust not be used.",
            "An RSA public key encoded in base64, and wrapped by\n`-----BEGIN PUBLIC KEY-----` and `-----END PUBLIC KEY-----`. This can be\nused to verify `RS256` signatures in JWT tokens ([RFC7518](\nhttps://www.ietf.org/rfc/rfc7518.txt)).",
            "As RSA_PEM, but wrapped in an X.509v3 certificate ([RFC5280](\nhttps://www.ietf.org/rfc/rfc5280.txt)), encoded in base64, and wrapped by\n`-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`.",
            "Public key for the ECDSA algorithm using P-256 and SHA-256, encoded in\nbase64, and wrapped by `-----BEGIN PUBLIC KEY-----` and `-----END\nPUBLIC KEY-----`. This can be used to verify JWT tokens with the `ES256`\nalgorithm ([RFC7518](https://www.ietf.org/rfc/rfc7518.txt)). This curve is\ndefined in [OpenSSL](https://www.openssl.org/) as the `prime256v1` curve.",
            "As ES256_PEM, but wrapped in an X.509v3 certificate ([RFC5280](\nhttps://www.ietf.org/rfc/rfc5280.txt)), encoded in base64, and wrapped by\n`-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`."
          ],
          "enum": [
            "UNSPECIFIED_PUBLIC_KEY_FORMAT",
            "RSA_PEM",
            "RSA_X509_PEM",
            "ES256_PEM",
            "ES256_X509_PEM"
          ]
        }
      },
      "id": "PublicKeyCredential"
    },
    "PublicKeyCertificate": {
      "description": "A public key certificate format and data.",
      "type": "object",
      "properties": {
        "x509Details": {
          "$ref": "X509CertificateDetails",
          "description": "[Output only] The certificate details. Used only for X.509 certificates."
        },
        "format": {
          "description": "The certificate format.",
          "type": "string",
          "enumDescriptions": [
            "The format has not been specified. This is an invalid default value and\nmust not be used.",
            "An X.509v3 certificate ([RFC5280](https://www.ietf.org/rfc/rfc5280.txt)),\nencoded in base64, and wrapped by `-----BEGIN CERTIFICATE-----` and\n`-----END CERTIFICATE-----`."
          ],
          "enum": [
            "UNSPECIFIED_PUBLIC_KEY_CERTIFICATE_FORMAT",
            "X509_CERTIFICATE_PEM"
          ]
        },
        "certificate": {
          "description": "The certificate data.",
          "type": "string"
        }
      },
      "id": "PublicKeyCertificate"
    },
    "DeviceState": {
      "description": "The device state, as reported by the device.",
      "type": "object",
      "properties": {
        "binaryData": {
          "description": "The device state data.",
          "format": "byte",
          "type": "string"
        },
        "updateTime": {
          "description": "[Output only] The time at which this state version was updated in Cloud\nIoT Core.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "id": "DeviceState"
    },
    "TestIamPermissionsRequest": {
      "description": "Request message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "The set of permissions to check for the `resource`. Permissions with\nwildcards (such as '*' or 'storage.*') are not allowed. For more\ninformation see\n[IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "TestIamPermissionsRequest"
    },
    "StateNotificationConfig": {
      "description": "The configuration for notification of new states received from the device.",
      "type": "object",
      "properties": {
        "pubsubTopicName": {
          "description": "A Cloud Pub/Sub topic name. For example,\n`projects/myProject/topics/deviceEvents`.",
          "type": "string"
        }
      },
      "id": "StateNotificationConfig"
    },
    "RegistryCredential": {
      "description": "A server-stored registry credential used to validate device credentials.",
      "type": "object",
      "properties": {
        "publicKeyCertificate": {
          "$ref": "PublicKeyCertificate",
          "description": "A public key certificate used to verify the device credentials."
        }
      },
      "id": "RegistryCredential"
    },
    "Policy": {
      "description": "Defines an Identity and Access Management (IAM) policy. It is used to\nspecify access control policies for Cloud Platform resources.\n\n\nA `Policy` consists of a list of `bindings`. A `binding` binds a list of\n`members` to a `role`, where the members can be user accounts, Google groups,\nGoogle domains, and service accounts. A `role` is a named list of permissions\ndefined by IAM.\n\n**JSON Example**\n\n    {\n      \"bindings\": [\n        {\n          \"role\": \"roles/owner\",\n          \"members\": [\n            \"user:mike@example.com\",\n            \"group:admins@example.com\",\n            \"domain:google.com\",\n            \"serviceAccount:my-other-app@appspot.gserviceaccount.com\"\n          ]\n        },\n        {\n          \"role\": \"roles/viewer\",\n          \"members\": [\"user:sean@example.com\"]\n        }\n      ]\n    }\n\n**YAML Example**\n\n    bindings:\n    - members:\n      - user:mike@example.com\n      - group:admins@example.com\n      - domain:google.com\n      - serviceAccount:my-other-app@appspot.gserviceaccount.com\n      role: roles/owner\n    - members:\n      - user:sean@example.com\n      role: roles/viewer\n\n\nFor a description of IAM and its features, see the\n[IAM developer's guide](https://cloud.google.com/iam/docs).",
      "type": "object",
      "properties": {
        "bindings": {
          "description": "Associates a list of `members` to a `role`.\n`bindings` with no members will result in an error.",
          "type": "array",
          "items": {
            "$ref": "Binding"
          }
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help\nprevent simultaneous updates of a policy from overwriting each other.\nIt is strongly suggested that systems make use of the `etag` in the\nread-modify-write cycle to perform policy updates in order to avoid race\nconditions: An `etag` is returned in the response to `getIamPolicy`, and\nsystems are expected to put that etag in the request to `setIamPolicy` to\nensure that their change will be applied to the same version of the policy.\n\nIf no `etag` is provided in the call to `setIamPolicy`, then the existing\npolicy is overwritten blindly.",
          "format": "byte",
          "type": "string"
        },
        "version": {
          "description": "Deprecated.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "Policy"
    },
    "ListDeviceRegistriesResponse": {
      "description": "Response for `ListDeviceRegistries`.",
      "type": "object",
      "properties": {
        "deviceRegistries": {
          "description": "The registries that matched the query.",
          "type": "array",
          "items": {
            "$ref": "DeviceRegistry"
          }
        },
        "nextPageToken": {
          "description": "If not empty, indicates that there may be more registries that match the\nrequest; this value should be passed in a new\n`ListDeviceRegistriesRequest`.",
          "type": "string"
        }
      },
      "id": "ListDeviceRegistriesResponse"
    },
    "DeviceRegistry": {
      "description": "A container for a group of devices.",
      "type": "object",
      "properties": {
        "stateNotificationConfig": {
          "description": "The configuration for notification of new states received from the device.\nState updates are guaranteed to be stored in the state history, but\nnotifications to Cloud Pub/Sub are not guaranteed. For example, if\npermissions are misconfigured or the specified topic doesn't exist, no\nnotification will be published but the state will still be stored in Cloud\nIoT Core.",
          "$ref": "StateNotificationConfig"
        },
        "name": {
          "description": "The resource path name. For example,\n`projects/example-project/locations/us-central1/registries/my-registry`.",
          "type": "string"
        },
        "credentials": {
          "description": "The credentials used to verify the device credentials. No more than 10\ncredentials can be bound to a single registry at a time. The verification\nprocess occurs at the time of device creation or update. If this field is\nempty, no verification is performed. Otherwise, the credentials of a newly\ncreated device or added credentials of an updated device should be signed\nwith one of these registry credentials.\n\nNote, however, that existing devices will never be affected by\nmodifications to this list of credentials: after a device has been\nsuccessfully created in a registry, it should be able to connect even if\nits registry credentials are revoked, deleted, or modified.",
          "type": "array",
          "items": {
            "$ref": "RegistryCredential"
          }
        },
        "eventNotificationConfigs": {
          "description": "The configuration for notification of telemetry events received from the\ndevice. All telemetry events that were successfully published by the\ndevice and acknowledged by Cloud IoT Core are guaranteed to be\ndelivered to Cloud Pub/Sub. If multiple configurations match a message,\nonly the first matching configuration is used. If you try to publish a\ndevice telemetry event using MQTT without specifying a Cloud Pub/Sub topic\nfor the device's registry, the connection closes automatically. If you try\nto do so using an HTTP connection, an error is returned. Up to 10\nconfigurations may be provided.",
          "type": "array",
          "items": {
            "$ref": "EventNotificationConfig"
          }
        },
        "httpConfig": {
          "description": "The DeviceService (HTTP) configuration for this device registry.",
          "$ref": "HttpConfig"
        },
        "id": {
          "description": "The identifier of this device registry. For example, `myRegistry`.",
          "type": "string"
        },
        "mqttConfig": {
          "$ref": "MqttConfig",
          "description": "The MQTT configuration for this device registry."
        }
      },
      "id": "DeviceRegistry"
    },
    "ListDevicesResponse": {
      "properties": {
        "devices": {
          "description": "The devices that match the request.",
          "type": "array",
          "items": {
            "$ref": "Device"
          }
        },
        "nextPageToken": {
          "description": "If not empty, indicates that there may be more devices that match the\nrequest; this value should be passed in a new `ListDevicesRequest`.",
          "type": "string"
        }
      },
      "id": "ListDevicesResponse",
      "description": "Response for `ListDevices`.",
      "type": "object"
    },
    "DeviceCredential": {
      "description": "A server-stored device credential used for authentication.",
      "type": "object",
      "properties": {
        "expirationTime": {
          "description": "[Optional] The time at which this credential becomes invalid. This\ncredential will be ignored for new client authentication requests after\nthis timestamp; however, it will not be automatically deleted.",
          "format": "google-datetime",
          "type": "string"
        },
        "publicKey": {
          "description": "A public key used to verify the signature of JSON Web Tokens (JWTs).\nWhen adding a new device credential, either via device creation or via\nmodifications, this public key credential may be required to be signed by\none of the registry level certificates. More specifically, if the\nregistry contains at least one certificate, any new device credential\nmust be signed by one of the registry certificates. As a result,\nwhen the registry contains certificates, only X.509 certificates are\naccepted as device credentials. However, if the registry does\nnot contain a certificate, self-signed certificates and public keys will\nbe accepted. New device credentials must be different from every\nregistry-level certificate.",
          "$ref": "PublicKeyCredential"
        }
      },
      "id": "DeviceCredential"
    },
    "HttpConfig": {
      "description": "The configuration of the HTTP bridge for a device registry.",
      "type": "object",
      "properties": {
        "httpEnabledState": {
          "enum": [
            "HTTP_STATE_UNSPECIFIED",
            "HTTP_ENABLED",
            "HTTP_DISABLED"
          ],
          "description": "If enabled, allows devices to use DeviceService via the HTTP protocol.\nOtherwise, any requests to DeviceService will fail for this registry.",
          "type": "string",
          "enumDescriptions": [
            "No HTTP state specified. If not specified, DeviceService will be\nenabled by default.",
            "Enables DeviceService (HTTP) service for the registry.",
            "Disables DeviceService (HTTP) service for the registry."
          ]
        }
      },
      "id": "HttpConfig"
    },
    "DeviceConfig": {
      "description": "The device configuration. Eventually delivered to devices.",
      "type": "object",
      "properties": {
        "version": {
          "description": "[Output only] The version of this update. The version number is assigned by\nthe server, and is always greater than 0 after device creation. The\nversion must be 0 on the `CreateDevice` request if a `config` is\nspecified; the response of `CreateDevice` will always have a value of 1.",
          "format": "int64",
          "type": "string"
        },
        "cloudUpdateTime": {
          "description": "[Output only] The time at which this configuration version was updated in\nCloud IoT Core. This timestamp is set by the server.",
          "format": "google-datetime",
          "type": "string"
        },
        "deviceAckTime": {
          "description": "[Output only] The time at which Cloud IoT Core received the\nacknowledgment from the device, indicating that the device has received\nthis configuration version. If this field is not present, the device has\nnot yet acknowledged that it received this version. Note that when\nthe config was sent to the device, many config versions may have been\navailable in Cloud IoT Core while the device was disconnected, and on\nconnection, only the latest version is sent to the device. Some\nversions may never be sent to the device, and therefore are never\nacknowledged. This timestamp is set by Cloud IoT Core.",
          "format": "google-datetime",
          "type": "string"
        },
        "binaryData": {
          "description": "The device configuration data.",
          "format": "byte",
          "type": "string"
        }
      },
      "id": "DeviceConfig"
    },
    "MqttConfig": {
      "description": "The configuration of MQTT for a device registry.",
      "type": "object",
      "properties": {
        "mqttEnabledState": {
          "enumDescriptions": [
            "No MQTT state specified. If not specified, MQTT will be enabled by default.",
            "Enables a MQTT connection.",
            "Disables a MQTT connection."
          ],
          "enum": [
            "MQTT_STATE_UNSPECIFIED",
            "MQTT_ENABLED",
            "MQTT_DISABLED"
          ],
          "description": "If enabled, allows connections using the MQTT protocol. Otherwise, MQTT\nconnections to this registry will fail.",
          "type": "string"
        }
      },
      "id": "MqttConfig"
    },
    "Status": {
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "type": "array",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          }
        }
      },
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` that can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
      "type": "object"
    },
    "Binding": {
      "properties": {
        "members": {
          "description": "Specifies the identities requesting access for a Cloud Platform resource.\n`members` can have the following values:\n\n* `allUsers`: A special identifier that represents anyone who is\n   on the internet; with or without a Google account.\n\n* `allAuthenticatedUsers`: A special identifier that represents anyone\n   who is authenticated with a Google account or a service account.\n\n* `user:{emailid}`: An email address that represents a specific Google\n   account. For example, `alice@gmail.com` .\n\n\n* `serviceAccount:{emailid}`: An email address that represents a service\n   account. For example, `my-other-app@appspot.gserviceaccount.com`.\n\n* `group:{emailid}`: An email address that represents a Google group.\n   For example, `admins@example.com`.\n\n\n* `domain:{domain}`: A Google Apps domain name that represents all the\n   users of that domain. For example, `google.com` or `example.com`.\n\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "role": {
          "description": "Role that is assigned to `members`.\nFor example, `roles/viewer`, `roles/editor`, or `roles/owner`.\nRequired",
          "type": "string"
        }
      },
      "id": "Binding",
      "description": "Associates `members` with a `role`.",
      "type": "object"
    },
    "ModifyCloudToDeviceConfigRequest": {
      "description": "Request for `ModifyCloudToDeviceConfig`.",
      "type": "object",
      "properties": {
        "versionToUpdate": {
          "description": "The version number to update. If this value is zero, it will not check the\nversion number of the server and will always update the current version;\notherwise, this update will fail if the version number found on the server\ndoes not match this version number. This is used to support multiple\nsimultaneous updates without losing data.",
          "format": "int64",
          "type": "string"
        },
        "binaryData": {
          "description": "The configuration data for the device.",
          "format": "byte",
          "type": "string"
        }
      },
      "id": "ModifyCloudToDeviceConfigRequest"
    },
    "ListDeviceStatesResponse": {
      "description": "Response for `ListDeviceStates`.",
      "type": "object",
      "properties": {
        "deviceStates": {
          "description": "The last few device states. States are listed in descending order of server\nupdate time, starting from the most recent one.",
          "type": "array",
          "items": {
            "$ref": "DeviceState"
          }
        }
      },
      "id": "ListDeviceStatesResponse"
    },
    "TestIamPermissionsResponse": {
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is\nallowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "TestIamPermissionsResponse",
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object"
    },
    "GetIamPolicyRequest": {
      "description": "Request message for `GetIamPolicy` method.",
      "type": "object",
      "properties": {},
      "id": "GetIamPolicyRequest"
    },
    "Device": {
      "description": "The device resource.",
      "type": "object",
      "properties": {
        "lastStateTime": {
          "description": "[Output only] The last time a state event was received. Timestamps are\nperiodically collected and written to storage; they may be stale by a few\nminutes.",
          "format": "google-datetime",
          "type": "string"
        },
        "state": {
          "$ref": "DeviceState",
          "description": "[Output only] The state most recently received from the device. If no state\nhas been reported, this field is not present."
        },
        "config": {
          "description": "The most recent device configuration, which is eventually sent from\nCloud IoT Core to the device. If not present on creation, the\nconfiguration will be initialized with an empty payload and version value\nof `1`. To update this field after creation, use the\n`DeviceManager.ModifyCloudToDeviceConfig` method.",
          "$ref": "DeviceConfig"
        },
        "credentials": {
          "description": "The credentials used to authenticate this device. To allow credential\nrotation without interruption, multiple device credentials can be bound to\nthis device. No more than 3 credentials can be bound to a single device at\na time. When new credentials are added to a device, they are verified\nagainst the registry credentials. For details, see the description of the\n`DeviceRegistry.credentials` field.",
          "type": "array",
          "items": {
            "$ref": "DeviceCredential"
          }
        },
        "name": {
          "description": "The resource path name. For example,\n`projects/p1/locations/us-central1/registries/registry0/devices/dev0` or\n`projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`.\nWhen `name` is populated as a response from the service, it always ends\nin the device numeric ID.",
          "type": "string"
        },
        "lastErrorTime": {
          "description": "[Output only] The time the most recent error occurred, such as a failure to\npublish to Cloud Pub/Sub. This field is the timestamp of\n'last_error_status'.",
          "format": "google-datetime",
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The metadata key-value pairs assigned to the device. This metadata is not\ninterpreted or indexed by Cloud IoT Core. It can be used to add contextual\ninformation for the device.\n\nKeys must conform to the regular expression a-zA-Z+ and\nbe less than 128 bytes in length.\n\nValues are free-form strings. Each value must be less than or equal to 32\nKB in size.\n\nThe total size of all keys and values must be less than 256 KB, and the\nmaximum number of key-value pairs is 500.",
          "type": "object"
        },
        "id": {
          "description": "The user-defined device identifier. The device ID must be unique\nwithin a device registry.",
          "type": "string"
        },
        "lastConfigAckTime": {
          "description": "[Output only] The last time a cloud-to-device config version acknowledgment\nwas received from the device. This field is only for configurations\nsent through MQTT.",
          "format": "google-datetime",
          "type": "string"
        },
        "numId": {
          "description": "[Output only] A server-defined unique numeric ID for the device. This is a\nmore compact way to identify devices, and it is globally unique.",
          "format": "uint64",
          "type": "string"
        },
        "blocked": {
          "description": "If a device is blocked, connections or requests from this device will fail.\nCan be used to temporarily prevent the device from connecting if, for\nexample, the sensor is generating bad data and needs maintenance.",
          "type": "boolean"
        },
        "lastHeartbeatTime": {
          "description": "[Output only] The last time an MQTT `PINGREQ` was received. This field\napplies only to devices connecting through MQTT. MQTT clients usually only\nsend `PINGREQ` messages if the connection is idle, and no other messages\nhave been sent. Timestamps are periodically collected and written to\nstorage; they may be stale by a few minutes.",
          "format": "google-datetime",
          "type": "string"
        },
        "lastEventTime": {
          "description": "[Output only] The last time a telemetry event was received. Timestamps are\nperiodically collected and written to storage; they may be stale by a few\nminutes.",
          "format": "google-datetime",
          "type": "string"
        },
        "lastConfigSendTime": {
          "description": "[Output only] The last time a cloud-to-device config version was sent to\nthe device.",
          "format": "google-datetime",
          "type": "string"
        },
        "lastErrorStatus": {
          "description": "[Output only] The error message of the most recent error, such as a failure\nto publish to Cloud Pub/Sub. 'last_error_time' is the timestamp of this\nfield. If no errors have occurred, this field has an empty message\nand the status code 0 == OK. Otherwise, this field is expected to have a\nstatus code other than OK.",
          "$ref": "Status"
        }
      },
      "id": "Device"
    }
  },
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "protocol": "rest",
  "canonicalName": "Cloud Iot",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/cloudiot": {
          "description": "Register and manage devices in the Google Cloud IoT service"
        }
      }
    }
  },
  "rootUrl": "https://cloudiot.googleapis.com/",
  "ownerDomain": "google.com",
  "name": "cloudiot",
  "batchPath": "batch",
  "fullyEncodeReservedExpansion": true,
  "title": "Cloud IoT API",
  "ownerName": "Google",
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "registries": {
              "methods": {
                "create": {
                  "response": {
                    "$ref": "DeviceRegistry"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloudiot"
                  ],
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "description": "The project and cloud region where this device registry must be created.\nFor example, `projects/example-project/locations/us-central1`.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries",
                  "path": "v1/{+parent}/registries",
                  "id": "cloudiot.projects.locations.registries.create",
                  "request": {
                    "$ref": "DeviceRegistry"
                  },
                  "description": "Creates a device registry that contains devices."
                },
                "setIamPolicy": {
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "resource"
                  ],
                  "response": {
                    "$ref": "Policy"
                  },
                  "parameters": {
                    "resource": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+$",
                      "location": "path",
                      "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloudiot"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}:setIamPolicy",
                  "id": "cloudiot.projects.locations.registries.setIamPolicy",
                  "path": "v1/{+resource}:setIamPolicy",
                  "description": "Sets the access control policy on the specified resource. Replaces any\nexisting policy.",
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  }
                },
                "getIamPolicy": {
                  "response": {
                    "$ref": "Policy"
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "location": "path",
                      "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+$"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloudiot"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}:getIamPolicy",
                  "path": "v1/{+resource}:getIamPolicy",
                  "id": "cloudiot.projects.locations.registries.getIamPolicy",
                  "description": "Gets the access control policy for a resource.\nReturns an empty policy if the resource exists and does not have a policy\nset.",
                  "request": {
                    "$ref": "GetIamPolicyRequest"
                  }
                },
                "get": {
                  "response": {
                    "$ref": "DeviceRegistry"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "The name of the device registry. For example,\n`projects/example-project/locations/us-central1/registries/my-registry`.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+$",
                      "location": "path"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloudiot"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}",
                  "path": "v1/{+name}",
                  "id": "cloudiot.projects.locations.registries.get",
                  "description": "Gets a device registry configuration."
                },
                "patch": {
                  "response": {
                    "$ref": "DeviceRegistry"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "PATCH",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloudiot"
                  ],
                  "parameters": {
                    "updateMask": {
                      "location": "query",
                      "description": "Only updates the `device_registry` fields indicated by this mask.\nThe field mask must not be empty, and it must not contain fields that\nare immutable or only set by the server.\nMutable top-level fields: `event_notification_config`, `http_config`,\n`mqtt_config`, and `state_notification_config`.",
                      "format": "google-fieldmask",
                      "type": "string"
                    },
                    "name": {
                      "location": "path",
                      "description": "The resource path name. For example,\n`projects/example-project/locations/us-central1/registries/my-registry`.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+$"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}",
                  "path": "v1/{+name}",
                  "id": "cloudiot.projects.locations.registries.patch",
                  "request": {
                    "$ref": "DeviceRegistry"
                  },
                  "description": "Updates a device registry configuration."
                },
                "testIamPermissions": {
                  "path": "v1/{+resource}:testIamPermissions",
                  "id": "cloudiot.projects.locations.registries.testIamPermissions",
                  "description": "Returns permissions that a caller has on the specified resource.\nIf the resource does not exist, this will return an empty set of\npermissions, not a NOT_FOUND error.",
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+$",
                      "location": "path",
                      "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloudiot"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}:testIamPermissions"
                },
                "delete": {
                  "description": "Deletes a device registry configuration.",
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "The name of the device registry. For example,\n`projects/example-project/locations/us-central1/registries/my-registry`.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+$",
                      "location": "path"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloudiot"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}",
                  "path": "v1/{+name}",
                  "id": "cloudiot.projects.locations.registries.delete"
                },
                "list": {
                  "response": {
                    "$ref": "ListDeviceRegistriesResponse"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/cloudiot"
                  ],
                  "parameters": {
                    "parent": {
                      "description": "The project and cloud region path. For example,\n`projects/example-project/locations/us-central1`.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path"
                    },
                    "pageToken": {
                      "location": "query",
                      "description": "The value returned by the last `ListDeviceRegistriesResponse`; indicates\nthat this is a continuation of a prior `ListDeviceRegistries` call, and\nthat the system should return the next page of data.",
                      "type": "string"
                    },
                    "pageSize": {
                      "location": "query",
                      "description": "The maximum number of registries to return in the response. If this value\nis zero, the service will select a default size. A call may return fewer\nobjects than requested, but if there is a non-empty `page_token`, it\nindicates that more entries are available.",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries",
                  "path": "v1/{+parent}/registries",
                  "id": "cloudiot.projects.locations.registries.list",
                  "description": "Lists device registries."
                }
              },
              "resources": {
                "groups": {
                  "resources": {
                    "devices": {
                      "methods": {
                        "modifyCloudToDeviceConfig": {
                          "description": "Modifies the configuration for the device, which is eventually sent from\nthe Cloud IoT Core servers. Returns the modified configuration version and\nits metadata.",
                          "request": {
                            "$ref": "ModifyCloudToDeviceConfigRequest"
                          },
                          "httpMethod": "POST",
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "DeviceConfig"
                          },
                          "parameters": {
                            "name": {
                              "description": "The name of the device. For example,\n`projects/p0/locations/us-central1/registries/registry0/devices/device0` or\n`projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.",
                              "required": true,
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+/groups/[^/]+/devices/[^/]+$",
                              "location": "path"
                            }
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloudiot"
                          ],
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/groups/{groupsId}/devices/{devicesId}:modifyCloudToDeviceConfig",
                          "id": "cloudiot.projects.locations.registries.groups.devices.modifyCloudToDeviceConfig",
                          "path": "v1/{+name}:modifyCloudToDeviceConfig"
                        },
                        "delete": {
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/groups/{groupsId}/devices/{devicesId}",
                          "path": "v1/{+name}",
                          "id": "cloudiot.projects.locations.registries.groups.devices.delete",
                          "description": "Deletes a device.",
                          "response": {
                            "$ref": "Empty"
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "httpMethod": "DELETE",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloudiot"
                          ],
                          "parameters": {
                            "name": {
                              "description": "The name of the device. For example,\n`projects/p0/locations/us-central1/registries/registry0/devices/device0` or\n`projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.",
                              "required": true,
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+/groups/[^/]+/devices/[^/]+$",
                              "location": "path"
                            }
                          }
                        },
                        "get": {
                          "httpMethod": "GET",
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "Device"
                          },
                          "parameters": {
                            "name": {
                              "description": "The name of the device. For example,\n`projects/p0/locations/us-central1/registries/registry0/devices/device0` or\n`projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.",
                              "required": true,
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+/groups/[^/]+/devices/[^/]+$",
                              "location": "path"
                            },
                            "fieldMask": {
                              "location": "query",
                              "description": "The fields of the `Device` resource to be returned in the response. If the\nfield mask is unset or empty, all fields are returned.",
                              "format": "google-fieldmask",
                              "type": "string"
                            }
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloudiot"
                          ],
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/groups/{groupsId}/devices/{devicesId}",
                          "id": "cloudiot.projects.locations.registries.groups.devices.get",
                          "path": "v1/{+name}",
                          "description": "Gets details about a device."
                        },
                        "patch": {
                          "response": {
                            "$ref": "Device"
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "httpMethod": "PATCH",
                          "parameters": {
                            "updateMask": {
                              "description": "Only updates the `device` fields indicated by this mask.\nThe field mask must not be empty, and it must not contain fields that\nare immutable or only set by the server.\nMutable top-level fields: `credentials`, `blocked`, and `metadata`",
                              "format": "google-fieldmask",
                              "type": "string",
                              "location": "query"
                            },
                            "name": {
                              "description": "The resource path name. For example,\n`projects/p1/locations/us-central1/registries/registry0/devices/dev0` or\n`projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`.\nWhen `name` is populated as a response from the service, it always ends\nin the device numeric ID.",
                              "required": true,
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+/groups/[^/]+/devices/[^/]+$",
                              "location": "path"
                            }
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloudiot"
                          ],
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/groups/{groupsId}/devices/{devicesId}",
                          "path": "v1/{+name}",
                          "id": "cloudiot.projects.locations.registries.groups.devices.patch",
                          "description": "Updates a device.",
                          "request": {
                            "$ref": "Device"
                          }
                        }
                      },
                      "resources": {
                        "configVersions": {
                          "methods": {
                            "list": {
                              "response": {
                                "$ref": "ListDeviceConfigVersionsResponse"
                              },
                              "parameterOrder": [
                                "name"
                              ],
                              "httpMethod": "GET",
                              "parameters": {
                                "numVersions": {
                                  "description": "The number of versions to list. Versions are listed in decreasing order of\nthe version number. The maximum number of versions retained is 10. If this\nvalue is zero, it will return all the versions available.",
                                  "format": "int32",
                                  "type": "integer",
                                  "location": "query"
                                },
                                "name": {
                                  "description": "The name of the device. For example,\n`projects/p0/locations/us-central1/registries/registry0/devices/device0` or\n`projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.",
                                  "required": true,
                                  "type": "string",
                                  "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+/groups/[^/]+/devices/[^/]+$",
                                  "location": "path"
                                }
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/cloudiot"
                              ],
                              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/groups/{groupsId}/devices/{devicesId}/configVersions",
                              "path": "v1/{+name}/configVersions",
                              "id": "cloudiot.projects.locations.registries.groups.devices.configVersions.list",
                              "description": "Lists the last few versions of the device configuration in descending\norder (i.e.: newest first)."
                            }
                          }
                        },
                        "states": {
                          "methods": {
                            "list": {
                              "description": "Lists the last few versions of the device state in descending order (i.e.:\nnewest first).",
                              "response": {
                                "$ref": "ListDeviceStatesResponse"
                              },
                              "parameterOrder": [
                                "name"
                              ],
                              "httpMethod": "GET",
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/cloudiot"
                              ],
                              "parameters": {
                                "name": {
                                  "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+/groups/[^/]+/devices/[^/]+$",
                                  "location": "path",
                                  "description": "The name of the device. For example,\n`projects/p0/locations/us-central1/registries/registry0/devices/device0` or\n`projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.",
                                  "required": true,
                                  "type": "string"
                                },
                                "numStates": {
                                  "description": "The number of states to list. States are listed in descending order of\nupdate time. The maximum number of states retained is 10. If this\nvalue is zero, it will return all the states available.",
                                  "format": "int32",
                                  "type": "integer",
                                  "location": "query"
                                }
                              },
                              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/groups/{groupsId}/devices/{devicesId}/states",
                              "path": "v1/{+name}/states",
                              "id": "cloudiot.projects.locations.registries.groups.devices.states.list"
                            }
                          }
                        }
                      }
                    }
                  },
                  "methods": {
                    "getIamPolicy": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/groups/{groupsId}:getIamPolicy",
                      "id": "cloudiot.projects.locations.registries.groups.getIamPolicy",
                      "path": "v1/{+resource}:getIamPolicy",
                      "description": "Gets the access control policy for a resource.\nReturns an empty policy if the resource exists and does not have a policy\nset.",
                      "request": {
                        "$ref": "GetIamPolicyRequest"
                      },
                      "httpMethod": "POST",
                      "parameterOrder": [
                        "resource"
                      ],
                      "response": {
                        "$ref": "Policy"
                      },
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+/groups/[^/]+$",
                          "location": "path"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloudiot"
                      ]
                    },
                    "setIamPolicy": {
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      },
                      "description": "Sets the access control policy on the specified resource. Replaces any\nexisting policy.",
                      "response": {
                        "$ref": "Policy"
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloudiot"
                      ],
                      "parameters": {
                        "resource": {
                          "location": "path",
                          "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+/groups/[^/]+$"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/groups/{groupsId}:setIamPolicy",
                      "path": "v1/{+resource}:setIamPolicy",
                      "id": "cloudiot.projects.locations.registries.groups.setIamPolicy"
                    },
                    "testIamPermissions": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/groups/{groupsId}:testIamPermissions",
                      "path": "v1/{+resource}:testIamPermissions",
                      "id": "cloudiot.projects.locations.registries.groups.testIamPermissions",
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "description": "Returns permissions that a caller has on the specified resource.\nIf the resource does not exist, this will return an empty set of\npermissions, not a NOT_FOUND error.",
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloudiot"
                      ],
                      "parameters": {
                        "resource": {
                          "location": "path",
                          "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+/groups/[^/]+$"
                        }
                      }
                    }
                  }
                },
                "devices": {
                  "methods": {
                    "patch": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/devices/{devicesId}",
                      "id": "cloudiot.projects.locations.registries.devices.patch",
                      "path": "v1/{+name}",
                      "description": "Updates a device.",
                      "request": {
                        "$ref": "Device"
                      },
                      "httpMethod": "PATCH",
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Device"
                      },
                      "parameters": {
                        "updateMask": {
                          "location": "query",
                          "description": "Only updates the `device` fields indicated by this mask.\nThe field mask must not be empty, and it must not contain fields that\nare immutable or only set by the server.\nMutable top-level fields: `credentials`, `blocked`, and `metadata`",
                          "format": "google-fieldmask",
                          "type": "string"
                        },
                        "name": {
                          "description": "The resource path name. For example,\n`projects/p1/locations/us-central1/registries/registry0/devices/dev0` or\n`projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`.\nWhen `name` is populated as a response from the service, it always ends\nin the device numeric ID.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+/devices/[^/]+$",
                          "location": "path"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloudiot"
                      ]
                    },
                    "get": {
                      "path": "v1/{+name}",
                      "id": "cloudiot.projects.locations.registries.devices.get",
                      "description": "Gets details about a device.",
                      "response": {
                        "$ref": "Device"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "The name of the device. For example,\n`projects/p0/locations/us-central1/registries/registry0/devices/device0` or\n`projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+/devices/[^/]+$",
                          "location": "path"
                        },
                        "fieldMask": {
                          "description": "The fields of the `Device` resource to be returned in the response. If the\nfield mask is unset or empty, all fields are returned.",
                          "format": "google-fieldmask",
                          "type": "string",
                          "location": "query"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloudiot"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/devices/{devicesId}"
                    },
                    "delete": {
                      "httpMethod": "DELETE",
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Empty"
                      },
                      "parameters": {
                        "name": {
                          "description": "The name of the device. For example,\n`projects/p0/locations/us-central1/registries/registry0/devices/device0` or\n`projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+/devices/[^/]+$",
                          "location": "path"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloudiot"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/devices/{devicesId}",
                      "id": "cloudiot.projects.locations.registries.devices.delete",
                      "path": "v1/{+name}",
                      "description": "Deletes a device."
                    },
                    "list": {
                      "description": "List devices in a device registry.",
                      "response": {
                        "$ref": "ListDevicesResponse"
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "httpMethod": "GET",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloudiot"
                      ],
                      "parameters": {
                        "deviceNumIds": {
                          "description": "A list of device numerical ids. If empty, it will ignore this field. This\nfield cannot hold more than 10,000 entries.",
                          "format": "uint64",
                          "type": "string",
                          "repeated": true,
                          "location": "query"
                        },
                        "pageToken": {
                          "description": "The value returned by the last `ListDevicesResponse`; indicates\nthat this is a continuation of a prior `ListDevices` call, and\nthat the system should return the next page of data.",
                          "type": "string",
                          "location": "query"
                        },
                        "fieldMask": {
                          "location": "query",
                          "description": "The fields of the `Device` resource to be returned in the response. The\nfields `id`, and `num_id` are always returned by default, along with any\nother fields specified.",
                          "format": "google-fieldmask",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "The maximum number of devices to return in the response. If this value\nis zero, the service will select a default size. A call may return fewer\nobjects than requested, but if there is a non-empty `page_token`, it\nindicates that more entries are available.",
                          "format": "int32",
                          "type": "integer",
                          "location": "query"
                        },
                        "deviceIds": {
                          "description": "A list of device string identifiers. If empty, it will ignore this field.\nFor example, `['device0', 'device12']`. This field cannot hold more than\n10,000 entries.",
                          "type": "string",
                          "repeated": true,
                          "location": "query"
                        },
                        "parent": {
                          "location": "path",
                          "description": "The device registry path. Required. For example,\n`projects/my-project/locations/us-central1/registries/my-registry`.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+$"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/devices",
                      "path": "v1/{+parent}/devices",
                      "id": "cloudiot.projects.locations.registries.devices.list"
                    },
                    "create": {
                      "description": "Creates a device in a device registry.",
                      "request": {
                        "$ref": "Device"
                      },
                      "response": {
                        "$ref": "Device"
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "The name of the device registry where this device should be created.\nFor example,\n`projects/example-project/locations/us-central1/registries/my-registry`.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+$",
                          "location": "path"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloudiot"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/devices",
                      "path": "v1/{+parent}/devices",
                      "id": "cloudiot.projects.locations.registries.devices.create"
                    },
                    "modifyCloudToDeviceConfig": {
                      "response": {
                        "$ref": "DeviceConfig"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/cloudiot"
                      ],
                      "parameters": {
                        "name": {
                          "description": "The name of the device. For example,\n`projects/p0/locations/us-central1/registries/registry0/devices/device0` or\n`projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+/devices/[^/]+$",
                          "location": "path"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/devices/{devicesId}:modifyCloudToDeviceConfig",
                      "path": "v1/{+name}:modifyCloudToDeviceConfig",
                      "id": "cloudiot.projects.locations.registries.devices.modifyCloudToDeviceConfig",
                      "request": {
                        "$ref": "ModifyCloudToDeviceConfigRequest"
                      },
                      "description": "Modifies the configuration for the device, which is eventually sent from\nthe Cloud IoT Core servers. Returns the modified configuration version and\nits metadata."
                    }
                  },
                  "resources": {
                    "configVersions": {
                      "methods": {
                        "list": {
                          "description": "Lists the last few versions of the device configuration in descending\norder (i.e.: newest first).",
                          "response": {
                            "$ref": "ListDeviceConfigVersionsResponse"
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "httpMethod": "GET",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloudiot"
                          ],
                          "parameters": {
                            "numVersions": {
                              "description": "The number of versions to list. Versions are listed in decreasing order of\nthe version number. The maximum number of versions retained is 10. If this\nvalue is zero, it will return all the versions available.",
                              "format": "int32",
                              "type": "integer",
                              "location": "query"
                            },
                            "name": {
                              "description": "The name of the device. For example,\n`projects/p0/locations/us-central1/registries/registry0/devices/device0` or\n`projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.",
                              "required": true,
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+/devices/[^/]+$",
                              "location": "path"
                            }
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/devices/{devicesId}/configVersions",
                          "path": "v1/{+name}/configVersions",
                          "id": "cloudiot.projects.locations.registries.devices.configVersions.list"
                        }
                      }
                    },
                    "states": {
                      "methods": {
                        "list": {
                          "response": {
                            "$ref": "ListDeviceStatesResponse"
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "httpMethod": "GET",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform",
                            "https://www.googleapis.com/auth/cloudiot"
                          ],
                          "parameters": {
                            "name": {
                              "description": "The name of the device. For example,\n`projects/p0/locations/us-central1/registries/registry0/devices/device0` or\n`projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.",
                              "required": true,
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/registries/[^/]+/devices/[^/]+$",
                              "location": "path"
                            },
                            "numStates": {
                              "description": "The number of states to list. States are listed in descending order of\nupdate time. The maximum number of states retained is 10. If this\nvalue is zero, it will return all the states available.",
                              "format": "int32",
                              "type": "integer",
                              "location": "query"
                            }
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/devices/{devicesId}/states",
                          "path": "v1/{+name}/states",
                          "id": "cloudiot.projects.locations.registries.devices.states.list",
                          "description": "Lists the last few versions of the device state in descending order (i.e.:\nnewest first)."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "bearer_token": {
      "location": "query",
      "description": "OAuth bearer token.",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "description": "Data format for response.",
      "default": "json"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "pp": {
      "description": "Pretty-print response.",
      "type": "boolean",
      "default": "true",
      "location": "query"
    }
  },
  "version": "v1"
}
