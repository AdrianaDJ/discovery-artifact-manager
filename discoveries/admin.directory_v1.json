{
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        }
      }
    }
  },
  "basePath": "",
  "protocol": "rest",
  "parameters": {
    "prettyPrint": {
      "location": "query",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true"
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "type": "string",
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ]
    },
    "alt": {
      "description": "Data format for response.",
      "default": "json",
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ]
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    }
  },
  "ownerName": "Google",
  "revision": "20201013",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "discoveryVersion": "v1",
  "ownerDomain": "google.com",
  "schemas": {
    "UserCustomProperties": {
      "type": "object",
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "additionalProperties": {
        "type": "any"
      },
      "id": "UserCustomProperties"
    },
    "ChromeOsDevice": {
      "id": "ChromeOsDevice",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "dockMacAddress": {
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "orderNumber": {
          "description": "Chromebook order number (Read-only)",
          "type": "string"
        },
        "lastEnrollmentTime": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was last enrolled (Read-only)"
        },
        "systemRamFreeReports": {
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "reportTime": {
                "description": "Date and time the report was received.",
                "format": "date-time",
                "type": "string"
              },
              "systemRamFreeInfo": {
                "items": {
                  "type": "string",
                  "format": "int64"
                },
                "type": "array"
              }
            }
          }
        },
        "ethernetMacAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of the device"
        },
        "firmwareVersion": {
          "description": "Chromebook firmware version (Read-only)",
          "type": "string"
        },
        "lastSync": {
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "macAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on wifi network interface (Read-only)"
        },
        "model": {
          "type": "string",
          "description": "Chromebook Model (Read-only)"
        },
        "deviceFiles": {
          "description": "List of device files to download (Read-only)",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "File type"
              },
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              },
              "createTime": {
                "description": "Date and time the file was created",
                "type": "string",
                "format": "date-time"
              },
              "name": {
                "description": "File name",
                "type": "string"
              }
            }
          }
        },
        "kind": {
          "default": "admin#directory#chromeosdevice",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "annotatedUser": {
          "description": "User of the device",
          "type": "string"
        },
        "bootMode": {
          "type": "string",
          "description": "Chromebook boot mode (Read-only)"
        },
        "systemRamTotal": {
          "type": "string",
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "format": "int64"
        },
        "notes": {
          "description": "Notes added by the administrator",
          "type": "string"
        },
        "deviceId": {
          "type": "string",
          "description": "Unique identifier of Chrome OS Device (Read-only)"
        },
        "osVersion": {
          "type": "string",
          "description": "Chromebook Os Version (Read-only)"
        },
        "cpuStatusReports": {
          "description": "Reports of CPU utilization and temperature (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "reportTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time the report was received."
              },
              "cpuTemperatureInfo": {
                "description": "List of CPU temperature samples.",
                "items": {
                  "type": "object",
                  "properties": {
                    "temperature": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Temperature in Celsius degrees."
                    },
                    "label": {
                      "description": "CPU label",
                      "type": "string"
                    }
                  }
                },
                "type": "array"
              },
              "cpuUtilizationPercentageInfo": {
                "type": "array",
                "items": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "type": "array"
        },
        "autoUpdateExpiration": {
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "type": "string",
          "format": "int64"
        },
        "lastKnownNetwork": {
          "type": "array",
          "description": "Contains last known network (Read-only)",
          "items": {
            "properties": {
              "ipAddress": {
                "description": "The IP address.",
                "type": "string"
              },
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              }
            },
            "type": "object",
            "description": "Information for an ip address."
          }
        },
        "manufactureDate": {
          "type": "string",
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format."
        },
        "activeTimeRanges": {
          "items": {
            "type": "object",
            "properties": {
              "activeTime": {
                "format": "int32",
                "description": "Duration in milliseconds",
                "type": "integer"
              },
              "date": {
                "description": "Date of usage",
                "type": "string",
                "format": "date"
              }
            }
          },
          "description": "List of active time ranges (Read-only)",
          "type": "array"
        },
        "status": {
          "description": "status of the device (Read-only)",
          "type": "string"
        },
        "annotatedLocation": {
          "description": "Address or location of the device as noted by the administrator",
          "type": "string"
        },
        "serialNumber": {
          "description": "Chromebook serial number (Read-only)",
          "type": "string"
        },
        "ethernetMacAddress0": {
          "type": "string",
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "meid": {
          "type": "string",
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)"
        },
        "annotatedAssetId": {
          "type": "string",
          "description": "AssetId specified during enrollment or through later annotation"
        },
        "platformVersion": {
          "type": "string",
          "description": "Chromebook platform version (Read-only)"
        },
        "supportEndDate": {
          "type": "string",
          "format": "date-time",
          "description": "Final date the device will be supported (Read-only)"
        },
        "recentUsers": {
          "description": "List of recent device users, in descending order by last login time (Read-only)",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "email": {
                "description": "Email address of the user. Present only if the user type is managed",
                "type": "string"
              },
              "type": {
                "description": "The type of the user",
                "type": "string"
              }
            }
          }
        },
        "willAutoRenew": {
          "type": "boolean",
          "description": "Will Chromebook auto renew after support end date (Read-only)"
        },
        "tpmVersionInfo": {
          "properties": {
            "tpmModel": {
              "description": "TPM model number.",
              "type": "string"
            },
            "family": {
              "description": "TPM family.",
              "type": "string"
            },
            "manufacturer": {
              "description": "TPM manufacturer code.",
              "type": "string"
            },
            "vendorSpecific": {
              "type": "string",
              "description": "Vendor-specific information such as Vendor ID."
            },
            "firmwareVersion": {
              "description": "TPM firmware version.",
              "type": "string"
            },
            "specLevel": {
              "description": "TPM specification level.",
              "type": "string"
            }
          },
          "type": "object",
          "description": "Trusted Platform Module (TPM) (Read-only)"
        },
        "diskVolumeReports": {
          "type": "array",
          "items": {
            "properties": {
              "volumeInfo": {
                "description": "Disk volumes",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "storageFree": {
                      "description": "Free disk space [in bytes]",
                      "format": "int64",
                      "type": "string"
                    },
                    "storageTotal": {
                      "description": "Total disk space [in bytes]",
                      "format": "int64",
                      "type": "string"
                    },
                    "volumeId": {
                      "description": "Volume id",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "type": "object"
          },
          "description": "Reports of disk space and other info about mounted/connected volumes."
        }
      }
    },
    "DirectoryChromeosdevicesCommandResult": {
      "id": "DirectoryChromeosdevicesCommandResult",
      "description": "The result of executing a command.",
      "type": "object",
      "properties": {
        "executeTime": {
          "type": "string",
          "description": "The time at which the command was executed or failed to execute.",
          "format": "google-datetime"
        },
        "errorMessage": {
          "type": "string",
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed."
        },
        "result": {
          "description": "The result of the command.",
          "type": "string",
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ]
        }
      }
    },
    "Features": {
      "properties": {
        "features": {
          "type": "array",
          "items": {
            "$ref": "Feature"
          },
          "description": "The Features in this page of results."
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#featuresList",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Public API: Resources.features",
      "id": "Features"
    },
    "CustomerPostalAddress": {
      "id": "CustomerPostalAddress",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "region": {
          "description": "Name of the region. An example of a region value is NY for the state of New York.",
          "type": "string"
        },
        "postalCode": {
          "type": "string",
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element."
        },
        "contactName": {
          "description": "The customer contact's name.",
          "type": "string"
        },
        "addressLine2": {
          "description": "Address line 2 of the address.",
          "type": "string"
        },
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        },
        "locality": {
          "description": "Name of the locality. An example of a locality value is the city of San Francisco.",
          "type": "string"
        },
        "addressLine3": {
          "type": "string",
          "description": "Address line 3 of the address."
        },
        "countryCode": {
          "type": "string",
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements."
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        }
      }
    },
    "Schema": {
      "id": "Schema",
      "properties": {
        "kind": {
          "default": "admin#directory#schema",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "schemaId": {
          "description": "Unique identifier of Schema (Read-only)",
          "type": "string"
        },
        "schemaName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "Schema name",
          "type": "string"
        },
        "displayName": {
          "description": "Display name for the schema.",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "fields": {
          "type": "array",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "description": "Fields of Schema"
        }
      },
      "type": "object",
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserOrganization": {
      "description": "JSON template for an organization entry.",
      "id": "UserOrganization",
      "properties": {
        "primary": {
          "description": "If it user's primary organization.",
          "type": "boolean"
        },
        "location": {
          "description": "Location of the organization. This need not be fully qualified address.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.",
          "type": "string"
        },
        "name": {
          "description": "Name of the organization",
          "type": "string"
        },
        "fullTimeEquivalent": {
          "format": "int32",
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
          "type": "integer"
        },
        "department": {
          "type": "string",
          "description": "Department within the organization."
        },
        "description": {
          "description": "Description of the organization.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "domain": {
          "type": "string",
          "description": "The domain to which the organization belongs to."
        },
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        },
        "costCenter": {
          "type": "string",
          "description": "The cost center of the users department."
        },
        "symbol": {
          "description": "Symbol of the organization.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserAddress": {
      "id": "UserAddress",
      "description": "JSON template for address.",
      "properties": {
        "sourceIsStructured": {
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered.",
          "type": "boolean"
        },
        "countryCode": {
          "description": "Country code.",
          "type": "string"
        },
        "poBox": {
          "description": "Other parts of address.",
          "type": "string"
        },
        "region": {
          "type": "string",
          "description": "Region."
        },
        "postalCode": {
          "description": "Postal code.",
          "type": "string"
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "streetAddress": {
          "type": "string",
          "description": "Street."
        },
        "extendedAddress": {
          "description": "Extended Address.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary address. Only one entry could be marked as primary."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "formatted": {
          "type": "string",
          "description": "Formatted address."
        },
        "locality": {
          "type": "string",
          "description": "Locality."
        }
      },
      "type": "object"
    },
    "Domains": {
      "id": "Domains",
      "type": "object",
      "properties": {
        "domainName": {
          "description": "The domain name of the customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "type": "string"
        },
        "creationTime": {
          "format": "int64",
          "type": "string",
          "description": "Creation time of the domain. (Read-only)."
        },
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "description": "List of domain alias objects. (Read-only)",
          "type": "array"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain. (Read-only)."
        },
        "kind": {
          "default": "admin#directory#domain",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Indicates if the domain is a primary domain (Read-only)."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "Members": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "Member"
          },
          "description": "List of member objects."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "kind": {
          "default": "admin#directory#members",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "id": "Members"
    },
    "Token": {
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user that issued the token."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nativeApp": {
          "type": "boolean",
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device."
        },
        "clientId": {
          "type": "string",
          "description": "The Client ID of the application the token is issued to."
        },
        "scopes": {
          "type": "array",
          "description": "A list of authorization scopes the application is granted.",
          "items": {
            "type": "string"
          }
        },
        "displayText": {
          "type": "string",
          "description": "The displayable name of the application the token is issued to."
        },
        "anonymous": {
          "type": "boolean",
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID."
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#token.",
          "default": "admin#directory#token"
        }
      },
      "id": "Token",
      "type": "object"
    },
    "Feature": {
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#features#Feature"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "name": {
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "description": "The name of the feature.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for Feature object in Directory API.",
      "id": "Feature"
    },
    "Users": {
      "id": "Users",
      "type": "object",
      "properties": {
        "trigger_event": {
          "type": "string",
          "description": "Event that triggered this response (only used in case of Push Response)"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "users": {
          "type": "array",
          "description": "List of user objects.",
          "items": {
            "$ref": "User"
          }
        },
        "kind": {
          "default": "admin#directory#users",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Alias": {
      "properties": {
        "etag": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#alias",
          "type": "string"
        }
      },
      "id": "Alias",
      "type": "object",
      "description": "JSON template for Alias object in Directory API."
    },
    "UserIm": {
      "properties": {
        "im": {
          "description": "Instant messenger id.",
          "type": "string"
        },
        "protocol": {
          "type": "string",
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary im. Only one entry could be marked as primary."
        },
        "customProtocol": {
          "description": "Custom protocol.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value."
        }
      },
      "id": "UserIm",
      "type": "object",
      "description": "JSON template for instant messenger of an user."
    },
    "User": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "id": "User",
      "properties": {
        "relations": {
          "description": "The Relations of User *",
          "type": "any"
        },
        "emails": {
          "description": "Emails of User",
          "type": "any"
        },
        "isDelegatedAdmin": {
          "type": "boolean",
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)",
          "readOnly": true
        },
        "recoveryPhone": {
          "type": "string",
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*."
        },
        "creationTime": {
          "format": "date-time",
          "description": "User's G Suite account creation time. (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "gender": {
          "type": "any",
          "description": "Gender of User"
        },
        "externalIds": {
          "type": "any",
          "description": "The external Ids of User *"
        },
        "customSchemas": {
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          },
          "description": "Custom fields of the user.",
          "type": "object"
        },
        "aliases": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          },
          "description": "Output only. List of aliases (Read-only)"
        },
        "languages": {
          "description": "Languages of User",
          "type": "any"
        },
        "phones": {
          "description": "Phone numbers of User",
          "type": "any"
        },
        "thumbnailPhotoUrl": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Photo Url of the user (Read-only)"
        },
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        },
        "changePasswordAtNextLogin": {
          "description": "Boolean indicating if the user should change password in next login",
          "type": "boolean"
        },
        "lastLoginTime": {
          "format": "date-time",
          "description": "User's last login time. (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "agreedToTerms": {
          "type": "boolean",
          "description": "Output only. Indicates if user has agreed to terms (Read-only)",
          "readOnly": true
        },
        "customerId": {
          "readOnly": true,
          "description": "Output only. CustomerId of User (Read-only)",
          "type": "string"
        },
        "thumbnailPhotoEtag": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. ETag of the user's photo (Read-only)"
        },
        "archived": {
          "description": "Indicates if user is archived.",
          "type": "boolean"
        },
        "websites": {
          "type": "any",
          "description": "Websites of User"
        },
        "sshPublicKeys": {
          "description": "The SSH public keys of User",
          "type": "any"
        },
        "hashFunction": {
          "type": "string",
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt"
        },
        "suspended": {
          "description": "Indicates if user is suspended.",
          "type": "boolean"
        },
        "primaryEmail": {
          "description": "username of User",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "isEnforcedIn2Sv": {
          "type": "boolean",
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "readOnly": true
        },
        "deletionTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        },
        "recoveryEmail": {
          "type": "string",
          "description": "Recovery email of the user."
        },
        "nonEditableAliases": {
          "readOnly": true,
          "description": "Output only. List of non editable aliases (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isAdmin": {
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "includeInGlobalAddressList": {
          "description": "Boolean indicating if user is included in Global Address List",
          "type": "boolean"
        },
        "posixAccounts": {
          "description": "The POSIX accounts of User",
          "type": "any"
        },
        "password": {
          "type": "string",
          "description": "User's password",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "keywords": {
          "description": "Keywords of User",
          "type": "any"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "addresses": {
          "description": "Addresses of User",
          "type": "any"
        },
        "kind": {
          "readOnly": true,
          "description": "Output only. Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#user"
        },
        "isEnrolledIn2Sv": {
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "name": {
          "description": "User's name",
          "$ref": "UserName",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "ims": {
          "description": "User's Instant Messenger",
          "type": "any"
        },
        "suspensionReason": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Suspension reason if user is suspended (Read-only)"
        },
        "etag": {
          "description": "Output only. ETag of the resource.",
          "type": "string",
          "readOnly": true
        },
        "locations": {
          "description": "Locations of User",
          "type": "any"
        },
        "ipWhitelisted": {
          "description": "Boolean indicating if ip is whitelisted",
          "type": "boolean"
        },
        "notes": {
          "description": "Notes of User",
          "type": "any"
        },
        "organizations": {
          "description": "Organizations of User",
          "type": "any"
        },
        "isMailboxSetup": {
          "description": "Output only. Is mailbox setup (Read-only)",
          "type": "boolean",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "Roles": {
      "id": "Roles",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roles.",
          "default": "admin#directory#roles"
        },
        "items": {
          "description": "A list of Role resources.",
          "type": "array",
          "items": {
            "$ref": "Role"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "BuildingAddress": {
      "id": "BuildingAddress",
      "properties": {
        "administrativeArea": {
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region.",
          "type": "string"
        },
        "regionCode": {
          "description": "Required. CLDR region code of the country/region of the address.",
          "type": "string"
        },
        "locality": {
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.",
          "type": "string"
        },
        "languageCode": {
          "type": "string",
          "description": "Optional. BCP-47 language code of the contents of this address (if known)."
        },
        "postalCode": {
          "description": "Optional. Postal code of the address.",
          "type": "string"
        },
        "sublocality": {
          "type": "string",
          "description": "Optional. Sublocality of the address."
        },
        "addressLines": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Unstructured address lines describing the lower levels of an address."
        }
      },
      "type": "object",
      "description": "Public API: Resources.buildings"
    },
    "CalendarResources": {
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "type": "string",
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList."
        },
        "items": {
          "items": {
            "$ref": "CalendarResource"
          },
          "type": "array",
          "description": "The CalendarResources in this page of results."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        }
      },
      "description": "Public API: Resources.calendars",
      "id": "CalendarResources"
    },
    "ChromeOsDeviceAction": {
      "properties": {
        "deprovisionReason": {
          "type": "string"
        },
        "action": {
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "type": "string",
          "description": "Action to be taken on the ChromeOs Device"
        }
      },
      "id": "ChromeOsDeviceAction",
      "type": "object"
    },
    "MembersHasMember": {
      "properties": {
        "isMember": {
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "readOnly": true,
          "type": "boolean"
        }
      },
      "description": "JSON template for Has Member response in Directory API.",
      "type": "object",
      "id": "MembersHasMember"
    },
    "OrgUnits": {
      "type": "object",
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "default": "admin#directory#orgUnits",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "organizationUnits": {
          "items": {
            "$ref": "OrgUnit"
          },
          "description": "List of user objects.",
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "OrgUnits"
    },
    "SchemaFieldSpec": {
      "type": "object",
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "SchemaFieldSpec",
      "properties": {
        "fieldType": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Type of the field.",
          "type": "string"
        },
        "readAccessType": {
          "default": "ALL_DOMAIN_USERS",
          "type": "string",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\"."
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema#fieldspec"
        },
        "indexed": {
          "description": "Boolean specifying whether the field is indexed or not.",
          "type": "boolean",
          "default": "true"
        },
        "numericIndexingSpec": {
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "properties": {
            "maxValue": {
              "format": "double",
              "type": "number",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            },
            "minValue": {
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double",
              "type": "number"
            }
          },
          "type": "object"
        },
        "fieldId": {
          "type": "string",
          "description": "Unique identifier of Field (Read-only)"
        },
        "displayName": {
          "description": "Display Name of the field.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "fieldName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Name of the field.",
          "type": "string"
        },
        "multiValued": {
          "type": "boolean",
          "description": "Boolean specifying whether this is a multi-valued field or not."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "Group": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Group",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of aliases (Read-only)"
        },
        "description": {
          "type": "string",
          "description": "Description of the group"
        },
        "email": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "description": "Email of Group"
        },
        "kind": {
          "default": "admin#directory#group",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "name": {
          "description": "Group name",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of Group (Read-only)",
          "type": "string"
        },
        "adminCreated": {
          "type": "boolean",
          "description": "Is the group created by admin (Read-only) *"
        },
        "nonEditableAliases": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of non editable aliases (Read-only)"
        },
        "directMembersCount": {
          "type": "string",
          "description": "Group direct members count",
          "format": "int64"
        }
      },
      "type": "object"
    },
    "ChromeOsDevices": {
      "type": "object",
      "id": "ChromeOsDevices",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "chromeosdevices": {
          "type": "array",
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "description": "List of Chrome OS Device objects."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#chromeosdevices",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "Channel": {
      "description": "An notification channel used to watch for resource changes.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of delivery mechanism used for this channel.",
          "type": "string"
        },
        "expiration": {
          "type": "string",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "format": "int64"
        },
        "payload": {
          "type": "boolean",
          "description": "A Boolean value to indicate whether payload is wanted. Optional."
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Additional parameters controlling delivery channel behavior. Optional."
        },
        "id": {
          "type": "string",
          "description": "A UUID or similar unique string that identifies this channel."
        },
        "kind": {
          "type": "string",
          "default": "api#channel",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\"."
        },
        "resourceId": {
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.",
          "type": "string"
        },
        "token": {
          "type": "string",
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional."
        }
      },
      "id": "Channel"
    },
    "Tokens": {
      "id": "Tokens",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "Token"
          },
          "description": "A list of Token resources."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#tokenList",
          "description": "The type of the API resource. This is always admin#directory#tokenList."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "UserMakeAdmin": {
      "properties": {
        "status": {
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "description": "Boolean indicating new admin status of the user",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "UserMakeAdmin"
    },
    "UserPhoto": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "UserPhoto",
      "properties": {
        "mimeType": {
          "description": "Mime Type of the photo",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "height": {
          "format": "int32",
          "type": "integer",
          "description": "Height in pixels of the photo"
        },
        "primaryEmail": {
          "type": "string",
          "description": "Primary email of User (Read-only)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "photoData": {
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "description": "Base64 encoded photo data",
          "type": "string",
          "format": "byte"
        },
        "width": {
          "description": "Width in pixels of the photo",
          "format": "int32",
          "type": "integer"
        },
        "kind": {
          "default": "admin#directory#user#photo",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "type": "object"
    },
    "UserWebsite": {
      "type": "object",
      "id": "UserWebsite",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "value": {
          "description": "Website.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary website or not."
        }
      },
      "description": "JSON template for a website entry."
    },
    "UserName": {
      "id": "UserName",
      "properties": {
        "fullName": {
          "description": "Full Name",
          "type": "string"
        },
        "givenName": {
          "description": "First Name",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "familyName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "Last Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserAbout": {
      "properties": {
        "contentType": {
          "type": "string",
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text."
        },
        "value": {
          "type": "string",
          "description": "Actual value of notes."
        }
      },
      "description": "JSON template for About (notes) of a user in Directory API.",
      "type": "object",
      "id": "UserAbout"
    },
    "OrgUnit": {
      "id": "OrgUnit",
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "parentOrgUnitPath": {
          "type": "string",
          "description": "Path of parent OrgUnit"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "Path of OrgUnit"
        },
        "blockInheritance": {
          "description": "Should block inheritance",
          "type": "boolean"
        },
        "name": {
          "description": "Name of OrgUnit",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          },
          "type": "string"
        },
        "orgUnitId": {
          "description": "Id of OrgUnit",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#orgUnit"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "description": {
          "description": "Description of OrgUnit",
          "type": "string"
        },
        "parentOrgUnitId": {
          "type": "string",
          "description": "Id of parent OrgUnit"
        }
      }
    },
    "VerificationCode": {
      "properties": {
        "kind": {
          "default": "admin#directory#verificationCode",
          "description": "The type of the resource. This is always admin#directory#verificationCode.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "userId": {
          "type": "string",
          "description": "The obfuscated unique ID of the user."
        },
        "verificationCode": {
          "type": "string",
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result."
        }
      },
      "type": "object",
      "id": "VerificationCode",
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Aliases": {
      "type": "object",
      "description": "JSON response template to list aliases in Directory API.",
      "id": "Aliases",
      "properties": {
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "etag": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#aliases"
        }
      }
    },
    "Role": {
      "properties": {
        "isSystemRole": {
          "description": "Returns true if this is a pre-defined system role.",
          "type": "boolean"
        },
        "rolePrivileges": {
          "description": "The set of privileges that are granted to this role.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "privilegeName": {
                "description": "The name of the privilege.",
                "type": "string"
              },
              "serviceId": {
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
                "type": "string"
              }
            }
          },
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          }
        },
        "roleName": {
          "description": "Name of the role.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          }
        },
        "kind": {
          "default": "admin#directory#role",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#role."
        },
        "roleDescription": {
          "type": "string",
          "description": "A short description of the role."
        },
        "roleId": {
          "format": "int64",
          "type": "string",
          "description": "ID of the role."
        },
        "isSuperAdminRole": {
          "description": "Returns true if the role is a super admin role.",
          "type": "boolean"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Role",
      "type": "object"
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "type": "object",
      "description": "A response for issuing a command.",
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "properties": {
        "commandId": {
          "type": "string",
          "description": "The unique ID of the issued command, used to retrieve the command status.",
          "format": "int64"
        }
      }
    },
    "UserPhone": {
      "id": "UserPhone",
      "properties": {
        "primary": {
          "description": "If this is user's primary phone or not.",
          "type": "boolean"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "value": {
          "description": "Phone number.",
          "type": "string"
        }
      },
      "description": "JSON template for a phone entry.",
      "type": "object"
    },
    "RoleAssignments": {
      "id": "RoleAssignments",
      "type": "object",
      "properties": {
        "items": {
          "items": {
            "$ref": "RoleAssignment"
          },
          "type": "array",
          "description": "A list of RoleAssignment resources."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#roleAssignments",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments ."
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "ChromeOsMoveDevicesToOu": {
      "id": "ChromeOsMoveDevicesToOu",
      "properties": {
        "deviceIds": {
          "items": {
            "type": "string"
          },
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "type": "array",
          "description": "ChromeOs Devices to be moved to OU"
        }
      },
      "type": "object"
    },
    "Asp": {
      "properties": {
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user who issued the ASP."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#asp.",
          "type": "string",
          "default": "admin#directory#asp"
        },
        "codeId": {
          "description": "The unique ID of the ASP.",
          "format": "int32",
          "type": "integer"
        },
        "creationTime": {
          "format": "int64",
          "type": "string",
          "description": "The time when the ASP was created. Expressed in Unix time format."
        },
        "name": {
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the ASP.",
          "type": "string"
        },
        "lastTimeUsed": {
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "type": "string",
          "format": "int64"
        }
      },
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Asp"
    },
    "MobileDevices": {
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#mobiledevices"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "mobiledevices": {
          "description": "List of Mobile Device objects.",
          "items": {
            "$ref": "MobileDevice"
          },
          "type": "array"
        }
      },
      "id": "MobileDevices",
      "type": "object"
    },
    "Privileges": {
      "id": "Privileges",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "default": "admin#directory#privileges"
        },
        "items": {
          "type": "array",
          "description": "A list of Privilege resources.",
          "items": {
            "$ref": "Privilege"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "CalendarResource": {
      "properties": {
        "floorSection": {
          "description": "Name of the section within a floor a resource is located in.",
          "type": "string"
        },
        "resourceCategory": {
          "type": "string",
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN."
        },
        "kind": {
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "default": "admin#directory#resources#calendars#CalendarResource",
          "type": "string"
        },
        "featureInstances": {
          "description": "Instances of features for the calendar resource.",
          "type": "any"
        },
        "resourceDescription": {
          "type": "string",
          "description": "Description of the resource, visible only to admins."
        },
        "resourceName": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "type": "string"
        },
        "capacity": {
          "description": "Capacity of a resource, number of seats in a room.",
          "type": "integer",
          "format": "int32"
        },
        "floorName": {
          "type": "string",
          "description": "Name of the floor a resource is located on."
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "buildingId": {
          "description": "Unique ID for the building a resource is located in.",
          "type": "string"
        },
        "resourceEmail": {
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource.",
          "type": "string"
        },
        "resourceType": {
          "description": "The type of the calendar resource, intended for non-room resources.",
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "description": "The unique ID for the calendar resource."
        },
        "generatedResourceName": {
          "type": "string",
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\"."
        },
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Public API: Resources.calendars",
      "id": "CalendarResource"
    },
    "DomainAlias": {
      "properties": {
        "parentDomainName": {
          "type": "string",
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        },
        "domainAliasName": {
          "description": "The domain alias name.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "creationTime": {
          "type": "string",
          "format": "int64",
          "description": "The creation time of the domain alias. (Read-only)."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#domainAlias"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain alias. (Read-only)"
        }
      },
      "type": "object",
      "id": "DomainAlias"
    },
    "UserLocation": {
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "deskCode": {
          "type": "string",
          "description": "Most specific textual code of individual desk location."
        },
        "buildingId": {
          "type": "string",
          "description": "Building Identifier."
        },
        "floorSection": {
          "type": "string",
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values."
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        },
        "floorName": {
          "description": "Floor name/number.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value."
        }
      },
      "id": "UserLocation",
      "type": "object",
      "description": "JSON template for a location entry."
    },
    "UserSshPublicKey": {
      "type": "object",
      "description": "JSON template for a POSIX account entry.",
      "properties": {
        "key": {
          "type": "string",
          "description": "An SSH public key."
        },
        "expirationTimeUsec": {
          "format": "int64",
          "type": "string",
          "description": "An expiration time in microseconds since epoch."
        },
        "fingerprint": {
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
          "type": "string",
          "readOnly": true
        }
      },
      "id": "UserSshPublicKey"
    },
    "UserGender": {
      "type": "object",
      "properties": {
        "customGender": {
          "description": "Custom gender.",
          "type": "string"
        },
        "type": {
          "description": "Gender.",
          "type": "string"
        },
        "addressMeAs": {
          "type": "string",
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their."
        }
      },
      "id": "UserGender"
    },
    "DomainAliases": {
      "id": "DomainAliases",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domainAliases",
          "description": "Kind of resource this is."
        },
        "domainAliases": {
          "type": "array",
          "description": "List of domain alias objects.",
          "items": {
            "$ref": "DomainAlias"
          }
        }
      },
      "type": "object"
    },
    "UserLanguage": {
      "type": "object",
      "properties": {
        "customLanguage": {
          "type": "string",
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set"
        },
        "languageCode": {
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.",
          "type": "string"
        }
      },
      "id": "UserLanguage",
      "description": "JSON template for a language entry."
    },
    "Customer": {
      "id": "Customer",
      "properties": {
        "customerDomain": {
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer.",
          "type": "string"
        },
        "alternateEmail": {
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain",
          "type": "string"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The customer's contact phone number in E.164 format."
        },
        "kind": {
          "type": "string",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer",
          "default": "admin#directory#customer"
        },
        "customerCreationTime": {
          "format": "date-time",
          "description": "The customer's creation time (Readonly)",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The unique ID for the customer's G Suite account. (Readonly)"
        },
        "language": {
          "type": "string",
          "description": "The customer's ISO 639-2 language code. The default value is en-US"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "postalAddress": {
          "description": "The customer's postal address information.",
          "$ref": "CustomerPostalAddress"
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "RoleAssignment": {
      "id": "RoleAssignment",
      "type": "object",
      "properties": {
        "orgUnitId": {
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.",
          "type": "string"
        },
        "roleId": {
          "description": "The ID of the role that is assigned.",
          "type": "string",
          "format": "int64"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roleAssignment.",
          "default": "admin#directory#roleAssignment"
        },
        "scopeType": {
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT ",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "assignedTo": {
          "type": "string",
          "description": "The unique ID of the user this role is assigned to."
        },
        "roleAssignmentId": {
          "description": "ID of this roleAssignment.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "FeatureRename": {
      "id": "FeatureRename",
      "properties": {
        "newName": {
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          },
          "type": "string",
          "description": "New name of the feature."
        }
      },
      "type": "object"
    },
    "UserKeyword": {
      "id": "UserKeyword",
      "type": "object",
      "properties": {
        "value": {
          "description": "Keyword.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        }
      },
      "description": "JSON template for a keyword entry."
    },
    "UserExternalId": {
      "id": "UserExternalId",
      "description": "JSON template for an externalId entry.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the Id."
        },
        "value": {
          "type": "string",
          "description": "The value of the id."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        }
      },
      "type": "object"
    },
    "Privilege": {
      "type": "object",
      "id": "Privilege",
      "properties": {
        "childPrivileges": {
          "type": "array",
          "items": {
            "$ref": "Privilege"
          },
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege."
        },
        "isOuScopable": {
          "type": "boolean",
          "description": "If the privilege can be restricted to an organization unit."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#privilege.",
          "default": "admin#directory#privilege",
          "type": "string"
        },
        "serviceName": {
          "description": "The name of the service this privilege is for.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        },
        "serviceId": {
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
          "type": "string"
        }
      }
    },
    "DirectoryChromeosdevicesCommand": {
      "description": "Information regarding a command that was issued to a device.",
      "properties": {
        "commandId": {
          "format": "int64",
          "type": "string",
          "description": "Unique ID of a device command."
        },
        "type": {
          "description": "The type of the command.",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "type": "string",
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ]
        },
        "commandExpireTime": {
          "format": "google-datetime",
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.",
          "type": "string"
        },
        "commandResult": {
          "description": "The result of the command execution.",
          "$ref": "DirectoryChromeosdevicesCommandResult"
        },
        "payload": {
          "description": "The payload that the command specified, if any.",
          "type": "string"
        },
        "issueTime": {
          "format": "google-datetime",
          "description": "The timestamp when the command was issued by the admin.",
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ],
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "description": "Indicates the command state."
        }
      },
      "id": "DirectoryChromeosdevicesCommand",
      "type": "object"
    },
    "MobileDeviceAction": {
      "id": "MobileDeviceAction",
      "type": "object",
      "properties": {
        "action": {
          "description": "Action to be taken on the Mobile Device",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          },
          "type": "string"
        }
      }
    },
    "Member": {
      "id": "Member",
      "properties": {
        "status": {
          "type": "string",
          "description": "Status of member (Immutable)"
        },
        "role": {
          "description": "Role of member",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#member",
          "description": "Kind of resource this is."
        },
        "type": {
          "description": "Type of member (Immutable)",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "Email of member (Read-only)"
        },
        "delivery_settings": {
          "type": "string",
          "description": "Delivery settings of member"
        }
      },
      "type": "object"
    },
    "UserEmail": {
      "id": "UserEmail",
      "type": "object",
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary email. Only one entry could be marked as primary."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "address": {
          "description": "Email id of the user.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "description": "JSON template for an email."
    },
    "Groups": {
      "properties": {
        "groups": {
          "items": {
            "$ref": "Group"
          },
          "description": "List of group objects.",
          "type": "array"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#groups"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Groups",
      "type": "object"
    },
    "UserUndelete": {
      "id": "UserUndelete",
      "properties": {
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        }
      },
      "type": "object"
    },
    "Asps": {
      "id": "Asps",
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of ASP resources.",
          "items": {
            "$ref": "Asp"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#aspList.",
          "default": "admin#directory#aspList",
          "type": "string"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "UserRelation": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The name of the relation."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for a relation entry.",
      "id": "UserRelation"
    },
    "MobileDevice": {
      "id": "MobileDevice",
      "type": "object",
      "properties": {
        "lastSync": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "unknownSourcesStatus": {
          "type": "boolean",
          "description": "Unknown sources enabled or disabled on device (Read-only)"
        },
        "email": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of owner user's email addresses (Read-only)"
        },
        "brand": {
          "type": "string",
          "description": "Mobile Device Brand (Read-only)"
        },
        "firstSync": {
          "format": "date-time",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        },
        "adbStatus": {
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "releaseVersion": {
          "type": "string",
          "description": "Mobile Device release version version (Read-only)"
        },
        "hardwareId": {
          "type": "string",
          "description": "Mobile Device Hardware Id (Read-only)"
        },
        "deviceCompromisedStatus": {
          "type": "string",
          "description": "Mobile Device compromised status (Read-only)"
        },
        "privilege": {
          "description": "DMAgentPermission (Read-only)",
          "type": "string"
        },
        "meid": {
          "description": "Mobile Device MEID number (Read-only)",
          "type": "string"
        },
        "encryptionStatus": {
          "description": "Mobile Device Encryption Status (Read-only)",
          "type": "string"
        },
        "applications": {
          "items": {
            "properties": {
              "packageName": {
                "type": "string",
                "description": "Package name of application"
              },
              "versionCode": {
                "format": "int32",
                "type": "integer",
                "description": "Version code of application"
              },
              "displayName": {
                "type": "string",
                "description": "Display name of application"
              },
              "versionName": {
                "type": "string",
                "description": "Version name of application"
              },
              "permission": {
                "description": "List of Permissions for application",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "List of applications installed on Mobile Device"
        },
        "wifiMacAddress": {
          "description": "Mobile Device WiFi MAC address (Read-only)",
          "type": "string"
        },
        "manufacturer": {
          "description": "Mobile Device manufacturer (Read-only)",
          "type": "string"
        },
        "devicePasswordStatus": {
          "type": "string",
          "description": "DevicePasswordStatus (Read-only)"
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "basebandVersion": {
          "description": "Mobile Device Baseband version (Read-only)",
          "type": "string"
        },
        "model": {
          "type": "string",
          "description": "Name of the model of the device"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "name": {
          "type": "array",
          "description": "List of owner user's names (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "description": "The type of device (Read-only)"
        },
        "supportsWorkProfile": {
          "description": "Work profile supported on device (Read-only)",
          "type": "boolean"
        },
        "managedAccountIsOnOwnerProfile": {
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)",
          "type": "boolean"
        },
        "bootloaderVersion": {
          "type": "string",
          "description": "Mobile Device Bootloader version (Read-only)"
        },
        "status": {
          "type": "string",
          "description": "Status of the device (Read-only)"
        },
        "securityPatchLevel": {
          "format": "int64",
          "type": "string",
          "description": "Mobile Device Security patch level (Read-only)"
        },
        "os": {
          "description": "Name of the mobile operating system",
          "type": "string"
        },
        "resourceId": {
          "description": "Unique identifier of Mobile Device (Read-only)",
          "type": "string"
        },
        "imei": {
          "type": "string",
          "description": "Mobile Device IMEI number (Read-only)"
        },
        "deviceId": {
          "type": "string",
          "description": "Mobile Device serial number (Read-only)"
        },
        "kernelVersion": {
          "type": "string",
          "description": "Mobile Device Kernel version (Read-only)"
        },
        "serialNumber": {
          "description": "Mobile Device SSN or Serial Number (Read-only)",
          "type": "string"
        },
        "defaultLanguage": {
          "type": "string",
          "description": "The default locale used on the Mobile Device (Read-only)"
        },
        "userAgent": {
          "description": "Mobile Device user agent",
          "type": "string"
        },
        "otherAccountsInfo": {
          "description": "List of accounts added on device (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "buildNumber": {
          "type": "string",
          "description": "Mobile Device Build number (Read-only)"
        },
        "networkOperator": {
          "type": "string",
          "description": "Mobile Device mobile or network operator (if available) (Read-only)"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#mobiledevice"
        }
      }
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "description": "A request for issuing a command.",
      "id": "DirectoryChromeosdevicesIssueCommandRequest",
      "type": "object",
      "properties": {
        "payload": {
          "type": "string",
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100]."
        },
        "commandType": {
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "description": "The type of command.",
          "type": "string",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ]
        }
      }
    },
    "Domains2": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "domains": {
          "description": "List of domain objects.",
          "items": {
            "$ref": "Domains"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domains",
          "type": "string"
        }
      },
      "id": "Domains2",
      "type": "object"
    },
    "VerificationCodes": {
      "id": "VerificationCodes",
      "type": "object",
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCodesList.",
          "type": "string",
          "default": "admin#directory#verificationCodesList"
        },
        "items": {
          "items": {
            "$ref": "VerificationCode"
          },
          "type": "array",
          "description": "A list of verification code resources."
        }
      }
    },
    "BuildingCoordinates": {
      "id": "BuildingCoordinates",
      "type": "object",
      "description": "Public API: Resources.buildings",
      "properties": {
        "longitude": {
          "type": "number",
          "description": "Longitude in decimal degrees.",
          "format": "double"
        },
        "latitude": {
          "format": "double",
          "type": "number",
          "description": "Latitude in decimal degrees."
        }
      }
    },
    "FeatureInstance": {
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      },
      "id": "FeatureInstance",
      "description": "JSON template for a feature instance.",
      "type": "object"
    },
    "Building": {
      "id": "Building",
      "properties": {
        "address": {
          "$ref": "BuildingAddress",
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required."
        },
        "description": {
          "description": "A brief description of the building. For example, \"Chelsea Market\".",
          "type": "string"
        },
        "buildingId": {
          "description": "Unique identifier for the building. The maximum length is 100 characters.",
          "type": "string"
        },
        "coordinates": {
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees.",
          "$ref": "BuildingCoordinates"
        },
        "floorNames": {
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "buildingName": {
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#buildings#Building"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "description": "Public API: Resources.buildings",
      "type": "object"
    },
    "UserPosixAccount": {
      "id": "UserPosixAccount",
      "type": "object",
      "properties": {
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        },
        "systemId": {
          "type": "string",
          "description": "System identifier for which account Username or Uid apply to."
        },
        "shell": {
          "type": "string",
          "description": "The path to the login shell for this account."
        },
        "operatingSystemType": {
          "type": "string",
          "description": "The operating system type for this account."
        },
        "gecos": {
          "description": "The GECOS (user information) for this account.",
          "type": "string"
        },
        "uid": {
          "description": "The POSIX compliant user ID.",
          "type": "string",
          "format": "uint64"
        },
        "gid": {
          "format": "uint64",
          "description": "The default group ID.",
          "type": "string"
        },
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        },
        "accountId": {
          "type": "string",
          "description": "A POSIX account field identifier."
        },
        "username": {
          "description": "The username of the account.",
          "type": "string"
        }
      },
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix."
    },
    "Buildings": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#buildings#buildingsList",
          "description": "Kind of resource this is."
        },
        "buildings": {
          "type": "array",
          "description": "The Buildings in this page of results.",
          "items": {
            "$ref": "Building"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Buildings",
      "type": "object",
      "description": "Public API: Resources.buildings"
    },
    "Schemas": {
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#schemas",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "schemas": {
          "type": "array",
          "items": {
            "$ref": "Schema"
          },
          "description": "List of UserSchema objects."
        }
      },
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Schemas"
    }
  },
  "baseUrl": "https://www.googleapis.com/",
  "rootUrl": "https://www.googleapis.com/",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "resources": {
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ],
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "description": "Gets command data a specific command issued to the device.",
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "id": "admin.customer.devices.chromeos.commands.get",
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "parameters": {
                        "deviceId": {
                          "required": true,
                          "description": "Immutable. Immutable ID of Chrome OS Device.",
                          "type": "string",
                          "location": "path"
                        },
                        "customerId": {
                          "required": true,
                          "description": "Immutable. Immutable ID of the G Suite account.",
                          "type": "string",
                          "location": "path"
                        },
                        "commandId": {
                          "location": "path",
                          "format": "int64",
                          "description": "Immutable. Immutable ID of Chrome OS Device Command.",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      }
                    }
                  }
                }
              },
              "methods": {
                "issueCommand": {
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "description": "Issues a command for the device to execute.",
                  "httpMethod": "POST",
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ],
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "parameters": {
                    "deviceId": {
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "description": "Immutable. Immutable ID of Chrome OS Device."
                    },
                    "customerId": {
                      "description": "Immutable. Immutable ID of the G Suite account.",
                      "type": "string",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "members": {
      "methods": {
        "update": {
          "response": {
            "$ref": "Member"
          },
          "request": {
            "$ref": "Member"
          },
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Update membership of a user in the specified group.",
          "parameters": {
            "groupKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            },
            "memberKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "id": "directory.members.update"
        },
        "hasMember": {
          "parameters": {
            "memberKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID."
            },
            "groupKey": {
              "type": "string",
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path"
            }
          },
          "httpMethod": "GET",
          "id": "directory.members.hasMember",
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "response": {
            "$ref": "MembersHasMember"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        },
        "delete": {
          "description": "Remove membership.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "id": "directory.members.delete",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "memberKey": {
              "description": "Email or immutable ID of the member",
              "type": "string",
              "location": "path",
              "required": true
            },
            "groupKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group"
            }
          },
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        },
        "patch": {
          "request": {
            "$ref": "Member"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Patch Member via Apiary Patch Orchestration",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameters": {
            "memberKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object"
            },
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string"
            }
          },
          "httpMethod": "PATCH",
          "id": "directory.members.patch",
          "response": {
            "$ref": "Member"
          }
        },
        "get": {
          "httpMethod": "GET",
          "response": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Retrieve Group Member",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.members.get",
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group",
              "type": "string",
              "required": true
            },
            "memberKey": {
              "location": "path",
              "description": "Email or immutable ID of the member",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "insert": {
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "request": {
            "$ref": "Member"
          },
          "response": {
            "$ref": "Member"
          },
          "description": "Add user to the specified group.",
          "id": "directory.members.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "httpMethod": "POST",
          "parameterOrder": [
            "groupKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group"
            }
          }
        },
        "list": {
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "id": "directory.members.list",
          "parameters": {
            "roles": {
              "description": "Comma separated role values to filter list results on.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "default": "200",
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "format": "int32"
            },
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group",
              "type": "string"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "includeDerivedMembership": {
              "type": "boolean",
              "location": "query",
              "description": "Whether to list indirect memberships. Default: false."
            }
          },
          "response": {
            "$ref": "Members"
          },
          "description": "Retrieve all members in a group (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "httpMethod": "GET"
        }
      }
    },
    "customers": {
      "methods": {
        "patch": {
          "request": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "response": {
            "$ref": "Customer"
          },
          "description": "Patch Customers via Apiary Patch Orchestration",
          "parameterOrder": [
            "customerKey"
          ],
          "id": "directory.customers.patch",
          "parameters": {
            "customerKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Id of the customer to be updated"
            }
          },
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/customers/{customerKey}",
          "flatPath": "admin/directory/v1/customers/{customerKey}"
        },
        "get": {
          "parameterOrder": [
            "customerKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "httpMethod": "GET",
          "description": "Retrieves a customer.",
          "parameters": {
            "customerKey": {
              "type": "string",
              "description": "Id of the customer to be retrieved",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.customers.get",
          "path": "admin/directory/v1/customers/{customerKey}"
        },
        "update": {
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "id": "directory.customers.update",
          "parameterOrder": [
            "customerKey"
          ],
          "response": {
            "$ref": "Customer"
          },
          "description": "Updates a customer.",
          "parameters": {
            "customerKey": {
              "type": "string",
              "description": "Id of the customer to be updated",
              "location": "path",
              "required": true
            }
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "request": {
            "$ref": "Customer"
          }
        }
      }
    },
    "roles": {
      "methods": {
        "patch": {
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.patch",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "response": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "roleId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the role.",
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Role"
          },
          "description": "Patch role via Apiary Patch Orchestration"
        },
        "update": {
          "description": "Updates a role.",
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "httpMethod": "PUT",
          "request": {
            "$ref": "Role"
          },
          "id": "directory.roles.update",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "parameters": {
            "roleId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the role."
            },
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          }
        },
        "get": {
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "response": {
            "$ref": "Role"
          },
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "roleId": {
              "location": "path",
              "description": "Immutable ID of the role.",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.roles.get",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "httpMethod": "GET",
          "description": "Retrieves a role.",
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "insert": {
          "response": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "request": {
            "$ref": "Role"
          },
          "description": "Creates a role.",
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.roles.insert",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles"
        },
        "list": {
          "parameters": {
            "maxResults": {
              "type": "integer",
              "maximum": "100",
              "minimum": "1",
              "format": "int32",
              "location": "query",
              "description": "Maximum number of results to return."
            },
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          },
          "id": "directory.roles.list",
          "httpMethod": "GET",
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles",
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "response": {
            "$ref": "Roles"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "description": "Retrieves a paginated list of all the roles in a domain."
        },
        "delete": {
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Deletes a role.",
          "parameters": {
            "roleId": {
              "required": true,
              "description": "Immutable ID of the role.",
              "location": "path",
              "type": "string"
            },
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.delete"
        }
      }
    },
    "orgunits": {
      "methods": {
        "update": {
          "id": "directory.orgunits.update",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "description": "Update organizational unit",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "httpMethod": "PUT",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            },
            "orgUnitPath": {
              "pattern": "^.*$",
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Full path of the organizational unit or its ID"
            }
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "request": {
            "$ref": "OrgUnit"
          }
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "description": "Retrieve organizational unit",
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            },
            "orgUnitPath": {
              "location": "path",
              "type": "string",
              "description": "Full path of the organizational unit or its ID",
              "required": true,
              "pattern": "^.*$"
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "id": "directory.orgunits.get",
          "response": {
            "$ref": "OrgUnit"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}"
        },
        "patch": {
          "request": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "PATCH",
          "parameters": {
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "location": "path",
              "required": true,
              "type": "string",
              "pattern": "^.*$"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "id": "directory.orgunits.patch",
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "response": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        },
        "delete": {
          "parameters": {
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            }
          },
          "description": "Remove organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.orgunits.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "httpMethod": "DELETE"
        },
        "insert": {
          "id": "directory.orgunits.insert",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "description": "Add organizational unit",
          "response": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "request": {
            "$ref": "OrgUnit"
          }
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "parameters": {
            "type": {
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "location": "query",
              "type": "string",
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ],
              "description": "Whether to return all sub-organizations or just immediate children"
            },
            "orgUnitPath": {
              "default": "",
              "description": "the URL-encoded organizational unit's path or its ID",
              "location": "query",
              "type": "string"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "id": "directory.orgunits.list",
          "description": "Retrieve all organizational units",
          "response": {
            "$ref": "OrgUnits"
          },
          "parameterOrder": [
            "customerId"
          ]
        }
      }
    },
    "asps": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "response": {
            "$ref": "Asps"
          },
          "description": "List the ASPs issued by a user.",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "GET",
          "id": "directory.asps.list"
        },
        "delete": {
          "description": "Delete an ASP issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "codeId": {
              "description": "The unique ID of the ASP to be deleted.",
              "format": "int32",
              "required": true,
              "type": "integer",
              "location": "path"
            },
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "httpMethod": "DELETE",
          "id": "directory.asps.delete",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        },
        "get": {
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "codeId": {
              "type": "integer",
              "format": "int32",
              "location": "path",
              "description": "The unique ID of the ASP.",
              "required": true
            }
          },
          "httpMethod": "GET",
          "response": {
            "$ref": "Asp"
          },
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.get",
          "description": "Get information about an ASP issued by a user."
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.twoStepVerification.turnOff",
          "description": "Turn off 2-Step Verification for user."
        }
      }
    },
    "domainAliases": {
      "methods": {
        "list": {
          "response": {
            "$ref": "DomainAliases"
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "httpMethod": "GET",
          "parameters": {
            "parentDomainName": {
              "type": "string",
              "location": "query",
              "description": "Name of the parent domain for which domain aliases are to be fetched."
            },
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            }
          },
          "description": "Lists the domain aliases of the customer.",
          "id": "directory.domainAliases.list",
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "description": "Retrieves a domain alias of the customer.",
          "id": "directory.domainAliases.get",
          "response": {
            "$ref": "DomainAlias"
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            },
            "domainAliasName": {
              "description": "Name of domain alias to be retrieved.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}"
        },
        "insert": {
          "httpMethod": "POST",
          "response": {
            "$ref": "DomainAlias"
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "id": "directory.domainAliases.insert",
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "description": "Inserts a domain alias of the customer.",
          "request": {
            "$ref": "DomainAlias"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases"
        },
        "delete": {
          "id": "directory.domainAliases.delete",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "description": "Deletes a domain Alias of the customer.",
          "parameters": {
            "domainAliasName": {
              "description": "Name of domain alias to be retrieved.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}"
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "httpMethod": "POST",
          "id": "admin.channels.stop",
          "description": "Stop watching resources through this channel.",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "Channel"
          },
          "path": "admin/directory_v1/channels/stop",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "flatPath": "admin/directory_v1/channels/stop"
        }
      }
    },
    "groups": {
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "httpMethod": "DELETE",
              "description": "Remove a alias for the group",
              "parameters": {
                "groupKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the group",
                  "required": true
                },
                "alias": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The alias to be removed"
                }
              },
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "id": "directory.groups.aliases.delete",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}"
            },
            "insert": {
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "request": {
                "$ref": "Alias"
              },
              "parameterOrder": [
                "groupKey"
              ],
              "response": {
                "$ref": "Alias"
              },
              "id": "directory.groups.aliases.insert",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "description": "Add a alias for the group",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ]
            },
            "list": {
              "description": "List all aliases for a group",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "id": "directory.groups.aliases.list",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "httpMethod": "GET",
              "parameterOrder": [
                "groupKey"
              ],
              "response": {
                "$ref": "Aliases"
              },
              "parameters": {
                "groupKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the group",
                  "required": true,
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "methods": {
        "update": {
          "httpMethod": "PUT",
          "id": "directory.groups.update",
          "request": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "response": {
            "$ref": "Group"
          },
          "description": "Update Group",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "groupKey"
          ]
        },
        "patch": {
          "path": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "id": "directory.groups.patch",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "request": {
            "$ref": "Group"
          },
          "httpMethod": "PATCH",
          "description": "Patch Groups via Apiary Patch Orchestration",
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            }
          }
        },
        "insert": {
          "parameters": {},
          "flatPath": "admin/directory/v1/groups",
          "description": "Create Group",
          "id": "directory.groups.insert",
          "request": {
            "$ref": "Group"
          },
          "response": {
            "$ref": "Group"
          },
          "path": "admin/directory/v1/groups",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameterOrder": [],
          "httpMethod": "POST"
        },
        "get": {
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group",
              "required": true
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "description": "Retrieve Group",
          "httpMethod": "GET",
          "id": "directory.groups.get"
        },
        "list": {
          "flatPath": "admin/directory/v1/groups",
          "httpMethod": "GET",
          "id": "directory.groups.list",
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "parameterOrder": [],
          "path": "admin/directory/v1/groups",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "query",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object."
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.",
              "type": "string",
              "location": "query"
            },
            "orderBy": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "type": "string",
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUndefined",
                "email"
              ]
            },
            "query": {
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "location": "query"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain.",
              "location": "query",
              "type": "string"
            },
            "sortOrder": {
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify next page in the list"
            },
            "maxResults": {
              "format": "int32",
              "minimum": "1",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "location": "query",
              "type": "integer",
              "default": "200"
            }
          },
          "response": {
            "$ref": "Groups"
          }
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the group",
              "type": "string"
            }
          },
          "description": "Delete Group",
          "parameterOrder": [
            "groupKey"
          ],
          "id": "directory.groups.delete"
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "description": "Delete Mobile Device",
          "id": "directory.mobiledevices.delete",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            },
            "resourceId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of Mobile Device",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ]
        },
        "list": {
          "parameterOrder": [
            "customerId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "id": "directory.mobiledevices.list",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "httpMethod": "GET",
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "response": {
            "$ref": "MobileDevices"
          },
          "parameters": {
            "query": {
              "location": "query",
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "type": "string"
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ]
            },
            "maxResults": {
              "default": "100",
              "format": "int32",
              "minimum": "1",
              "location": "query",
              "type": "integer",
              "maximum": "100",
              "description": "Maximum number of results to return. Max allowed value is 100."
            },
            "sortOrder": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "type": "string",
              "location": "query"
            }
          }
        },
        "get": {
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "location": "query"
            },
            "resourceId": {
              "type": "string",
              "description": "Immutable ID of Mobile Device",
              "location": "path",
              "required": true
            },
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            }
          },
          "httpMethod": "GET",
          "id": "directory.mobiledevices.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "response": {
            "$ref": "MobileDevice"
          },
          "description": "Retrieve Mobile Device"
        },
        "action": {
          "id": "directory.mobiledevices.action",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "httpMethod": "POST",
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "description": "Take action on Mobile Device",
          "parameters": {
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            },
            "resourceId": {
              "description": "Immutable ID of Mobile Device",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action"
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "id": "directory.privileges.list",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "Privileges"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ]
        }
      }
    },
    "tokens": {
      "methods": {
        "delete": {
          "httpMethod": "DELETE",
          "description": "Delete all access tokens issued by a user for an application.",
          "parameters": {
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "userKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "id": "directory.tokens.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "get": {
          "description": "Get information about an access token issued by a user.",
          "id": "directory.tokens.get",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "response": {
            "$ref": "Token"
          },
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameters": {
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "httpMethod": "GET"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "Tokens"
          },
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "id": "directory.tokens.list",
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "httpMethod": "GET"
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "generate": {
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "id": "directory.verificationCodes.generate",
          "description": "Generate new backup verification codes for the user."
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "response": {
            "$ref": "VerificationCodes"
          },
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "id": "directory.verificationCodes.list",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "GET"
        },
        "invalidate": {
          "description": "Invalidate the current backup verification codes for the user.",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.verificationCodes.invalidate",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST"
        }
      }
    },
    "domains": {
      "methods": {
        "list": {
          "path": "admin/directory/v1/customer/{customer}/domains",
          "response": {
            "$ref": "Domains2"
          },
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "GET",
          "id": "directory.domains.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "description": "Lists the domains of the customer."
        },
        "get": {
          "response": {
            "$ref": "Domains"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "id": "directory.domains.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "description": "Retrieves a domain of the customer.",
          "parameters": {
            "domainName": {
              "description": "Name of domain to be retrieved",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}"
        },
        "insert": {
          "response": {
            "$ref": "Domains"
          },
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "id": "directory.domains.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains",
          "request": {
            "$ref": "Domains"
          },
          "description": "Inserts a domain of the customer.",
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            }
          }
        },
        "delete": {
          "id": "directory.domains.delete",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "parameters": {
            "domainName": {
              "type": "string",
              "description": "Name of domain to be deleted",
              "required": true,
              "location": "path"
            },
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "description": "Deletes a domain of the customer."
        }
      }
    },
    "schemas": {
      "methods": {
        "update": {
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "PUT",
          "description": "Update schema",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "request": {
            "$ref": "Schema"
          },
          "response": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "id": "directory.schemas.update",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "schemaKey": {
              "type": "string",
              "description": "Name or immutable ID of the schema.",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ]
        },
        "list": {
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "response": {
            "$ref": "Schemas"
          },
          "parameterOrder": [
            "customerId"
          ],
          "description": "Retrieve all schemas for a customer",
          "id": "directory.schemas.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas"
        },
        "patch": {
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Patch Schema via Apiary Patch Orchestration",
          "parameters": {
            "schemaKey": {
              "description": "Name or immutable ID of the schema.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "response": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "request": {
            "$ref": "Schema"
          },
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.patch"
        },
        "insert": {
          "id": "directory.schemas.insert",
          "description": "Create schema.",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "response": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId"
          ],
          "request": {
            "$ref": "Schema"
          },
          "httpMethod": "POST"
        },
        "delete": {
          "description": "Delete schema",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "httpMethod": "DELETE",
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "schemaKey": {
              "type": "string",
              "location": "path",
              "description": "Name or immutable ID of the schema",
              "required": true
            }
          },
          "id": "directory.schemas.delete",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        },
        "get": {
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "GET",
          "response": {
            "$ref": "Schema"
          },
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "schemaKey": {
              "description": "Name or immutable ID of the schema",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "description": "Retrieve schema",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ]
        }
      }
    },
    "users": {
      "resources": {
        "aliases": {
          "methods": {
            "list": {
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "httpMethod": "GET",
              "id": "directory.users.aliases.list",
              "response": {
                "$ref": "Aliases"
              },
              "parameterOrder": [
                "userKey"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "description": "List all aliases for a user"
            },
            "watch": {
              "parameterOrder": [
                "userKey"
              ],
              "parameters": {
                "event": {
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "location": "query",
                  "description": "Event on which subscription is intended (if subscribing)",
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "type": "string"
                },
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "request": {
                "$ref": "Channel"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "httpMethod": "POST",
              "description": "Watch for changes in users list",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "response": {
                "$ref": "Channel"
              },
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "id": "directory.users.aliases.watch"
            },
            "insert": {
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "location": "path"
                }
              },
              "description": "Add a alias for the user",
              "id": "directory.users.aliases.insert",
              "response": {
                "$ref": "Alias"
              },
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "parameterOrder": [
                "userKey"
              ],
              "request": {
                "$ref": "Alias"
              }
            },
            "delete": {
              "parameters": {
                "alias": {
                  "description": "The alias to be removed",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "description": "Remove a alias for the user",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "id": "directory.users.aliases.delete",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "httpMethod": "DELETE",
              "parameterOrder": [
                "userKey",
                "alias"
              ]
            }
          }
        },
        "photos": {
          "methods": {
            "get": {
              "parameters": {
                "userKey": {
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "GET",
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.get",
              "description": "Retrieve photo of a user",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "response": {
                "$ref": "UserPhoto"
              }
            },
            "delete": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Remove photos for the user",
              "parameterOrder": [
                "userKey"
              ],
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "id": "directory.users.photos.delete"
            },
            "patch": {
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.patch",
              "httpMethod": "PATCH",
              "response": {
                "$ref": "UserPhoto"
              },
              "request": {
                "$ref": "UserPhoto"
              },
              "description": "Patch Photo via Apiary Patch Orchestration",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "parameters": {
                "userKey": {
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userKey"
              ]
            },
            "update": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.update",
              "parameterOrder": [
                "userKey"
              ],
              "request": {
                "$ref": "UserPhoto"
              },
              "description": "Add a photo for the user",
              "response": {
                "$ref": "UserPhoto"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              },
              "httpMethod": "PUT",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            }
          }
        }
      },
      "methods": {
        "update": {
          "flatPath": "admin/directory/v1/users/{userKey}",
          "path": "admin/directory/v1/users/{userKey}",
          "description": "update user",
          "request": {
            "$ref": "User"
          },
          "httpMethod": "PUT",
          "response": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.update",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "required": true,
              "type": "string"
            }
          }
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "response": {
            "$ref": "User"
          },
          "parameterOrder": [
            "userKey"
          ],
          "description": "retrieve user",
          "parameters": {
            "viewType": {
              "default": "admin_view",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "location": "query",
              "type": "string",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user."
            },
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user",
              "type": "string",
              "location": "path"
            },
            "projection": {
              "type": "string",
              "description": "What subset of fields to fetch for this user.",
              "default": "basic",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "location": "query"
            },
            "customFieldMask": {
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.get",
          "flatPath": "admin/directory/v1/users/{userKey}"
        },
        "delete": {
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.users.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "Delete user",
          "path": "admin/directory/v1/users/{userKey}",
          "httpMethod": "DELETE"
        },
        "undelete": {
          "id": "directory.users.undelete",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "description": "The immutable id of the user",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "Undelete a deleted user",
          "request": {
            "$ref": "UserUndelete"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "parameterOrder": [
            "userKey"
          ]
        },
        "watch": {
          "parameters": {
            "projection": {
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ],
              "location": "query",
              "description": "What subset of fields to fetch for this user.",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "type": "string",
              "default": "basic"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "domain": {
              "type": "string",
              "location": "query",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\""
            },
            "event": {
              "type": "string",
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "location": "query",
              "description": "Event on which subscription is intended"
            },
            "sortOrder": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order."
            },
            "customFieldMask": {
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string"
            },
            "maxResults": {
              "format": "int32",
              "type": "integer",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "default": "100",
              "maximum": "500",
              "location": "query"
            },
            "showDeleted": {
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "location": "query",
              "type": "string"
            },
            "customer": {
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "type": "string"
            },
            "viewType": {
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "default": "admin_view"
            },
            "orderBy": {
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "location": "query",
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "type": "string"
            },
            "query": {
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/watch",
          "path": "admin/directory/v1/users/watch",
          "id": "directory.users.watch",
          "parameterOrder": [],
          "request": {
            "$ref": "Channel"
          },
          "description": "Watch for changes in users list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "Channel"
          }
        },
        "insert": {
          "response": {
            "$ref": "User"
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "User"
          },
          "id": "directory.users.insert",
          "flatPath": "admin/directory/v1/users",
          "parameterOrder": [],
          "parameters": {},
          "path": "admin/directory/v1/users",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "create user."
        },
        "patch": {
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object"
            }
          },
          "request": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          },
          "description": "Patch Users via Apiary Patch Orchestration",
          "id": "directory.users.patch",
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "signOut": {
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "id": "directory.users.signOut",
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path",
              "required": true
            }
          }
        },
        "makeAdmin": {
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "httpMethod": "POST",
          "description": "change admin status of a user",
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the user as admin"
            }
          },
          "id": "directory.users.makeAdmin",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "parameterOrder": [
            "userKey"
          ]
        },
        "list": {
          "httpMethod": "GET",
          "response": {
            "$ref": "Users"
          },
          "flatPath": "admin/directory/v1/users",
          "id": "directory.users.list",
          "path": "admin/directory/v1/users",
          "parameters": {
            "viewType": {
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "default": "admin_view",
              "type": "string",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "location": "query",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ]
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "format": "int32",
              "maximum": "500",
              "default": "100",
              "type": "integer",
              "location": "query",
              "description": "Maximum number of results to return.",
              "minimum": "1"
            },
            "sortOrder": {
              "type": "string",
              "description": "Whether to return results in ascending or descending order.",
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string",
              "location": "query"
            },
            "orderBy": {
              "location": "query",
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "type": "string"
            },
            "domain": {
              "location": "query",
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead."
            },
            "query": {
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "type": "string",
              "location": "query",
              "description": "What subset of fields to fetch for this user.",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "default": "basic"
            },
            "showDeleted": {
              "location": "query",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string"
            },
            "customer": {
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "type": "string"
            }
          },
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Retrieve either deleted users or all users in a domain (paginated)"
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "delete": {
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameters": {
            "roleAssignmentId": {
              "description": "Immutable ID of the role assignment.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "httpMethod": "DELETE",
          "description": "Deletes a role assignment.",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "id": "directory.roleAssignments.delete"
        },
        "list": {
          "description": "Retrieves a paginated list of all roleAssignments.",
          "parameters": {
            "maxResults": {
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "location": "query",
              "format": "int32",
              "type": "integer",
              "maximum": "200"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify the next page in the list."
            },
            "userKey": {
              "type": "string",
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "location": "query"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "roleId": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID."
            }
          },
          "response": {
            "$ref": "RoleAssignments"
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "id": "directory.roleAssignments.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ]
        },
        "insert": {
          "request": {
            "$ref": "RoleAssignment"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roleAssignments.insert",
          "description": "Creates a role assignment.",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "response": {
            "$ref": "RoleAssignment"
          }
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "roleAssignmentId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role assignment."
            },
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "description": "Retrieve a role assignment.",
          "id": "directory.roleAssignments.get",
          "response": {
            "$ref": "RoleAssignment"
          },
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "httpMethod": "GET"
        }
      }
    },
    "resources": {
      "resources": {
        "features": {
          "methods": {
            "patch": {
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "required": true,
                  "description": "The unique ID of the feature to update.",
                  "location": "path",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "id": "directory.resources.features.patch",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "list": {
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "description": "Retrieves a list of features for an account.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "httpMethod": "GET",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "maxResults": {
                  "type": "integer",
                  "location": "query",
                  "description": "Maximum number of results to return.",
                  "format": "int32",
                  "maximum": "500",
                  "minimum": "1"
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.features.list",
              "response": {
                "$ref": "Features"
              },
              "parameterOrder": [
                "customer"
              ]
            },
            "get": {
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameters": {
                "featureKey": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the feature to retrieve.",
                  "location": "path"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "response": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.get",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "description": "Retrieves a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "insert": {
              "request": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.insert",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                }
              },
              "description": "Inserts a feature.",
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "response": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features"
            },
            "delete": {
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "description": "Deletes a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "DELETE",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "featureKey": {
                  "description": "The unique ID of the feature to delete.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "id": "directory.resources.features.delete"
            },
            "update": {
              "parameters": {
                "featureKey": {
                  "type": "string",
                  "description": "The unique ID of the feature to update.",
                  "location": "path",
                  "required": true
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "description": "Updates a feature.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "PUT",
              "request": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.update",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "rename": {
              "parameters": {
                "oldName": {
                  "required": true,
                  "description": "The unique ID of the feature to rename.",
                  "type": "string",
                  "location": "path"
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.features.rename",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "httpMethod": "POST",
              "description": "Renames a feature.",
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "request": {
                "$ref": "FeatureRename"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename"
            }
          }
        },
        "buildings": {
          "methods": {
            "list": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "parameterOrder": [
                "customer"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "parameters": {
                "maxResults": {
                  "minimum": "1",
                  "format": "int32",
                  "location": "query",
                  "description": "Maximum number of results to return.",
                  "type": "integer",
                  "maximum": "500"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Token to specify the next page in the list."
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                }
              },
              "description": "Retrieves a list of buildings for an account.",
              "response": {
                "$ref": "Buildings"
              },
              "id": "directory.resources.buildings.list"
            },
            "update": {
              "httpMethod": "PUT",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Updates a building.",
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "description": "Source from which Building.coordinates are derived.",
                  "location": "query",
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ]
                },
                "buildingId": {
                  "type": "string",
                  "required": true,
                  "description": "The id of the building to update.",
                  "location": "path"
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "id": "directory.resources.buildings.update",
              "request": {
                "$ref": "Building"
              }
            },
            "delete": {
              "id": "directory.resources.buildings.delete",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Deletes a building.",
              "parameters": {
                "buildingId": {
                  "location": "path",
                  "description": "The id of the building to delete.",
                  "type": "string",
                  "required": true
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "DELETE"
            },
            "patch": {
              "response": {
                "$ref": "Building"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "PATCH",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Patches a building via Apiary Patch Orchestration.",
              "parameters": {
                "buildingId": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The id of the building to update."
                },
                "coordinatesSource": {
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "type": "string",
                  "description": "Source from which Building.coordinates are derived.",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "location": "query"
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "id": "directory.resources.buildings.patch",
              "request": {
                "$ref": "Building"
              }
            },
            "get": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "response": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.get",
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                },
                "buildingId": {
                  "location": "path",
                  "description": "The unique ID of the building to retrieve.",
                  "required": true,
                  "type": "string"
                }
              },
              "description": "Retrieves a building."
            },
            "insert": {
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "coordinatesSource": {
                  "location": "query",
                  "type": "string",
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ]
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "Building"
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.buildings.insert",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "description": "Inserts a building.",
              "response": {
                "$ref": "Building"
              }
            }
          }
        },
        "calendars": {
          "methods": {
            "get": {
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "calendarResourceId": {
                  "required": true,
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "location": "path",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Retrieves a calendar resource.",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "httpMethod": "GET",
              "id": "directory.resources.calendars.get",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "insert": {
              "response": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "POST",
              "request": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "description": "Inserts a calendar resource.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.calendars.insert"
            },
            "list": {
              "parameters": {
                "orderBy": {
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order.",
                  "type": "string",
                  "location": "query"
                },
                "query": {
                  "location": "query",
                  "type": "string",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone."
                },
                "maxResults": {
                  "format": "int32",
                  "minimum": "1",
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "location": "query",
                  "type": "integer"
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "httpMethod": "GET",
              "id": "directory.resources.calendars.list",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "description": "Retrieves a list of calendar resources for an account.",
              "response": {
                "$ref": "CalendarResources"
              },
              "parameterOrder": [
                "customer"
              ]
            },
            "delete": {
              "httpMethod": "DELETE",
              "id": "directory.resources.calendars.delete",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the calendar resource to delete.",
                  "location": "path"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Deletes a calendar resource."
            },
            "update": {
              "id": "directory.resources.calendars.update",
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "httpMethod": "PUT",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "calendarResourceId": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the calendar resource to update."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "CalendarResource"
              },
              "response": {
                "$ref": "CalendarResource"
              }
            },
            "patch": {
              "response": {
                "$ref": "CalendarResource"
              },
              "request": {
                "$ref": "CalendarResource"
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to update.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "id": "directory.resources.calendars.patch",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "PATCH"
            }
          }
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "list": {
          "id": "directory.chromeosdevices.list",
          "parameterOrder": [
            "customerId"
          ],
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameters": {
            "maxResults": {
              "default": "100",
              "format": "int32",
              "location": "query",
              "description": "Maximum number of results to return.",
              "minimum": "1",
              "type": "integer"
            },
            "sortOrder": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields."
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ],
              "type": "string",
              "location": "query",
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ]
            },
            "orgUnitPath": {
              "location": "query",
              "type": "string",
              "description": "Full path of the organizational unit or its ID"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "httpMethod": "GET",
          "response": {
            "$ref": "ChromeOsDevices"
          }
        },
        "moveDevicesToOu": {
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "httpMethod": "POST",
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            },
            "orgUnitPath": {
              "type": "string",
              "description": "Full path of the target organizational unit or its ID",
              "location": "query",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu"
        },
        "action": {
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "resourceId": {
              "type": "string",
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "id": "directory.chromeosdevices.action",
          "description": "Take action on Chrome OS Device",
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action"
        },
        "update": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "id": "directory.chromeosdevices.update",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "description": "Update Chrome OS Device",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "httpMethod": "PUT",
          "parameters": {
            "deviceId": {
              "location": "path",
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "type": "string"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            }
          }
        },
        "get": {
          "id": "directory.chromeosdevices.get",
          "description": "Retrieve Chrome OS Device",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            },
            "deviceId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of Chrome OS Device",
              "type": "string"
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string"
            }
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        },
        "patch": {
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "description": "Patch Chrome OS Device",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "parameters": {
            "deviceId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of Chrome OS Device",
              "required": true
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "httpMethod": "PATCH",
          "id": "directory.chromeosdevices.patch",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ]
        }
      }
    }
  },
  "batchPath": "batch/admin/directory_v1",
  "fullyEncodeReservedExpansion": true,
  "title": "Admin SDK",
  "id": "admin:directory_v1",
  "packagePath": "admin",
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "canonicalName": "directory",
  "name": "admin",
  "version": "directory_v1",
  "servicePath": "",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "kind": "discovery#restDescription"
}
