{
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "batchPath": "batch/admin/directory_v1",
  "baseUrl": "https://www.googleapis.com/",
  "resources": {
    "resources": {
      "resources": {
        "features": {
          "methods": {
            "insert": {
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "request": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "response": {
                "$ref": "Feature"
              },
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              },
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Inserts a feature.",
              "id": "directory.resources.features.insert"
            },
            "rename": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "id": "directory.resources.features.rename",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "FeatureRename"
              },
              "description": "Renames a feature.",
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "httpMethod": "POST",
              "parameters": {
                "oldName": {
                  "description": "The unique ID of the feature to rename.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                }
              }
            },
            "patch": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.patch",
              "response": {
                "$ref": "Feature"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "httpMethod": "PATCH",
              "parameters": {
                "featureKey": {
                  "description": "The unique ID of the feature to update.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              }
            },
            "get": {
              "response": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.get",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "featureKey": {
                  "description": "The unique ID of the feature to retrieve.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Retrieves a feature."
            },
            "delete": {
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "DELETE",
              "id": "directory.resources.features.delete",
              "description": "Deletes a feature.",
              "parameters": {
                "featureKey": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the feature to delete."
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "update": {
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "response": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the feature to update."
                }
              },
              "request": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.update",
              "httpMethod": "PUT",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Updates a feature."
            },
            "list": {
              "description": "Retrieves a list of features for an account.",
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                },
                "maxResults": {
                  "maximum": "500",
                  "minimum": "1",
                  "type": "integer",
                  "location": "query",
                  "description": "Maximum number of results to return.",
                  "format": "int32"
                }
              },
              "httpMethod": "GET",
              "id": "directory.resources.features.list",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "response": {
                "$ref": "Features"
              }
            }
          }
        },
        "calendars": {
          "methods": {
            "patch": {
              "id": "directory.resources.calendars.patch",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "calendarResourceId": {
                  "required": true,
                  "description": "The unique ID of the calendar resource to update.",
                  "location": "path",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "httpMethod": "PATCH",
              "request": {
                "$ref": "CalendarResource"
              }
            },
            "get": {
              "response": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "calendarResourceId": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.get",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a calendar resource.",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "GET"
            },
            "delete": {
              "id": "directory.resources.calendars.delete",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Deletes a calendar resource.",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string"
                },
                "calendarResourceId": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the calendar resource to delete.",
                  "type": "string"
                }
              }
            },
            "list": {
              "response": {
                "$ref": "CalendarResources"
              },
              "id": "directory.resources.calendars.list",
              "parameters": {
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "type": "string",
                  "location": "query"
                },
                "maxResults": {
                  "location": "query",
                  "maximum": "500",
                  "description": "Maximum number of results to return.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": "1"
                },
                "query": {
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone.",
                  "location": "query",
                  "type": "string"
                },
                "orderBy": {
                  "type": "string",
                  "location": "query",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order."
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "description": "Retrieves a list of calendar resources for an account.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameterOrder": [
                "customer"
              ],
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars"
            },
            "insert": {
              "parameters": {
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "httpMethod": "POST",
              "response": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.calendars.insert",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "request": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Inserts a calendar resource."
            },
            "update": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "id": "directory.resources.calendars.update",
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "calendarResourceId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the calendar resource to update."
                }
              },
              "request": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "httpMethod": "PUT",
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved."
            }
          }
        },
        "buildings": {
          "methods": {
            "insert": {
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "coordinatesSource": {
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "location": "query",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "type": "string",
                  "default": "SOURCE_UNSPECIFIED"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "request": {
                "$ref": "Building"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Inserts a building.",
              "response": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.insert",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "httpMethod": "POST"
            },
            "get": {
              "response": {
                "$ref": "Building"
              },
              "description": "Retrieves a building.",
              "id": "directory.resources.buildings.get",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameters": {
                "buildingId": {
                  "description": "The unique ID of the building to retrieve.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              }
            },
            "list": {
              "description": "Retrieves a list of buildings for an account.",
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "Buildings"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "maxResults": {
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "format": "int32",
                  "minimum": "1",
                  "location": "query",
                  "type": "integer"
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "httpMethod": "GET",
              "id": "directory.resources.buildings.list"
            },
            "patch": {
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Patches a building via Apiary Patch Orchestration.",
              "httpMethod": "PATCH",
              "response": {
                "$ref": "Building"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The id of the building to update."
                },
                "coordinatesSource": {
                  "description": "Source from which Building.coordinates are derived.",
                  "location": "query",
                  "default": "SOURCE_UNSPECIFIED",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "type": "string"
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "id": "directory.resources.buildings.patch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "Building"
              }
            },
            "update": {
              "id": "directory.resources.buildings.update",
              "request": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "PUT",
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "coordinatesSource": {
                  "description": "Source from which Building.coordinates are derived.",
                  "location": "query",
                  "default": "SOURCE_UNSPECIFIED",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "type": "string"
                },
                "buildingId": {
                  "required": true,
                  "description": "The id of the building to update.",
                  "type": "string",
                  "location": "path"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Updates a building.",
              "parameterOrder": [
                "customer",
                "buildingId"
              ]
            },
            "delete": {
              "description": "Deletes a building.",
              "httpMethod": "DELETE",
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                },
                "buildingId": {
                  "type": "string",
                  "description": "The id of the building to delete.",
                  "location": "path",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "id": "directory.resources.buildings.delete",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            }
          }
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "flatPath": "admin/directory_v1/channels/stop",
          "parameterOrder": [],
          "path": "admin/directory_v1/channels/stop",
          "description": "Stop watching resources through this channel.",
          "parameters": {},
          "request": {
            "$ref": "Channel"
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "admin.channels.stop"
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "httpMethod": "DELETE",
          "parameters": {
            "roleAssignmentId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the role assignment."
            },
            "customer": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "id": "directory.roleAssignments.delete",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "description": "Deletes a role assignment.",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}"
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Creates a role assignment.",
          "id": "directory.roleAssignments.insert",
          "httpMethod": "POST",
          "response": {
            "$ref": "RoleAssignment"
          },
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "request": {
            "$ref": "RoleAssignment"
          }
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "httpMethod": "GET",
          "id": "directory.roleAssignments.get",
          "description": "Retrieve a role assignment.",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "response": {
            "$ref": "RoleAssignment"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "roleAssignmentId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role assignment."
            }
          }
        },
        "list": {
          "description": "Retrieves a paginated list of all roleAssignments.",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "id": "directory.roleAssignments.list",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "response": {
            "$ref": "RoleAssignments"
          },
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true
            },
            "userKey": {
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "location": "query",
              "type": "string"
            },
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "type": "string",
              "location": "query"
            },
            "roleId": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID."
            },
            "maxResults": {
              "type": "integer",
              "location": "query",
              "minimum": "1",
              "maximum": "200",
              "format": "int32",
              "description": "Maximum number of results to return."
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ]
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "delete": {
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "description": "Delete Mobile Device",
          "id": "directory.mobiledevices.delete",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameters": {
            "resourceId": {
              "type": "string",
              "description": "Immutable ID of Mobile Device",
              "required": true,
              "location": "path"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            }
          },
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ]
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "id": "directory.mobiledevices.list",
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query"
            },
            "maxResults": {
              "minimum": "1",
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "maximum": "100",
              "location": "query",
              "type": "integer",
              "default": "100"
            },
            "sortOrder": {
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "orderBy": {
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "location": "query",
              "description": "Column to use for sorting results",
              "type": "string",
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ]
            }
          },
          "response": {
            "$ref": "MobileDevices"
          }
        },
        "get": {
          "description": "Retrieve Mobile Device",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "httpMethod": "GET",
          "response": {
            "$ref": "MobileDevice"
          },
          "id": "directory.mobiledevices.get",
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "type": "string"
            },
            "resourceId": {
              "required": true,
              "description": "Immutable ID of Mobile Device",
              "type": "string",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "parameterOrder": [
            "customerId",
            "resourceId"
          ]
        },
        "action": {
          "id": "directory.mobiledevices.action",
          "httpMethod": "POST",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "description": "Take action on Mobile Device",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "parameters": {
            "resourceId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of Mobile Device"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ]
        }
      }
    },
    "orgunits": {
      "methods": {
        "patch": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "request": {
            "$ref": "OrgUnit"
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "PATCH",
          "id": "directory.orgunits.patch",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameters": {
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "required": true,
              "pattern": "^.*$",
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "description": "Patch organization unit via Apiary Patch Orchestration"
        },
        "insert": {
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customerId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "httpMethod": "POST",
          "description": "Add organizational unit",
          "id": "directory.orgunits.insert",
          "response": {
            "$ref": "OrgUnit"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "request": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ]
        },
        "get": {
          "response": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "httpMethod": "GET",
          "id": "directory.orgunits.get",
          "description": "Retrieve organizational unit",
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "pattern": "^.*$",
              "type": "string",
              "description": "Full path of the organizational unit or its ID",
              "required": true
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            }
          }
        },
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "orgUnitPath": {
              "location": "path",
              "pattern": "^.*$",
              "required": true,
              "description": "Full path of the organizational unit or its ID",
              "type": "string"
            }
          },
          "id": "directory.orgunits.delete",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "httpMethod": "DELETE",
          "description": "Remove organizational unit"
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "response": {
            "$ref": "OrgUnits"
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameters": {
            "orgUnitPath": {
              "default": "",
              "type": "string",
              "description": "the URL-encoded organizational unit's path or its ID",
              "location": "query"
            },
            "type": {
              "location": "query",
              "description": "Whether to return all sub-organizations or just immediate children",
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ]
            },
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "parameterOrder": [
            "customerId"
          ],
          "description": "Retrieve all organizational units",
          "id": "directory.orgunits.list"
        },
        "update": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "httpMethod": "PUT",
          "description": "Update organizational unit",
          "response": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.update",
          "request": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "required": true,
              "location": "path",
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ]
        }
      }
    },
    "domains": {
      "methods": {
        "list": {
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domains",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "response": {
            "$ref": "Domains2"
          },
          "id": "directory.domains.list",
          "description": "Lists the domains of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "GET",
          "parameterOrder": [
            "customer"
          ]
        },
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domains.delete",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "description": "Deletes a domain of the customer.",
          "httpMethod": "DELETE",
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            },
            "domainName": {
              "required": true,
              "description": "Name of domain to be deleted",
              "type": "string",
              "location": "path"
            }
          }
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "httpMethod": "GET",
          "description": "Retrieves a domain of the customer.",
          "id": "directory.domains.get",
          "response": {
            "$ref": "Domains"
          },
          "parameters": {
            "domainName": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Name of domain to be retrieved"
            },
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          }
        },
        "insert": {
          "httpMethod": "POST",
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains",
          "request": {
            "$ref": "Domains"
          },
          "id": "directory.domains.insert",
          "response": {
            "$ref": "Domains"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "description": "Inserts a domain of the customer."
        }
      }
    },
    "users": {
      "resources": {
        "aliases": {
          "methods": {
            "list": {
              "response": {
                "$ref": "Aliases"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "httpMethod": "GET",
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.aliases.list",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "type": "string"
                }
              },
              "description": "List all aliases for a user",
              "path": "admin/directory/v1/users/{userKey}/aliases"
            },
            "watch": {
              "parameterOrder": [
                "userKey"
              ],
              "parameters": {
                "event": {
                  "location": "query",
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "description": "Event on which subscription is intended (if subscribing)"
                },
                "userKey": {
                  "location": "path",
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "httpMethod": "POST",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "request": {
                "$ref": "Channel"
              },
              "id": "directory.users.aliases.watch",
              "response": {
                "$ref": "Channel"
              },
              "description": "Watch for changes in users list",
              "path": "admin/directory/v1/users/{userKey}/aliases/watch"
            },
            "insert": {
              "response": {
                "$ref": "Alias"
              },
              "description": "Add a alias for the user",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "httpMethod": "POST",
              "request": {
                "$ref": "Alias"
              },
              "id": "directory.users.aliases.insert",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "parameterOrder": [
                "userKey"
              ]
            },
            "delete": {
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "description": "Remove a alias for the user",
              "id": "directory.users.aliases.delete",
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                },
                "alias": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The alias to be removed"
                }
              },
              "parameterOrder": [
                "userKey",
                "alias"
              ]
            }
          }
        },
        "photos": {
          "methods": {
            "update": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user"
                }
              },
              "response": {
                "$ref": "UserPhoto"
              },
              "httpMethod": "PUT",
              "parameterOrder": [
                "userKey"
              ],
              "request": {
                "$ref": "UserPhoto"
              },
              "id": "directory.users.photos.update",
              "description": "Add a photo for the user",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "delete": {
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.delete",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true
                }
              },
              "description": "Remove photos for the user",
              "parameterOrder": [
                "userKey"
              ]
            },
            "get": {
              "response": {
                "$ref": "UserPhoto"
              },
              "httpMethod": "GET",
              "description": "Retrieve photo of a user",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "location": "path"
                }
              },
              "id": "directory.users.photos.get",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ]
            },
            "patch": {
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "request": {
                "$ref": "UserPhoto"
              },
              "description": "Patch Photo via Apiary Patch Orchestration",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "id": "directory.users.photos.patch",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "PATCH",
              "response": {
                "$ref": "UserPhoto"
              }
            }
          }
        }
      },
      "methods": {
        "get": {
          "description": "retrieve user",
          "response": {
            "$ref": "User"
          },
          "parameters": {
            "viewType": {
              "location": "query",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "type": "string",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "default": "admin_view"
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query",
              "type": "string"
            },
            "userKey": {
              "description": "Email or immutable ID of the user",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "description": "What subset of fields to fetch for this user.",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "location": "query",
              "type": "string",
              "default": "basic"
            }
          },
          "httpMethod": "GET",
          "id": "directory.users.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "path": "admin/directory/v1/users/{userKey}",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ]
        },
        "update": {
          "httpMethod": "PUT",
          "request": {
            "$ref": "User"
          },
          "id": "directory.users.update",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "description": "update user",
          "path": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object"
            }
          },
          "response": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "patch": {
          "id": "directory.users.patch",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "description": "Patch Users via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "request": {
            "$ref": "User"
          },
          "response": {
            "$ref": "User"
          },
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/users/{userKey}"
        },
        "undelete": {
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.undelete",
          "description": "Undelete a deleted user",
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "parameters": {
            "userKey": {
              "required": true,
              "description": "The immutable id of the user",
              "location": "path",
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "UserUndelete"
          }
        },
        "list": {
          "httpMethod": "GET",
          "parameterOrder": [],
          "id": "directory.users.list",
          "path": "admin/directory/v1/users",
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "Users"
          },
          "parameters": {
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order.",
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query"
            },
            "query": {
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "location": "query"
            },
            "orderBy": {
              "type": "string",
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "location": "query"
            },
            "viewType": {
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "default": "admin_view"
            },
            "showDeleted": {
              "location": "query",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string"
            },
            "customer": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            },
            "domain": {
              "location": "query",
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead."
            },
            "projection": {
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "default": "basic",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "location": "query",
              "type": "string",
              "description": "What subset of fields to fetch for this user."
            },
            "customFieldMask": {
              "location": "query",
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "maxResults": {
              "maximum": "500",
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "format": "int32",
              "default": "100",
              "description": "Maximum number of results to return."
            }
          },
          "flatPath": "admin/directory/v1/users"
        },
        "signOut": {
          "id": "directory.users.signOut",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            }
          }
        },
        "makeAdmin": {
          "description": "change admin status of a user",
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user as admin",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "id": "directory.users.makeAdmin",
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "insert": {
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "User"
          },
          "response": {
            "$ref": "User"
          },
          "description": "create user.",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.insert",
          "path": "admin/directory/v1/users"
        },
        "watch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "flatPath": "admin/directory/v1/users/watch",
          "parameters": {
            "event": {
              "description": "Event on which subscription is intended",
              "type": "string",
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "location": "query"
            },
            "domain": {
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\"",
              "location": "query"
            },
            "customFieldMask": {
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string"
            },
            "viewType": {
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "type": "string",
              "default": "admin_view",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "location": "query"
            },
            "sortOrder": {
              "type": "string",
              "location": "query",
              "description": "Whether to return results in ascending or descending order.",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "projection": {
              "location": "query",
              "type": "string",
              "default": "basic",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "description": "What subset of fields to fetch for this user.",
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ]
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "location": "query"
            },
            "maxResults": {
              "default": "100",
              "type": "integer",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "location": "query",
              "format": "int32",
              "maximum": "500"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "showDeleted": {
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "location": "query"
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "type": "string",
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "location": "query"
            }
          },
          "id": "directory.users.watch",
          "path": "admin/directory/v1/users/watch",
          "response": {
            "$ref": "Channel"
          },
          "httpMethod": "POST",
          "description": "Watch for changes in users list",
          "parameterOrder": [],
          "request": {
            "$ref": "Channel"
          }
        },
        "delete": {
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the user"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.delete",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/users/{userKey}",
          "description": "Delete user"
        }
      }
    },
    "asps": {
      "methods": {
        "delete": {
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            },
            "codeId": {
              "required": true,
              "description": "The unique ID of the ASP to be deleted.",
              "location": "path",
              "type": "integer",
              "format": "int32"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Delete an ASP issued by a user.",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "httpMethod": "DELETE",
          "id": "directory.asps.delete"
        },
        "list": {
          "response": {
            "$ref": "Asps"
          },
          "path": "admin/directory/v1/users/{userKey}/asps",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "id": "directory.asps.list",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "description": "List the ASPs issued by a user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ]
        },
        "get": {
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "parameters": {
            "codeId": {
              "required": true,
              "description": "The unique ID of the ASP.",
              "format": "int32",
              "type": "integer",
              "location": "path"
            },
            "userKey": {
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            }
          },
          "httpMethod": "GET",
          "description": "Get information about an ASP issued by a user.",
          "response": {
            "$ref": "Asp"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.get",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "list": {
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "id": "directory.verificationCodes.list",
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "VerificationCodes"
          },
          "httpMethod": "GET",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true
            }
          }
        },
        "generate": {
          "httpMethod": "POST",
          "id": "directory.verificationCodes.generate",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "description": "Generate new backup verification codes for the user.",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user",
              "type": "string"
            }
          }
        },
        "invalidate": {
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "httpMethod": "POST",
          "id": "directory.verificationCodes.invalidate",
          "description": "Invalidate the current backup verification codes for the user.",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user",
              "type": "string",
              "required": true
            }
          },
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate"
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "response": {
            "$ref": "Privileges"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "httpMethod": "GET",
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "id": "directory.privileges.list",
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            }
          }
        }
      }
    },
    "groups": {
      "methods": {
        "get": {
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the group",
              "location": "path"
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "groupKey"
          ],
          "id": "directory.groups.get",
          "path": "admin/directory/v1/groups/{groupKey}",
          "description": "Retrieve Group"
        },
        "delete": {
          "path": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "id": "directory.groups.delete",
          "description": "Delete Group",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group"
            }
          }
        },
        "list": {
          "response": {
            "$ref": "Groups"
          },
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "id": "directory.groups.list",
          "parameters": {
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "location": "query"
            },
            "userKey": {
              "location": "query",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "type": "string"
            },
            "orderBy": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "enum": [
                "orderByUndefined",
                "email"
              ],
              "type": "string",
              "description": "Column to use for sorting results"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "minimum": "1",
              "default": "200",
              "location": "query",
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "type": "integer"
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.",
              "location": "query",
              "type": "string"
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups"
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [],
          "flatPath": "admin/directory/v1/groups",
          "path": "admin/directory/v1/groups",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ]
        },
        "insert": {
          "flatPath": "admin/directory/v1/groups",
          "request": {
            "$ref": "Group"
          },
          "parameters": {},
          "description": "Create Group",
          "id": "directory.groups.insert",
          "parameterOrder": [],
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "path": "admin/directory/v1/groups",
          "response": {
            "$ref": "Group"
          }
        },
        "patch": {
          "parameters": {
            "groupKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "request": {
            "$ref": "Group"
          },
          "id": "directory.groups.patch",
          "description": "Patch Groups via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/groups/{groupKey}"
        },
        "update": {
          "response": {
            "$ref": "Group"
          },
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "description": "Update Group",
          "path": "admin/directory/v1/groups/{groupKey}",
          "request": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.update"
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "insert": {
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "description": "Add a alias for the group",
              "request": {
                "$ref": "Alias"
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "id": "directory.groups.aliases.insert",
              "parameterOrder": [
                "groupKey"
              ],
              "response": {
                "$ref": "Alias"
              },
              "httpMethod": "POST"
            },
            "list": {
              "parameters": {
                "groupKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the group",
                  "required": true,
                  "location": "path"
                }
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "groupKey"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "response": {
                "$ref": "Aliases"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "id": "directory.groups.aliases.list",
              "description": "List all aliases for a group",
              "path": "admin/directory/v1/groups/{groupKey}/aliases"
            },
            "delete": {
              "parameters": {
                "alias": {
                  "required": true,
                  "location": "path",
                  "description": "The alias to be removed",
                  "type": "string"
                },
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "description": "Remove a alias for the group",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "id": "directory.groups.aliases.delete",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "httpMethod": "DELETE"
            }
          }
        }
      }
    },
    "tokens": {
      "methods": {
        "get": {
          "parameters": {
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "id": "directory.tokens.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Get information about an access token issued by a user.",
          "response": {
            "$ref": "Token"
          },
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        },
        "list": {
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "id": "directory.tokens.list",
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "Tokens"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "description": "Returns the set of tokens specified user has issued to 3rd party applications."
        },
        "delete": {
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Delete all access tokens issued by a user for an application.",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            },
            "clientId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "The Client ID of the application the token is issued to."
            }
          },
          "id": "directory.tokens.delete",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "httpMethod": "DELETE"
        }
      }
    },
    "domainAliases": {
      "methods": {
        "get": {
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "parameters": {
            "domainAliasName": {
              "description": "Name of domain alias to be retrieved.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "id": "directory.domainAliases.get",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "response": {
            "$ref": "DomainAlias"
          },
          "description": "Retrieves a domain alias of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "httpMethod": "GET"
        },
        "insert": {
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "description": "Inserts a domain alias of the customer.",
          "request": {
            "$ref": "DomainAlias"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "response": {
            "$ref": "DomainAlias"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domainAliases.insert"
        },
        "list": {
          "response": {
            "$ref": "DomainAliases"
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.domainAliases.list",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "parameters": {
            "parentDomainName": {
              "location": "query",
              "description": "Name of the parent domain for which domain aliases are to be fetched.",
              "type": "string"
            },
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "description": "Lists the domain aliases of the customer."
        },
        "delete": {
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "id": "directory.domainAliases.delete",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "description": "Deletes a domain Alias of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameters": {
            "domainAliasName": {
              "required": true,
              "description": "Name of domain alias to be retrieved.",
              "type": "string",
              "location": "path"
            },
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            }
          }
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "description": "Turn off 2-Step Verification for user.",
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "id": "directory.twoStepVerification.turnOff"
        }
      }
    },
    "members": {
      "methods": {
        "list": {
          "httpMethod": "GET",
          "response": {
            "$ref": "Members"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameterOrder": [
            "groupKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "description": "Retrieve all members in a group (paginated)",
          "id": "directory.members.list",
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group"
            },
            "roles": {
              "location": "query",
              "description": "Comma separated role values to filter list results on.",
              "type": "string"
            },
            "includeDerivedMembership": {
              "type": "boolean",
              "description": "Whether to list indirect memberships. Default: false.",
              "location": "query"
            },
            "maxResults": {
              "format": "int32",
              "default": "200",
              "minimum": "1",
              "type": "integer",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify next page in the list"
            }
          }
        },
        "update": {
          "id": "directory.members.update",
          "parameters": {
            "memberKey": {
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "location": "path"
            },
            "groupKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            }
          },
          "request": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Update membership of a user in the specified group.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          },
          "httpMethod": "PUT"
        },
        "delete": {
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "memberKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the member",
              "type": "string"
            }
          },
          "httpMethod": "DELETE",
          "description": "Remove membership.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.delete",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        },
        "insert": {
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "description": "Add user to the specified group.",
          "request": {
            "$ref": "Member"
          },
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group"
            }
          },
          "response": {
            "$ref": "Member"
          },
          "id": "directory.members.insert"
        },
        "patch": {
          "response": {
            "$ref": "Member"
          },
          "id": "directory.members.patch",
          "request": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "memberKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Patch Member via Apiary Patch Orchestration"
        },
        "hasMember": {
          "id": "directory.members.hasMember",
          "httpMethod": "GET",
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "response": {
            "$ref": "MembersHasMember"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "parameters": {
            "memberKey": {
              "location": "path",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "type": "string",
              "required": true
            },
            "groupKey": {
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true,
              "type": "string"
            }
          }
        },
        "get": {
          "parameters": {
            "groupKey": {
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the group",
              "location": "path"
            },
            "memberKey": {
              "type": "string",
              "description": "Email or immutable ID of the member",
              "required": true,
              "location": "path"
            }
          },
          "description": "Retrieve Group Member",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.get",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "response": {
            "$ref": "Member"
          }
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "methods": {
                "issueCommand": {
                  "description": "Issues a command for the device to execute.",
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ],
                  "httpMethod": "POST",
                  "parameters": {
                    "customerId": {
                      "description": "Immutable. Immutable ID of the G Suite account.",
                      "type": "string",
                      "location": "path",
                      "required": true
                    },
                    "deviceId": {
                      "type": "string",
                      "location": "path",
                      "description": "Immutable. Immutable ID of Chrome OS Device.",
                      "required": true
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand"
                }
              },
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "parameters": {
                        "deviceId": {
                          "type": "string",
                          "description": "Immutable. Immutable ID of Chrome OS Device.",
                          "required": true,
                          "location": "path"
                        },
                        "customerId": {
                          "location": "path",
                          "description": "Immutable. Immutable ID of the G Suite account.",
                          "type": "string",
                          "required": true
                        },
                        "commandId": {
                          "required": true,
                          "description": "Immutable. Immutable ID of Chrome OS Device Command.",
                          "format": "int64",
                          "type": "string",
                          "location": "path"
                        }
                      },
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ],
                      "description": "Gets command data a specific command issued to the device.",
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "httpMethod": "GET",
                      "id": "admin.customer.devices.chromeos.commands.get"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "patch": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.patch",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "httpMethod": "PATCH",
          "parameters": {
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            }
          },
          "description": "Patch Chrome OS Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "request": {
            "$ref": "ChromeOsDevice"
          }
        },
        "get": {
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "description": "Retrieve Chrome OS Device",
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "deviceId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of Chrome OS Device",
              "type": "string"
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "id": "directory.chromeosdevices.get"
        },
        "update": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "description": "Update Chrome OS Device",
          "id": "directory.chromeosdevices.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "httpMethod": "PUT",
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            },
            "deviceId": {
              "type": "string",
              "description": "Immutable ID of Chrome OS Device",
              "location": "path",
              "required": true
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "description": "Restrict information returned to a set of selected fields."
            }
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        },
        "list": {
          "id": "directory.chromeosdevices.list",
          "parameters": {
            "query": {
              "location": "query",
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "type": "string"
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "default": "100",
              "type": "integer"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            },
            "orderBy": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ],
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "location": "query"
            },
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            }
          },
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "parameterOrder": [
            "customerId"
          ],
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos"
        },
        "action": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            },
            "resourceId": {
              "description": "Immutable ID of Chrome OS Device",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.chromeosdevices.action",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "description": "Take action on Chrome OS Device",
          "httpMethod": "POST",
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ]
        },
        "moveDevicesToOu": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            },
            "orgUnitPath": {
              "required": true,
              "description": "Full path of the target organizational unit or its ID",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "httpMethod": "POST",
          "description": "Move or insert multiple Chrome OS Devices to organizational unit"
        }
      }
    },
    "roles": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "roleId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role.",
              "required": true
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            }
          },
          "description": "Retrieves a role.",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "response": {
            "$ref": "Role"
          },
          "id": "directory.roles.get"
        },
        "insert": {
          "httpMethod": "POST",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "id": "directory.roles.insert",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "description": "Creates a role.",
          "request": {
            "$ref": "Role"
          },
          "response": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "list": {
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            },
            "maxResults": {
              "maximum": "100",
              "description": "Maximum number of results to return.",
              "format": "int32",
              "type": "integer",
              "minimum": "1",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify the next page in the list."
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Roles"
          },
          "id": "directory.roles.list"
        },
        "delete": {
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "roleId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the role.",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Deletes a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "httpMethod": "DELETE",
          "id": "directory.roles.delete"
        },
        "update": {
          "id": "directory.roles.update",
          "parameters": {
            "roleId": {
              "type": "string",
              "description": "Immutable ID of the role.",
              "location": "path",
              "required": true
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "httpMethod": "PUT",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "description": "Updates a role.",
          "request": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "patch": {
          "httpMethod": "PATCH",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "id": "directory.roles.patch",
          "response": {
            "$ref": "Role"
          },
          "request": {
            "$ref": "Role"
          },
          "description": "Patch role via Apiary Patch Orchestration",
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            },
            "roleId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the role."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        }
      }
    },
    "schemas": {
      "methods": {
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "request": {
            "$ref": "Schema"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "description": "Create schema.",
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            }
          },
          "response": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "POST",
          "id": "directory.schemas.insert"
        },
        "delete": {
          "description": "Delete schema",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            },
            "schemaKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Name or immutable ID of the schema"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "id": "directory.schemas.delete",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "httpMethod": "DELETE"
        },
        "list": {
          "description": "Retrieve all schemas for a customer",
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Schemas"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "id": "directory.schemas.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ]
        },
        "get": {
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "description": "Retrieve schema",
          "response": {
            "$ref": "Schema"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "id": "directory.schemas.get",
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            },
            "schemaKey": {
              "type": "string",
              "location": "path",
              "description": "Name or immutable ID of the schema",
              "required": true
            }
          }
        },
        "patch": {
          "response": {
            "$ref": "Schema"
          },
          "description": "Patch Schema via Apiary Patch Orchestration",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "id": "directory.schemas.patch",
          "request": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "schemaKey": {
              "type": "string",
              "required": true,
              "description": "Name or immutable ID of the schema.",
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            }
          }
        },
        "update": {
          "id": "directory.schemas.update",
          "httpMethod": "PUT",
          "request": {
            "$ref": "Schema"
          },
          "parameters": {
            "schemaKey": {
              "description": "Name or immutable ID of the schema.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Update schema",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          }
        }
      }
    },
    "customers": {
      "methods": {
        "update": {
          "parameters": {
            "customerKey": {
              "location": "path",
              "required": true,
              "description": "Id of the customer to be updated",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "parameterOrder": [
            "customerKey"
          ],
          "request": {
            "$ref": "Customer"
          },
          "id": "directory.customers.update",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customers/{customerKey}",
          "description": "Updates a customer."
        },
        "get": {
          "id": "directory.customers.get",
          "parameterOrder": [
            "customerKey"
          ],
          "description": "Retrieves a customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "response": {
            "$ref": "Customer"
          },
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be retrieved",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customers/{customerKey}"
        },
        "patch": {
          "description": "Patch Customers via Apiary Patch Orchestration",
          "parameterOrder": [
            "customerKey"
          ],
          "request": {
            "$ref": "Customer"
          },
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.patch",
          "path": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "parameters": {
            "customerKey": {
              "required": true,
              "description": "Id of the customer to be updated",
              "type": "string",
              "location": "path"
            }
          }
        }
      }
    }
  },
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "name": "admin",
  "fullyEncodeReservedExpansion": true,
  "canonicalName": "directory",
  "revision": "20201013",
  "schemas": {
    "Schemas": {
      "id": "Schemas",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#schemas",
          "type": "string"
        },
        "schemas": {
          "type": "array",
          "description": "List of UserSchema objects.",
          "items": {
            "$ref": "Schema"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "Role": {
      "type": "object",
      "id": "Role",
      "properties": {
        "roleId": {
          "type": "string",
          "format": "int64",
          "description": "ID of the role."
        },
        "roleDescription": {
          "type": "string",
          "description": "A short description of the role."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "isSuperAdminRole": {
          "description": "Returns true if the role is a super admin role.",
          "type": "boolean"
        },
        "rolePrivileges": {
          "type": "array",
          "description": "The set of privileges that are granted to this role.",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "items": {
            "type": "object",
            "properties": {
              "serviceId": {
                "type": "string",
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
              },
              "privilegeName": {
                "type": "string",
                "description": "The name of the privilege."
              }
            }
          }
        },
        "roleName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "description": "Name of the role."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#role.",
          "default": "admin#directory#role",
          "type": "string"
        },
        "isSystemRole": {
          "description": "Returns true if this is a pre-defined system role.",
          "type": "boolean"
        }
      }
    },
    "UserPhone": {
      "description": "JSON template for a phone entry.",
      "properties": {
        "value": {
          "description": "Phone number.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary phone or not.",
          "type": "boolean"
        }
      },
      "id": "UserPhone",
      "type": "object"
    },
    "UserLanguage": {
      "description": "JSON template for a language entry.",
      "id": "UserLanguage",
      "type": "object",
      "properties": {
        "languageCode": {
          "type": "string",
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException."
        },
        "customLanguage": {
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set",
          "type": "string"
        }
      }
    },
    "OrgUnit": {
      "properties": {
        "kind": {
          "default": "admin#directory#orgUnit",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "parentOrgUnitPath": {
          "type": "string",
          "description": "Path of parent OrgUnit"
        },
        "parentOrgUnitId": {
          "description": "Id of parent OrgUnit",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Description of OrgUnit"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "blockInheritance": {
          "description": "Should block inheritance",
          "type": "boolean"
        },
        "orgUnitId": {
          "description": "Id of OrgUnit",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Name of OrgUnit",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          }
        },
        "orgUnitPath": {
          "description": "Path of OrgUnit",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "OrgUnit"
    },
    "UserMakeAdmin": {
      "properties": {
        "status": {
          "type": "boolean",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "description": "Boolean indicating new admin status of the user"
        }
      },
      "type": "object",
      "id": "UserMakeAdmin"
    },
    "ChromeOsDevice": {
      "type": "object",
      "id": "ChromeOsDevice",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "status": {
          "description": "status of the device (Read-only)",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#chromeosdevice",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "platformVersion": {
          "description": "Chromebook platform version (Read-only)",
          "type": "string"
        },
        "annotatedUser": {
          "description": "User of the device",
          "type": "string"
        },
        "manufactureDate": {
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
          "type": "string"
        },
        "firmwareVersion": {
          "description": "Chromebook firmware version (Read-only)",
          "type": "string"
        },
        "dockMacAddress": {
          "type": "string",
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "systemRamTotal": {
          "type": "string",
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "format": "int64"
        },
        "deviceFiles": {
          "type": "array",
          "description": "List of device files to download (Read-only)",
          "items": {
            "properties": {
              "type": {
                "description": "File type",
                "type": "string"
              },
              "createTime": {
                "format": "date-time",
                "description": "Date and time the file was created",
                "type": "string"
              },
              "name": {
                "type": "string",
                "description": "File name"
              },
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              }
            },
            "type": "object"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "model": {
          "type": "string",
          "description": "Chromebook Model (Read-only)"
        },
        "ethernetMacAddress0": {
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "lastKnownNetwork": {
          "description": "Contains last known network (Read-only)",
          "items": {
            "properties": {
              "ipAddress": {
                "description": "The IP address.",
                "type": "string"
              },
              "wanIpAddress": {
                "description": "The WAN IP address.",
                "type": "string"
              }
            },
            "type": "object",
            "description": "Information for an ip address."
          },
          "type": "array"
        },
        "systemRamFreeReports": {
          "type": "array",
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "items": {
            "properties": {
              "reportTime": {
                "description": "Date and time the report was received.",
                "type": "string",
                "format": "date-time"
              },
              "systemRamFreeInfo": {
                "items": {
                  "type": "string",
                  "format": "int64"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "macAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on wifi network interface (Read-only)"
        },
        "willAutoRenew": {
          "type": "boolean",
          "description": "Will Chromebook auto renew after support end date (Read-only)"
        },
        "meid": {
          "type": "string",
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)"
        },
        "bootMode": {
          "description": "Chromebook boot mode (Read-only)",
          "type": "string"
        },
        "supportEndDate": {
          "format": "date-time",
          "type": "string",
          "description": "Final date the device will be supported (Read-only)"
        },
        "lastSync": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "autoUpdateExpiration": {
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "type": "string",
          "format": "int64"
        },
        "orderNumber": {
          "type": "string",
          "description": "Chromebook order number (Read-only)"
        },
        "tpmVersionInfo": {
          "type": "object",
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "properties": {
            "vendorSpecific": {
              "type": "string",
              "description": "Vendor-specific information such as Vendor ID."
            },
            "specLevel": {
              "description": "TPM specification level.",
              "type": "string"
            },
            "tpmModel": {
              "description": "TPM model number.",
              "type": "string"
            },
            "manufacturer": {
              "description": "TPM manufacturer code.",
              "type": "string"
            },
            "family": {
              "description": "TPM family.",
              "type": "string"
            },
            "firmwareVersion": {
              "description": "TPM firmware version.",
              "type": "string"
            }
          }
        },
        "osVersion": {
          "type": "string",
          "description": "Chromebook Os Version (Read-only)"
        },
        "activeTimeRanges": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "date": {
                "description": "Date of usage",
                "type": "string",
                "format": "date"
              },
              "activeTime": {
                "type": "integer",
                "format": "int32",
                "description": "Duration in milliseconds"
              }
            }
          },
          "description": "List of active time ranges (Read-only)"
        },
        "diskVolumeReports": {
          "type": "array",
          "description": "Reports of disk space and other info about mounted/connected volumes.",
          "items": {
            "properties": {
              "volumeInfo": {
                "type": "array",
                "items": {
                  "properties": {
                    "storageTotal": {
                      "type": "string",
                      "description": "Total disk space [in bytes]",
                      "format": "int64"
                    },
                    "storageFree": {
                      "type": "string",
                      "format": "int64",
                      "description": "Free disk space [in bytes]"
                    },
                    "volumeId": {
                      "type": "string",
                      "description": "Volume id"
                    }
                  },
                  "type": "object"
                },
                "description": "Disk volumes"
              }
            },
            "type": "object"
          }
        },
        "deviceId": {
          "type": "string",
          "description": "Unique identifier of Chrome OS Device (Read-only)"
        },
        "serialNumber": {
          "description": "Chromebook serial number (Read-only)",
          "type": "string"
        },
        "notes": {
          "description": "Notes added by the administrator",
          "type": "string"
        },
        "recentUsers": {
          "description": "List of recent device users, in descending order by last login time (Read-only)",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "description": "The type of the user",
                "type": "string"
              },
              "email": {
                "type": "string",
                "description": "Email address of the user. Present only if the user type is managed"
              }
            }
          }
        },
        "ethernetMacAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)"
        },
        "annotatedLocation": {
          "type": "string",
          "description": "Address or location of the device as noted by the administrator"
        },
        "lastEnrollmentTime": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was last enrolled (Read-only)"
        },
        "annotatedAssetId": {
          "description": "AssetId specified during enrollment or through later annotation",
          "type": "string"
        },
        "cpuStatusReports": {
          "items": {
            "properties": {
              "cpuUtilizationPercentageInfo": {
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "type": "array"
              },
              "cpuTemperatureInfo": {
                "items": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "type": "string",
                      "description": "CPU label"
                    },
                    "temperature": {
                      "description": "Temperature in Celsius degrees.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                },
                "type": "array",
                "description": "List of CPU temperature samples."
              },
              "reportTime": {
                "description": "Date and time the report was received.",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "description": "Reports of CPU utilization and temperature (Read-only)",
          "type": "array"
        },
        "orgUnitPath": {
          "description": "OrgUnit of the device",
          "type": "string"
        }
      }
    },
    "UserName": {
      "id": "UserName",
      "type": "object",
      "properties": {
        "fullName": {
          "description": "Full Name",
          "type": "string"
        },
        "givenName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "First Name",
          "type": "string"
        },
        "familyName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string",
          "description": "Last Name"
        }
      }
    },
    "Privilege": {
      "id": "Privilege",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#privilege",
          "description": "The type of the API resource. This is always admin#directory#privilege."
        },
        "isOuScopable": {
          "type": "boolean",
          "description": "If the privilege can be restricted to an organization unit."
        },
        "serviceName": {
          "description": "The name of the service this privilege is for.",
          "type": "string"
        },
        "serviceId": {
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
          "type": "string"
        },
        "childPrivileges": {
          "items": {
            "$ref": "Privilege"
          },
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "type": "array"
        },
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Privileges": {
      "id": "Privileges",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "default": "admin#directory#privileges"
        },
        "items": {
          "description": "A list of Privilege resources.",
          "type": "array",
          "items": {
            "$ref": "Privilege"
          }
        }
      },
      "type": "object"
    },
    "SchemaFieldSpec": {
      "properties": {
        "indexed": {
          "description": "Boolean specifying whether the field is indexed or not.",
          "type": "boolean",
          "default": "true"
        },
        "numericIndexingSpec": {
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "type": "object",
          "properties": {
            "maxValue": {
              "format": "double",
              "type": "number",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            },
            "minValue": {
              "type": "number",
              "format": "double",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            }
          }
        },
        "displayName": {
          "description": "Display Name of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        },
        "multiValued": {
          "description": "Boolean specifying whether this is a multi-valued field or not.",
          "type": "boolean"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#schema#fieldspec",
          "description": "Kind of resource this is."
        },
        "readAccessType": {
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\".",
          "default": "ALL_DOMAIN_USERS",
          "type": "string"
        },
        "fieldId": {
          "type": "string",
          "description": "Unique identifier of Field (Read-only)"
        },
        "fieldName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Name of the field."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "fieldType": {
          "description": "Type of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        }
      },
      "id": "SchemaFieldSpec",
      "type": "object",
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "id": "DirectoryChromeosdevicesIssueCommandRequest",
      "properties": {
        "commandType": {
          "type": "string",
          "description": "The type of command.",
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ]
        },
        "payload": {
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100].",
          "type": "string"
        }
      },
      "description": "A request for issuing a command.",
      "type": "object"
    },
    "DomainAliases": {
      "type": "object",
      "id": "DomainAliases",
      "properties": {
        "kind": {
          "default": "admin#directory#domainAliases",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "domainAliases": {
          "description": "List of domain alias objects.",
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "CalendarResource": {
      "properties": {
        "resourceEmail": {
          "type": "string",
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource."
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "resourceCategory": {
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.",
          "type": "string"
        },
        "resourceName": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string",
          "description": "The name of the calendar resource. For example, \"Training Room 1A\"."
        },
        "capacity": {
          "format": "int32",
          "type": "integer",
          "description": "Capacity of a resource, number of seats in a room."
        },
        "resourceId": {
          "type": "string",
          "description": "The unique ID for the calendar resource.",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          }
        },
        "resourceType": {
          "type": "string",
          "description": "The type of the calendar resource, intended for non-room resources."
        },
        "generatedResourceName": {
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\".",
          "type": "string"
        },
        "featureInstances": {
          "description": "Instances of features for the calendar resource.",
          "type": "any"
        },
        "floorName": {
          "description": "Name of the floor a resource is located on.",
          "type": "string"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#resources#calendars#CalendarResource",
          "type": "string",
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource."
        },
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        },
        "floorSection": {
          "description": "Name of the section within a floor a resource is located in.",
          "type": "string"
        },
        "buildingId": {
          "description": "Unique ID for the building a resource is located in.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "CalendarResource",
      "description": "Public API: Resources.calendars"
    },
    "UserUndelete": {
      "type": "object",
      "id": "UserUndelete",
      "properties": {
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        }
      }
    },
    "Channel": {
      "type": "object",
      "description": "An notification channel used to watch for resource changes.",
      "id": "Channel",
      "properties": {
        "id": {
          "type": "string",
          "description": "A UUID or similar unique string that identifies this channel."
        },
        "resourceId": {
          "type": "string",
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions."
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        },
        "token": {
          "type": "string",
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional."
        },
        "expiration": {
          "format": "int64",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "type": "string"
        },
        "kind": {
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "type": "string",
          "default": "api#channel"
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "payload": {
          "description": "A Boolean value to indicate whether payload is wanted. Optional.",
          "type": "boolean"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional parameters controlling delivery channel behavior. Optional."
        }
      }
    },
    "MobileDeviceAction": {
      "id": "MobileDeviceAction",
      "properties": {
        "action": {
          "description": "Action to be taken on the Mobile Device",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          },
          "type": "string"
        }
      },
      "type": "object"
    },
    "Alias": {
      "type": "object",
      "description": "JSON template for Alias object in Directory API.",
      "properties": {
        "primaryEmail": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#alias",
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        }
      },
      "id": "Alias"
    },
    "UserExternalId": {
      "properties": {
        "value": {
          "description": "The value of the id.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The type of the Id."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UserExternalId",
      "description": "JSON template for an externalId entry."
    },
    "Token": {
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "default": "admin#directory#token",
          "description": "The type of the API resource. This is always admin#directory#token.",
          "type": "string"
        },
        "nativeApp": {
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device.",
          "type": "boolean"
        },
        "clientId": {
          "description": "The Client ID of the application the token is issued to.",
          "type": "string"
        },
        "scopes": {
          "items": {
            "type": "string"
          },
          "description": "A list of authorization scopes the application is granted.",
          "type": "array"
        },
        "anonymous": {
          "type": "boolean",
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user that issued the token."
        },
        "displayText": {
          "description": "The displayable name of the application the token is issued to.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Token"
    },
    "Feature": {
      "properties": {
        "kind": {
          "default": "admin#directory#resources#features#Feature",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "name": {
          "description": "The name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "type": "string"
        }
      },
      "type": "object",
      "id": "Feature",
      "description": "JSON template for Feature object in Directory API."
    },
    "ChromeOsDevices": {
      "id": "ChromeOsDevices",
      "properties": {
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#chromeosdevices"
        },
        "chromeosdevices": {
          "description": "List of Chrome OS Device objects.",
          "type": "array",
          "items": {
            "$ref": "ChromeOsDevice"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "DirectoryChromeosdevicesCommand": {
      "id": "DirectoryChromeosdevicesCommand",
      "description": "Information regarding a command that was issued to a device.",
      "type": "object",
      "properties": {
        "commandResult": {
          "$ref": "DirectoryChromeosdevicesCommandResult",
          "description": "The result of the command execution."
        },
        "commandId": {
          "description": "Unique ID of a device command.",
          "type": "string",
          "format": "int64"
        },
        "type": {
          "description": "The type of the command.",
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "type": "string",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ]
        },
        "payload": {
          "type": "string",
          "description": "The payload that the command specified, if any."
        },
        "commandExpireTime": {
          "type": "string",
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.",
          "format": "google-datetime"
        },
        "issueTime": {
          "type": "string",
          "description": "The timestamp when the command was issued by the admin.",
          "format": "google-datetime"
        },
        "state": {
          "type": "string",
          "description": "Indicates the command state.",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ],
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ]
        }
      }
    },
    "UserAbout": {
      "description": "JSON template for About (notes) of a user in Directory API.",
      "type": "object",
      "id": "UserAbout",
      "properties": {
        "value": {
          "type": "string",
          "description": "Actual value of notes."
        },
        "contentType": {
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.",
          "type": "string"
        }
      }
    },
    "UserGender": {
      "properties": {
        "addressMeAs": {
          "type": "string",
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their."
        },
        "type": {
          "type": "string",
          "description": "Gender."
        },
        "customGender": {
          "type": "string",
          "description": "Custom gender."
        }
      },
      "type": "object",
      "id": "UserGender"
    },
    "DirectoryChromeosdevicesCommandResult": {
      "properties": {
        "result": {
          "type": "string",
          "description": "The result of the command.",
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ]
        },
        "executeTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time at which the command was executed or failed to execute."
        },
        "errorMessage": {
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed.",
          "type": "string"
        }
      },
      "id": "DirectoryChromeosdevicesCommandResult",
      "type": "object",
      "description": "The result of executing a command."
    },
    "MembersHasMember": {
      "id": "MembersHasMember",
      "description": "JSON template for Has Member response in Directory API.",
      "properties": {
        "isMember": {
          "type": "boolean",
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "OrgUnits": {
      "properties": {
        "kind": {
          "default": "admin#directory#orgUnits",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "organizationUnits": {
          "type": "array",
          "description": "List of user objects.",
          "items": {
            "$ref": "OrgUnit"
          }
        }
      },
      "id": "OrgUnits",
      "type": "object",
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserEmail": {
      "type": "object",
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary email. Only one entry could be marked as primary."
        },
        "address": {
          "description": "Email id of the user.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value."
        }
      },
      "description": "JSON template for an email.",
      "id": "UserEmail"
    },
    "BuildingAddress": {
      "id": "BuildingAddress",
      "type": "object",
      "description": "Public API: Resources.buildings",
      "properties": {
        "administrativeArea": {
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region.",
          "type": "string"
        },
        "languageCode": {
          "type": "string",
          "description": "Optional. BCP-47 language code of the contents of this address (if known)."
        },
        "sublocality": {
          "description": "Optional. Sublocality of the address.",
          "type": "string"
        },
        "addressLines": {
          "description": "Unstructured address lines describing the lower levels of an address.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "locality": {
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.",
          "type": "string"
        },
        "postalCode": {
          "description": "Optional. Postal code of the address.",
          "type": "string"
        },
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        }
      }
    },
    "Asps": {
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#aspList.",
          "type": "string",
          "default": "admin#directory#aspList"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "items": {
            "$ref": "Asp"
          },
          "type": "array",
          "description": "A list of ASP resources."
        }
      },
      "id": "Asps"
    },
    "Users": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#users"
        },
        "users": {
          "items": {
            "$ref": "User"
          },
          "description": "List of user objects.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "trigger_event": {
          "description": "Event that triggered this response (only used in case of Push Response)",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Users",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "User": {
      "properties": {
        "thumbnailPhotoUrl": {
          "type": "string",
          "description": "Output only. Photo Url of the user (Read-only)",
          "readOnly": true
        },
        "suspended": {
          "type": "boolean",
          "description": "Indicates if user is suspended."
        },
        "isEnforcedIn2Sv": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Is 2-step verification enforced (Read-only)"
        },
        "creationTime": {
          "readOnly": true,
          "format": "date-time",
          "type": "string",
          "description": "User's G Suite account creation time. (Read-only)"
        },
        "aliases": {
          "type": "array",
          "description": "Output only. List of aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        },
        "etag": {
          "readOnly": true,
          "description": "Output only. ETag of the resource.",
          "type": "string"
        },
        "name": {
          "$ref": "UserName",
          "description": "User's name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "Boolean indicating if ip is whitelisted"
        },
        "nonEditableAliases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. List of non editable aliases (Read-only)",
          "readOnly": true
        },
        "posixAccounts": {
          "description": "The POSIX accounts of User",
          "type": "any"
        },
        "phones": {
          "description": "Phone numbers of User",
          "type": "any"
        },
        "password": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string",
          "description": "User's password"
        },
        "isDelegatedAdmin": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)"
        },
        "websites": {
          "type": "any",
          "description": "Websites of User"
        },
        "recoveryEmail": {
          "type": "string",
          "description": "Recovery email of the user."
        },
        "relations": {
          "type": "any",
          "description": "The Relations of User *"
        },
        "sshPublicKeys": {
          "type": "any",
          "description": "The SSH public keys of User"
        },
        "thumbnailPhotoEtag": {
          "type": "string",
          "description": "Output only. ETag of the user's photo (Read-only)",
          "readOnly": true
        },
        "agreedToTerms": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Indicates if user has agreed to terms (Read-only)"
        },
        "archived": {
          "description": "Indicates if user is archived.",
          "type": "boolean"
        },
        "customSchemas": {
          "type": "object",
          "description": "Custom fields of the user.",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          }
        },
        "isAdmin": {
          "type": "boolean",
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "readOnly": true
        },
        "includeInGlobalAddressList": {
          "type": "boolean",
          "description": "Boolean indicating if user is included in Global Address List"
        },
        "keywords": {
          "type": "any",
          "description": "Keywords of User"
        },
        "emails": {
          "type": "any",
          "description": "Emails of User"
        },
        "recoveryPhone": {
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
          "type": "string"
        },
        "kind": {
          "description": "Output only. Kind of resource this is.",
          "readOnly": true,
          "type": "string",
          "default": "admin#directory#user"
        },
        "primaryEmail": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "username of User"
        },
        "isEnrolledIn2Sv": {
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "customerId": {
          "description": "Output only. CustomerId of User (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "changePasswordAtNextLogin": {
          "type": "boolean",
          "description": "Boolean indicating if the user should change password in next login"
        },
        "organizations": {
          "type": "any",
          "description": "Organizations of User"
        },
        "notes": {
          "type": "any",
          "description": "Notes of User"
        },
        "externalIds": {
          "description": "The external Ids of User *",
          "type": "any"
        },
        "lastLoginTime": {
          "type": "string",
          "description": "User's last login time. (Read-only)",
          "readOnly": true,
          "format": "date-time"
        },
        "hashFunction": {
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt",
          "type": "string"
        },
        "gender": {
          "type": "any",
          "description": "Gender of User"
        },
        "deletionTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "ims": {
          "description": "User's Instant Messenger",
          "type": "any"
        },
        "locations": {
          "description": "Locations of User",
          "type": "any"
        },
        "languages": {
          "type": "any",
          "description": "Languages of User"
        },
        "addresses": {
          "description": "Addresses of User",
          "type": "any"
        },
        "suspensionReason": {
          "description": "Output only. Suspension reason if user is suspended (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "isMailboxSetup": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Is mailbox setup (Read-only)"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "User"
    },
    "UserPhoto": {
      "id": "UserPhoto",
      "properties": {
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "Height in pixels of the photo"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#user#photo",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "mimeType": {
          "description": "Mime Type of the photo",
          "type": "string"
        },
        "primaryEmail": {
          "description": "Primary email of User (Read-only)",
          "type": "string"
        },
        "photoData": {
          "format": "byte",
          "type": "string",
          "description": "Base64 encoded photo data",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          }
        },
        "width": {
          "description": "Width in pixels of the photo",
          "format": "int32",
          "type": "integer"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "VerificationCodes": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCodesList.",
          "default": "admin#directory#verificationCodesList",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "VerificationCode"
          },
          "description": "A list of verification code resources."
        }
      },
      "id": "VerificationCodes",
      "type": "object",
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Features": {
      "id": "Features",
      "description": "Public API: Resources.features",
      "properties": {
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "features": {
          "description": "The Features in this page of results.",
          "items": {
            "$ref": "Feature"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#featuresList"
        }
      },
      "type": "object"
    },
    "Buildings": {
      "properties": {
        "kind": {
          "default": "admin#directory#resources#buildings#buildingsList",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "buildings": {
          "type": "array",
          "items": {
            "$ref": "Building"
          },
          "description": "The Buildings in this page of results."
        }
      },
      "description": "Public API: Resources.buildings",
      "id": "Buildings",
      "type": "object"
    },
    "FeatureRename": {
      "properties": {
        "newName": {
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          },
          "type": "string",
          "description": "New name of the feature."
        }
      },
      "type": "object",
      "id": "FeatureRename"
    },
    "UserRelation": {
      "description": "JSON template for a relation entry.",
      "type": "object",
      "id": "UserRelation",
      "properties": {
        "type": {
          "type": "string",
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner."
        },
        "value": {
          "description": "The name of the relation.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      }
    },
    "UserPosixAccount": {
      "type": "object",
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix.",
      "properties": {
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        },
        "accountId": {
          "type": "string",
          "description": "A POSIX account field identifier."
        },
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        },
        "gecos": {
          "type": "string",
          "description": "The GECOS (user information) for this account."
        },
        "gid": {
          "description": "The default group ID.",
          "format": "uint64",
          "type": "string"
        },
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "operatingSystemType": {
          "description": "The operating system type for this account.",
          "type": "string"
        },
        "uid": {
          "type": "string",
          "format": "uint64",
          "description": "The POSIX compliant user ID."
        },
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        }
      },
      "id": "UserPosixAccount"
    },
    "Domains": {
      "properties": {
        "verified": {
          "description": "Indicates the verification state of a domain. (Read-only).",
          "type": "boolean"
        },
        "domainName": {
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "type": "string",
          "description": "The domain name of the customer."
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Indicates if the domain is a primary domain (Read-only)."
        },
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array",
          "description": "List of domain alias objects. (Read-only)"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domain",
          "description": "Kind of resource this is."
        },
        "creationTime": {
          "description": "Creation time of the domain. (Read-only).",
          "type": "string",
          "format": "int64"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Domains",
      "type": "object"
    },
    "Member": {
      "properties": {
        "type": {
          "description": "Type of member (Immutable)",
          "type": "string"
        },
        "status": {
          "description": "Status of member (Immutable)",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#member",
          "description": "Kind of resource this is."
        },
        "delivery_settings": {
          "description": "Delivery settings of member",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey.",
          "type": "string"
        },
        "role": {
          "description": "Role of member",
          "type": "string"
        },
        "email": {
          "description": "Email of member (Read-only)",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Member",
      "type": "object"
    },
    "UserCustomProperties": {
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "id": "UserCustomProperties",
      "additionalProperties": {
        "type": "any"
      },
      "type": "object"
    },
    "UserAddress": {
      "id": "UserAddress",
      "description": "JSON template for address.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value."
        },
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "extendedAddress": {
          "description": "Extended Address.",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary address. Only one entry could be marked as primary."
        },
        "locality": {
          "type": "string",
          "description": "Locality."
        },
        "postalCode": {
          "description": "Postal code.",
          "type": "string"
        },
        "formatted": {
          "type": "string",
          "description": "Formatted address."
        },
        "country": {
          "type": "string",
          "description": "Country."
        },
        "countryCode": {
          "type": "string",
          "description": "Country code."
        },
        "region": {
          "description": "Region.",
          "type": "string"
        },
        "streetAddress": {
          "type": "string",
          "description": "Street."
        },
        "poBox": {
          "type": "string",
          "description": "Other parts of address."
        }
      },
      "type": "object"
    },
    "VerificationCode": {
      "type": "object",
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCode.",
          "default": "admin#directory#verificationCode",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "userId": {
          "description": "The obfuscated unique ID of the user.",
          "type": "string"
        },
        "verificationCode": {
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.",
          "type": "string"
        }
      },
      "id": "VerificationCode"
    },
    "FeatureInstance": {
      "type": "object",
      "id": "FeatureInstance",
      "properties": {
        "feature": {
          "$ref": "Feature",
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature."
        }
      },
      "description": "JSON template for a feature instance."
    },
    "Roles": {
      "id": "Roles",
      "properties": {
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "Role"
          },
          "description": "A list of Role resources.",
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#roles",
          "description": "The type of the API resource. This is always admin#directory#roles.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ChromeOsMoveDevicesToOu": {
      "properties": {
        "deviceIds": {
          "description": "ChromeOs Devices to be moved to OU",
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "ChromeOsMoveDevicesToOu",
      "type": "object"
    },
    "RoleAssignment": {
      "id": "RoleAssignment",
      "type": "object",
      "properties": {
        "roleId": {
          "type": "string",
          "description": "The ID of the role that is assigned.",
          "format": "int64"
        },
        "assignedTo": {
          "type": "string",
          "description": "The unique ID of the user this role is assigned to."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#roleAssignment.",
          "default": "admin#directory#roleAssignment",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "roleAssignmentId": {
          "type": "string",
          "format": "int64",
          "description": "ID of this roleAssignment."
        },
        "orgUnitId": {
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.",
          "type": "string"
        },
        "scopeType": {
          "type": "string",
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT "
        }
      }
    },
    "Members": {
      "type": "object",
      "id": "Members",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#members"
        },
        "members": {
          "items": {
            "$ref": "Member"
          },
          "type": "array",
          "description": "List of member objects."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        }
      }
    },
    "UserOrganization": {
      "description": "JSON template for an organization entry.",
      "type": "object",
      "properties": {
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
        },
        "domain": {
          "type": "string",
          "description": "The domain to which the organization belongs to."
        },
        "symbol": {
          "description": "Symbol of the organization.",
          "type": "string"
        },
        "fullTimeEquivalent": {
          "format": "int32",
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
          "type": "integer"
        },
        "description": {
          "type": "string",
          "description": "Description of the organization."
        },
        "name": {
          "description": "Name of the organization",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "costCenter": {
          "type": "string",
          "description": "The cost center of the users department."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "primary": {
          "description": "If it user's primary organization.",
          "type": "boolean"
        }
      },
      "id": "UserOrganization"
    },
    "Customer": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Customer",
      "properties": {
        "phoneNumber": {
          "description": "The customer's contact phone number in E.164 format.",
          "type": "string"
        },
        "id": {
          "description": "The unique ID for the customer's G Suite account. (Readonly)",
          "type": "string"
        },
        "postalAddress": {
          "$ref": "CustomerPostalAddress",
          "description": "The customer's postal address information."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#customer",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer"
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. The default value is en-US",
          "type": "string"
        },
        "customerDomain": {
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer.",
          "type": "string"
        },
        "customerCreationTime": {
          "format": "date-time",
          "type": "string",
          "description": "The customer's creation time (Readonly)"
        },
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain"
        }
      }
    },
    "MobileDevice": {
      "type": "object",
      "properties": {
        "email": {
          "type": "array",
          "description": "List of owner user's email addresses (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "serialNumber": {
          "type": "string",
          "description": "Mobile Device SSN or Serial Number (Read-only)"
        },
        "firstSync": {
          "type": "string",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time"
        },
        "os": {
          "type": "string",
          "description": "Name of the mobile operating system"
        },
        "adbStatus": {
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "bootloaderVersion": {
          "description": "Mobile Device Bootloader version (Read-only)",
          "type": "string"
        },
        "defaultLanguage": {
          "type": "string",
          "description": "The default locale used on the Mobile Device (Read-only)"
        },
        "securityPatchLevel": {
          "type": "string",
          "description": "Mobile Device Security patch level (Read-only)",
          "format": "int64"
        },
        "deviceCompromisedStatus": {
          "description": "Mobile Device compromised status (Read-only)",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#mobiledevice",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "name": {
          "items": {
            "type": "string"
          },
          "description": "List of owner user's names (Read-only)",
          "type": "array"
        },
        "applications": {
          "type": "array",
          "items": {
            "properties": {
              "versionName": {
                "type": "string",
                "description": "Version name of application"
              },
              "permission": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of Permissions for application"
              },
              "displayName": {
                "description": "Display name of application",
                "type": "string"
              },
              "versionCode": {
                "type": "integer",
                "format": "int32",
                "description": "Version code of application"
              },
              "packageName": {
                "type": "string",
                "description": "Package name of application"
              }
            },
            "type": "object"
          },
          "description": "List of applications installed on Mobile Device"
        },
        "status": {
          "description": "Status of the device (Read-only)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "wifiMacAddress": {
          "type": "string",
          "description": "Mobile Device WiFi MAC address (Read-only)"
        },
        "devicePasswordStatus": {
          "type": "string",
          "description": "DevicePasswordStatus (Read-only)"
        },
        "hardwareId": {
          "type": "string",
          "description": "Mobile Device Hardware Id (Read-only)"
        },
        "userAgent": {
          "type": "string",
          "description": "Mobile Device user agent"
        },
        "supportsWorkProfile": {
          "description": "Work profile supported on device (Read-only)",
          "type": "boolean"
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "brand": {
          "type": "string",
          "description": "Mobile Device Brand (Read-only)"
        },
        "basebandVersion": {
          "description": "Mobile Device Baseband version (Read-only)",
          "type": "string"
        },
        "kernelVersion": {
          "description": "Mobile Device Kernel version (Read-only)",
          "type": "string"
        },
        "deviceId": {
          "type": "string",
          "description": "Mobile Device serial number (Read-only)"
        },
        "hardware": {
          "type": "string",
          "description": "Mobile Device Hardware (Read-only)"
        },
        "managedAccountIsOnOwnerProfile": {
          "type": "boolean",
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)"
        },
        "meid": {
          "type": "string",
          "description": "Mobile Device MEID number (Read-only)"
        },
        "resourceId": {
          "type": "string",
          "description": "Unique identifier of Mobile Device (Read-only)"
        },
        "imei": {
          "type": "string",
          "description": "Mobile Device IMEI number (Read-only)"
        },
        "otherAccountsInfo": {
          "type": "array",
          "description": "List of accounts added on device (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "model": {
          "description": "Name of the model of the device",
          "type": "string"
        },
        "buildNumber": {
          "type": "string",
          "description": "Mobile Device Build number (Read-only)"
        },
        "unknownSourcesStatus": {
          "description": "Unknown sources enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "privilege": {
          "description": "DMAgentPermission (Read-only)",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The type of device (Read-only)"
        },
        "manufacturer": {
          "description": "Mobile Device manufacturer (Read-only)",
          "type": "string"
        },
        "encryptionStatus": {
          "description": "Mobile Device Encryption Status (Read-only)",
          "type": "string"
        },
        "networkOperator": {
          "description": "Mobile Device mobile or network operator (if available) (Read-only)",
          "type": "string"
        }
      },
      "id": "MobileDevice"
    },
    "UserIm": {
      "properties": {
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "customProtocol": {
          "description": "Custom protocol.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary im. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "im": {
          "type": "string",
          "description": "Instant messenger id."
        }
      },
      "type": "object",
      "id": "UserIm",
      "description": "JSON template for instant messenger of an user."
    },
    "Tokens": {
      "properties": {
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#tokenList.",
          "type": "string",
          "default": "admin#directory#tokenList"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Token"
          },
          "description": "A list of Token resources."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Tokens",
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserLocation": {
      "description": "JSON template for a location entry.",
      "id": "UserLocation",
      "properties": {
        "floorSection": {
          "type": "string",
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values."
        },
        "floorName": {
          "description": "Floor name/number.",
          "type": "string"
        },
        "deskCode": {
          "type": "string",
          "description": "Most specific textual code of individual desk location."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        },
        "buildingId": {
          "description": "Building Identifier.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value."
        }
      },
      "type": "object"
    },
    "Asp": {
      "properties": {
        "lastTimeUsed": {
          "format": "int64",
          "type": "string",
          "description": "The time when the ASP was last used. Expressed in Unix time format."
        },
        "codeId": {
          "format": "int32",
          "description": "The unique ID of the ASP.",
          "type": "integer"
        },
        "creationTime": {
          "type": "string",
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "format": "int64"
        },
        "etag": {
          "description": "ETag of the ASP.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created."
        },
        "kind": {
          "default": "admin#directory#asp",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#asp."
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user who issued the ASP."
        }
      },
      "type": "object",
      "id": "Asp",
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "type": "object",
      "properties": {
        "commandId": {
          "description": "The unique ID of the issued command, used to retrieve the command status.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "description": "A response for issuing a command."
    },
    "UserWebsite": {
      "id": "UserWebsite",
      "description": "JSON template for a website entry.",
      "type": "object",
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary website or not."
        },
        "value": {
          "description": "Website.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      }
    },
    "DomainAlias": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#domainAlias",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "domainAliasName": {
          "type": "string",
          "description": "The domain alias name."
        },
        "creationTime": {
          "description": "The creation time of the domain alias. (Read-only).",
          "type": "string",
          "format": "int64"
        },
        "parentDomainName": {
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
          "type": "string"
        },
        "verified": {
          "description": "Indicates the verification state of a domain alias. (Read-only)",
          "type": "boolean"
        }
      },
      "id": "DomainAlias",
      "type": "object"
    },
    "UserSshPublicKey": {
      "properties": {
        "key": {
          "description": "An SSH public key.",
          "type": "string"
        },
        "fingerprint": {
          "readOnly": true,
          "type": "string",
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)"
        },
        "expirationTimeUsec": {
          "description": "An expiration time in microseconds since epoch.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for a POSIX account entry.",
      "id": "UserSshPublicKey"
    },
    "MobileDevices": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "mobiledevices": {
          "type": "array",
          "items": {
            "$ref": "MobileDevice"
          },
          "description": "List of Mobile Device objects."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#mobiledevices"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        }
      },
      "type": "object",
      "id": "MobileDevices"
    },
    "Groups": {
      "id": "Groups",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "Group"
          },
          "description": "List of group objects."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#groups"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Building": {
      "id": "Building",
      "description": "Public API: Resources.buildings",
      "type": "object",
      "properties": {
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "coordinates": {
          "$ref": "BuildingCoordinates",
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees."
        },
        "address": {
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required.",
          "$ref": "BuildingAddress"
        },
        "description": {
          "type": "string",
          "description": "A brief description of the building. For example, \"Chelsea Market\"."
        },
        "floorNames": {
          "type": "array",
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "items": {
            "type": "string"
          }
        },
        "buildingName": {
          "type": "string",
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#buildings#Building",
          "description": "Kind of resource this is."
        },
        "buildingId": {
          "type": "string",
          "description": "Unique identifier for the building. The maximum length is 100 characters."
        }
      }
    },
    "Schema": {
      "type": "object",
      "id": "Schema",
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema"
        },
        "schemaName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "Schema name",
          "type": "string"
        },
        "fields": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "array",
          "description": "Fields of Schema",
          "items": {
            "$ref": "SchemaFieldSpec"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "schemaId": {
          "type": "string",
          "description": "Unique identifier of Schema (Read-only)"
        },
        "displayName": {
          "description": "Display name for the schema.",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "type": "string"
        }
      }
    },
    "Domains2": {
      "id": "Domains2",
      "properties": {
        "kind": {
          "default": "admin#directory#domains",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "domains": {
          "type": "array",
          "description": "List of domain objects.",
          "items": {
            "$ref": "Domains"
          }
        }
      },
      "type": "object"
    },
    "BuildingCoordinates": {
      "properties": {
        "latitude": {
          "format": "double",
          "type": "number",
          "description": "Latitude in decimal degrees."
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Longitude in decimal degrees."
        }
      },
      "description": "Public API: Resources.buildings",
      "type": "object",
      "id": "BuildingCoordinates"
    },
    "CustomerPostalAddress": {
      "properties": {
        "region": {
          "description": "Name of the region. An example of a region value is NY for the state of New York.",
          "type": "string"
        },
        "addressLine3": {
          "type": "string",
          "description": "Address line 3 of the address."
        },
        "postalCode": {
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element.",
          "type": "string"
        },
        "contactName": {
          "type": "string",
          "description": "The customer contact's name."
        },
        "countryCode": {
          "type": "string",
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements."
        },
        "locality": {
          "description": "Name of the locality. An example of a locality value is the city of San Francisco.",
          "type": "string"
        },
        "addressLine2": {
          "description": "Address line 2 of the address.",
          "type": "string"
        },
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "id": "CustomerPostalAddress"
    },
    "ChromeOsDeviceAction": {
      "id": "ChromeOsDeviceAction",
      "properties": {
        "deprovisionReason": {
          "type": "string"
        },
        "action": {
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "type": "string",
          "description": "Action to be taken on the ChromeOs Device"
        }
      },
      "type": "object"
    },
    "CalendarResources": {
      "properties": {
        "items": {
          "description": "The CalendarResources in this page of results.",
          "items": {
            "$ref": "CalendarResource"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "type": "string",
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList."
        }
      },
      "description": "Public API: Resources.calendars",
      "type": "object",
      "id": "CalendarResources"
    },
    "Group": {
      "id": "Group",
      "type": "object",
      "properties": {
        "adminCreated": {
          "type": "boolean",
          "description": "Is the group created by admin (Read-only) *"
        },
        "email": {
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "description": "Email of Group",
          "type": "string"
        },
        "directMembersCount": {
          "description": "Group direct members count",
          "type": "string",
          "format": "int64"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "id": {
          "description": "Unique identifier of Group (Read-only)",
          "type": "string"
        },
        "nonEditableAliases": {
          "items": {
            "type": "string"
          },
          "description": "List of non editable aliases (Read-only)",
          "type": "array"
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "description": "List of aliases (Read-only)",
          "type": "array"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#group",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "description": {
          "type": "string",
          "description": "Description of the group"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "RoleAssignments": {
      "id": "RoleAssignments",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#roleAssignments",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments .",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "RoleAssignment"
          },
          "description": "A list of RoleAssignment resources.",
          "type": "array"
        }
      }
    },
    "UserKeyword": {
      "id": "UserKeyword",
      "properties": {
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "value": {
          "type": "string",
          "description": "Keyword."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      },
      "description": "JSON template for a keyword entry.",
      "type": "object"
    },
    "Aliases": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#aliases"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "etag": {
          "type": "string"
        }
      },
      "id": "Aliases",
      "description": "JSON response template to list aliases in Directory API."
    }
  },
  "parameters": {
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "location": "query",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response."
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "$.xgafv": {
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ],
      "location": "query",
      "description": "V1 error format."
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        }
      }
    }
  },
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "servicePath": "",
  "id": "admin:directory_v1",
  "version": "directory_v1",
  "kind": "discovery#restDescription",
  "packagePath": "admin",
  "basePath": "",
  "protocol": "rest",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "discoveryVersion": "v1",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "rootUrl": "https://www.googleapis.com/",
  "title": "Admin SDK"
}
