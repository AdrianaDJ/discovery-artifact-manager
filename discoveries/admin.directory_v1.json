{
  "basePath": "",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "rootUrl": "https://www.googleapis.com/",
  "kind": "discovery#restDescription",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "version": "directory_v1",
  "servicePath": "",
  "ownerDomain": "google.com",
  "name": "admin",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "discoveryVersion": "v1",
  "ownerName": "Google",
  "baseUrl": "https://www.googleapis.com/",
  "schemas": {
    "UserAbout": {
      "id": "UserAbout",
      "description": "JSON template for About (notes) of a user in Directory API.",
      "properties": {
        "contentType": {
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.",
          "type": "string"
        },
        "value": {
          "description": "Actual value of notes.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "properties": {
        "commandId": {
          "description": "The unique ID of the issued command, used to retrieve the command status.",
          "type": "string",
          "format": "int64"
        }
      },
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "description": "A response for issuing a command.",
      "type": "object"
    },
    "OrgUnit": {
      "id": "OrgUnit",
      "properties": {
        "orgUnitPath": {
          "description": "Path of OrgUnit",
          "type": "string"
        },
        "parentOrgUnitId": {
          "description": "Id of parent OrgUnit",
          "type": "string"
        },
        "parentOrgUnitPath": {
          "description": "Path of parent OrgUnit",
          "type": "string"
        },
        "blockInheritance": {
          "description": "Should block inheritance",
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "description": "Name of OrgUnit",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          }
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#orgUnit"
        },
        "description": {
          "description": "Description of OrgUnit",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "orgUnitId": {
          "type": "string",
          "description": "Id of OrgUnit"
        }
      },
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "UserWebsite": {
      "type": "object",
      "id": "UserWebsite",
      "description": "JSON template for a website entry.",
      "properties": {
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Website."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary website or not.",
          "type": "boolean"
        }
      }
    },
    "UserOrganization": {
      "id": "UserOrganization",
      "description": "JSON template for an organization entry.",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the organization."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
        },
        "symbol": {
          "description": "Symbol of the organization.",
          "type": "string"
        },
        "fullTimeEquivalent": {
          "type": "integer",
          "format": "int32",
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%)."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "name": {
          "description": "Name of the organization",
          "type": "string"
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "title": {
          "description": "Title (designation) of the user in the organization.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If it user's primary organization."
        },
        "department": {
          "type": "string",
          "description": "Department within the organization."
        },
        "costCenter": {
          "type": "string",
          "description": "The cost center of the users department."
        },
        "domain": {
          "type": "string",
          "description": "The domain to which the organization belongs to."
        }
      }
    },
    "UserExternalId": {
      "description": "JSON template for an externalId entry.",
      "properties": {
        "value": {
          "description": "The value of the id.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The type of the Id."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        }
      },
      "type": "object",
      "id": "UserExternalId"
    },
    "FeatureInstance": {
      "type": "object",
      "id": "FeatureInstance",
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      },
      "description": "JSON template for a feature instance."
    },
    "UserName": {
      "id": "UserName",
      "properties": {
        "givenName": {
          "type": "string",
          "description": "First Name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "fullName": {
          "type": "string",
          "description": "Full Name"
        },
        "familyName": {
          "description": "Last Name",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        }
      },
      "type": "object"
    },
    "OrgUnits": {
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "organizationUnits": {
          "type": "array",
          "description": "List of user objects.",
          "items": {
            "$ref": "OrgUnit"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#orgUnits",
          "description": "Kind of resource this is.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "OrgUnits"
    },
    "Feature": {
      "id": "Feature",
      "type": "object",
      "description": "JSON template for Feature object in Directory API.",
      "properties": {
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "name": {
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "description": "The name of the feature.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#features#Feature"
        }
      }
    },
    "Customer": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. The default value is en-US",
          "type": "string"
        },
        "phoneNumber": {
          "description": "The customer's contact phone number in E.164 format.",
          "type": "string"
        },
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain"
        },
        "customerCreationTime": {
          "format": "date-time",
          "description": "The customer's creation time (Readonly)",
          "type": "string"
        },
        "customerDomain": {
          "type": "string",
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer."
        },
        "id": {
          "type": "string",
          "description": "The unique ID for the customer's G Suite account. (Readonly)"
        },
        "kind": {
          "default": "admin#directory#customer",
          "type": "string",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer"
        },
        "postalAddress": {
          "$ref": "CustomerPostalAddress",
          "description": "The customer's postal address information."
        }
      },
      "id": "Customer",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "CustomerPostalAddress": {
      "properties": {
        "addressLine3": {
          "description": "Address line 3 of the address.",
          "type": "string"
        },
        "region": {
          "type": "string",
          "description": "Name of the region. An example of a region value is NY for the state of New York."
        },
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        },
        "countryCode": {
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements.",
          "type": "string"
        },
        "postalCode": {
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element.",
          "type": "string"
        },
        "addressLine2": {
          "description": "Address line 2 of the address.",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Name of the locality. An example of a locality value is the city of San Francisco."
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        },
        "contactName": {
          "description": "The customer contact's name.",
          "type": "string"
        }
      },
      "id": "CustomerPostalAddress",
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "Building": {
      "description": "Public API: Resources.buildings",
      "properties": {
        "description": {
          "description": "A brief description of the building. For example, \"Chelsea Market\".",
          "type": "string"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "address": {
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required.",
          "$ref": "BuildingAddress"
        },
        "floorNames": {
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "buildingName": {
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters.",
          "type": "string"
        },
        "coordinates": {
          "$ref": "BuildingCoordinates",
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees."
        },
        "kind": {
          "default": "admin#directory#resources#buildings#Building",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "buildingId": {
          "description": "Unique identifier for the building. The maximum length is 100 characters.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Building"
    },
    "Privileges": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Privilege"
          },
          "description": "A list of Privilege resources."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "type": "string",
          "default": "admin#directory#privileges"
        }
      },
      "type": "object",
      "id": "Privileges"
    },
    "User": {
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "creationTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true,
          "description": "User's G Suite account creation time. (Read-only)"
        },
        "aliases": {
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. List of aliases (Read-only)"
        },
        "ipWhitelisted": {
          "description": "Boolean indicating if ip is whitelisted",
          "type": "boolean"
        },
        "hashFunction": {
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt",
          "type": "string"
        },
        "suspended": {
          "type": "boolean",
          "description": "Indicates if user is suspended."
        },
        "password": {
          "description": "User's password",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "nonEditableAliases": {
          "description": "Output only. List of non editable aliases (Read-only)",
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isDelegatedAdmin": {
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)",
          "type": "boolean"
        },
        "isAdmin": {
          "type": "boolean",
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "readOnly": true
        },
        "kind": {
          "description": "Output only. Kind of resource this is.",
          "default": "admin#directory#user",
          "type": "string",
          "readOnly": true
        },
        "externalIds": {
          "type": "any",
          "description": "The external Ids of User *"
        },
        "deletionTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        },
        "primaryEmail": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "username of User"
        },
        "keywords": {
          "description": "Keywords of User",
          "type": "any"
        },
        "customerId": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. CustomerId of User (Read-only)"
        },
        "emails": {
          "type": "any",
          "description": "Emails of User"
        },
        "websites": {
          "description": "Websites of User",
          "type": "any"
        },
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        },
        "gender": {
          "description": "Gender of User",
          "type": "any"
        },
        "locations": {
          "description": "Locations of User",
          "type": "any"
        },
        "isEnrolledIn2Sv": {
          "type": "boolean",
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "readOnly": true
        },
        "agreedToTerms": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Indicates if user has agreed to terms (Read-only)"
        },
        "archived": {
          "description": "Indicates if user is archived.",
          "type": "boolean"
        },
        "thumbnailPhotoEtag": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. ETag of the user's photo (Read-only)"
        },
        "recoveryEmail": {
          "type": "string",
          "description": "Recovery email of the user."
        },
        "phones": {
          "type": "any",
          "description": "Phone numbers of User"
        },
        "etag": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. ETag of the resource."
        },
        "recoveryPhone": {
          "type": "string",
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "customSchemas": {
          "description": "Custom fields of the user.",
          "type": "object",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          }
        },
        "ims": {
          "description": "User's Instant Messenger",
          "type": "any"
        },
        "relations": {
          "description": "The Relations of User *",
          "type": "any"
        },
        "isMailboxSetup": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Is mailbox setup (Read-only)"
        },
        "thumbnailPhotoUrl": {
          "readOnly": true,
          "description": "Output only. Photo Url of the user (Read-only)",
          "type": "string"
        },
        "includeInGlobalAddressList": {
          "type": "boolean",
          "description": "Boolean indicating if user is included in Global Address List"
        },
        "isEnforcedIn2Sv": {
          "readOnly": true,
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "type": "boolean"
        },
        "posixAccounts": {
          "description": "The POSIX accounts of User",
          "type": "any"
        },
        "lastLoginTime": {
          "description": "User's last login time. (Read-only)",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "$ref": "UserName",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's name"
        },
        "suspensionReason": {
          "type": "string",
          "description": "Output only. Suspension reason if user is suspended (Read-only)",
          "readOnly": true
        },
        "changePasswordAtNextLogin": {
          "description": "Boolean indicating if the user should change password in next login",
          "type": "boolean"
        },
        "addresses": {
          "description": "Addresses of User",
          "type": "any"
        },
        "sshPublicKeys": {
          "type": "any",
          "description": "The SSH public keys of User"
        },
        "notes": {
          "description": "Notes of User",
          "type": "any"
        },
        "languages": {
          "description": "Languages of User",
          "type": "any"
        },
        "organizations": {
          "type": "any",
          "description": "Organizations of User"
        }
      },
      "id": "User"
    },
    "DirectoryChromeosdevicesCommandResult": {
      "properties": {
        "errorMessage": {
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed.",
          "type": "string"
        },
        "result": {
          "description": "The result of the command.",
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "type": "string",
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ]
        },
        "executeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time at which the command was executed or failed to execute."
        }
      },
      "description": "The result of executing a command.",
      "type": "object",
      "id": "DirectoryChromeosdevicesCommandResult"
    },
    "Roles": {
      "type": "object",
      "id": "Roles",
      "properties": {
        "nextPageToken": {
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#roles",
          "description": "The type of the API resource. This is always admin#directory#roles.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "Role"
          },
          "description": "A list of Role resources.",
          "type": "array"
        }
      }
    },
    "Aliases": {
      "type": "object",
      "description": "JSON response template to list aliases in Directory API.",
      "properties": {
        "aliases": {
          "items": {
            "type": "any"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#aliases"
        },
        "etag": {
          "type": "string"
        }
      },
      "id": "Aliases"
    },
    "RoleAssignment": {
      "id": "RoleAssignment",
      "properties": {
        "orgUnitId": {
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.",
          "type": "string"
        },
        "scopeType": {
          "type": "string",
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT "
        },
        "roleAssignmentId": {
          "type": "string",
          "format": "int64",
          "description": "ID of this roleAssignment."
        },
        "assignedTo": {
          "type": "string",
          "description": "The unique ID of the user this role is assigned to."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#roleAssignment",
          "description": "The type of the API resource. This is always admin#directory#roleAssignment."
        },
        "roleId": {
          "description": "The ID of the role that is assigned.",
          "type": "string",
          "format": "int64"
        }
      },
      "type": "object"
    },
    "UserPhoto": {
      "properties": {
        "mimeType": {
          "description": "Mime Type of the photo",
          "type": "string"
        },
        "width": {
          "description": "Width in pixels of the photo",
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "Height in pixels of the photo"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#user#photo",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "photoData": {
          "description": "Base64 encoded photo data",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "format": "byte",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "primaryEmail": {
          "type": "string",
          "description": "Primary email of User (Read-only)"
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "UserPhoto"
    },
    "DomainAliases": {
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#domainAliases",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array",
          "description": "List of domain alias objects."
        }
      },
      "type": "object",
      "id": "DomainAliases"
    },
    "VerificationCodes": {
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The type of the resource. This is always admin#directory#verificationCodesList.",
          "default": "admin#directory#verificationCodesList"
        },
        "items": {
          "description": "A list of verification code resources.",
          "type": "array",
          "items": {
            "$ref": "VerificationCode"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "VerificationCodes"
    },
    "UserIm": {
      "type": "object",
      "id": "UserIm",
      "properties": {
        "customProtocol": {
          "description": "Custom protocol.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary im. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "im": {
          "description": "Instant messenger id.",
          "type": "string"
        }
      },
      "description": "JSON template for instant messenger of an user."
    },
    "UserLocation": {
      "id": "UserLocation",
      "type": "object",
      "description": "JSON template for a location entry.",
      "properties": {
        "floorSection": {
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values.",
          "type": "string"
        },
        "floorName": {
          "type": "string",
          "description": "Floor name/number."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "buildingId": {
          "description": "Building Identifier.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.",
          "type": "string"
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        },
        "deskCode": {
          "description": "Most specific textual code of individual desk location.",
          "type": "string"
        }
      }
    },
    "UserKeyword": {
      "id": "UserKeyword",
      "description": "JSON template for a keyword entry.",
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Keyword."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      }
    },
    "Asps": {
      "id": "Asps",
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of ASP resources.",
          "items": {
            "$ref": "Asp"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#aspList.",
          "default": "admin#directory#aspList"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "Alias": {
      "id": "Alias",
      "description": "JSON template for Alias object in Directory API.",
      "type": "object",
      "properties": {
        "alias": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#alias",
          "type": "string"
        }
      }
    },
    "Tokens": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "A list of Token resources.",
          "items": {
            "$ref": "Token"
          }
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#tokenList.",
          "default": "admin#directory#tokenList",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Tokens",
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Features": {
      "description": "Public API: Resources.features",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "features": {
          "type": "array",
          "description": "The Features in this page of results.",
          "items": {
            "$ref": "Feature"
          }
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#featuresList"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "Features"
    },
    "Schema": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Display name for the schema.",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "schemaId": {
          "type": "string",
          "description": "Unique identifier of Schema (Read-only)"
        },
        "kind": {
          "default": "admin#directory#schema",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "fields": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "type": "array",
          "description": "Fields of Schema"
        },
        "schemaName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "Schema name"
        }
      },
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Schema",
      "type": "object"
    },
    "Member": {
      "id": "Member",
      "properties": {
        "delivery_settings": {
          "type": "string",
          "description": "Delivery settings of member"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#member",
          "type": "string"
        },
        "role": {
          "description": "Role of member",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "type": {
          "description": "Type of member (Immutable)",
          "type": "string"
        },
        "status": {
          "description": "Status of member (Immutable)",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "Email of member (Read-only)"
        }
      },
      "type": "object"
    },
    "Domains": {
      "id": "Domains",
      "properties": {
        "domainName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The domain name of the customer."
        },
        "creationTime": {
          "format": "int64",
          "description": "Creation time of the domain. (Read-only).",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "domainAliases": {
          "description": "List of domain alias objects. (Read-only)",
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          }
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain. (Read-only)."
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Indicates if the domain is a primary domain (Read-only)."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domain",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ChromeOsDeviceAction": {
      "properties": {
        "deprovisionReason": {
          "type": "string"
        },
        "action": {
          "description": "Action to be taken on the ChromeOs Device",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "type": "string"
        }
      },
      "type": "object",
      "id": "ChromeOsDeviceAction"
    },
    "DirectoryChromeosdevicesCommand": {
      "description": "Information regarding a command that was issued to a device.",
      "properties": {
        "commandExpireTime": {
          "type": "string",
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.",
          "format": "google-datetime"
        },
        "commandId": {
          "format": "int64",
          "type": "string",
          "description": "Unique ID of a device command."
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ],
          "type": "string",
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "description": "Indicates the command state."
        },
        "payload": {
          "type": "string",
          "description": "The payload that the command specified, if any."
        },
        "commandResult": {
          "description": "The result of the command execution.",
          "$ref": "DirectoryChromeosdevicesCommandResult"
        },
        "type": {
          "description": "The type of the command.",
          "type": "string",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ]
        },
        "issueTime": {
          "type": "string",
          "description": "The timestamp when the command was issued by the admin.",
          "format": "google-datetime"
        }
      },
      "id": "DirectoryChromeosdevicesCommand",
      "type": "object"
    },
    "UserMakeAdmin": {
      "id": "UserMakeAdmin",
      "type": "object",
      "properties": {
        "status": {
          "description": "Boolean indicating new admin status of the user",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "type": "boolean"
        }
      }
    },
    "RoleAssignments": {
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of RoleAssignment resources.",
          "items": {
            "$ref": "RoleAssignment"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#roleAssignments",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments .",
          "type": "string"
        }
      },
      "type": "object",
      "id": "RoleAssignments"
    },
    "UserPhone": {
      "description": "JSON template for a phone entry.",
      "id": "UserPhone",
      "type": "object",
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "primary": {
          "description": "If this is user's primary phone or not.",
          "type": "boolean"
        },
        "value": {
          "type": "string",
          "description": "Phone number."
        }
      }
    },
    "Domains2": {
      "id": "Domains2",
      "properties": {
        "domains": {
          "type": "array",
          "items": {
            "$ref": "Domains"
          },
          "description": "List of domain objects."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domains",
          "description": "Kind of resource this is."
        }
      },
      "type": "object"
    },
    "UserGender": {
      "properties": {
        "customGender": {
          "type": "string",
          "description": "Custom gender."
        },
        "addressMeAs": {
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Gender."
        }
      },
      "type": "object",
      "id": "UserGender"
    },
    "MembersHasMember": {
      "description": "JSON template for Has Member response in Directory API.",
      "type": "object",
      "id": "MembersHasMember",
      "properties": {
        "isMember": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested."
        }
      }
    },
    "UserUndelete": {
      "id": "UserUndelete",
      "properties": {
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserLanguage": {
      "description": "JSON template for a language entry.",
      "id": "UserLanguage",
      "properties": {
        "languageCode": {
          "type": "string",
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException."
        },
        "customLanguage": {
          "type": "string",
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set"
        }
      },
      "type": "object"
    },
    "ChromeOsMoveDevicesToOu": {
      "properties": {
        "deviceIds": {
          "description": "ChromeOs Devices to be moved to OU",
          "items": {
            "type": "string"
          },
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "type": "array"
        }
      },
      "id": "ChromeOsMoveDevicesToOu",
      "type": "object"
    },
    "UserRelation": {
      "properties": {
        "value": {
          "description": "The name of the relation.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "type": "string",
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner."
        }
      },
      "id": "UserRelation",
      "description": "JSON template for a relation entry.",
      "type": "object"
    },
    "MobileDevices": {
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#mobiledevices",
          "type": "string"
        },
        "mobiledevices": {
          "description": "List of Mobile Device objects.",
          "items": {
            "$ref": "MobileDevice"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        }
      },
      "id": "MobileDevices"
    },
    "UserAddress": {
      "description": "JSON template for address.",
      "type": "object",
      "id": "UserAddress",
      "properties": {
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "streetAddress": {
          "description": "Street.",
          "type": "string"
        },
        "poBox": {
          "description": "Other parts of address.",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code.",
          "type": "string"
        },
        "region": {
          "type": "string",
          "description": "Region."
        },
        "locality": {
          "description": "Locality.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary address. Only one entry could be marked as primary."
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        },
        "formatted": {
          "description": "Formatted address.",
          "type": "string"
        },
        "extendedAddress": {
          "description": "Extended Address.",
          "type": "string"
        }
      }
    },
    "ChromeOsDevices": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#chromeosdevices"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "chromeosdevices": {
          "description": "List of Chrome OS Device objects.",
          "type": "array",
          "items": {
            "$ref": "ChromeOsDevice"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "ChromeOsDevices",
      "type": "object"
    },
    "Buildings": {
      "type": "object",
      "properties": {
        "buildings": {
          "items": {
            "$ref": "Building"
          },
          "description": "The Buildings in this page of results.",
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#resources#buildings#buildingsList",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "Buildings",
      "description": "Public API: Resources.buildings"
    },
    "Members": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "members": {
          "description": "List of member objects.",
          "type": "array",
          "items": {
            "$ref": "Member"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#members",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "id": "Members"
    },
    "CalendarResources": {
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "type": "string",
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "items": {
          "description": "The CalendarResources in this page of results.",
          "type": "array",
          "items": {
            "$ref": "CalendarResource"
          }
        }
      },
      "id": "CalendarResources",
      "description": "Public API: Resources.calendars"
    },
    "CalendarResource": {
      "description": "Public API: Resources.calendars",
      "properties": {
        "floorName": {
          "type": "string",
          "description": "Name of the floor a resource is located on."
        },
        "resourceId": {
          "type": "string",
          "description": "The unique ID for the calendar resource.",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          }
        },
        "userVisibleDescription": {
          "type": "string",
          "description": "Description of the resource, visible to users and admins."
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "resourceCategory": {
          "type": "string",
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN."
        },
        "resourceType": {
          "description": "The type of the calendar resource, intended for non-room resources.",
          "type": "string"
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "resourceName": {
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          }
        },
        "floorSection": {
          "type": "string",
          "description": "Name of the section within a floor a resource is located in."
        },
        "featureInstances": {
          "type": "any",
          "description": "Instances of features for the calendar resource."
        },
        "capacity": {
          "format": "int32",
          "description": "Capacity of a resource, number of seats in a room.",
          "type": "integer"
        },
        "generatedResourceName": {
          "type": "string",
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\"."
        },
        "buildingId": {
          "description": "Unique ID for the building a resource is located in.",
          "type": "string"
        },
        "resourceEmail": {
          "type": "string",
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource."
        },
        "kind": {
          "default": "admin#directory#resources#calendars#CalendarResource",
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "CalendarResource"
    },
    "Asp": {
      "id": "Asp",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the ASP.",
          "type": "string"
        },
        "creationTime": {
          "type": "string",
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created."
        },
        "codeId": {
          "format": "int32",
          "type": "integer",
          "description": "The unique ID of the ASP."
        },
        "lastTimeUsed": {
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "format": "int64",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#asp.",
          "default": "admin#directory#asp"
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user who issued the ASP."
        }
      },
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "BuildingAddress": {
      "type": "object",
      "properties": {
        "locality": {
          "type": "string",
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines."
        },
        "addressLines": {
          "description": "Unstructured address lines describing the lower levels of an address.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        },
        "languageCode": {
          "description": "Optional. BCP-47 language code of the contents of this address (if known).",
          "type": "string"
        },
        "postalCode": {
          "type": "string",
          "description": "Optional. Postal code of the address."
        },
        "sublocality": {
          "description": "Optional. Sublocality of the address.",
          "type": "string"
        },
        "administrativeArea": {
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region.",
          "type": "string"
        }
      },
      "description": "Public API: Resources.buildings",
      "id": "BuildingAddress"
    },
    "Privilege": {
      "properties": {
        "privilegeName": {
          "type": "string",
          "description": "The name of the privilege."
        },
        "childPrivileges": {
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "items": {
            "$ref": "Privilege"
          },
          "type": "array"
        },
        "serviceId": {
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#privilege",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privilege."
        },
        "isOuScopable": {
          "description": "If the privilege can be restricted to an organization unit.",
          "type": "boolean"
        },
        "serviceName": {
          "description": "The name of the service this privilege is for.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "Privilege",
      "type": "object"
    },
    "Schemas": {
      "type": "object",
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#schemas"
        },
        "schemas": {
          "type": "array",
          "description": "List of UserSchema objects.",
          "items": {
            "$ref": "Schema"
          }
        }
      },
      "id": "Schemas"
    },
    "DomainAlias": {
      "id": "DomainAlias",
      "properties": {
        "parentDomainName": {
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#domainAlias"
        },
        "creationTime": {
          "type": "string",
          "description": "The creation time of the domain alias. (Read-only).",
          "format": "int64"
        },
        "domainAliasName": {
          "type": "string",
          "description": "The domain alias name."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "verified": {
          "description": "Indicates the verification state of a domain alias. (Read-only)",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "MobileDeviceAction": {
      "properties": {
        "action": {
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          },
          "description": "Action to be taken on the Mobile Device",
          "type": "string"
        }
      },
      "type": "object",
      "id": "MobileDeviceAction"
    },
    "FeatureRename": {
      "id": "FeatureRename",
      "properties": {
        "newName": {
          "description": "New name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          },
          "type": "string"
        }
      },
      "type": "object"
    },
    "BuildingCoordinates": {
      "properties": {
        "latitude": {
          "description": "Latitude in decimal degrees.",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "type": "number",
          "description": "Longitude in decimal degrees.",
          "format": "double"
        }
      },
      "type": "object",
      "description": "Public API: Resources.buildings",
      "id": "BuildingCoordinates"
    },
    "Role": {
      "id": "Role",
      "properties": {
        "roleName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "description": "Name of the role."
        },
        "isSuperAdminRole": {
          "description": "Returns true if the role is a super admin role.",
          "type": "boolean"
        },
        "roleId": {
          "description": "ID of the role.",
          "type": "string",
          "format": "int64"
        },
        "rolePrivileges": {
          "description": "The set of privileges that are granted to this role.",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "array",
          "items": {
            "properties": {
              "serviceId": {
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
                "type": "string"
              },
              "privilegeName": {
                "description": "The name of the privilege.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#role",
          "description": "The type of the API resource. This is always admin#directory#role."
        },
        "isSystemRole": {
          "type": "boolean",
          "description": "Returns true if this is a pre-defined system role."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "roleDescription": {
          "type": "string",
          "description": "A short description of the role."
        }
      },
      "type": "object"
    },
    "Group": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "adminCreated": {
          "description": "Is the group created by admin (Read-only) *",
          "type": "boolean"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#group",
          "description": "Kind of resource this is."
        },
        "description": {
          "type": "string",
          "description": "Description of the group"
        },
        "nonEditableAliases": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of non editable aliases (Read-only)"
        },
        "directMembersCount": {
          "description": "Group direct members count",
          "format": "int64",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of Group (Read-only)"
        },
        "email": {
          "description": "Email of Group",
          "type": "string",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          }
        },
        "name": {
          "description": "Group name",
          "type": "string"
        },
        "aliases": {
          "type": "array",
          "description": "List of aliases (Read-only)",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "Group"
    },
    "UserEmail": {
      "description": "JSON template for an email.",
      "type": "object",
      "properties": {
        "address": {
          "description": "Email id of the user.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary email. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value."
        }
      },
      "id": "UserEmail"
    },
    "SchemaFieldSpec": {
      "type": "object",
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "numericIndexingSpec": {
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "type": "object",
          "properties": {
            "maxValue": {
              "type": "number",
              "format": "double",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            },
            "minValue": {
              "type": "number",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double"
            }
          }
        },
        "fieldId": {
          "type": "string",
          "description": "Unique identifier of Field (Read-only)"
        },
        "multiValued": {
          "description": "Boolean specifying whether this is a multi-valued field or not.",
          "type": "boolean"
        },
        "fieldType": {
          "description": "Type of the field.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "kind": {
          "default": "admin#directory#schema#fieldspec",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "readAccessType": {
          "type": "string",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\".",
          "default": "ALL_DOMAIN_USERS"
        },
        "displayName": {
          "type": "string",
          "description": "Display Name of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "indexed": {
          "description": "Boolean specifying whether the field is indexed or not.",
          "type": "boolean",
          "default": "true"
        },
        "fieldName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Name of the field."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "SchemaFieldSpec"
    },
    "UserPosixAccount": {
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix.",
      "type": "object",
      "properties": {
        "operatingSystemType": {
          "description": "The operating system type for this account.",
          "type": "string"
        },
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        },
        "homeDirectory": {
          "type": "string",
          "description": "The path to the home directory for this account."
        },
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        },
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "gid": {
          "type": "string",
          "description": "The default group ID.",
          "format": "uint64"
        },
        "uid": {
          "format": "uint64",
          "description": "The POSIX compliant user ID.",
          "type": "string"
        },
        "accountId": {
          "description": "A POSIX account field identifier.",
          "type": "string"
        },
        "gecos": {
          "description": "The GECOS (user information) for this account.",
          "type": "string"
        },
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        }
      },
      "id": "UserPosixAccount"
    },
    "Groups": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#groups",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "groups": {
          "description": "List of group objects.",
          "type": "array",
          "items": {
            "$ref": "Group"
          }
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        }
      },
      "id": "Groups",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "MobileDevice": {
      "properties": {
        "encryptionStatus": {
          "description": "Mobile Device Encryption Status (Read-only)",
          "type": "string"
        },
        "otherAccountsInfo": {
          "description": "List of accounts added on device (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultLanguage": {
          "type": "string",
          "description": "The default locale used on the Mobile Device (Read-only)"
        },
        "brand": {
          "type": "string",
          "description": "Mobile Device Brand (Read-only)"
        },
        "wifiMacAddress": {
          "description": "Mobile Device WiFi MAC address (Read-only)",
          "type": "string"
        },
        "hardwareId": {
          "description": "Mobile Device Hardware Id (Read-only)",
          "type": "string"
        },
        "buildNumber": {
          "type": "string",
          "description": "Mobile Device Build number (Read-only)"
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "unknownSourcesStatus": {
          "type": "boolean",
          "description": "Unknown sources enabled or disabled on device (Read-only)"
        },
        "email": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of owner user's email addresses (Read-only)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "managedAccountIsOnOwnerProfile": {
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)",
          "type": "boolean"
        },
        "firstSync": {
          "format": "date-time",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        },
        "applications": {
          "items": {
            "properties": {
              "permission": {
                "items": {
                  "type": "string"
                },
                "description": "List of Permissions for application",
                "type": "array"
              },
              "packageName": {
                "type": "string",
                "description": "Package name of application"
              },
              "versionName": {
                "description": "Version name of application",
                "type": "string"
              },
              "displayName": {
                "type": "string",
                "description": "Display name of application"
              },
              "versionCode": {
                "format": "int32",
                "description": "Version code of application",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "description": "List of applications installed on Mobile Device",
          "type": "array"
        },
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "supportsWorkProfile": {
          "type": "boolean",
          "description": "Work profile supported on device (Read-only)"
        },
        "basebandVersion": {
          "description": "Mobile Device Baseband version (Read-only)",
          "type": "string"
        },
        "kernelVersion": {
          "type": "string",
          "description": "Mobile Device Kernel version (Read-only)"
        },
        "securityPatchLevel": {
          "type": "string",
          "format": "int64",
          "description": "Mobile Device Security patch level (Read-only)"
        },
        "model": {
          "type": "string",
          "description": "Name of the model of the device"
        },
        "name": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of owner user's names (Read-only)"
        },
        "manufacturer": {
          "type": "string",
          "description": "Mobile Device manufacturer (Read-only)"
        },
        "userAgent": {
          "type": "string",
          "description": "Mobile Device user agent"
        },
        "status": {
          "type": "string",
          "description": "Status of the device (Read-only)"
        },
        "networkOperator": {
          "description": "Mobile Device mobile or network operator (if available) (Read-only)",
          "type": "string"
        },
        "resourceId": {
          "description": "Unique identifier of Mobile Device (Read-only)",
          "type": "string"
        },
        "deviceCompromisedStatus": {
          "description": "Mobile Device compromised status (Read-only)",
          "type": "string"
        },
        "imei": {
          "description": "Mobile Device IMEI number (Read-only)",
          "type": "string"
        },
        "serialNumber": {
          "type": "string",
          "description": "Mobile Device SSN or Serial Number (Read-only)"
        },
        "os": {
          "type": "string",
          "description": "Name of the mobile operating system"
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "lastSync": {
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#mobiledevice",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "bootloaderVersion": {
          "type": "string",
          "description": "Mobile Device Bootloader version (Read-only)"
        },
        "type": {
          "description": "The type of device (Read-only)",
          "type": "string"
        },
        "deviceId": {
          "type": "string",
          "description": "Mobile Device serial number (Read-only)"
        },
        "meid": {
          "type": "string",
          "description": "Mobile Device MEID number (Read-only)"
        },
        "devicePasswordStatus": {
          "description": "DevicePasswordStatus (Read-only)",
          "type": "string"
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "privilege": {
          "description": "DMAgentPermission (Read-only)",
          "type": "string"
        }
      },
      "id": "MobileDevice",
      "type": "object"
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "properties": {
        "payload": {
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100].",
          "type": "string"
        },
        "commandType": {
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "type": "string",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "description": "The type of command."
        }
      },
      "id": "DirectoryChromeosdevicesIssueCommandRequest",
      "description": "A request for issuing a command.",
      "type": "object"
    },
    "Token": {
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "clientId": {
          "description": "The Client ID of the application the token is issued to.",
          "type": "string"
        },
        "userKey": {
          "description": "The unique ID of the user that issued the token.",
          "type": "string"
        },
        "anonymous": {
          "type": "boolean",
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID."
        },
        "scopes": {
          "description": "A list of authorization scopes the application is granted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nativeApp": {
          "type": "boolean",
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#token",
          "description": "The type of the API resource. This is always admin#directory#token.",
          "type": "string"
        },
        "displayText": {
          "description": "The displayable name of the application the token is issued to.",
          "type": "string"
        }
      },
      "id": "Token"
    },
    "VerificationCode": {
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "verificationCode": {
          "type": "string",
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result."
        },
        "userId": {
          "type": "string",
          "description": "The obfuscated unique ID of the user."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#verificationCode",
          "description": "The type of the resource. This is always admin#directory#verificationCode."
        }
      },
      "id": "VerificationCode"
    },
    "Channel": {
      "properties": {
        "payload": {
          "type": "boolean",
          "description": "A Boolean value to indicate whether payload is wanted. Optional."
        },
        "resourceId": {
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.",
          "type": "string"
        },
        "expiration": {
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "format": "int64",
          "type": "string"
        },
        "address": {
          "type": "string",
          "description": "The address where notifications are delivered for this channel."
        },
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "params": {
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "kind": {
          "type": "string",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "default": "api#channel"
        },
        "id": {
          "description": "A UUID or similar unique string that identifies this channel.",
          "type": "string"
        },
        "token": {
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.",
          "type": "string"
        },
        "resourceUri": {
          "description": "A version-specific identifier for the watched resource.",
          "type": "string"
        }
      },
      "id": "Channel",
      "type": "object",
      "description": "An notification channel used to watch for resource changes."
    },
    "UserSshPublicKey": {
      "id": "UserSshPublicKey",
      "type": "object",
      "properties": {
        "fingerprint": {
          "readOnly": true,
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
          "type": "string"
        },
        "expirationTimeUsec": {
          "format": "int64",
          "description": "An expiration time in microseconds since epoch.",
          "type": "string"
        },
        "key": {
          "description": "An SSH public key.",
          "type": "string"
        }
      },
      "description": "JSON template for a POSIX account entry."
    },
    "UserCustomProperties": {
      "additionalProperties": {
        "type": "any"
      },
      "id": "UserCustomProperties",
      "type": "object",
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)"
    },
    "Users": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#users",
          "description": "Kind of resource this is."
        },
        "trigger_event": {
          "type": "string",
          "description": "Event that triggered this response (only used in case of Push Response)"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "users": {
          "description": "List of user objects.",
          "items": {
            "$ref": "User"
          },
          "type": "array"
        }
      },
      "id": "Users",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "ChromeOsDevice": {
      "properties": {
        "systemRamTotal": {
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "format": "int64",
          "type": "string"
        },
        "meid": {
          "type": "string",
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)"
        },
        "tpmVersionInfo": {
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "properties": {
            "manufacturer": {
              "type": "string",
              "description": "TPM manufacturer code."
            },
            "family": {
              "description": "TPM family.",
              "type": "string"
            },
            "specLevel": {
              "description": "TPM specification level.",
              "type": "string"
            },
            "vendorSpecific": {
              "type": "string",
              "description": "Vendor-specific information such as Vendor ID."
            },
            "tpmModel": {
              "description": "TPM model number.",
              "type": "string"
            },
            "firmwareVersion": {
              "description": "TPM firmware version.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "diskVolumeReports": {
          "items": {
            "properties": {
              "volumeInfo": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "storageFree": {
                      "type": "string",
                      "format": "int64",
                      "description": "Free disk space [in bytes]"
                    },
                    "storageTotal": {
                      "format": "int64",
                      "type": "string",
                      "description": "Total disk space [in bytes]"
                    },
                    "volumeId": {
                      "type": "string",
                      "description": "Volume id"
                    }
                  }
                },
                "description": "Disk volumes"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "Reports of disk space and other info about mounted/connected volumes."
        },
        "manufactureDate": {
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
          "type": "string"
        },
        "model": {
          "type": "string",
          "description": "Chromebook Model (Read-only)"
        },
        "lastEnrollmentTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was last enrolled (Read-only)"
        },
        "orderNumber": {
          "description": "Chromebook order number (Read-only)",
          "type": "string"
        },
        "deviceId": {
          "type": "string",
          "description": "Unique identifier of Chrome OS Device (Read-only)"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#chromeosdevice"
        },
        "annotatedUser": {
          "type": "string",
          "description": "User of the device"
        },
        "bootMode": {
          "description": "Chromebook boot mode (Read-only)",
          "type": "string"
        },
        "platformVersion": {
          "type": "string",
          "description": "Chromebook platform version (Read-only)"
        },
        "dockMacAddress": {
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "systemRamFreeReports": {
          "type": "array",
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "systemRamFreeInfo": {
                "type": "array",
                "items": {
                  "format": "int64",
                  "type": "string"
                }
              },
              "reportTime": {
                "format": "date-time",
                "description": "Date and time the report was received.",
                "type": "string"
              }
            }
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "macAddress": {
          "description": "Chromebook Mac Address on wifi network interface (Read-only)",
          "type": "string"
        },
        "orgUnitPath": {
          "description": "OrgUnit of the device",
          "type": "string"
        },
        "status": {
          "description": "status of the device (Read-only)",
          "type": "string"
        },
        "cpuStatusReports": {
          "type": "array",
          "items": {
            "properties": {
              "cpuTemperatureInfo": {
                "type": "array",
                "description": "List of CPU temperature samples.",
                "items": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "description": "CPU label",
                      "type": "string"
                    },
                    "temperature": {
                      "format": "int32",
                      "description": "Temperature in Celsius degrees.",
                      "type": "integer"
                    }
                  }
                }
              },
              "cpuUtilizationPercentageInfo": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "reportTime": {
                "description": "Date and time the report was received.",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "description": "Reports of CPU utilization and temperature (Read-only)"
        },
        "annotatedAssetId": {
          "type": "string",
          "description": "AssetId specified during enrollment or through later annotation"
        },
        "recentUsers": {
          "type": "array",
          "description": "List of recent device users, in descending order by last login time (Read-only)",
          "items": {
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of the user"
              },
              "email": {
                "description": "Email address of the user. Present only if the user type is managed",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "annotatedLocation": {
          "description": "Address or location of the device as noted by the administrator",
          "type": "string"
        },
        "activeTimeRanges": {
          "type": "array",
          "description": "List of active time ranges (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "activeTime": {
                "format": "int32",
                "description": "Duration in milliseconds",
                "type": "integer"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of usage"
              }
            }
          }
        },
        "deviceFiles": {
          "description": "List of device files to download (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              },
              "name": {
                "description": "File name",
                "type": "string"
              },
              "createTime": {
                "format": "date-time",
                "type": "string",
                "description": "Date and time the file was created"
              },
              "type": {
                "description": "File type",
                "type": "string"
              }
            }
          },
          "type": "array"
        },
        "lastSync": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "notes": {
          "description": "Notes added by the administrator",
          "type": "string"
        },
        "lastKnownNetwork": {
          "items": {
            "properties": {
              "wanIpAddress": {
                "description": "The WAN IP address.",
                "type": "string"
              },
              "ipAddress": {
                "type": "string",
                "description": "The IP address."
              }
            },
            "type": "object",
            "description": "Information for an ip address."
          },
          "type": "array",
          "description": "Contains last known network (Read-only)"
        },
        "ethernetMacAddress": {
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)",
          "type": "string"
        },
        "firmwareVersion": {
          "description": "Chromebook firmware version (Read-only)",
          "type": "string"
        },
        "osVersion": {
          "description": "Chromebook Os Version (Read-only)",
          "type": "string"
        },
        "willAutoRenew": {
          "type": "boolean",
          "description": "Will Chromebook auto renew after support end date (Read-only)"
        },
        "autoUpdateExpiration": {
          "format": "int64",
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "type": "string"
        },
        "serialNumber": {
          "type": "string",
          "description": "Chromebook serial number (Read-only)"
        },
        "supportEndDate": {
          "type": "string",
          "description": "Final date the device will be supported (Read-only)",
          "format": "date-time"
        },
        "ethernetMacAddress0": {
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ChromeOsDevice",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    }
  },
  "revision": "20201013",
  "fullyEncodeReservedExpansion": true,
  "resources": {
    "roleAssignments": {
      "methods": {
        "list": {
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            },
            "roleId": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID."
            },
            "userKey": {
              "location": "query",
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "type": "string"
            },
            "maxResults": {
              "format": "int32",
              "description": "Maximum number of results to return.",
              "maximum": "200",
              "type": "integer",
              "minimum": "1",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify the next page in the list."
            }
          },
          "response": {
            "$ref": "RoleAssignments"
          },
          "description": "Retrieves a paginated list of all roleAssignments.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.roleAssignments.list"
        },
        "get": {
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "roleAssignmentId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role assignment."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "httpMethod": "GET",
          "response": {
            "$ref": "RoleAssignment"
          },
          "description": "Retrieve a role assignment.",
          "id": "directory.roleAssignments.get",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}"
        },
        "insert": {
          "id": "directory.roleAssignments.insert",
          "description": "Creates a role assignment.",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "httpMethod": "POST",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "request": {
            "$ref": "RoleAssignment"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "RoleAssignment"
          }
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "id": "directory.roleAssignments.delete",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "roleAssignmentId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the role assignment.",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "httpMethod": "DELETE",
          "description": "Deletes a role assignment."
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.chromeosdevices.list",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "maxResults": {
              "default": "100",
              "minimum": "1",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "location": "query"
            },
            "projection": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields."
            },
            "sortOrder": {
              "location": "query",
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ],
              "description": "Column to use for sorting results",
              "location": "query"
            },
            "orgUnitPath": {
              "type": "string",
              "location": "query",
              "description": "Full path of the organizational unit or its ID"
            }
          },
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)"
        },
        "action": {
          "httpMethod": "POST",
          "parameters": {
            "resourceId": {
              "description": "Immutable ID of Chrome OS Device",
              "location": "path",
              "type": "string",
              "required": true
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "description": "Take action on Chrome OS Device",
          "id": "directory.chromeosdevices.action",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action"
        },
        "moveDevicesToOu": {
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "httpMethod": "POST",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "parameters": {
            "orgUnitPath": {
              "description": "Full path of the target organizational unit or its ID",
              "required": true,
              "type": "string",
              "location": "query"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu"
        },
        "update": {
          "parameters": {
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            },
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "id": "directory.chromeosdevices.update",
          "description": "Update Chrome OS Device",
          "httpMethod": "PUT",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ]
        },
        "get": {
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.get",
          "description": "Retrieve Chrome OS Device",
          "parameters": {
            "deviceId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of Chrome OS Device"
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        },
        "patch": {
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "id": "directory.chromeosdevices.patch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "description": "Patch Chrome OS Device",
          "httpMethod": "PATCH",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameters": {
            "deviceId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of Chrome OS Device",
              "location": "path"
            },
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "projection": {
              "location": "query",
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        }
      }
    },
    "groups": {
      "resources": {
        "aliases": {
          "methods": {
            "list": {
              "id": "directory.groups.aliases.list",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameters": {
                "groupKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the group",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "groupKey"
              ],
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "description": "List all aliases for a group",
              "response": {
                "$ref": "Aliases"
              }
            },
            "insert": {
              "parameterOrder": [
                "groupKey"
              ],
              "description": "Add a alias for the group",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "httpMethod": "POST",
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "id": "directory.groups.aliases.insert",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "response": {
                "$ref": "Alias"
              },
              "request": {
                "$ref": "Alias"
              }
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "description": "Remove a alias for the group",
              "id": "directory.groups.aliases.delete",
              "parameters": {
                "alias": {
                  "location": "path",
                  "required": true,
                  "description": "The alias to be removed",
                  "type": "string"
                },
                "groupKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the group"
                }
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}"
            }
          }
        }
      },
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "path": "admin/directory/v1/groups",
          "flatPath": "admin/directory/v1/groups",
          "httpMethod": "GET",
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "response": {
            "$ref": "Groups"
          },
          "parameterOrder": [],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain.",
              "location": "query",
              "type": "string"
            },
            "query": {
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "type": "string"
            },
            "orderBy": {
              "location": "query",
              "type": "string",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "enum": [
                "orderByUndefined",
                "email"
              ]
            },
            "maxResults": {
              "format": "int32",
              "type": "integer",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "location": "query",
              "default": "200",
              "minimum": "1"
            },
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "location": "query"
            },
            "domain": {
              "type": "string",
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.",
              "location": "query"
            },
            "userKey": {
              "type": "string",
              "location": "query",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object."
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            }
          },
          "id": "directory.groups.list"
        },
        "insert": {
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "description": "Create Group",
          "id": "directory.groups.insert",
          "parameterOrder": [],
          "flatPath": "admin/directory/v1/groups",
          "path": "admin/directory/v1/groups",
          "response": {
            "$ref": "Group"
          },
          "request": {
            "$ref": "Group"
          },
          "parameters": {}
        },
        "delete": {
          "parameterOrder": [
            "groupKey"
          ],
          "description": "Delete Group",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "DELETE",
          "id": "directory.groups.delete",
          "flatPath": "admin/directory/v1/groups/{groupKey}"
        },
        "get": {
          "parameterOrder": [
            "groupKey"
          ],
          "description": "Retrieve Group",
          "path": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "GET",
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the group",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.groups.get"
        },
        "patch": {
          "response": {
            "$ref": "Group"
          },
          "request": {
            "$ref": "Group"
          },
          "httpMethod": "PATCH",
          "id": "directory.groups.patch",
          "description": "Patch Groups via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ]
        },
        "update": {
          "path": "admin/directory/v1/groups/{groupKey}",
          "description": "Update Group",
          "parameters": {
            "groupKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            }
          },
          "parameterOrder": [
            "groupKey"
          ],
          "request": {
            "$ref": "Group"
          },
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "id": "directory.groups.update"
        }
      }
    },
    "tokens": {
      "methods": {
        "delete": {
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            },
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "description": "Delete all access tokens issued by a user for an application.",
          "id": "directory.tokens.delete",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "get": {
          "parameters": {
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Token"
          },
          "description": "Get information about an access token issued by a user.",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "id": "directory.tokens.get",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "list": {
          "response": {
            "$ref": "Tokens"
          },
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.tokens.list",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        }
      }
    },
    "resources": {
      "resources": {
        "features": {
          "methods": {
            "get": {
              "httpMethod": "GET",
              "id": "directory.resources.features.get",
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "required": true,
                  "description": "The unique ID of the feature to retrieve.",
                  "type": "string",
                  "location": "path"
                }
              },
              "description": "Retrieves a feature.",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "response": {
                "$ref": "Feature"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "list": {
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "parameters": {
                "maxResults": {
                  "format": "int32",
                  "maximum": "500",
                  "type": "integer",
                  "location": "query",
                  "minimum": "1",
                  "description": "Maximum number of results to return."
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "type": "string",
                  "location": "query"
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "Features"
              },
              "description": "Retrieves a list of features for an account.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "id": "directory.resources.features.list"
            },
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "request": {
                "$ref": "Feature"
              },
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                },
                "featureKey": {
                  "type": "string",
                  "description": "The unique ID of the feature to update.",
                  "location": "path",
                  "required": true
                }
              },
              "httpMethod": "PUT",
              "description": "Updates a feature.",
              "response": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "id": "directory.resources.features.update",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "delete": {
              "parameters": {
                "featureKey": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the feature to delete."
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "httpMethod": "DELETE",
              "description": "Deletes a feature.",
              "id": "directory.resources.features.delete",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "insert": {
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "Feature"
              },
              "description": "Inserts a feature.",
              "httpMethod": "POST",
              "id": "directory.resources.features.insert",
              "request": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features"
            },
            "rename": {
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "request": {
                "$ref": "FeatureRename"
              },
              "id": "directory.resources.features.rename",
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "description": "Renames a feature.",
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                },
                "oldName": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the feature to rename.",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "patch": {
              "parameters": {
                "featureKey": {
                  "type": "string",
                  "description": "The unique ID of the feature to update.",
                  "location": "path",
                  "required": true
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              },
              "request": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "response": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "PATCH",
              "id": "directory.resources.features.patch",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Patches a feature via Apiary Patch Orchestration."
            }
          }
        },
        "buildings": {
          "methods": {
            "get": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "description": "Retrieves a building.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "buildingId": {
                  "required": true,
                  "description": "The unique ID of the building to retrieve.",
                  "type": "string",
                  "location": "path"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "id": "directory.resources.buildings.get",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "response": {
                "$ref": "Building"
              }
            },
            "delete": {
              "id": "directory.resources.buildings.delete",
              "description": "Deletes a building.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "buildingId": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The id of the building to delete."
                }
              },
              "httpMethod": "DELETE"
            },
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "id": "directory.resources.buildings.update",
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string"
                },
                "buildingId": {
                  "required": true,
                  "type": "string",
                  "description": "The id of the building to update.",
                  "location": "path"
                },
                "coordinatesSource": {
                  "type": "string",
                  "location": "query",
                  "description": "Source from which Building.coordinates are derived.",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "default": "SOURCE_UNSPECIFIED"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "PUT",
              "description": "Updates a building.",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "request": {
                "$ref": "Building"
              }
            },
            "patch": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Patches a building via Apiary Patch Orchestration.",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.patch",
              "parameters": {
                "buildingId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The id of the building to update."
                },
                "coordinatesSource": {
                  "default": "SOURCE_UNSPECIFIED",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "type": "string",
                  "location": "query",
                  "description": "Source from which Building.coordinates are derived."
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                }
              }
            },
            "list": {
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.buildings.list",
              "description": "Retrieves a list of buildings for an account.",
              "parameters": {
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "minimum": "1",
                  "location": "query",
                  "format": "int32",
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "type": "integer"
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "response": {
                "$ref": "Buildings"
              }
            },
            "insert": {
              "request": {
                "$ref": "Building"
              },
              "response": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "coordinatesSource": {
                  "location": "query",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "type": "string",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "default": "SOURCE_UNSPECIFIED"
                }
              },
              "description": "Inserts a building.",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "id": "directory.resources.buildings.insert"
            }
          }
        },
        "calendars": {
          "methods": {
            "patch": {
              "httpMethod": "PATCH",
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "parameters": {
                "calendarResourceId": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the calendar resource to update."
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "id": "directory.resources.calendars.patch",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "request": {
                "$ref": "CalendarResource"
              }
            },
            "list": {
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.calendars.list",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "response": {
                "$ref": "CalendarResources"
              },
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                },
                "query": {
                  "type": "string",
                  "location": "query",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone."
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "type": "string",
                  "location": "query"
                },
                "maxResults": {
                  "location": "query",
                  "description": "Maximum number of results to return.",
                  "format": "int32",
                  "type": "integer",
                  "minimum": "1",
                  "maximum": "500"
                },
                "orderBy": {
                  "location": "query",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order.",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "description": "Retrieves a list of calendar resources for an account."
            },
            "get": {
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "location": "path",
                  "type": "string"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "description": "Retrieves a calendar resource.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.calendars.get"
            },
            "insert": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "request": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "POST",
              "description": "Inserts a calendar resource.",
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "id": "directory.resources.calendars.insert"
            },
            "update": {
              "httpMethod": "PUT",
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "response": {
                "$ref": "CalendarResource"
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "request": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                },
                "calendarResourceId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the calendar resource to update."
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.update"
            },
            "delete": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                },
                "calendarResourceId": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the calendar resource to delete."
                }
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.calendars.delete",
              "description": "Deletes a calendar resource.",
              "httpMethod": "DELETE"
            }
          }
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "admin/directory_v1/channels/stop",
          "flatPath": "admin/directory_v1/channels/stop",
          "parameters": {},
          "description": "Stop watching resources through this channel.",
          "id": "admin.channels.stop",
          "parameterOrder": [],
          "request": {
            "$ref": "Channel"
          }
        }
      }
    },
    "customers": {
      "methods": {
        "patch": {
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "request": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "path": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "PATCH",
          "description": "Patch Customers via Apiary Patch Orchestration",
          "response": {
            "$ref": "Customer"
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.patch",
          "parameterOrder": [
            "customerKey"
          ]
        },
        "update": {
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "id": "directory.customers.update",
          "request": {
            "$ref": "Customer"
          },
          "parameterOrder": [
            "customerKey"
          ],
          "path": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "PUT",
          "description": "Updates a customer."
        },
        "get": {
          "httpMethod": "GET",
          "description": "Retrieves a customer.",
          "response": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "path": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ],
          "id": "directory.customers.get",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be retrieved",
              "type": "string",
              "required": true,
              "location": "path"
            }
          }
        }
      }
    },
    "roles": {
      "methods": {
        "patch": {
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "httpMethod": "PATCH",
          "description": "Patch role via Apiary Patch Orchestration",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.patch",
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "request": {
            "$ref": "Role"
          },
          "parameters": {
            "roleId": {
              "required": true,
              "description": "Immutable ID of the role.",
              "location": "path",
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "insert": {
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "response": {
            "$ref": "Role"
          },
          "id": "directory.roles.insert",
          "request": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "parameterOrder": [
            "customer"
          ],
          "description": "Creates a role.",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "description": "Retrieves a role.",
          "response": {
            "$ref": "Role"
          },
          "id": "directory.roles.get",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "roleId": {
              "location": "path",
              "description": "Immutable ID of the role.",
              "required": true,
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "delete": {
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            },
            "roleId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role.",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roles.delete",
          "description": "Deletes a role.",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "update": {
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            },
            "roleId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the role.",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Updates a role.",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "id": "directory.roles.update",
          "httpMethod": "PUT",
          "request": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          }
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "httpMethod": "GET",
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "Roles"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "parameters": {
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            },
            "maxResults": {
              "format": "int32",
              "maximum": "100",
              "type": "integer",
              "location": "query",
              "minimum": "1",
              "description": "Maximum number of results to return."
            }
          },
          "id": "directory.roles.list",
          "path": "admin/directory/v1/customer/{customer}/roles"
        }
      }
    },
    "members": {
      "methods": {
        "insert": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "httpMethod": "POST",
          "parameterOrder": [
            "groupKey"
          ],
          "id": "directory.members.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "request": {
            "$ref": "Member"
          },
          "response": {
            "$ref": "Member"
          },
          "parameters": {
            "groupKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the group"
            }
          },
          "description": "Add user to the specified group."
        },
        "hasMember": {
          "response": {
            "$ref": "MembersHasMember"
          },
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string"
            },
            "memberKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID."
            }
          },
          "id": "directory.members.hasMember",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}"
        },
        "update": {
          "description": "Update membership of a user in the specified group.",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "PUT",
          "response": {
            "$ref": "Member"
          },
          "request": {
            "$ref": "Member"
          },
          "parameters": {
            "groupKey": {
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path"
            },
            "memberKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "id": "directory.members.update"
        },
        "list": {
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "description": "Retrieve all members in a group (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.members.list",
          "response": {
            "$ref": "Members"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "location": "path",
              "type": "string",
              "required": true
            },
            "includeDerivedMembership": {
              "location": "query",
              "description": "Whether to list indirect memberships. Default: false.",
              "type": "boolean"
            },
            "maxResults": {
              "format": "int32",
              "default": "200",
              "minimum": "1",
              "location": "query",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "type": "integer"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "roles": {
              "location": "query",
              "type": "string",
              "description": "Comma separated role values to filter list results on."
            }
          },
          "parameterOrder": [
            "groupKey"
          ],
          "httpMethod": "GET"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "description": "Retrieve Group Member",
          "response": {
            "$ref": "Member"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "GET",
          "parameters": {
            "memberKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the member",
              "location": "path"
            },
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.members.get",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        },
        "patch": {
          "description": "Patch Member via Apiary Patch Orchestration",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "request": {
            "$ref": "Member"
          },
          "response": {
            "$ref": "Member"
          },
          "parameters": {
            "memberKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "PATCH",
          "id": "directory.members.patch"
        },
        "delete": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "DELETE",
          "id": "directory.members.delete",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameters": {
            "memberKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the member"
            },
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group",
              "required": true,
              "type": "string"
            }
          },
          "description": "Remove membership."
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "methods": {
                "issueCommand": {
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "parameters": {
                    "deviceId": {
                      "description": "Immutable. Immutable ID of Chrome OS Device.",
                      "required": true,
                      "type": "string",
                      "location": "path"
                    },
                    "customerId": {
                      "location": "path",
                      "type": "string",
                      "description": "Immutable. Immutable ID of the G Suite account.",
                      "required": true
                    }
                  },
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ],
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "description": "Issues a command for the device to execute."
                }
              },
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ],
                      "id": "admin.customer.devices.chromeos.commands.get",
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "parameters": {
                        "commandId": {
                          "format": "int64",
                          "location": "path",
                          "required": true,
                          "description": "Immutable. Immutable ID of Chrome OS Device Command.",
                          "type": "string"
                        },
                        "deviceId": {
                          "type": "string",
                          "description": "Immutable. Immutable ID of Chrome OS Device.",
                          "required": true,
                          "location": "path"
                        },
                        "customerId": {
                          "location": "path",
                          "required": true,
                          "type": "string",
                          "description": "Immutable. Immutable ID of the G Suite account."
                        }
                      },
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "description": "Gets command data a specific command issued to the device."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "domains": {
      "methods": {
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains",
          "response": {
            "$ref": "Domains"
          },
          "parameterOrder": [
            "customer"
          ],
          "description": "Inserts a domain of the customer.",
          "id": "directory.domains.insert",
          "request": {
            "$ref": "Domains"
          },
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "POST"
        },
        "get": {
          "response": {
            "$ref": "Domains"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "description": "Retrieves a domain of the customer.",
          "id": "directory.domains.get",
          "parameters": {
            "domainName": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Name of domain to be retrieved"
            },
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ]
        },
        "delete": {
          "description": "Deletes a domain of the customer.",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "httpMethod": "DELETE",
          "id": "directory.domains.delete",
          "parameters": {
            "domainName": {
              "location": "path",
              "description": "Name of domain to be deleted",
              "required": true,
              "type": "string"
            },
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          }
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "GET",
          "id": "directory.domains.list",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "response": {
            "$ref": "Domains2"
          },
          "path": "admin/directory/v1/customer/{customer}/domains",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "description": "Lists the domains of the customer.",
          "parameterOrder": [
            "customer"
          ]
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "response": {
            "$ref": "Privileges"
          },
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.privileges.list",
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            }
          }
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "id": "directory.twoStepVerification.turnOff",
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "description": "Turn off 2-Step Verification for user.",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string",
              "required": true
            }
          }
        }
      }
    },
    "asps": {
      "methods": {
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "codeId": {
              "required": true,
              "location": "path",
              "format": "int32",
              "description": "The unique ID of the ASP to be deleted.",
              "type": "integer"
            },
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "httpMethod": "DELETE",
          "id": "directory.asps.delete",
          "description": "Delete an ASP issued by a user.",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        },
        "get": {
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Get information about an ASP issued by a user.",
          "response": {
            "$ref": "Asp"
          },
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "httpMethod": "GET",
          "id": "directory.asps.get",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameters": {
            "codeId": {
              "required": true,
              "description": "The unique ID of the ASP.",
              "format": "int32",
              "type": "integer",
              "location": "path"
            },
            "userKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          }
        },
        "list": {
          "path": "admin/directory/v1/users/{userKey}/asps",
          "description": "List the ASPs issued by a user.",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "httpMethod": "GET",
          "response": {
            "$ref": "Asps"
          },
          "id": "directory.asps.list"
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "action": {
          "description": "Take action on Mobile Device",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "resourceId": {
              "description": "Immutable ID of Mobile Device",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "id": "directory.mobiledevices.action",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "id": "directory.mobiledevices.get",
          "response": {
            "$ref": "MobileDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            },
            "resourceId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of Mobile Device",
              "type": "string"
            },
            "projection": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            }
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "description": "Retrieve Mobile Device",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}"
        },
        "list": {
          "response": {
            "$ref": "MobileDevices"
          },
          "parameterOrder": [
            "customerId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "id": "directory.mobiledevices.list",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "parameters": {
            "projection": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields."
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "orderBy": {
              "location": "query",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "type": "string",
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ]
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            },
            "sortOrder": {
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "maxResults": {
              "default": "100",
              "maximum": "100",
              "location": "query",
              "type": "integer",
              "minimum": "1",
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 100."
            },
            "query": {
              "location": "query",
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "type": "string"
            }
          }
        },
        "delete": {
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "description": "Delete Mobile Device",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            },
            "resourceId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of Mobile Device",
              "type": "string"
            }
          },
          "id": "directory.mobiledevices.delete"
        }
      }
    },
    "schemas": {
      "methods": {
        "insert": {
          "parameterOrder": [
            "customerId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "id": "directory.schemas.insert",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "request": {
            "$ref": "Schema"
          },
          "response": {
            "$ref": "Schema"
          },
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "description": "Create schema."
        },
        "get": {
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "description": "Retrieve schema",
          "id": "directory.schemas.get",
          "parameters": {
            "schemaKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Name or immutable ID of the schema"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          }
        },
        "list": {
          "response": {
            "$ref": "Schemas"
          },
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "description": "Retrieve all schemas for a customer",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "id": "directory.schemas.list",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ]
        },
        "delete": {
          "description": "Delete schema",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "schemaKey": {
              "description": "Name or immutable ID of the schema",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "id": "directory.schemas.delete",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "DELETE"
        },
        "update": {
          "request": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Update schema",
          "response": {
            "$ref": "Schema"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            },
            "schemaKey": {
              "required": true,
              "location": "path",
              "description": "Name or immutable ID of the schema.",
              "type": "string"
            }
          },
          "id": "directory.schemas.update",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "httpMethod": "PUT"
        },
        "patch": {
          "request": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.patch",
          "parameters": {
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "schemaKey": {
              "description": "Name or immutable ID of the schema.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "description": "Patch Schema via Apiary Patch Orchestration",
          "httpMethod": "PATCH"
        }
      }
    },
    "users": {
      "resources": {
        "photos": {
          "methods": {
            "update": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.update",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "request": {
                "$ref": "UserPhoto"
              },
              "httpMethod": "PUT",
              "description": "Add a photo for the user",
              "parameters": {
                "userKey": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Email or immutable ID of the user"
                }
              }
            },
            "delete": {
              "httpMethod": "DELETE",
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "description": "Remove photos for the user",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "id": "directory.users.photos.delete"
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "request": {
                "$ref": "UserPhoto"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Patch Photo via Apiary Patch Orchestration",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.patch",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user"
                }
              },
              "httpMethod": "PATCH"
            },
            "get": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ],
              "description": "Retrieve photo of a user",
              "id": "directory.users.photos.get",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              },
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ]
            }
          }
        },
        "aliases": {
          "methods": {
            "insert": {
              "response": {
                "$ref": "Alias"
              },
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "request": {
                "$ref": "Alias"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "parameterOrder": [
                "userKey"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "description": "Add a alias for the user",
              "httpMethod": "POST",
              "id": "directory.users.aliases.insert",
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                }
              }
            },
            "delete": {
              "id": "directory.users.aliases.delete",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "httpMethod": "DELETE",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "alias": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The alias to be removed"
                }
              },
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "description": "Remove a alias for the user"
            },
            "list": {
              "response": {
                "$ref": "Aliases"
              },
              "description": "List all aliases for a user",
              "id": "directory.users.aliases.list",
              "httpMethod": "GET",
              "parameterOrder": [
                "userKey"
              ],
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases"
            },
            "watch": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "description": "Watch for changes in users list",
              "response": {
                "$ref": "Channel"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "httpMethod": "POST",
              "parameters": {
                "event": {
                  "location": "query",
                  "description": "Event on which subscription is intended (if subscribing)",
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ]
                },
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              },
              "request": {
                "$ref": "Channel"
              },
              "id": "directory.users.aliases.watch",
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases/watch"
            }
          }
        }
      },
      "methods": {
        "insert": {
          "response": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "path": "admin/directory/v1/users",
          "request": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users",
          "description": "create user.",
          "id": "directory.users.insert"
        },
        "update": {
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "required": true
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "PUT",
          "request": {
            "$ref": "User"
          },
          "response": {
            "$ref": "User"
          },
          "description": "update user",
          "path": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.update"
        },
        "delete": {
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.delete",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "description": "Delete user",
          "path": "admin/directory/v1/users/{userKey}",
          "httpMethod": "DELETE",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the user"
            }
          }
        },
        "watch": {
          "parameters": {
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users"
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query",
              "type": "string"
            },
            "customer": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            },
            "viewType": {
              "type": "string",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "default": "admin_view",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "location": "query"
            },
            "domain": {
              "location": "query",
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\""
            },
            "event": {
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "location": "query",
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "description": "Event on which subscription is intended",
              "type": "string"
            },
            "orderBy": {
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "description": "Column to use for sorting results",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "type": "string",
              "location": "query",
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order."
            },
            "showDeleted": {
              "type": "string",
              "location": "query",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)"
            },
            "projection": {
              "description": "What subset of fields to fetch for this user.",
              "type": "string",
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ],
              "location": "query",
              "default": "basic",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ]
            },
            "maxResults": {
              "maximum": "500",
              "format": "int32",
              "location": "query",
              "minimum": "1",
              "default": "100",
              "type": "integer",
              "description": "Maximum number of results to return."
            }
          },
          "httpMethod": "POST",
          "description": "Watch for changes in users list",
          "request": {
            "$ref": "Channel"
          },
          "id": "directory.users.watch",
          "response": {
            "$ref": "Channel"
          },
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "flatPath": "admin/directory/v1/users/watch",
          "path": "admin/directory/v1/users/watch"
        },
        "makeAdmin": {
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the user as admin",
              "location": "path"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST",
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "id": "directory.users.makeAdmin",
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "description": "change admin status of a user",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "get": {
          "id": "directory.users.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "path": "admin/directory/v1/users/{userKey}",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "viewType": {
              "location": "query",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "default": "admin_view",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "type": "string"
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string",
              "location": "query"
            },
            "userKey": {
              "description": "Email or immutable ID of the user",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "projection": {
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "description": "What subset of fields to fetch for this user.",
              "location": "query",
              "default": "basic",
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "User"
          },
          "description": "retrieve user"
        },
        "patch": {
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "required": true
            }
          },
          "request": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "Patch Users via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "id": "directory.users.patch",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          }
        },
        "signOut": {
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "id": "directory.users.signOut",
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST"
        },
        "list": {
          "parameterOrder": [],
          "parameters": {
            "viewType": {
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "location": "query",
              "default": "admin_view",
              "type": "string"
            },
            "customFieldMask": {
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string"
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "type": "string",
              "location": "query"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "type": "string",
              "location": "query",
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ]
            },
            "sortOrder": {
              "type": "string",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order.",
              "location": "query"
            },
            "showDeleted": {
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "location": "query",
              "type": "string"
            },
            "query": {
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string"
            },
            "maxResults": {
              "maximum": "500",
              "location": "query",
              "default": "100",
              "format": "int32",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "type": "integer"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "location": "query"
            },
            "projection": {
              "description": "What subset of fields to fetch for this user.",
              "location": "query",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "default": "basic",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "directory.users.list",
          "flatPath": "admin/directory/v1/users",
          "response": {
            "$ref": "Users"
          },
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "path": "admin/directory/v1/users"
        },
        "undelete": {
          "id": "directory.users.undelete",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST",
          "request": {
            "$ref": "UserUndelete"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "The immutable id of the user",
              "type": "string"
            }
          },
          "description": "Undelete a deleted user",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}/undelete"
        }
      }
    },
    "orgunits": {
      "methods": {
        "get": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "httpMethod": "GET",
          "description": "Retrieve organizational unit",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            },
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "location": "path",
              "pattern": "^.*$",
              "required": true
            }
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.orgunits.get"
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "id": "directory.orgunits.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameters": {
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "location": "path",
              "type": "string",
              "required": true,
              "pattern": "^.*$"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "description": "Remove organizational unit",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}"
        },
        "update": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "description": "Update organizational unit",
          "request": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "orgUnitPath": {
              "type": "string",
              "pattern": "^.*$",
              "required": true,
              "description": "Full path of the organizational unit or its ID",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.update",
          "httpMethod": "PUT"
        },
        "patch": {
          "id": "directory.orgunits.patch",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "request": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "orgUnitPath": {
              "pattern": "^.*$",
              "required": true,
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "location": "path"
            }
          }
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "id": "directory.orgunits.list",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "GET",
          "description": "Retrieve all organizational units",
          "response": {
            "$ref": "OrgUnits"
          },
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            },
            "orgUnitPath": {
              "description": "the URL-encoded organizational unit's path or its ID",
              "default": "",
              "type": "string",
              "location": "query"
            },
            "type": {
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ],
              "location": "query",
              "description": "Whether to return all sub-organizations or just immediate children",
              "type": "string",
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ]
            }
          }
        },
        "insert": {
          "description": "Add organizational unit",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "httpMethod": "POST",
          "id": "directory.orgunits.insert",
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            }
          },
          "request": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId"
          ]
        }
      }
    },
    "domainAliases": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "description": "Lists the domain aliases of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.domainAliases.list",
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            },
            "parentDomainName": {
              "location": "query",
              "type": "string",
              "description": "Name of the parent domain for which domain aliases are to be fetched."
            }
          },
          "response": {
            "$ref": "DomainAliases"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases"
        },
        "insert": {
          "id": "directory.domainAliases.insert",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "request": {
            "$ref": "DomainAlias"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "description": "Inserts a domain alias of the customer.",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true
            }
          },
          "response": {
            "$ref": "DomainAlias"
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases"
        },
        "get": {
          "response": {
            "$ref": "DomainAlias"
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            },
            "domainAliasName": {
              "location": "path",
              "description": "Name of domain alias to be retrieved.",
              "type": "string",
              "required": true
            }
          },
          "description": "Retrieves a domain alias of the customer.",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "id": "directory.domainAliases.get"
        },
        "delete": {
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "id": "directory.domainAliases.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "httpMethod": "DELETE",
          "description": "Deletes a domain Alias of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameters": {
            "domainAliasName": {
              "description": "Name of domain alias to be retrieved.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          }
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "invalidate": {
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "description": "Invalidate the current backup verification codes for the user.",
          "id": "directory.verificationCodes.invalidate",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user",
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey"
          ]
        },
        "list": {
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "response": {
            "$ref": "VerificationCodes"
          },
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.verificationCodes.list",
          "httpMethod": "GET",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "generate": {
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "httpMethod": "POST",
          "id": "directory.verificationCodes.generate",
          "description": "Generate new backup verification codes for the user.",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        }
      }
    }
  },
  "id": "admin:directory_v1",
  "packagePath": "admin",
  "title": "Admin SDK",
  "canonicalName": "directory",
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "batchPath": "batch/admin/directory_v1",
  "protocol": "rest",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        }
      }
    }
  },
  "parameters": {
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "prettyPrint": {
      "type": "boolean",
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "alt": {
      "location": "query",
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response.",
      "default": "json"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "$.xgafv": {
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "location": "query",
      "enum": [
        "1",
        "2"
      ]
    }
  }
}
