{
  "canonicalName": "directory",
  "batchPath": "batch/admin/directory_v1",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "title": "Admin SDK",
  "resources": {
    "members": {
      "methods": {
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          },
          "request": {
            "$ref": "Member"
          },
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "id": "directory.members.patch",
          "description": "Patch Member via Apiary Patch Orchestration",
          "parameters": {
            "memberKey": {
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "type": "string",
              "location": "path"
            },
            "groupKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            }
          }
        },
        "get": {
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Retrieve Group Member",
          "parameters": {
            "memberKey": {
              "required": true,
              "description": "Email or immutable ID of the member",
              "location": "path",
              "type": "string"
            },
            "groupKey": {
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group",
              "required": true
            }
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.members.get",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          }
        },
        "update": {
          "response": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "PUT",
          "request": {
            "$ref": "Member"
          },
          "parameters": {
            "memberKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object"
            },
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.update",
          "description": "Update membership of a user in the specified group.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ]
        },
        "insert": {
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "parameters": {
            "groupKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group"
            }
          },
          "id": "directory.members.insert",
          "httpMethod": "POST",
          "parameterOrder": [
            "groupKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "description": "Add user to the specified group.",
          "request": {
            "$ref": "Member"
          },
          "response": {
            "$ref": "Member"
          }
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "memberKey": {
              "description": "Email or immutable ID of the member",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "groupKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group"
            }
          },
          "id": "directory.members.delete",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Remove membership.",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "hasMember": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "id": "directory.members.hasMember",
          "response": {
            "$ref": "MembersHasMember"
          },
          "httpMethod": "GET",
          "parameters": {
            "memberKey": {
              "location": "path",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "required": true,
              "type": "string"
            },
            "groupKey": {
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "location": "path"
            }
          },
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}"
        },
        "list": {
          "httpMethod": "GET",
          "id": "directory.members.list",
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the group"
            },
            "roles": {
              "type": "string",
              "location": "query",
              "description": "Comma separated role values to filter list results on."
            },
            "maxResults": {
              "location": "query",
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "default": "200",
              "minimum": "1",
              "type": "integer"
            },
            "includeDerivedMembership": {
              "description": "Whether to list indirect memberships. Default: false.",
              "location": "query",
              "type": "boolean"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "groupKey"
          ],
          "description": "Retrieve all members in a group (paginated)",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "response": {
            "$ref": "Members"
          }
        }
      }
    },
    "orgunits": {
      "methods": {
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "request": {
            "$ref": "OrgUnit"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "id": "directory.orgunits.insert",
          "httpMethod": "POST",
          "description": "Add organizational unit",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          }
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "description": "Retrieve all organizational units",
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "orgUnitPath": {
              "default": "",
              "type": "string",
              "location": "query",
              "description": "the URL-encoded organizational unit's path or its ID"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "type": {
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "type": "string",
              "description": "Whether to return all sub-organizations or just immediate children"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "id": "directory.orgunits.list",
          "response": {
            "$ref": "OrgUnits"
          }
        },
        "update": {
          "request": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "orgUnitPath": {
              "required": true,
              "location": "path",
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$",
              "type": "string"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "httpMethod": "PUT",
          "response": {
            "$ref": "OrgUnit"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "description": "Update organizational unit",
          "id": "directory.orgunits.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ]
        },
        "patch": {
          "httpMethod": "PATCH",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "required": true
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "request": {
            "$ref": "OrgUnit"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "id": "directory.orgunits.patch",
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "response": {
            "$ref": "OrgUnit"
          }
        },
        "delete": {
          "description": "Remove organizational unit",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.orgunits.delete",
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "required": true,
              "type": "string",
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID"
            },
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}"
        },
        "get": {
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID",
              "required": true,
              "location": "path"
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            }
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "id": "directory.orgunits.get",
          "description": "Retrieve organizational unit",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        }
      }
    },
    "roles": {
      "methods": {
        "get": {
          "description": "Retrieves a role.",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "parameters": {
            "roleId": {
              "type": "string",
              "description": "Immutable ID of the role.",
              "location": "path",
              "required": true
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.roles.get"
        },
        "list": {
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "id": "directory.roles.list",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "parameters": {
            "maxResults": {
              "minimum": "1",
              "location": "query",
              "maximum": "100",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Roles"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ]
        },
        "patch": {
          "description": "Patch role via Apiary Patch Orchestration",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "parameters": {
            "roleId": {
              "type": "string",
              "description": "Immutable ID of the role.",
              "required": true,
              "location": "path"
            },
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true
            }
          },
          "response": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.patch",
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "insert": {
          "httpMethod": "POST",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            }
          },
          "description": "Creates a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "response": {
            "$ref": "Role"
          },
          "request": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roles.insert",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "parameterOrder": [
            "customer"
          ]
        },
        "delete": {
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "roleId": {
              "location": "path",
              "description": "Immutable ID of the role.",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.delete",
          "description": "Deletes a role.",
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "update": {
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roles.update",
          "request": {
            "$ref": "Role"
          },
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "roleId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the role."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "description": "Updates a role.",
          "response": {
            "$ref": "Role"
          }
        }
      }
    },
    "customers": {
      "methods": {
        "patch": {
          "request": {
            "$ref": "Customer"
          },
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "parameters": {
            "customerKey": {
              "type": "string",
              "required": true,
              "description": "Id of the customer to be updated",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "parameterOrder": [
            "customerKey"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "description": "Patch Customers via Apiary Patch Orchestration",
          "id": "directory.customers.patch"
        },
        "get": {
          "response": {
            "$ref": "Customer"
          },
          "parameterOrder": [
            "customerKey"
          ],
          "parameters": {
            "customerKey": {
              "type": "string",
              "required": true,
              "description": "Id of the customer to be retrieved",
              "location": "path"
            }
          },
          "description": "Retrieves a customer.",
          "path": "admin/directory/v1/customers/{customerKey}",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "GET",
          "id": "directory.customers.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ]
        },
        "update": {
          "parameters": {
            "customerKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Id of the customer to be updated"
            }
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "request": {
            "$ref": "Customer"
          },
          "response": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "id": "directory.customers.update",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ],
          "description": "Updates a customer.",
          "httpMethod": "PUT"
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "httpMethod": "GET",
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Privileges"
          },
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.privileges.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ]
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "invalidate": {
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user",
              "required": true,
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "description": "Invalidate the current backup verification codes for the user.",
          "id": "directory.verificationCodes.invalidate",
          "httpMethod": "POST"
        },
        "generate": {
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Generate new backup verification codes for the user.",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the user"
            }
          },
          "id": "directory.verificationCodes.generate",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "httpMethod": "GET",
          "response": {
            "$ref": "VerificationCodes"
          },
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "id": "directory.verificationCodes.list"
        }
      }
    },
    "domainAliases": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "response": {
            "$ref": "DomainAliases"
          },
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "parentDomainName": {
              "location": "query",
              "description": "Name of the parent domain for which domain aliases are to be fetched.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "id": "directory.domainAliases.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "description": "Lists the domain aliases of the customer."
        },
        "get": {
          "parameters": {
            "domainAliasName": {
              "description": "Name of domain alias to be retrieved.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            }
          },
          "response": {
            "$ref": "DomainAlias"
          },
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "description": "Retrieves a domain alias of the customer.",
          "id": "directory.domainAliases.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}"
        },
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameters": {
            "domainAliasName": {
              "description": "Name of domain alias to be retrieved.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "id": "directory.domainAliases.delete",
          "description": "Deletes a domain Alias of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "httpMethod": "DELETE"
        },
        "insert": {
          "httpMethod": "POST",
          "id": "directory.domainAliases.insert",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          },
          "response": {
            "$ref": "DomainAlias"
          },
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "request": {
            "$ref": "DomainAlias"
          },
          "description": "Inserts a domain alias of the customer."
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "response": {
            "$ref": "RoleAssignments"
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "maxResults": {
              "format": "int32",
              "maximum": "200",
              "type": "integer",
              "description": "Maximum number of results to return.",
              "minimum": "1",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify the next page in the list."
            },
            "userKey": {
              "type": "string",
              "location": "query",
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user."
            },
            "roleId": {
              "type": "string",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "location": "query"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "id": "directory.roleAssignments.list",
          "description": "Retrieves a paginated list of all roleAssignments.",
          "parameterOrder": [
            "customer"
          ]
        },
        "delete": {
          "id": "directory.roleAssignments.delete",
          "description": "Deletes a role assignment.",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            },
            "roleAssignmentId": {
              "description": "Immutable ID of the role assignment.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "httpMethod": "DELETE"
        },
        "get": {
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "description": "Retrieve a role assignment.",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "roleAssignmentId": {
              "description": "Immutable ID of the role assignment.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "response": {
            "$ref": "RoleAssignment"
          },
          "id": "directory.roleAssignments.get",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "httpMethod": "GET"
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "request": {
            "$ref": "RoleAssignment"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "response": {
            "$ref": "RoleAssignment"
          },
          "description": "Creates a role assignment.",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "id": "directory.roleAssignments.insert",
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "POST"
        }
      }
    },
    "resources": {
      "resources": {
        "buildings": {
          "methods": {
            "insert": {
              "response": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "httpMethod": "POST",
              "request": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "coordinatesSource": {
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "type": "string",
                  "location": "query",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ]
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "description": "Inserts a building.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "id": "directory.resources.buildings.insert"
            },
            "list": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.buildings.list",
              "httpMethod": "GET",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "maxResults": {
                  "format": "int32",
                  "location": "query",
                  "minimum": "1",
                  "type": "integer",
                  "description": "Maximum number of results to return.",
                  "maximum": "500"
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Token to specify the next page in the list."
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "response": {
                "$ref": "Buildings"
              },
              "description": "Retrieves a list of buildings for an account."
            },
            "get": {
              "response": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.get",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Retrieves a building.",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the building to retrieve."
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "update": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              },
              "description": "Updates a building.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.buildings.update",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "parameters": {
                "buildingId": {
                  "location": "path",
                  "required": true,
                  "description": "The id of the building to update.",
                  "type": "string"
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                },
                "coordinatesSource": {
                  "type": "string",
                  "location": "query",
                  "default": "SOURCE_UNSPECIFIED",
                  "description": "Source from which Building.coordinates are derived.",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ]
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "PUT",
              "request": {
                "$ref": "Building"
              }
            },
            "delete": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Deletes a building.",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "buildingId": {
                  "description": "The id of the building to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.buildings.delete",
              "httpMethod": "DELETE"
            },
            "patch": {
              "httpMethod": "PATCH",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "buildingId": {
                  "description": "The id of the building to update.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "coordinatesSource": {
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "location": "query",
                  "type": "string",
                  "default": "SOURCE_UNSPECIFIED"
                },
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "request": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "description": "Patches a building via Apiary Patch Orchestration.",
              "id": "directory.resources.buildings.patch"
            }
          }
        },
        "features": {
          "methods": {
            "get": {
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a feature.",
              "response": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "location": "path",
                  "description": "The unique ID of the feature to retrieve.",
                  "type": "string",
                  "required": true
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.get"
            },
            "delete": {
              "id": "directory.resources.features.delete",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Deletes a feature.",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                },
                "featureKey": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the feature to delete."
                }
              }
            },
            "insert": {
              "parameterOrder": [
                "customer"
              ],
              "description": "Inserts a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "POST",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "response": {
                "$ref": "Feature"
              },
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                }
              },
              "request": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.insert",
              "path": "admin/directory/v1/customer/{customer}/resources/features"
            },
            "update": {
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "response": {
                "$ref": "Feature"
              },
              "request": {
                "$ref": "Feature"
              },
              "httpMethod": "PUT",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "featureKey": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the feature to update."
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "id": "directory.resources.features.update",
              "description": "Updates a feature.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "patch": {
              "id": "directory.resources.features.patch",
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "featureKey": {
                  "location": "path",
                  "description": "The unique ID of the feature to update.",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "response": {
                "$ref": "Feature"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "PATCH",
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "request": {
                "$ref": "Feature"
              }
            },
            "list": {
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Token to specify the next page in the list."
                },
                "maxResults": {
                  "minimum": "1",
                  "type": "integer",
                  "location": "query",
                  "format": "int32",
                  "maximum": "500",
                  "description": "Maximum number of results to return."
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.features.list",
              "response": {
                "$ref": "Features"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a list of features for an account.",
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/features"
            },
            "rename": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "description": "Renames a feature.",
              "parameters": {
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "oldName": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the feature to rename."
                }
              },
              "id": "directory.resources.features.rename",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "httpMethod": "POST",
              "request": {
                "$ref": "FeatureRename"
              }
            }
          }
        },
        "calendars": {
          "methods": {
            "get": {
              "httpMethod": "GET",
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID of the calendar resource to retrieve."
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "id": "directory.resources.calendars.get",
              "description": "Retrieves a calendar resource.",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameters": {
                "orderBy": {
                  "location": "query",
                  "type": "string",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order."
                },
                "query": {
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone.",
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "location": "query",
                  "minimum": "1",
                  "type": "integer",
                  "description": "Maximum number of results to return.",
                  "format": "int32",
                  "maximum": "500"
                },
                "pageToken": {
                  "type": "string",
                  "description": "Token to specify the next page in the list.",
                  "location": "query"
                },
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "response": {
                "$ref": "CalendarResources"
              },
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "description": "Retrieves a list of calendar resources for an account.",
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.calendars.list"
            },
            "insert": {
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "request": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "description": "Inserts a calendar resource.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.calendars.insert"
            },
            "update": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.update",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "parameters": {
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to update.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "PUT",
              "request": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved."
            },
            "patch": {
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the calendar resource to update."
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                }
              },
              "response": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "request": {
                "$ref": "CalendarResource"
              },
              "httpMethod": "PATCH",
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "id": "directory.resources.calendars.patch"
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "DELETE",
              "description": "Deletes a calendar resource.",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.delete",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID of the calendar resource to delete."
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "groups": {
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "description": "Remove a alias for the group",
              "id": "directory.groups.aliases.delete",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "httpMethod": "DELETE",
              "parameters": {
                "alias": {
                  "required": true,
                  "description": "The alias to be removed",
                  "type": "string",
                  "location": "path"
                },
                "groupKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the group",
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}"
            },
            "list": {
              "httpMethod": "GET",
              "parameters": {
                "groupKey": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Email or immutable ID of the group"
                }
              },
              "description": "List all aliases for a group",
              "id": "directory.groups.aliases.list",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameterOrder": [
                "groupKey"
              ],
              "response": {
                "$ref": "Aliases"
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases"
            },
            "insert": {
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameters": {
                "groupKey": {
                  "required": true,
                  "description": "Email or immutable ID of the group",
                  "location": "path",
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "id": "directory.groups.aliases.insert",
              "description": "Add a alias for the group",
              "parameterOrder": [
                "groupKey"
              ],
              "httpMethod": "POST",
              "response": {
                "$ref": "Alias"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "request": {
                "$ref": "Alias"
              }
            }
          }
        }
      },
      "methods": {
        "get": {
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.groups.get",
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "response": {
            "$ref": "Group"
          },
          "description": "Retrieve Group",
          "flatPath": "admin/directory/v1/groups/{groupKey}"
        },
        "delete": {
          "path": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "id": "directory.groups.delete",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "DELETE",
          "description": "Delete Group",
          "parameters": {
            "groupKey": {
              "required": true,
              "description": "Email or immutable ID of the group",
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "groupKey"
          ]
        },
        "patch": {
          "id": "directory.groups.patch",
          "response": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "description": "Patch Groups via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Group"
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ]
        },
        "insert": {
          "flatPath": "admin/directory/v1/groups",
          "httpMethod": "POST",
          "parameters": {},
          "id": "directory.groups.insert",
          "description": "Create Group",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "path": "admin/directory/v1/groups",
          "response": {
            "$ref": "Group"
          },
          "parameterOrder": [],
          "request": {
            "$ref": "Group"
          }
        },
        "list": {
          "parameterOrder": [],
          "id": "directory.groups.list",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "path": "admin/directory/v1/groups",
          "parameters": {
            "maxResults": {
              "minimum": "1",
              "default": "200",
              "location": "query",
              "format": "int32",
              "type": "integer",
              "description": "Maximum number of results to return. Max allowed value is 200."
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "orderBy": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "location": "query",
              "enum": [
                "orderByUndefined",
                "email"
              ],
              "description": "Column to use for sorting results"
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.",
              "type": "string",
              "location": "query"
            },
            "userKey": {
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "type": "string",
              "location": "query"
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "location": "query",
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain.",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query"
            }
          },
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "flatPath": "admin/directory/v1/groups",
          "response": {
            "$ref": "Groups"
          }
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "description": "Update Group",
          "response": {
            "$ref": "Group"
          },
          "request": {
            "$ref": "Group"
          },
          "id": "directory.groups.update",
          "parameterOrder": [
            "groupKey"
          ],
          "httpMethod": "PUT",
          "path": "admin/directory/v1/groups/{groupKey}"
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "patch": {
          "parameters": {
            "deviceId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of Chrome OS Device"
            },
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            }
          },
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "description": "Patch Chrome OS Device",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.patch"
        },
        "get": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.get",
          "description": "Retrieve Chrome OS Device",
          "parameters": {
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "type": "string",
              "location": "path",
              "required": true
            },
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "projection": {
              "type": "string",
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "httpMethod": "GET"
        },
        "moveDevicesToOu": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "parameters": {
            "orgUnitPath": {
              "required": true,
              "location": "query",
              "description": "Full path of the target organizational unit or its ID",
              "type": "string"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "httpMethod": "POST",
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu"
        },
        "list": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "id": "directory.chromeosdevices.list",
          "httpMethod": "GET",
          "parameters": {
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            },
            "orgUnitPath": {
              "type": "string",
              "description": "Full path of the organizational unit or its ID",
              "location": "query"
            },
            "query": {
              "type": "string",
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "location": "query"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "maxResults": {
              "description": "Maximum number of results to return.",
              "format": "int32",
              "default": "100",
              "location": "query",
              "type": "integer",
              "minimum": "1"
            },
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "orderBy": {
              "type": "string",
              "description": "Column to use for sorting results",
              "location": "query",
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ]
            }
          },
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "parameterOrder": [
            "customerId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "response": {
            "$ref": "ChromeOsDevices"
          }
        },
        "action": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "id": "directory.chromeosdevices.action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "parameters": {
            "resourceId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of Chrome OS Device"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "httpMethod": "POST",
          "description": "Take action on Chrome OS Device",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action"
        },
        "update": {
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "id": "directory.chromeosdevices.update",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "parameters": {
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "projection": {
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string"
            }
          },
          "description": "Update Chrome OS Device"
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "get": {
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            },
            "resourceId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of Mobile Device",
              "required": true
            },
            "projection": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields."
            }
          },
          "id": "directory.mobiledevices.get",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "description": "Retrieve Mobile Device",
          "httpMethod": "GET",
          "response": {
            "$ref": "MobileDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}"
        },
        "delete": {
          "description": "Delete Mobile Device",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "resourceId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of Mobile Device",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "id": "directory.mobiledevices.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ]
        },
        "list": {
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "response": {
            "$ref": "MobileDevices"
          },
          "httpMethod": "GET",
          "id": "directory.mobiledevices.list",
          "parameters": {
            "maxResults": {
              "default": "100",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "minimum": "1",
              "type": "integer",
              "location": "query",
              "maximum": "100",
              "format": "int32"
            },
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "query": {
              "location": "query",
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "type": "string"
            },
            "projection": {
              "type": "string",
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields."
            },
            "orderBy": {
              "type": "string",
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "description": "Column to use for sorting results",
              "location": "query",
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ]
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "parameterOrder": [
            "customerId"
          ]
        },
        "action": {
          "description": "Take action on Mobile Device",
          "httpMethod": "POST",
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "id": "directory.mobiledevices.action",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "resourceId": {
              "required": true,
              "description": "Immutable ID of Mobile Device",
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ]
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "id": "directory.twoStepVerification.turnOff",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Turn off 2-Step Verification for user.",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff"
        }
      }
    },
    "domains": {
      "methods": {
        "delete": {
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "httpMethod": "DELETE",
          "description": "Deletes a domain of the customer.",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "domainName": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Name of domain to be deleted"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domains.delete",
          "parameterOrder": [
            "customer",
            "domainName"
          ]
        },
        "insert": {
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "description": "Inserts a domain of the customer.",
          "request": {
            "$ref": "Domains"
          },
          "httpMethod": "POST",
          "response": {
            "$ref": "Domains"
          },
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains",
          "id": "directory.domains.insert"
        },
        "get": {
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "response": {
            "$ref": "Domains"
          },
          "description": "Retrieves a domain of the customer.",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "id": "directory.domains.get",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            },
            "domainName": {
              "type": "string",
              "description": "Name of domain to be retrieved",
              "required": true,
              "location": "path"
            }
          }
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "id": "directory.domains.list",
          "description": "Lists the domains of the customer.",
          "response": {
            "$ref": "Domains2"
          },
          "path": "admin/directory/v1/customer/{customer}/domains"
        }
      }
    },
    "users": {
      "resources": {
        "photos": {
          "methods": {
            "patch": {
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Patch Photo via Apiary Patch Orchestration",
              "response": {
                "$ref": "UserPhoto"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "id": "directory.users.photos.patch",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ]
            },
            "get": {
              "description": "Retrieve photo of a user",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "response": {
                "$ref": "UserPhoto"
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.get"
            },
            "delete": {
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "httpMethod": "DELETE",
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.delete",
              "description": "Remove photos for the user",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                }
              }
            },
            "update": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "response": {
                "$ref": "UserPhoto"
              },
              "id": "directory.users.photos.update",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              },
              "request": {
                "$ref": "UserPhoto"
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Add a photo for the user",
              "httpMethod": "PUT",
              "parameterOrder": [
                "userKey"
              ]
            }
          }
        },
        "aliases": {
          "methods": {
            "list": {
              "description": "List all aliases for a user",
              "response": {
                "$ref": "Aliases"
              },
              "id": "directory.users.aliases.list",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userKey"
              ]
            },
            "insert": {
              "id": "directory.users.aliases.insert",
              "response": {
                "$ref": "Alias"
              },
              "parameterOrder": [
                "userKey"
              ],
              "description": "Add a alias for the user",
              "httpMethod": "POST",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "request": {
                "$ref": "Alias"
              },
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "type": "string"
                }
              }
            },
            "watch": {
              "request": {
                "$ref": "Channel"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "id": "directory.users.aliases.watch",
              "httpMethod": "POST",
              "parameters": {
                "event": {
                  "type": "string",
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "location": "query",
                  "description": "Event on which subscription is intended (if subscribing)",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ]
                },
                "userKey": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Email or immutable ID of the user"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "response": {
                "$ref": "Channel"
              },
              "description": "Watch for changes in users list",
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ]
            },
            "delete": {
              "httpMethod": "DELETE",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "type": "string"
                },
                "alias": {
                  "type": "string",
                  "location": "path",
                  "description": "The alias to be removed",
                  "required": true
                }
              },
              "id": "directory.users.aliases.delete",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "description": "Remove a alias for the user",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ]
            }
          }
        }
      },
      "methods": {
        "update": {
          "response": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "type": "string"
            }
          },
          "description": "update user",
          "request": {
            "$ref": "User"
          },
          "httpMethod": "PUT",
          "path": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.update"
        },
        "delete": {
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/users/{userKey}",
          "description": "Delete user",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}"
        },
        "makeAdmin": {
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "parameterOrder": [
            "userKey"
          ],
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "description": "change admin status of a user",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.makeAdmin",
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user as admin",
              "type": "string"
            }
          }
        },
        "signOut": {
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "id": "directory.users.signOut",
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          }
        },
        "patch": {
          "id": "directory.users.patch",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "response": {
            "$ref": "User"
          },
          "description": "Patch Users via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "httpMethod": "PATCH",
          "request": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}"
        },
        "insert": {
          "flatPath": "admin/directory/v1/users",
          "path": "admin/directory/v1/users",
          "description": "create user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "httpMethod": "POST",
          "parameters": {},
          "response": {
            "$ref": "User"
          },
          "request": {
            "$ref": "User"
          },
          "id": "directory.users.insert",
          "parameterOrder": []
        },
        "get": {
          "description": "retrieve user",
          "response": {
            "$ref": "User"
          },
          "parameters": {
            "viewType": {
              "type": "string",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "location": "query",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "default": "admin_view",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ]
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "location": "query",
              "default": "basic",
              "type": "string",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "description": "What subset of fields to fetch for this user."
            },
            "userKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "httpMethod": "GET",
          "id": "directory.users.get",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}",
          "flatPath": "admin/directory/v1/users/{userKey}"
        },
        "watch": {
          "parameters": {
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "customFieldMask": {
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string"
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\"",
              "location": "query",
              "type": "string"
            },
            "viewType": {
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "default": "admin_view",
              "type": "string",
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "location": "query"
            },
            "event": {
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "location": "query",
              "type": "string",
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "description": "Event on which subscription is intended"
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "location": "query"
            },
            "query": {
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "location": "query"
            },
            "orderBy": {
              "location": "query",
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "type": "string",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ]
            },
            "projection": {
              "location": "query",
              "type": "string",
              "description": "What subset of fields to fetch for this user.",
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ],
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "default": "basic"
            },
            "sortOrder": {
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "type": "integer",
              "default": "100",
              "maximum": "500",
              "minimum": "1",
              "format": "int32",
              "description": "Maximum number of results to return."
            },
            "showDeleted": {
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "location": "query",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Watch for changes in users list",
          "parameterOrder": [],
          "request": {
            "$ref": "Channel"
          },
          "path": "admin/directory/v1/users/watch",
          "httpMethod": "POST",
          "id": "directory.users.watch",
          "response": {
            "$ref": "Channel"
          },
          "flatPath": "admin/directory/v1/users/watch"
        },
        "undelete": {
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.undelete",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "request": {
            "$ref": "UserUndelete"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "description": "Undelete a deleted user",
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "The immutable id of the user"
            }
          }
        },
        "list": {
          "id": "directory.users.list",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users",
          "path": "admin/directory/v1/users",
          "parameters": {
            "showDeleted": {
              "location": "query",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string"
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "description": "Maximum number of results to return.",
              "minimum": "1",
              "type": "integer",
              "maximum": "500",
              "default": "100",
              "format": "int32"
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users"
            },
            "projection": {
              "description": "What subset of fields to fetch for this user.",
              "location": "query",
              "default": "basic",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "type": "string",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ]
            },
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order.",
              "location": "query"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "viewType": {
              "location": "query",
              "default": "admin_view",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "type": "string",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user."
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "type": "string",
              "location": "query",
              "description": "Column to use for sorting results"
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameterOrder": [],
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "response": {
            "$ref": "Users"
          }
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "parameters": {},
          "httpMethod": "POST",
          "path": "admin/directory_v1/channels/stop",
          "flatPath": "admin/directory_v1/channels/stop",
          "description": "Stop watching resources through this channel.",
          "id": "admin.channels.stop",
          "request": {
            "$ref": "Channel"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameterOrder": []
        }
      }
    },
    "asps": {
      "methods": {
        "get": {
          "description": "Get information about an ASP issued by a user.",
          "response": {
            "$ref": "Asp"
          },
          "parameters": {
            "codeId": {
              "type": "integer",
              "required": true,
              "format": "int32",
              "location": "path",
              "description": "The unique ID of the ASP."
            },
            "userKey": {
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            }
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.get",
          "parameterOrder": [
            "userKey",
            "codeId"
          ]
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Delete an ASP issued by a user.",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.delete",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "parameters": {
            "codeId": {
              "format": "int32",
              "description": "The unique ID of the ASP to be deleted.",
              "required": true,
              "type": "integer",
              "location": "path"
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          }
        },
        "list": {
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps",
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            }
          },
          "description": "List the ASPs issued by a user.",
          "id": "directory.asps.list",
          "response": {
            "$ref": "Asps"
          }
        }
      }
    },
    "schemas": {
      "methods": {
        "delete": {
          "parameters": {
            "schemaKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Name or immutable ID of the schema"
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "id": "directory.schemas.delete",
          "description": "Delete schema"
        },
        "patch": {
          "id": "directory.schemas.patch",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "description": "Patch Schema via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "response": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "request": {
            "$ref": "Schema"
          },
          "parameters": {
            "schemaKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Name or immutable ID of the schema."
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        },
        "update": {
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Update schema",
          "id": "directory.schemas.update",
          "response": {
            "$ref": "Schema"
          },
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "request": {
            "$ref": "Schema"
          },
          "parameters": {
            "schemaKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Name or immutable ID of the schema."
            },
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            }
          }
        },
        "insert": {
          "parameterOrder": [
            "customerId"
          ],
          "request": {
            "$ref": "Schema"
          },
          "description": "Create schema.",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "httpMethod": "POST",
          "response": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas"
        },
        "get": {
          "response": {
            "$ref": "Schema"
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "schemaKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Name or immutable ID of the schema"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "id": "directory.schemas.get",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "description": "Retrieve schema"
        },
        "list": {
          "parameterOrder": [
            "customerId"
          ],
          "description": "Retrieve all schemas for a customer",
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            }
          },
          "httpMethod": "GET",
          "response": {
            "$ref": "Schemas"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "id": "directory.schemas.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ]
        }
      }
    },
    "tokens": {
      "methods": {
        "get": {
          "id": "directory.tokens.get",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string"
            },
            "clientId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "The Client ID of the application the token is issued to."
            }
          },
          "response": {
            "$ref": "Token"
          },
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Get information about an access token issued by a user.",
          "parameterOrder": [
            "userKey",
            "clientId"
          ]
        },
        "delete": {
          "id": "directory.tokens.delete",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "description": "Delete all access tokens issued by a user for an application.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true
            },
            "clientId": {
              "location": "path",
              "description": "The Client ID of the application the token is issued to.",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        },
        "list": {
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "httpMethod": "GET",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "Tokens"
          },
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "id": "directory.tokens.list"
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "id": "admin.customer.devices.chromeos.commands.get",
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "httpMethod": "GET",
                      "parameters": {
                        "deviceId": {
                          "type": "string",
                          "location": "path",
                          "required": true,
                          "description": "Immutable. Immutable ID of Chrome OS Device."
                        },
                        "customerId": {
                          "required": true,
                          "description": "Immutable. Immutable ID of the G Suite account.",
                          "type": "string",
                          "location": "path"
                        },
                        "commandId": {
                          "location": "path",
                          "description": "Immutable. Immutable ID of Chrome OS Device Command.",
                          "format": "int64",
                          "type": "string",
                          "required": true
                        }
                      },
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ],
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "description": "Gets command data a specific command issued to the device."
                    }
                  }
                }
              },
              "methods": {
                "issueCommand": {
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "description": "Issues a command for the device to execute.",
                  "httpMethod": "POST",
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ],
                  "parameters": {
                    "customerId": {
                      "type": "string",
                      "required": true,
                      "description": "Immutable. Immutable ID of the G Suite account.",
                      "location": "path"
                    },
                    "deviceId": {
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "description": "Immutable. Immutable ID of Chrome OS Device."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "basePath": "",
  "id": "admin:directory_v1",
  "fullyEncodeReservedExpansion": true,
  "ownerName": "Google",
  "discoveryVersion": "v1",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        }
      }
    }
  },
  "rootUrl": "https://www.googleapis.com/",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "baseUrl": "https://www.googleapis.com/",
  "schemas": {
    "UserWebsite": {
      "properties": {
        "value": {
          "type": "string",
          "description": "Website."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary website or not."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for a website entry.",
      "id": "UserWebsite"
    },
    "UserAddress": {
      "properties": {
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "poBox": {
          "type": "string",
          "description": "Other parts of address."
        },
        "streetAddress": {
          "type": "string",
          "description": "Street."
        },
        "formatted": {
          "description": "Formatted address.",
          "type": "string"
        },
        "countryCode": {
          "type": "string",
          "description": "Country code."
        },
        "region": {
          "description": "Region.",
          "type": "string"
        },
        "locality": {
          "description": "Locality.",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal code.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary address. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "extendedAddress": {
          "type": "string",
          "description": "Extended Address."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value."
        }
      },
      "type": "object",
      "id": "UserAddress",
      "description": "JSON template for address."
    },
    "UserOrganization": {
      "description": "JSON template for an organization entry.",
      "properties": {
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.",
          "type": "string"
        },
        "description": {
          "description": "Description of the organization.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If it user's primary organization."
        },
        "costCenter": {
          "type": "string",
          "description": "The cost center of the users department."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol of the organization.",
          "type": "string"
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        },
        "fullTimeEquivalent": {
          "type": "integer",
          "format": "int32",
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%)."
        },
        "name": {
          "description": "Name of the organization",
          "type": "string"
        },
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        },
        "domain": {
          "description": "The domain to which the organization belongs to.",
          "type": "string"
        }
      },
      "id": "UserOrganization",
      "type": "object"
    },
    "ChromeOsDevices": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "ChromeOsDevices",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#chromeosdevices",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "chromeosdevices": {
          "description": "List of Chrome OS Device objects.",
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "type": "array"
        }
      }
    },
    "BuildingCoordinates": {
      "type": "object",
      "properties": {
        "longitude": {
          "description": "Longitude in decimal degrees.",
          "type": "number",
          "format": "double"
        },
        "latitude": {
          "description": "Latitude in decimal degrees.",
          "format": "double",
          "type": "number"
        }
      },
      "description": "Public API: Resources.buildings",
      "id": "BuildingCoordinates"
    },
    "RoleAssignments": {
      "id": "RoleAssignments",
      "type": "object",
      "properties": {
        "items": {
          "items": {
            "$ref": "RoleAssignment"
          },
          "description": "A list of RoleAssignment resources.",
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#roleAssignments",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments ."
        },
        "nextPageToken": {
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "OrgUnits": {
      "id": "OrgUnits",
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#orgUnits",
          "description": "Kind of resource this is."
        },
        "organizationUnits": {
          "description": "List of user objects.",
          "type": "array",
          "items": {
            "$ref": "OrgUnit"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "CustomerPostalAddress": {
      "properties": {
        "addressLine3": {
          "type": "string",
          "description": "Address line 3 of the address."
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        },
        "countryCode": {
          "type": "string",
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements."
        },
        "addressLine2": {
          "type": "string",
          "description": "Address line 2 of the address."
        },
        "postalCode": {
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element.",
          "type": "string"
        },
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Name of the locality. An example of a locality value is the city of San Francisco."
        },
        "contactName": {
          "type": "string",
          "description": "The customer contact's name."
        },
        "region": {
          "type": "string",
          "description": "Name of the region. An example of a region value is NY for the state of New York."
        }
      },
      "type": "object",
      "id": "CustomerPostalAddress",
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)"
    },
    "Member": {
      "id": "Member",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of member (Immutable)"
        },
        "role": {
          "type": "string",
          "description": "Role of member"
        },
        "email": {
          "type": "string",
          "description": "Email of member (Read-only)"
        },
        "status": {
          "description": "Status of member (Immutable)",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#member",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey.",
          "type": "string"
        },
        "delivery_settings": {
          "type": "string",
          "description": "Delivery settings of member"
        }
      },
      "type": "object"
    },
    "DomainAlias": {
      "properties": {
        "domainAliasName": {
          "type": "string",
          "description": "The domain alias name."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAlias"
        },
        "verified": {
          "description": "Indicates the verification state of a domain alias. (Read-only)",
          "type": "boolean"
        },
        "creationTime": {
          "type": "string",
          "description": "The creation time of the domain alias. (Read-only).",
          "format": "int64"
        },
        "parentDomainName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer."
        }
      },
      "id": "DomainAlias",
      "type": "object"
    },
    "Roles": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Role"
          },
          "description": "A list of Role resources."
        },
        "kind": {
          "default": "admin#directory#roles",
          "description": "The type of the API resource. This is always admin#directory#roles.",
          "type": "string"
        }
      },
      "id": "Roles",
      "type": "object"
    },
    "UserLanguage": {
      "properties": {
        "customLanguage": {
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set",
          "type": "string"
        },
        "languageCode": {
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.",
          "type": "string"
        }
      },
      "description": "JSON template for a language entry.",
      "type": "object",
      "id": "UserLanguage"
    },
    "Asps": {
      "id": "Asps",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "type": "array",
          "description": "A list of ASP resources.",
          "items": {
            "$ref": "Asp"
          }
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#aspList",
          "description": "The type of the API resource. This is always admin#directory#aspList."
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "SchemaFieldSpec": {
      "id": "SchemaFieldSpec",
      "properties": {
        "readAccessType": {
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\".",
          "default": "ALL_DOMAIN_USERS",
          "type": "string"
        },
        "fieldType": {
          "description": "Type of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        },
        "fieldName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Name of the field.",
          "type": "string"
        },
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Display Name of the field.",
          "type": "string"
        },
        "multiValued": {
          "description": "Boolean specifying whether this is a multi-valued field or not.",
          "type": "boolean"
        },
        "kind": {
          "default": "admin#directory#schema#fieldspec",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "numericIndexingSpec": {
          "type": "object",
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "properties": {
            "maxValue": {
              "type": "number",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double"
            },
            "minValue": {
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double",
              "type": "number"
            }
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "fieldId": {
          "type": "string",
          "description": "Unique identifier of Field (Read-only)"
        },
        "indexed": {
          "default": "true",
          "type": "boolean",
          "description": "Boolean specifying whether the field is indexed or not."
        }
      },
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "Building": {
      "description": "Public API: Resources.buildings",
      "type": "object",
      "id": "Building",
      "properties": {
        "description": {
          "description": "A brief description of the building. For example, \"Chelsea Market\".",
          "type": "string"
        },
        "floorNames": {
          "type": "array",
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "items": {
            "type": "string"
          }
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#buildings#Building"
        },
        "address": {
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required.",
          "$ref": "BuildingAddress"
        },
        "coordinates": {
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees.",
          "$ref": "BuildingCoordinates"
        },
        "buildingName": {
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters.",
          "type": "string"
        },
        "buildingId": {
          "type": "string",
          "description": "Unique identifier for the building. The maximum length is 100 characters."
        }
      }
    },
    "Domains": {
      "type": "object",
      "id": "Domains",
      "properties": {
        "domainAliases": {
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          },
          "description": "List of domain alias objects. (Read-only)"
        },
        "creationTime": {
          "format": "int64",
          "type": "string",
          "description": "Creation time of the domain. (Read-only)."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domain",
          "description": "Kind of resource this is."
        },
        "verified": {
          "description": "Indicates the verification state of a domain. (Read-only).",
          "type": "boolean"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "domainName": {
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The domain name of the customer.",
          "type": "string"
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Indicates if the domain is a primary domain (Read-only)."
        }
      }
    },
    "MembersHasMember": {
      "type": "object",
      "properties": {
        "isMember": {
          "type": "boolean",
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "readOnly": true
        }
      },
      "description": "JSON template for Has Member response in Directory API.",
      "id": "MembersHasMember"
    },
    "Asp": {
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Asp",
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#asp",
          "description": "The type of the API resource. This is always admin#directory#asp.",
          "type": "string"
        },
        "name": {
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created.",
          "type": "string"
        },
        "codeId": {
          "type": "integer",
          "format": "int32",
          "description": "The unique ID of the ASP."
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user who issued the ASP."
        },
        "lastTimeUsed": {
          "format": "int64",
          "type": "string",
          "description": "The time when the ASP was last used. Expressed in Unix time format."
        },
        "creationTime": {
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "type": "string",
          "format": "int64"
        },
        "etag": {
          "description": "ETag of the ASP.",
          "type": "string"
        }
      }
    },
    "Schemas": {
      "properties": {
        "schemas": {
          "description": "List of UserSchema objects.",
          "items": {
            "$ref": "Schema"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#schemas"
        }
      },
      "id": "Schemas",
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "UserExternalId": {
      "type": "object",
      "id": "UserExternalId",
      "properties": {
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The value of the id."
        },
        "type": {
          "type": "string",
          "description": "The type of the Id."
        }
      },
      "description": "JSON template for an externalId entry."
    },
    "UserSshPublicKey": {
      "type": "object",
      "id": "UserSshPublicKey",
      "properties": {
        "expirationTimeUsec": {
          "description": "An expiration time in microseconds since epoch.",
          "format": "int64",
          "type": "string"
        },
        "key": {
          "type": "string",
          "description": "An SSH public key."
        },
        "fingerprint": {
          "readOnly": true,
          "type": "string",
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)"
        }
      },
      "description": "JSON template for a POSIX account entry."
    },
    "UserPosixAccount": {
      "type": "object",
      "id": "UserPosixAccount",
      "properties": {
        "operatingSystemType": {
          "description": "The operating system type for this account.",
          "type": "string"
        },
        "accountId": {
          "description": "A POSIX account field identifier.",
          "type": "string"
        },
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        },
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        },
        "gecos": {
          "description": "The GECOS (user information) for this account.",
          "type": "string"
        },
        "uid": {
          "type": "string",
          "description": "The POSIX compliant user ID.",
          "format": "uint64"
        },
        "gid": {
          "type": "string",
          "format": "uint64",
          "description": "The default group ID."
        },
        "homeDirectory": {
          "type": "string",
          "description": "The path to the home directory for this account."
        },
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary account within the SystemId."
        }
      },
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix."
    },
    "FeatureInstance": {
      "description": "JSON template for a feature instance.",
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      },
      "type": "object",
      "id": "FeatureInstance"
    },
    "RoleAssignment": {
      "properties": {
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#roleAssignment.",
          "type": "string",
          "default": "admin#directory#roleAssignment"
        },
        "roleAssignmentId": {
          "description": "ID of this roleAssignment.",
          "type": "string",
          "format": "int64"
        },
        "assignedTo": {
          "type": "string",
          "description": "The unique ID of the user this role is assigned to."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "roleId": {
          "description": "The ID of the role that is assigned.",
          "type": "string",
          "format": "int64"
        },
        "orgUnitId": {
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.",
          "type": "string"
        },
        "scopeType": {
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT ",
          "type": "string"
        }
      },
      "id": "RoleAssignment",
      "type": "object"
    },
    "Users": {
      "type": "object",
      "id": "Users",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "trigger_event": {
          "type": "string",
          "description": "Event that triggered this response (only used in case of Push Response)"
        },
        "users": {
          "type": "array",
          "description": "List of user objects.",
          "items": {
            "$ref": "User"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "kind": {
          "default": "admin#directory#users",
          "description": "Kind of resource this is.",
          "type": "string"
        }
      }
    },
    "OrgUnit": {
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "OrgUnit",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "parentOrgUnitId": {
          "type": "string",
          "description": "Id of parent OrgUnit"
        },
        "name": {
          "type": "string",
          "description": "Name of OrgUnit",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          }
        },
        "parentOrgUnitPath": {
          "type": "string",
          "description": "Path of parent OrgUnit"
        },
        "blockInheritance": {
          "type": "boolean",
          "description": "Should block inheritance"
        },
        "orgUnitPath": {
          "description": "Path of OrgUnit",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Description of OrgUnit"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#orgUnit"
        },
        "orgUnitId": {
          "description": "Id of OrgUnit",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Privilege": {
      "properties": {
        "isOuScopable": {
          "type": "boolean",
          "description": "If the privilege can be restricted to an organization unit."
        },
        "serviceName": {
          "type": "string",
          "description": "The name of the service this privilege is for."
        },
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privilege.",
          "default": "admin#directory#privilege"
        },
        "serviceId": {
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
          "type": "string"
        },
        "childPrivileges": {
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "type": "array",
          "items": {
            "$ref": "Privilege"
          }
        }
      },
      "id": "Privilege",
      "type": "object"
    },
    "CalendarResources": {
      "properties": {
        "items": {
          "items": {
            "$ref": "CalendarResource"
          },
          "description": "The CalendarResources in this page of results.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "kind": {
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList.",
          "type": "string",
          "default": "admin#directory#resources#calendars#calendarResourcesList"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "CalendarResources",
      "description": "Public API: Resources.calendars"
    },
    "UserName": {
      "type": "object",
      "id": "UserName",
      "properties": {
        "familyName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "Last Name"
        },
        "fullName": {
          "description": "Full Name",
          "type": "string"
        },
        "givenName": {
          "description": "First Name",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        }
      }
    },
    "UserEmail": {
      "id": "UserEmail",
      "properties": {
        "address": {
          "description": "Email id of the user.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "primary": {
          "description": "If this is user's primary email. Only one entry could be marked as primary.",
          "type": "boolean"
        }
      },
      "type": "object",
      "description": "JSON template for an email."
    },
    "VerificationCodes": {
      "type": "object",
      "id": "VerificationCodes",
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "items": {
            "$ref": "VerificationCode"
          },
          "description": "A list of verification code resources.",
          "type": "array"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#verificationCodesList",
          "description": "The type of the resource. This is always admin#directory#verificationCodesList."
        }
      }
    },
    "Domains2": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domains"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "domains": {
          "type": "array",
          "items": {
            "$ref": "Domains"
          },
          "description": "List of domain objects."
        }
      },
      "id": "Domains2"
    },
    "UserKeyword": {
      "type": "object",
      "properties": {
        "value": {
          "description": "Keyword.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "description": "JSON template for a keyword entry.",
      "id": "UserKeyword"
    },
    "Buildings": {
      "id": "Buildings",
      "type": "object",
      "description": "Public API: Resources.buildings",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#buildings#buildingsList",
          "description": "Kind of resource this is."
        },
        "buildings": {
          "items": {
            "$ref": "Building"
          },
          "description": "The Buildings in this page of results.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "Schema": {
      "type": "object",
      "id": "Schema",
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "schemaName": {
          "type": "string",
          "description": "Schema name",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "kind": {
          "default": "admin#directory#schema",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "displayName": {
          "type": "string",
          "description": "Display name for the schema.",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "schemaId": {
          "type": "string",
          "description": "Unique identifier of Schema (Read-only)"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "description": "Fields of Schema",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "DirectoryChromeosdevicesCommandResult": {
      "properties": {
        "executeTime": {
          "type": "string",
          "description": "The time at which the command was executed or failed to execute.",
          "format": "google-datetime"
        },
        "result": {
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ],
          "type": "string",
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "description": "The result of the command."
        },
        "errorMessage": {
          "type": "string",
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed."
        }
      },
      "id": "DirectoryChromeosdevicesCommandResult",
      "type": "object",
      "description": "The result of executing a command."
    },
    "UserPhoto": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#user#photo"
        },
        "height": {
          "type": "integer",
          "description": "Height in pixels of the photo",
          "format": "int32"
        },
        "mimeType": {
          "description": "Mime Type of the photo",
          "type": "string"
        },
        "width": {
          "format": "int32",
          "type": "integer",
          "description": "Width in pixels of the photo"
        },
        "photoData": {
          "type": "string",
          "format": "byte",
          "description": "Base64 encoded photo data",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          }
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "primaryEmail": {
          "type": "string",
          "description": "Primary email of User (Read-only)"
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "UserPhoto"
    },
    "UserAbout": {
      "id": "UserAbout",
      "properties": {
        "value": {
          "type": "string",
          "description": "Actual value of notes."
        },
        "contentType": {
          "type": "string",
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text."
        }
      },
      "description": "JSON template for About (notes) of a user in Directory API.",
      "type": "object"
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "properties": {
        "commandId": {
          "description": "The unique ID of the issued command, used to retrieve the command status.",
          "format": "int64",
          "type": "string"
        }
      },
      "description": "A response for issuing a command.",
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "type": "object"
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "type": "object",
      "properties": {
        "payload": {
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100].",
          "type": "string"
        },
        "commandType": {
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "description": "The type of command.",
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "type": "string"
        }
      },
      "description": "A request for issuing a command.",
      "id": "DirectoryChromeosdevicesIssueCommandRequest"
    },
    "ChromeOsDevice": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "cpuStatusReports": {
          "type": "array",
          "items": {
            "properties": {
              "cpuTemperatureInfo": {
                "items": {
                  "type": "object",
                  "properties": {
                    "temperature": {
                      "description": "Temperature in Celsius degrees.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "label": {
                      "type": "string",
                      "description": "CPU label"
                    }
                  }
                },
                "type": "array",
                "description": "List of CPU temperature samples."
              },
              "cpuUtilizationPercentageInfo": {
                "type": "array",
                "items": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "reportTime": {
                "description": "Date and time the report was received.",
                "type": "string",
                "format": "date-time"
              }
            },
            "type": "object"
          },
          "description": "Reports of CPU utilization and temperature (Read-only)"
        },
        "model": {
          "type": "string",
          "description": "Chromebook Model (Read-only)"
        },
        "bootMode": {
          "type": "string",
          "description": "Chromebook boot mode (Read-only)"
        },
        "lastKnownNetwork": {
          "description": "Contains last known network (Read-only)",
          "items": {
            "properties": {
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              },
              "ipAddress": {
                "description": "The IP address.",
                "type": "string"
              }
            },
            "type": "object",
            "description": "Information for an ip address."
          },
          "type": "array"
        },
        "activeTimeRanges": {
          "items": {
            "properties": {
              "date": {
                "description": "Date of usage",
                "format": "date",
                "type": "string"
              },
              "activeTime": {
                "type": "integer",
                "description": "Duration in milliseconds",
                "format": "int32"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "List of active time ranges (Read-only)"
        },
        "dockMacAddress": {
          "type": "string",
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "lastEnrollmentTime": {
          "description": "Date and time the device was last enrolled (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "deviceId": {
          "description": "Unique identifier of Chrome OS Device (Read-only)",
          "type": "string"
        },
        "tpmVersionInfo": {
          "type": "object",
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "properties": {
            "family": {
              "description": "TPM family.",
              "type": "string"
            },
            "manufacturer": {
              "description": "TPM manufacturer code.",
              "type": "string"
            },
            "firmwareVersion": {
              "type": "string",
              "description": "TPM firmware version."
            },
            "vendorSpecific": {
              "type": "string",
              "description": "Vendor-specific information such as Vendor ID."
            },
            "tpmModel": {
              "description": "TPM model number.",
              "type": "string"
            },
            "specLevel": {
              "description": "TPM specification level.",
              "type": "string"
            }
          }
        },
        "annotatedAssetId": {
          "type": "string",
          "description": "AssetId specified during enrollment or through later annotation"
        },
        "autoUpdateExpiration": {
          "type": "string",
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "format": "int64"
        },
        "ethernetMacAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)"
        },
        "diskVolumeReports": {
          "items": {
            "type": "object",
            "properties": {
              "volumeInfo": {
                "type": "array",
                "description": "Disk volumes",
                "items": {
                  "type": "object",
                  "properties": {
                    "volumeId": {
                      "description": "Volume id",
                      "type": "string"
                    },
                    "storageFree": {
                      "type": "string",
                      "format": "int64",
                      "description": "Free disk space [in bytes]"
                    },
                    "storageTotal": {
                      "type": "string",
                      "description": "Total disk space [in bytes]",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "type": "array",
          "description": "Reports of disk space and other info about mounted/connected volumes."
        },
        "annotatedUser": {
          "description": "User of the device",
          "type": "string"
        },
        "platformVersion": {
          "description": "Chromebook platform version (Read-only)",
          "type": "string"
        },
        "orderNumber": {
          "type": "string",
          "description": "Chromebook order number (Read-only)"
        },
        "systemRamTotal": {
          "type": "string",
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "format": "int64"
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "deviceFiles": {
          "type": "array",
          "description": "List of device files to download (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "description": "File type",
                "type": "string"
              },
              "createTime": {
                "type": "string",
                "description": "Date and time the file was created",
                "format": "date-time"
              },
              "name": {
                "description": "File name",
                "type": "string"
              },
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              }
            }
          }
        },
        "serialNumber": {
          "description": "Chromebook serial number (Read-only)",
          "type": "string"
        },
        "ethernetMacAddress0": {
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "macAddress": {
          "description": "Chromebook Mac Address on wifi network interface (Read-only)",
          "type": "string"
        },
        "supportEndDate": {
          "format": "date-time",
          "description": "Final date the device will be supported (Read-only)",
          "type": "string"
        },
        "status": {
          "description": "status of the device (Read-only)",
          "type": "string"
        },
        "willAutoRenew": {
          "type": "boolean",
          "description": "Will Chromebook auto renew after support end date (Read-only)"
        },
        "recentUsers": {
          "items": {
            "properties": {
              "email": {
                "description": "Email address of the user. Present only if the user type is managed",
                "type": "string"
              },
              "type": {
                "type": "string",
                "description": "The type of the user"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "List of recent device users, in descending order by last login time (Read-only)"
        },
        "manufactureDate": {
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
          "type": "string"
        },
        "systemRamFreeReports": {
          "items": {
            "properties": {
              "reportTime": {
                "description": "Date and time the report was received.",
                "type": "string",
                "format": "date-time"
              },
              "systemRamFreeInfo": {
                "type": "array",
                "items": {
                  "format": "int64",
                  "type": "string"
                }
              }
            },
            "type": "object"
          },
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "type": "array"
        },
        "meid": {
          "type": "string",
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#chromeosdevice",
          "type": "string"
        },
        "annotatedLocation": {
          "type": "string",
          "description": "Address or location of the device as noted by the administrator"
        },
        "osVersion": {
          "type": "string",
          "description": "Chromebook Os Version (Read-only)"
        },
        "firmwareVersion": {
          "description": "Chromebook firmware version (Read-only)",
          "type": "string"
        },
        "notes": {
          "description": "Notes added by the administrator",
          "type": "string"
        },
        "orgUnitPath": {
          "description": "OrgUnit of the device",
          "type": "string"
        }
      },
      "id": "ChromeOsDevice",
      "type": "object"
    },
    "UserMakeAdmin": {
      "properties": {
        "status": {
          "type": "boolean",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "description": "Boolean indicating new admin status of the user"
        }
      },
      "id": "UserMakeAdmin",
      "type": "object"
    },
    "Customer": {
      "id": "Customer",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "customerCreationTime": {
          "format": "date-time",
          "description": "The customer's creation time (Readonly)",
          "type": "string"
        },
        "customerDomain": {
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer.",
          "type": "string"
        },
        "postalAddress": {
          "description": "The customer's postal address information.",
          "$ref": "CustomerPostalAddress"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain"
        },
        "kind": {
          "description": "Identifies the resource as a customer. Value: admin#directory#customer",
          "type": "string",
          "default": "admin#directory#customer"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The customer's contact phone number in E.164 format."
        },
        "id": {
          "type": "string",
          "description": "The unique ID for the customer's G Suite account. (Readonly)"
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. The default value is en-US",
          "type": "string"
        }
      }
    },
    "UserIm": {
      "properties": {
        "im": {
          "type": "string",
          "description": "Instant messenger id."
        },
        "protocol": {
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary im. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "customProtocol": {
          "description": "Custom protocol.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value."
        }
      },
      "id": "UserIm",
      "description": "JSON template for instant messenger of an user.",
      "type": "object"
    },
    "Features": {
      "type": "object",
      "id": "Features",
      "description": "Public API: Resources.features",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "features": {
          "description": "The Features in this page of results.",
          "type": "array",
          "items": {
            "$ref": "Feature"
          }
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#featuresList"
        }
      }
    },
    "Members": {
      "type": "object",
      "id": "Members",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#members",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "Member"
          },
          "description": "List of member objects."
        }
      }
    },
    "Feature": {
      "type": "object",
      "description": "JSON template for Feature object in Directory API.",
      "properties": {
        "name": {
          "description": "The name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "type": "string"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#features#Feature",
          "description": "Kind of resource this is."
        }
      },
      "id": "Feature"
    },
    "Channel": {
      "id": "Channel",
      "type": "object",
      "properties": {
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "type": "object"
        },
        "kind": {
          "type": "string",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "default": "api#channel"
        },
        "id": {
          "description": "A UUID or similar unique string that identifies this channel.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "payload": {
          "type": "boolean",
          "description": "A Boolean value to indicate whether payload is wanted. Optional."
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        },
        "resourceId": {
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.",
          "type": "string"
        },
        "token": {
          "type": "string",
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional."
        },
        "expiration": {
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "format": "int64",
          "type": "string"
        }
      },
      "description": "An notification channel used to watch for resource changes."
    },
    "Tokens": {
      "properties": {
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#tokenList.",
          "type": "string",
          "default": "admin#directory#tokenList"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "Token"
          },
          "description": "A list of Token resources.",
          "type": "array"
        }
      },
      "id": "Tokens",
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "UserRelation": {
      "description": "JSON template for a relation entry.",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The name of the relation."
        }
      },
      "id": "UserRelation",
      "type": "object"
    },
    "ChromeOsDeviceAction": {
      "properties": {
        "deprovisionReason": {
          "type": "string"
        },
        "action": {
          "description": "Action to be taken on the ChromeOs Device",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "type": "string"
        }
      },
      "type": "object",
      "id": "ChromeOsDeviceAction"
    },
    "MobileDeviceAction": {
      "id": "MobileDeviceAction",
      "properties": {
        "action": {
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          },
          "type": "string",
          "description": "Action to be taken on the Mobile Device"
        }
      },
      "type": "object"
    },
    "Role": {
      "type": "object",
      "id": "Role",
      "properties": {
        "roleName": {
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "string",
          "description": "Name of the role."
        },
        "roleDescription": {
          "type": "string",
          "description": "A short description of the role."
        },
        "rolePrivileges": {
          "items": {
            "type": "object",
            "properties": {
              "serviceId": {
                "type": "string",
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
              },
              "privilegeName": {
                "type": "string",
                "description": "The name of the privilege."
              }
            }
          },
          "type": "array",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "description": "The set of privileges that are granted to this role."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "isSystemRole": {
          "description": "Returns true if this is a pre-defined system role.",
          "type": "boolean"
        },
        "roleId": {
          "format": "int64",
          "type": "string",
          "description": "ID of the role."
        },
        "isSuperAdminRole": {
          "type": "boolean",
          "description": "Returns true if the role is a super admin role."
        },
        "kind": {
          "default": "admin#directory#role",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#role."
        }
      }
    },
    "DirectoryChromeosdevicesCommand": {
      "type": "object",
      "id": "DirectoryChromeosdevicesCommand",
      "properties": {
        "state": {
          "description": "Indicates the command state.",
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ],
          "type": "string"
        },
        "commandExpireTime": {
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.",
          "format": "google-datetime",
          "type": "string"
        },
        "issueTime": {
          "description": "The timestamp when the command was issued by the admin.",
          "type": "string",
          "format": "google-datetime"
        },
        "commandResult": {
          "$ref": "DirectoryChromeosdevicesCommandResult",
          "description": "The result of the command execution."
        },
        "type": {
          "description": "The type of the command.",
          "type": "string",
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ]
        },
        "payload": {
          "type": "string",
          "description": "The payload that the command specified, if any."
        },
        "commandId": {
          "description": "Unique ID of a device command.",
          "type": "string",
          "format": "int64"
        }
      },
      "description": "Information regarding a command that was issued to a device."
    },
    "UserCustomProperties": {
      "additionalProperties": {
        "type": "any"
      },
      "type": "object",
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "id": "UserCustomProperties"
    },
    "UserUndelete": {
      "id": "UserUndelete",
      "type": "object",
      "properties": {
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        }
      }
    },
    "Alias": {
      "id": "Alias",
      "description": "JSON template for Alias object in Directory API.",
      "properties": {
        "primaryEmail": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#alias",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CalendarResource": {
      "description": "Public API: Resources.calendars",
      "type": "object",
      "properties": {
        "userVisibleDescription": {
          "type": "string",
          "description": "Description of the resource, visible to users and admins."
        },
        "floorName": {
          "type": "string",
          "description": "Name of the floor a resource is located on."
        },
        "buildingId": {
          "type": "string",
          "description": "Unique ID for the building a resource is located in."
        },
        "resourceName": {
          "type": "string",
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          }
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "resourceEmail": {
          "type": "string",
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource."
        },
        "capacity": {
          "description": "Capacity of a resource, number of seats in a room.",
          "type": "integer",
          "format": "int32"
        },
        "resourceCategory": {
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.",
          "type": "string"
        },
        "resourceType": {
          "description": "The type of the calendar resource, intended for non-room resources.",
          "type": "string"
        },
        "floorSection": {
          "type": "string",
          "description": "Name of the section within a floor a resource is located in."
        },
        "featureInstances": {
          "description": "Instances of features for the calendar resource.",
          "type": "any"
        },
        "generatedResourceName": {
          "type": "string",
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\"."
        },
        "kind": {
          "default": "admin#directory#resources#calendars#CalendarResource",
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "description": "The unique ID for the calendar resource."
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        }
      },
      "id": "CalendarResource"
    },
    "Privileges": {
      "type": "object",
      "id": "Privileges",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "Privilege"
          },
          "description": "A list of Privilege resources."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "type": "string",
          "default": "admin#directory#privileges"
        }
      }
    },
    "FeatureRename": {
      "type": "object",
      "properties": {
        "newName": {
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          },
          "description": "New name of the feature.",
          "type": "string"
        }
      },
      "id": "FeatureRename"
    },
    "Token": {
      "type": "object",
      "properties": {
        "anonymous": {
          "type": "boolean",
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID."
        },
        "userKey": {
          "description": "The unique ID of the user that issued the token.",
          "type": "string"
        },
        "displayText": {
          "type": "string",
          "description": "The displayable name of the application the token is issued to."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "scopes": {
          "description": "A list of authorization scopes the application is granted.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nativeApp": {
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device.",
          "type": "boolean"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#token.",
          "type": "string",
          "default": "admin#directory#token"
        },
        "clientId": {
          "description": "The Client ID of the application the token is issued to.",
          "type": "string"
        }
      },
      "id": "Token",
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "VerificationCode": {
      "id": "VerificationCode",
      "type": "object",
      "properties": {
        "verificationCode": {
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#verificationCode",
          "description": "The type of the resource. This is always admin#directory#verificationCode."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "userId": {
          "type": "string",
          "description": "The obfuscated unique ID of the user."
        }
      },
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Aliases": {
      "description": "JSON response template to list aliases in Directory API.",
      "type": "object",
      "properties": {
        "aliases": {
          "items": {
            "type": "any"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#aliases"
        },
        "etag": {
          "type": "string"
        }
      },
      "id": "Aliases"
    },
    "UserPhone": {
      "id": "UserPhone",
      "properties": {
        "value": {
          "type": "string",
          "description": "Phone number."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary phone or not."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "description": "JSON template for a phone entry.",
      "type": "object"
    },
    "UserLocation": {
      "type": "object",
      "id": "UserLocation",
      "properties": {
        "buildingId": {
          "description": "Building Identifier.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "floorName": {
          "description": "Floor name/number.",
          "type": "string"
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.",
          "type": "string"
        },
        "floorSection": {
          "type": "string",
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values."
        },
        "deskCode": {
          "type": "string",
          "description": "Most specific textual code of individual desk location."
        }
      },
      "description": "JSON template for a location entry."
    },
    "BuildingAddress": {
      "id": "BuildingAddress",
      "type": "object",
      "properties": {
        "addressLines": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unstructured address lines describing the lower levels of an address."
        },
        "locality": {
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.",
          "type": "string"
        },
        "languageCode": {
          "description": "Optional. BCP-47 language code of the contents of this address (if known).",
          "type": "string"
        },
        "postalCode": {
          "type": "string",
          "description": "Optional. Postal code of the address."
        },
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        },
        "sublocality": {
          "description": "Optional. Sublocality of the address.",
          "type": "string"
        },
        "administrativeArea": {
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region.",
          "type": "string"
        }
      },
      "description": "Public API: Resources.buildings"
    },
    "MobileDevices": {
      "id": "MobileDevices",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "mobiledevices": {
          "type": "array",
          "description": "List of Mobile Device objects.",
          "items": {
            "$ref": "MobileDevice"
          }
        },
        "kind": {
          "default": "admin#directory#mobiledevices",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        }
      },
      "type": "object"
    },
    "Group": {
      "properties": {
        "adminCreated": {
          "type": "boolean",
          "description": "Is the group created by admin (Read-only) *"
        },
        "name": {
          "type": "string",
          "description": "Group name"
        },
        "description": {
          "type": "string",
          "description": "Description of the group"
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of aliases (Read-only)"
        },
        "nonEditableAliases": {
          "items": {
            "type": "string"
          },
          "description": "List of non editable aliases (Read-only)",
          "type": "array"
        },
        "email": {
          "description": "Email of Group",
          "type": "string",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          }
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of Group (Read-only)"
        },
        "directMembersCount": {
          "format": "int64",
          "type": "string",
          "description": "Group direct members count"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#group",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Group",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Groups": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Groups",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#groups"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "groups": {
          "description": "List of group objects.",
          "type": "array",
          "items": {
            "$ref": "Group"
          }
        }
      }
    },
    "UserGender": {
      "type": "object",
      "properties": {
        "addressMeAs": {
          "type": "string",
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their."
        },
        "customGender": {
          "type": "string",
          "description": "Custom gender."
        },
        "type": {
          "description": "Gender.",
          "type": "string"
        }
      },
      "id": "UserGender"
    },
    "User": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "id": "User",
      "type": "object",
      "properties": {
        "locations": {
          "description": "Locations of User",
          "type": "any"
        },
        "phones": {
          "description": "Phone numbers of User",
          "type": "any"
        },
        "creationTime": {
          "description": "User's G Suite account creation time. (Read-only)",
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        },
        "name": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's name",
          "$ref": "UserName"
        },
        "suspended": {
          "description": "Indicates if user is suspended.",
          "type": "boolean"
        },
        "archived": {
          "type": "boolean",
          "description": "Indicates if user is archived."
        },
        "isEnforcedIn2Sv": {
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "isDelegatedAdmin": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)"
        },
        "externalIds": {
          "type": "any",
          "description": "The external Ids of User *"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "kind": {
          "default": "admin#directory#user",
          "description": "Output only. Kind of resource this is.",
          "type": "string",
          "readOnly": true
        },
        "customerId": {
          "description": "Output only. CustomerId of User (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "keywords": {
          "description": "Keywords of User",
          "type": "any"
        },
        "organizations": {
          "description": "Organizations of User",
          "type": "any"
        },
        "thumbnailPhotoEtag": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. ETag of the user's photo (Read-only)"
        },
        "relations": {
          "description": "The Relations of User *",
          "type": "any"
        },
        "nonEditableAliases": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          },
          "description": "Output only. List of non editable aliases (Read-only)"
        },
        "emails": {
          "description": "Emails of User",
          "type": "any"
        },
        "isEnrolledIn2Sv": {
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "isAdmin": {
          "type": "boolean",
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "readOnly": true
        },
        "notes": {
          "description": "Notes of User",
          "type": "any"
        },
        "posixAccounts": {
          "type": "any",
          "description": "The POSIX accounts of User"
        },
        "sshPublicKeys": {
          "type": "any",
          "description": "The SSH public keys of User"
        },
        "etag": {
          "readOnly": true,
          "description": "Output only. ETag of the resource.",
          "type": "string"
        },
        "customSchemas": {
          "type": "object",
          "description": "Custom fields of the user.",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          }
        },
        "lastLoginTime": {
          "description": "User's last login time. (Read-only)",
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "hashFunction": {
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt",
          "type": "string"
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "Boolean indicating if ip is whitelisted"
        },
        "suspensionReason": {
          "description": "Output only. Suspension reason if user is suspended (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "recoveryPhone": {
          "type": "string",
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*."
        },
        "recoveryEmail": {
          "type": "string",
          "description": "Recovery email of the user."
        },
        "addresses": {
          "description": "Addresses of User",
          "type": "any"
        },
        "deletionTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        },
        "ims": {
          "description": "User's Instant Messenger",
          "type": "any"
        },
        "languages": {
          "description": "Languages of User",
          "type": "any"
        },
        "includeInGlobalAddressList": {
          "type": "boolean",
          "description": "Boolean indicating if user is included in Global Address List"
        },
        "aliases": {
          "description": "Output only. List of aliases (Read-only)",
          "readOnly": true,
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isMailboxSetup": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Is mailbox setup (Read-only)"
        },
        "gender": {
          "type": "any",
          "description": "Gender of User"
        },
        "thumbnailPhotoUrl": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Photo Url of the user (Read-only)"
        },
        "agreedToTerms": {
          "description": "Output only. Indicates if user has agreed to terms (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "password": {
          "description": "User's password",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string"
        },
        "changePasswordAtNextLogin": {
          "type": "boolean",
          "description": "Boolean indicating if the user should change password in next login"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        },
        "websites": {
          "description": "Websites of User",
          "type": "any"
        },
        "primaryEmail": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "username of User",
          "type": "string"
        }
      }
    },
    "DomainAliases": {
      "type": "object",
      "properties": {
        "domainAliases": {
          "description": "List of domain alias objects.",
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          }
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAliases",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "DomainAliases"
    },
    "ChromeOsMoveDevicesToOu": {
      "properties": {
        "deviceIds": {
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "description": "ChromeOs Devices to be moved to OU",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "id": "ChromeOsMoveDevicesToOu"
    },
    "MobileDevice": {
      "id": "MobileDevice",
      "type": "object",
      "properties": {
        "deviceId": {
          "description": "Mobile Device serial number (Read-only)",
          "type": "string"
        },
        "lastSync": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "applications": {
          "type": "array",
          "items": {
            "properties": {
              "versionName": {
                "description": "Version name of application",
                "type": "string"
              },
              "permission": {
                "type": "array",
                "description": "List of Permissions for application",
                "items": {
                  "type": "string"
                }
              },
              "packageName": {
                "description": "Package name of application",
                "type": "string"
              },
              "versionCode": {
                "type": "integer",
                "format": "int32",
                "description": "Version code of application"
              },
              "displayName": {
                "type": "string",
                "description": "Display name of application"
              }
            },
            "type": "object"
          },
          "description": "List of applications installed on Mobile Device"
        },
        "buildNumber": {
          "description": "Mobile Device Build number (Read-only)",
          "type": "string"
        },
        "manufacturer": {
          "type": "string",
          "description": "Mobile Device manufacturer (Read-only)"
        },
        "meid": {
          "type": "string",
          "description": "Mobile Device MEID number (Read-only)"
        },
        "name": {
          "description": "List of owner user's names (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "firstSync": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "os": {
          "description": "Name of the mobile operating system",
          "type": "string"
        },
        "imei": {
          "description": "Mobile Device IMEI number (Read-only)",
          "type": "string"
        },
        "email": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of owner user's email addresses (Read-only)"
        },
        "networkOperator": {
          "description": "Mobile Device mobile or network operator (if available) (Read-only)",
          "type": "string"
        },
        "encryptionStatus": {
          "type": "string",
          "description": "Mobile Device Encryption Status (Read-only)"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#mobiledevice",
          "description": "Kind of resource this is."
        },
        "wifiMacAddress": {
          "type": "string",
          "description": "Mobile Device WiFi MAC address (Read-only)"
        },
        "bootloaderVersion": {
          "description": "Mobile Device Bootloader version (Read-only)",
          "type": "string"
        },
        "releaseVersion": {
          "type": "string",
          "description": "Mobile Device release version version (Read-only)"
        },
        "basebandVersion": {
          "description": "Mobile Device Baseband version (Read-only)",
          "type": "string"
        },
        "userAgent": {
          "description": "Mobile Device user agent",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "hardwareId": {
          "description": "Mobile Device Hardware Id (Read-only)",
          "type": "string"
        },
        "managedAccountIsOnOwnerProfile": {
          "type": "boolean",
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)"
        },
        "unknownSourcesStatus": {
          "type": "boolean",
          "description": "Unknown sources enabled or disabled on device (Read-only)"
        },
        "type": {
          "type": "string",
          "description": "The type of device (Read-only)"
        },
        "status": {
          "type": "string",
          "description": "Status of the device (Read-only)"
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "otherAccountsInfo": {
          "type": "array",
          "description": "List of accounts added on device (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "adbStatus": {
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "defaultLanguage": {
          "description": "The default locale used on the Mobile Device (Read-only)",
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "description": "Unique identifier of Mobile Device (Read-only)"
        },
        "model": {
          "type": "string",
          "description": "Name of the model of the device"
        },
        "deviceCompromisedStatus": {
          "type": "string",
          "description": "Mobile Device compromised status (Read-only)"
        },
        "devicePasswordStatus": {
          "type": "string",
          "description": "DevicePasswordStatus (Read-only)"
        },
        "privilege": {
          "type": "string",
          "description": "DMAgentPermission (Read-only)"
        },
        "serialNumber": {
          "type": "string",
          "description": "Mobile Device SSN or Serial Number (Read-only)"
        },
        "brand": {
          "description": "Mobile Device Brand (Read-only)",
          "type": "string"
        },
        "securityPatchLevel": {
          "format": "int64",
          "type": "string",
          "description": "Mobile Device Security patch level (Read-only)"
        },
        "kernelVersion": {
          "description": "Mobile Device Kernel version (Read-only)",
          "type": "string"
        },
        "supportsWorkProfile": {
          "description": "Work profile supported on device (Read-only)",
          "type": "boolean"
        }
      }
    }
  },
  "name": "admin",
  "parameters": {
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true",
      "location": "query"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string"
    },
    "alt": {
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "description": "Data format for response.",
      "location": "query"
    }
  },
  "servicePath": "",
  "packagePath": "admin",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "ownerDomain": "google.com",
  "protocol": "rest",
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "revision": "20201013",
  "version": "directory_v1",
  "kind": "discovery#restDescription"
}
