{
  "protocol": "rest",
  "fullyEncodeReservedExpansion": true,
  "canonicalName": "directory",
  "schemas": {
    "RoleAssignment": {
      "type": "object",
      "id": "RoleAssignment",
      "properties": {
        "roleId": {
          "description": "The ID of the role that is assigned.",
          "format": "int64",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "assignedTo": {
          "type": "string",
          "description": "The unique ID of the user this role is assigned to."
        },
        "roleAssignmentId": {
          "format": "int64",
          "type": "string",
          "description": "ID of this roleAssignment."
        },
        "scopeType": {
          "type": "string",
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT "
        },
        "orgUnitId": {
          "type": "string",
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to."
        },
        "kind": {
          "default": "admin#directory#roleAssignment",
          "description": "The type of the API resource. This is always admin#directory#roleAssignment.",
          "type": "string"
        }
      }
    },
    "DomainAlias": {
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#domainAlias",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "domainAliasName": {
          "description": "The domain alias name.",
          "type": "string"
        },
        "verified": {
          "description": "Indicates the verification state of a domain alias. (Read-only)",
          "type": "boolean"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "parentDomainName": {
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        },
        "creationTime": {
          "format": "int64",
          "type": "string",
          "description": "The creation time of the domain alias. (Read-only)."
        }
      },
      "id": "DomainAlias"
    },
    "Privileges": {
      "id": "Privileges",
      "properties": {
        "kind": {
          "default": "admin#directory#privileges",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privileges."
        },
        "items": {
          "items": {
            "$ref": "Privilege"
          },
          "type": "array",
          "description": "A list of Privilege resources."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserExternalId": {
      "type": "object",
      "description": "JSON template for an externalId entry.",
      "id": "UserExternalId",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the Id."
        },
        "value": {
          "description": "The value of the id.",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        }
      }
    },
    "Aliases": {
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#aliases"
        },
        "etag": {
          "type": "string"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        }
      },
      "type": "object",
      "id": "Aliases",
      "description": "JSON response template to list aliases in Directory API."
    },
    "Group": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#group",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "email": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "description": "Email of Group"
        },
        "adminCreated": {
          "type": "boolean",
          "description": "Is the group created by admin (Read-only) *"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        },
        "aliases": {
          "description": "List of aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of Group (Read-only)"
        },
        "description": {
          "description": "Description of the group",
          "type": "string"
        },
        "nonEditableAliases": {
          "items": {
            "type": "string"
          },
          "description": "List of non editable aliases (Read-only)",
          "type": "array"
        },
        "directMembersCount": {
          "format": "int64",
          "description": "Group direct members count",
          "type": "string"
        }
      },
      "id": "Group",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Groups": {
      "id": "Groups",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "Group"
          },
          "description": "List of group objects."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#groups"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "ChromeOsMoveDevicesToOu": {
      "id": "ChromeOsMoveDevicesToOu",
      "properties": {
        "deviceIds": {
          "items": {
            "type": "string"
          },
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "description": "ChromeOs Devices to be moved to OU",
          "type": "array"
        }
      },
      "type": "object"
    },
    "User": {
      "type": "object",
      "id": "User",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "externalIds": {
          "description": "The external Ids of User *",
          "type": "any"
        },
        "isEnforcedIn2Sv": {
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "addresses": {
          "description": "Addresses of User",
          "type": "any"
        },
        "thumbnailPhotoUrl": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Photo Url of the user (Read-only)"
        },
        "agreedToTerms": {
          "type": "boolean",
          "description": "Output only. Indicates if user has agreed to terms (Read-only)",
          "readOnly": true
        },
        "customSchemas": {
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          },
          "description": "Custom fields of the user.",
          "type": "object"
        },
        "primaryEmail": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "username of User",
          "type": "string"
        },
        "recoveryPhone": {
          "type": "string",
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*."
        },
        "relations": {
          "type": "any",
          "description": "The Relations of User *"
        },
        "isMailboxSetup": {
          "description": "Output only. Is mailbox setup (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "customerId": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. CustomerId of User (Read-only)"
        },
        "suspended": {
          "description": "Indicates if user is suspended.",
          "type": "boolean"
        },
        "locations": {
          "type": "any",
          "description": "Locations of User"
        },
        "ims": {
          "type": "any",
          "description": "User's Instant Messenger"
        },
        "creationTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "User's G Suite account creation time. (Read-only)"
        },
        "archived": {
          "type": "boolean",
          "description": "Indicates if user is archived."
        },
        "organizations": {
          "description": "Organizations of User",
          "type": "any"
        },
        "changePasswordAtNextLogin": {
          "description": "Boolean indicating if the user should change password in next login",
          "type": "boolean"
        },
        "websites": {
          "description": "Websites of User",
          "type": "any"
        },
        "password": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's password"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        },
        "sshPublicKeys": {
          "type": "any",
          "description": "The SSH public keys of User"
        },
        "etag": {
          "type": "string",
          "description": "Output only. ETag of the resource.",
          "readOnly": true
        },
        "aliases": {
          "readOnly": true,
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Output only. List of aliases (Read-only)"
        },
        "deletionTime": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "nonEditableAliases": {
          "readOnly": true,
          "type": "array",
          "description": "Output only. List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "posixAccounts": {
          "type": "any",
          "description": "The POSIX accounts of User"
        },
        "includeInGlobalAddressList": {
          "description": "Boolean indicating if user is included in Global Address List",
          "type": "boolean"
        },
        "name": {
          "description": "User's name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "$ref": "UserName"
        },
        "isAdmin": {
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "type": "boolean"
        },
        "languages": {
          "type": "any",
          "description": "Languages of User"
        },
        "hashFunction": {
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt",
          "type": "string"
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "Boolean indicating if ip is whitelisted"
        },
        "keywords": {
          "description": "Keywords of User",
          "type": "any"
        },
        "isDelegatedAdmin": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)"
        },
        "thumbnailPhotoEtag": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. ETag of the user's photo (Read-only)"
        },
        "isEnrolledIn2Sv": {
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "phones": {
          "type": "any",
          "description": "Phone numbers of User"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "notes": {
          "type": "any",
          "description": "Notes of User"
        },
        "suspensionReason": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Suspension reason if user is suspended (Read-only)"
        },
        "lastLoginTime": {
          "readOnly": true,
          "format": "date-time",
          "type": "string",
          "description": "User's last login time. (Read-only)"
        },
        "kind": {
          "default": "admin#directory#user",
          "readOnly": true,
          "type": "string",
          "description": "Output only. Kind of resource this is."
        },
        "emails": {
          "type": "any",
          "description": "Emails of User"
        },
        "gender": {
          "type": "any",
          "description": "Gender of User"
        },
        "recoveryEmail": {
          "type": "string",
          "description": "Recovery email of the user."
        }
      }
    },
    "Tokens": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#tokenList",
          "description": "The type of the API resource. This is always admin#directory#tokenList."
        },
        "items": {
          "items": {
            "$ref": "Token"
          },
          "type": "array",
          "description": "A list of Token resources."
        }
      },
      "id": "Tokens",
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserPhoto": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "UserPhoto",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#user#photo"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "primaryEmail": {
          "description": "Primary email of User (Read-only)",
          "type": "string"
        },
        "mimeType": {
          "type": "string",
          "description": "Mime Type of the photo"
        },
        "photoData": {
          "format": "byte",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "type": "string",
          "description": "Base64 encoded photo data"
        },
        "width": {
          "description": "Width in pixels of the photo",
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "format": "int32",
          "type": "integer",
          "description": "Height in pixels of the photo"
        }
      }
    },
    "VerificationCodes": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "VerificationCode"
          },
          "description": "A list of verification code resources."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCodesList.",
          "type": "string",
          "default": "admin#directory#verificationCodesList"
        }
      },
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "VerificationCodes"
    },
    "Asp": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created."
        },
        "etag": {
          "description": "ETag of the ASP.",
          "type": "string"
        },
        "creationTime": {
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "format": "int64",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#asp",
          "description": "The type of the API resource. This is always admin#directory#asp.",
          "type": "string"
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user who issued the ASP."
        },
        "codeId": {
          "format": "int32",
          "description": "The unique ID of the ASP.",
          "type": "integer"
        },
        "lastTimeUsed": {
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "Asp",
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "CalendarResource": {
      "id": "CalendarResource",
      "description": "Public API: Resources.calendars",
      "type": "object",
      "properties": {
        "floorName": {
          "type": "string",
          "description": "Name of the floor a resource is located on."
        },
        "capacity": {
          "description": "Capacity of a resource, number of seats in a room.",
          "format": "int32",
          "type": "integer"
        },
        "resourceName": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "type": "string"
        },
        "resourceEmail": {
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#calendars#CalendarResource",
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource."
        },
        "generatedResourceName": {
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\".",
          "type": "string"
        },
        "resourceCategory": {
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.",
          "type": "string"
        },
        "resourceId": {
          "description": "The unique ID for the calendar resource.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          }
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        },
        "featureInstances": {
          "description": "Instances of features for the calendar resource.",
          "type": "any"
        },
        "resourceType": {
          "description": "The type of the calendar resource, intended for non-room resources.",
          "type": "string"
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "buildingId": {
          "description": "Unique ID for the building a resource is located in.",
          "type": "string"
        },
        "floorSection": {
          "description": "Name of the section within a floor a resource is located in.",
          "type": "string"
        }
      }
    },
    "ChromeOsDeviceAction": {
      "type": "object",
      "properties": {
        "action": {
          "description": "Action to be taken on the ChromeOs Device",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "type": "string"
        },
        "deprovisionReason": {
          "type": "string"
        }
      },
      "id": "ChromeOsDeviceAction"
    },
    "Features": {
      "type": "object",
      "properties": {
        "features": {
          "type": "array",
          "description": "The Features in this page of results.",
          "items": {
            "$ref": "Feature"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#featuresList",
          "type": "string"
        }
      },
      "description": "Public API: Resources.features",
      "id": "Features"
    },
    "UserAbout": {
      "type": "object",
      "id": "UserAbout",
      "properties": {
        "value": {
          "description": "Actual value of notes.",
          "type": "string"
        },
        "contentType": {
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.",
          "type": "string"
        }
      },
      "description": "JSON template for About (notes) of a user in Directory API."
    },
    "Schemas": {
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#schemas",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "schemas": {
          "type": "array",
          "description": "List of UserSchema objects.",
          "items": {
            "$ref": "Schema"
          }
        }
      },
      "id": "Schemas"
    },
    "Channel": {
      "type": "object",
      "properties": {
        "params": {
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "expiration": {
          "format": "int64",
          "type": "string",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional."
        },
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "payload": {
          "description": "A Boolean value to indicate whether payload is wanted. Optional.",
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "description": "A UUID or similar unique string that identifies this channel."
        },
        "token": {
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "api#channel",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\"."
        },
        "address": {
          "type": "string",
          "description": "The address where notifications are delivered for this channel."
        },
        "resourceId": {
          "type": "string",
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions."
        },
        "resourceUri": {
          "description": "A version-specific identifier for the watched resource.",
          "type": "string"
        }
      },
      "id": "Channel",
      "description": "An notification channel used to watch for resource changes."
    },
    "RoleAssignments": {
      "id": "RoleAssignments",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "RoleAssignment"
          },
          "description": "A list of RoleAssignment resources."
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments .",
          "default": "admin#directory#roleAssignments"
        },
        "nextPageToken": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Building": {
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#resources#buildings#Building",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "description": {
          "description": "A brief description of the building. For example, \"Chelsea Market\".",
          "type": "string"
        },
        "floorNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry."
        },
        "coordinates": {
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees.",
          "$ref": "BuildingCoordinates"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "address": {
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required.",
          "$ref": "BuildingAddress"
        },
        "buildingId": {
          "description": "Unique identifier for the building. The maximum length is 100 characters.",
          "type": "string"
        },
        "buildingName": {
          "type": "string",
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters."
        }
      },
      "description": "Public API: Resources.buildings",
      "id": "Building"
    },
    "SchemaFieldSpec": {
      "id": "SchemaFieldSpec",
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "multiValued": {
          "description": "Boolean specifying whether this is a multi-valued field or not.",
          "type": "boolean"
        },
        "readAccessType": {
          "type": "string",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\".",
          "default": "ALL_DOMAIN_USERS"
        },
        "fieldName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Name of the field.",
          "type": "string"
        },
        "indexed": {
          "type": "boolean",
          "description": "Boolean specifying whether the field is indexed or not.",
          "default": "true"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#schema#fieldspec"
        },
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string",
          "description": "Display Name of the field."
        },
        "numericIndexingSpec": {
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "type": "object",
          "properties": {
            "maxValue": {
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "type": "number",
              "format": "double"
            },
            "minValue": {
              "format": "double",
              "type": "number",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            }
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "fieldId": {
          "description": "Unique identifier of Field (Read-only)",
          "type": "string"
        },
        "fieldType": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Type of the field.",
          "type": "string"
        }
      }
    },
    "MobileDevices": {
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#mobiledevices",
          "type": "string"
        },
        "mobiledevices": {
          "items": {
            "$ref": "MobileDevice"
          },
          "description": "List of Mobile Device objects.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object",
      "id": "MobileDevices"
    },
    "UserCustomProperties": {
      "id": "UserCustomProperties",
      "additionalProperties": {
        "type": "any"
      },
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "type": "object"
    },
    "Customer": {
      "id": "Customer",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "postalAddress": {
          "$ref": "CustomerPostalAddress",
          "description": "The customer's postal address information."
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. The default value is en-US",
          "type": "string"
        },
        "id": {
          "description": "The unique ID for the customer's G Suite account. (Readonly)",
          "type": "string"
        },
        "customerDomain": {
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "customerCreationTime": {
          "format": "date-time",
          "type": "string",
          "description": "The customer's creation time (Readonly)"
        },
        "kind": {
          "default": "admin#directory#customer",
          "type": "string",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer"
        },
        "alternateEmail": {
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain",
          "type": "string"
        },
        "phoneNumber": {
          "description": "The customer's contact phone number in E.164 format.",
          "type": "string"
        }
      }
    },
    "UserEmail": {
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary email. Only one entry could be marked as primary."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "address": {
          "type": "string",
          "description": "Email id of the user."
        }
      },
      "id": "UserEmail",
      "description": "JSON template for an email.",
      "type": "object"
    },
    "UserKeyword": {
      "properties": {
        "value": {
          "description": "Keyword.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        }
      },
      "type": "object",
      "id": "UserKeyword",
      "description": "JSON template for a keyword entry."
    },
    "Asps": {
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Asps",
      "properties": {
        "items": {
          "items": {
            "$ref": "Asp"
          },
          "description": "A list of ASP resources.",
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#aspList",
          "description": "The type of the API resource. This is always admin#directory#aspList.",
          "type": "string"
        }
      }
    },
    "UserWebsite": {
      "id": "UserWebsite",
      "description": "JSON template for a website entry.",
      "type": "object",
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary website or not."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Website."
        }
      }
    },
    "Privilege": {
      "type": "object",
      "properties": {
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "serviceId": {
          "type": "string",
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
        },
        "childPrivileges": {
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "type": "array",
          "items": {
            "$ref": "Privilege"
          }
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privilege.",
          "default": "admin#directory#privilege"
        },
        "isOuScopable": {
          "description": "If the privilege can be restricted to an organization unit.",
          "type": "boolean"
        },
        "serviceName": {
          "type": "string",
          "description": "The name of the service this privilege is for."
        }
      },
      "id": "Privilege"
    },
    "UserPhone": {
      "id": "UserPhone",
      "description": "JSON template for a phone entry.",
      "properties": {
        "value": {
          "description": "Phone number.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary phone or not."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MembersHasMember": {
      "type": "object",
      "id": "MembersHasMember",
      "properties": {
        "isMember": {
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "type": "boolean",
          "readOnly": true
        }
      },
      "description": "JSON template for Has Member response in Directory API."
    },
    "Schema": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "type": "string",
          "description": "Display name for the schema."
        },
        "schemaId": {
          "type": "string",
          "description": "Unique identifier of Schema (Read-only)"
        },
        "fields": {
          "description": "Fields of Schema",
          "type": "array",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "items": {
            "$ref": "SchemaFieldSpec"
          }
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema",
          "type": "string"
        },
        "schemaName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "Schema name",
          "type": "string"
        }
      },
      "id": "Schema",
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Domains2": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "domains": {
          "items": {
            "$ref": "Domains"
          },
          "description": "List of domain objects.",
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domains"
        }
      },
      "id": "Domains2",
      "type": "object"
    },
    "Feature": {
      "properties": {
        "kind": {
          "default": "admin#directory#resources#features#Feature",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "name": {
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "type": "string",
          "description": "The name of the feature."
        }
      },
      "description": "JSON template for Feature object in Directory API.",
      "type": "object",
      "id": "Feature"
    },
    "OrgUnit": {
      "id": "OrgUnit",
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#orgUnit",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "parentOrgUnitId": {
          "description": "Id of parent OrgUnit",
          "type": "string"
        },
        "orgUnitPath": {
          "description": "Path of OrgUnit",
          "type": "string"
        },
        "parentOrgUnitPath": {
          "description": "Path of parent OrgUnit",
          "type": "string"
        },
        "blockInheritance": {
          "description": "Should block inheritance",
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "description": "Name of OrgUnit",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          }
        },
        "orgUnitId": {
          "type": "string",
          "description": "Id of OrgUnit"
        },
        "description": {
          "description": "Description of OrgUnit",
          "type": "string"
        }
      }
    },
    "UserPosixAccount": {
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix.",
      "properties": {
        "operatingSystemType": {
          "description": "The operating system type for this account.",
          "type": "string"
        },
        "gecos": {
          "description": "The GECOS (user information) for this account.",
          "type": "string"
        },
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        },
        "gid": {
          "description": "The default group ID.",
          "format": "uint64",
          "type": "string"
        },
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        },
        "uid": {
          "type": "string",
          "description": "The POSIX compliant user ID.",
          "format": "uint64"
        },
        "username": {
          "description": "The username of the account.",
          "type": "string"
        },
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        },
        "accountId": {
          "description": "A POSIX account field identifier.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        }
      },
      "id": "UserPosixAccount",
      "type": "object"
    },
    "Buildings": {
      "description": "Public API: Resources.buildings",
      "id": "Buildings",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#buildings#buildingsList",
          "type": "string"
        },
        "buildings": {
          "items": {
            "$ref": "Building"
          },
          "type": "array",
          "description": "The Buildings in this page of results."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        }
      }
    },
    "DirectoryChromeosdevicesCommand": {
      "id": "DirectoryChromeosdevicesCommand",
      "type": "object",
      "description": "Information regarding a command that was issued to a device.",
      "properties": {
        "commandId": {
          "format": "int64",
          "description": "Unique ID of a device command.",
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "type": "string",
          "description": "The type of the command."
        },
        "commandResult": {
          "$ref": "DirectoryChromeosdevicesCommandResult",
          "description": "The result of the command execution."
        },
        "payload": {
          "description": "The payload that the command specified, if any.",
          "type": "string"
        },
        "state": {
          "description": "Indicates the command state.",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ],
          "type": "string",
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ]
        },
        "commandExpireTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired."
        },
        "issueTime": {
          "description": "The timestamp when the command was issued by the admin.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "MobileDeviceAction": {
      "type": "object",
      "id": "MobileDeviceAction",
      "properties": {
        "action": {
          "description": "Action to be taken on the Mobile Device",
          "type": "string",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          }
        }
      }
    },
    "Member": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of member (Immutable)",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey."
        },
        "delivery_settings": {
          "description": "Delivery settings of member",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#member"
        },
        "role": {
          "type": "string",
          "description": "Role of member"
        },
        "email": {
          "description": "Email of member (Read-only)",
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Status of member (Immutable)"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "Member"
    },
    "MobileDevice": {
      "properties": {
        "type": {
          "description": "The type of device (Read-only)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "manufacturer": {
          "description": "Mobile Device manufacturer (Read-only)",
          "type": "string"
        },
        "unknownSourcesStatus": {
          "type": "boolean",
          "description": "Unknown sources enabled or disabled on device (Read-only)"
        },
        "imei": {
          "description": "Mobile Device IMEI number (Read-only)",
          "type": "string"
        },
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "securityPatchLevel": {
          "type": "string",
          "description": "Mobile Device Security patch level (Read-only)",
          "format": "int64"
        },
        "hardwareId": {
          "type": "string",
          "description": "Mobile Device Hardware Id (Read-only)"
        },
        "otherAccountsInfo": {
          "description": "List of accounts added on device (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "firstSync": {
          "format": "date-time",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        },
        "encryptionStatus": {
          "description": "Mobile Device Encryption Status (Read-only)",
          "type": "string"
        },
        "basebandVersion": {
          "description": "Mobile Device Baseband version (Read-only)",
          "type": "string"
        },
        "supportsWorkProfile": {
          "description": "Work profile supported on device (Read-only)",
          "type": "boolean"
        },
        "bootloaderVersion": {
          "description": "Mobile Device Bootloader version (Read-only)",
          "type": "string"
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "name": {
          "description": "List of owner user's names (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "meid": {
          "type": "string",
          "description": "Mobile Device MEID number (Read-only)"
        },
        "resourceId": {
          "description": "Unique identifier of Mobile Device (Read-only)",
          "type": "string"
        },
        "networkOperator": {
          "description": "Mobile Device mobile or network operator (if available) (Read-only)",
          "type": "string"
        },
        "buildNumber": {
          "type": "string",
          "description": "Mobile Device Build number (Read-only)"
        },
        "deviceCompromisedStatus": {
          "description": "Mobile Device compromised status (Read-only)",
          "type": "string"
        },
        "deviceId": {
          "description": "Mobile Device serial number (Read-only)",
          "type": "string"
        },
        "userAgent": {
          "type": "string",
          "description": "Mobile Device user agent"
        },
        "status": {
          "type": "string",
          "description": "Status of the device (Read-only)"
        },
        "os": {
          "type": "string",
          "description": "Name of the mobile operating system"
        },
        "privilege": {
          "description": "DMAgentPermission (Read-only)",
          "type": "string"
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "applications": {
          "type": "array",
          "description": "List of applications installed on Mobile Device",
          "items": {
            "properties": {
              "versionCode": {
                "type": "integer",
                "description": "Version code of application",
                "format": "int32"
              },
              "permission": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "List of Permissions for application"
              },
              "versionName": {
                "description": "Version name of application",
                "type": "string"
              },
              "displayName": {
                "type": "string",
                "description": "Display name of application"
              },
              "packageName": {
                "description": "Package name of application",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "kernelVersion": {
          "type": "string",
          "description": "Mobile Device Kernel version (Read-only)"
        },
        "defaultLanguage": {
          "description": "The default locale used on the Mobile Device (Read-only)",
          "type": "string"
        },
        "model": {
          "type": "string",
          "description": "Name of the model of the device"
        },
        "devicePasswordStatus": {
          "description": "DevicePasswordStatus (Read-only)",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#mobiledevice",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "serialNumber": {
          "type": "string",
          "description": "Mobile Device SSN or Serial Number (Read-only)"
        },
        "wifiMacAddress": {
          "type": "string",
          "description": "Mobile Device WiFi MAC address (Read-only)"
        },
        "brand": {
          "description": "Mobile Device Brand (Read-only)",
          "type": "string"
        },
        "email": {
          "description": "List of owner user's email addresses (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "managedAccountIsOnOwnerProfile": {
          "type": "boolean",
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)"
        },
        "lastSync": {
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string"
        }
      },
      "type": "object",
      "id": "MobileDevice"
    },
    "OrgUnits": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "organizationUnits": {
          "type": "array",
          "description": "List of user objects.",
          "items": {
            "$ref": "OrgUnit"
          }
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#orgUnits"
        }
      },
      "type": "object",
      "id": "OrgUnits",
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "BuildingAddress": {
      "description": "Public API: Resources.buildings",
      "id": "BuildingAddress",
      "properties": {
        "locality": {
          "type": "string",
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines."
        },
        "regionCode": {
          "description": "Required. CLDR region code of the country/region of the address.",
          "type": "string"
        },
        "administrativeArea": {
          "type": "string",
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region."
        },
        "sublocality": {
          "description": "Optional. Sublocality of the address.",
          "type": "string"
        },
        "addressLines": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Unstructured address lines describing the lower levels of an address."
        },
        "languageCode": {
          "type": "string",
          "description": "Optional. BCP-47 language code of the contents of this address (if known)."
        },
        "postalCode": {
          "type": "string",
          "description": "Optional. Postal code of the address."
        }
      },
      "type": "object"
    },
    "UserLanguage": {
      "type": "object",
      "description": "JSON template for a language entry.",
      "id": "UserLanguage",
      "properties": {
        "customLanguage": {
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set",
          "type": "string"
        },
        "languageCode": {
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.",
          "type": "string"
        }
      }
    },
    "UserGender": {
      "id": "UserGender",
      "properties": {
        "type": {
          "type": "string",
          "description": "Gender."
        },
        "customGender": {
          "type": "string",
          "description": "Custom gender."
        },
        "addressMeAs": {
          "type": "string",
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their."
        }
      },
      "type": "object"
    },
    "UserLocation": {
      "type": "object",
      "properties": {
        "deskCode": {
          "description": "Most specific textual code of individual desk location.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.",
          "type": "string"
        },
        "floorSection": {
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values.",
          "type": "string"
        },
        "buildingId": {
          "description": "Building Identifier.",
          "type": "string"
        },
        "floorName": {
          "description": "Floor name/number.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        }
      },
      "description": "JSON template for a location entry.",
      "id": "UserLocation"
    },
    "ChromeOsDevice": {
      "type": "object",
      "id": "ChromeOsDevice",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "orderNumber": {
          "description": "Chromebook order number (Read-only)",
          "type": "string"
        },
        "deviceId": {
          "type": "string",
          "description": "Unique identifier of Chrome OS Device (Read-only)"
        },
        "systemRamTotal": {
          "type": "string",
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "format": "int64"
        },
        "annotatedAssetId": {
          "type": "string",
          "description": "AssetId specified during enrollment or through later annotation"
        },
        "ethernetMacAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)"
        },
        "ethernetMacAddress0": {
          "type": "string",
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "orgUnitPath": {
          "description": "OrgUnit of the device",
          "type": "string"
        },
        "dockMacAddress": {
          "type": "string",
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "recentUsers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of the user"
              },
              "email": {
                "description": "Email address of the user. Present only if the user type is managed",
                "type": "string"
              }
            }
          },
          "description": "List of recent device users, in descending order by last login time (Read-only)"
        },
        "autoUpdateExpiration": {
          "format": "int64",
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#chromeosdevice",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "lastEnrollmentTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was last enrolled (Read-only)"
        },
        "lastKnownNetwork": {
          "type": "array",
          "description": "Contains last known network (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "ipAddress": {
                "description": "The IP address.",
                "type": "string"
              },
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              }
            },
            "description": "Information for an ip address."
          }
        },
        "tpmVersionInfo": {
          "type": "object",
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "properties": {
            "manufacturer": {
              "description": "TPM manufacturer code.",
              "type": "string"
            },
            "vendorSpecific": {
              "type": "string",
              "description": "Vendor-specific information such as Vendor ID."
            },
            "family": {
              "description": "TPM family.",
              "type": "string"
            },
            "tpmModel": {
              "type": "string",
              "description": "TPM model number."
            },
            "specLevel": {
              "type": "string",
              "description": "TPM specification level."
            },
            "firmwareVersion": {
              "type": "string",
              "description": "TPM firmware version."
            }
          }
        },
        "annotatedLocation": {
          "description": "Address or location of the device as noted by the administrator",
          "type": "string"
        },
        "lastSync": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "bootMode": {
          "type": "string",
          "description": "Chromebook boot mode (Read-only)"
        },
        "cpuStatusReports": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "reportTime": {
                "format": "date-time",
                "description": "Date and time the report was received.",
                "type": "string"
              },
              "cpuUtilizationPercentageInfo": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "cpuTemperatureInfo": {
                "items": {
                  "type": "object",
                  "properties": {
                    "temperature": {
                      "description": "Temperature in Celsius degrees.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "label": {
                      "type": "string",
                      "description": "CPU label"
                    }
                  }
                },
                "description": "List of CPU temperature samples.",
                "type": "array"
              }
            }
          },
          "description": "Reports of CPU utilization and temperature (Read-only)"
        },
        "manufactureDate": {
          "type": "string",
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format."
        },
        "willAutoRenew": {
          "description": "Will Chromebook auto renew after support end date (Read-only)",
          "type": "boolean"
        },
        "model": {
          "type": "string",
          "description": "Chromebook Model (Read-only)"
        },
        "macAddress": {
          "description": "Chromebook Mac Address on wifi network interface (Read-only)",
          "type": "string"
        },
        "deviceFiles": {
          "type": "array",
          "description": "List of device files to download (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "downloadUrl": {
                "description": "File download URL",
                "type": "string"
              },
              "name": {
                "description": "File name",
                "type": "string"
              },
              "type": {
                "type": "string",
                "description": "File type"
              },
              "createTime": {
                "format": "date-time",
                "type": "string",
                "description": "Date and time the file was created"
              }
            }
          }
        },
        "osVersion": {
          "type": "string",
          "description": "Chromebook Os Version (Read-only)"
        },
        "annotatedUser": {
          "description": "User of the device",
          "type": "string"
        },
        "serialNumber": {
          "type": "string",
          "description": "Chromebook serial number (Read-only)"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "diskVolumeReports": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "volumeInfo": {
                "type": "array",
                "items": {
                  "properties": {
                    "volumeId": {
                      "type": "string",
                      "description": "Volume id"
                    },
                    "storageTotal": {
                      "description": "Total disk space [in bytes]",
                      "format": "int64",
                      "type": "string"
                    },
                    "storageFree": {
                      "format": "int64",
                      "description": "Free disk space [in bytes]",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "description": "Disk volumes"
              }
            }
          },
          "description": "Reports of disk space and other info about mounted/connected volumes."
        },
        "notes": {
          "type": "string",
          "description": "Notes added by the administrator"
        },
        "meid": {
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)",
          "type": "string"
        },
        "firmwareVersion": {
          "description": "Chromebook firmware version (Read-only)",
          "type": "string"
        },
        "status": {
          "description": "status of the device (Read-only)",
          "type": "string"
        },
        "supportEndDate": {
          "description": "Final date the device will be supported (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "platformVersion": {
          "type": "string",
          "description": "Chromebook platform version (Read-only)"
        },
        "activeTimeRanges": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "activeTime": {
                "type": "integer",
                "description": "Duration in milliseconds",
                "format": "int32"
              },
              "date": {
                "format": "date",
                "type": "string",
                "description": "Date of usage"
              }
            }
          },
          "description": "List of active time ranges (Read-only)"
        },
        "systemRamFreeReports": {
          "items": {
            "properties": {
              "reportTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time the report was received."
              },
              "systemRamFreeInfo": {
                "items": {
                  "type": "string",
                  "format": "int64"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "Reports of amounts of available RAM memory (Read-only)"
        }
      }
    },
    "UserUndelete": {
      "type": "object",
      "properties": {
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        }
      },
      "id": "UserUndelete"
    },
    "UserRelation": {
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "type": "string",
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner."
        },
        "value": {
          "description": "The name of the relation.",
          "type": "string"
        }
      },
      "description": "JSON template for a relation entry.",
      "id": "UserRelation",
      "type": "object"
    },
    "UserMakeAdmin": {
      "id": "UserMakeAdmin",
      "properties": {
        "status": {
          "type": "boolean",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "description": "Boolean indicating new admin status of the user"
        }
      },
      "type": "object"
    },
    "UserOrganization": {
      "description": "JSON template for an organization entry.",
      "properties": {
        "description": {
          "description": "Description of the organization.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If it user's primary organization."
        },
        "name": {
          "type": "string",
          "description": "Name of the organization"
        },
        "costCenter": {
          "description": "The cost center of the users department.",
          "type": "string"
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of the organization."
        },
        "title": {
          "description": "Title (designation) of the user in the organization.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
        },
        "department": {
          "type": "string",
          "description": "Department within the organization."
        },
        "fullTimeEquivalent": {
          "format": "int32",
          "type": "integer",
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%)."
        },
        "domain": {
          "type": "string",
          "description": "The domain to which the organization belongs to."
        },
        "location": {
          "description": "Location of the organization. This need not be fully qualified address.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        }
      },
      "type": "object",
      "id": "UserOrganization"
    },
    "Domains": {
      "id": "Domains",
      "properties": {
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "description": "List of domain alias objects. (Read-only)",
          "type": "array"
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Indicates if the domain is a primary domain (Read-only)."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "domainName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The domain name of the customer."
        },
        "verified": {
          "description": "Indicates the verification state of a domain. (Read-only).",
          "type": "boolean"
        },
        "creationTime": {
          "description": "Creation time of the domain. (Read-only).",
          "format": "int64",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domain",
          "description": "Kind of resource this is."
        }
      },
      "type": "object"
    },
    "UserAddress": {
      "properties": {
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "extendedAddress": {
          "description": "Extended Address.",
          "type": "string"
        },
        "poBox": {
          "description": "Other parts of address.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary address. Only one entry could be marked as primary."
        },
        "locality": {
          "description": "Locality.",
          "type": "string"
        },
        "formatted": {
          "type": "string",
          "description": "Formatted address."
        },
        "region": {
          "description": "Region.",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code.",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal code.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "streetAddress": {
          "type": "string",
          "description": "Street."
        },
        "country": {
          "description": "Country.",
          "type": "string"
        }
      },
      "description": "JSON template for address.",
      "id": "UserAddress",
      "type": "object"
    },
    "DirectoryChromeosdevicesCommandResult": {
      "properties": {
        "errorMessage": {
          "type": "string",
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed."
        },
        "executeTime": {
          "description": "The time at which the command was executed or failed to execute.",
          "format": "google-datetime",
          "type": "string"
        },
        "result": {
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "description": "The result of the command.",
          "type": "string",
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ]
        }
      },
      "id": "DirectoryChromeosdevicesCommandResult",
      "type": "object",
      "description": "The result of executing a command."
    },
    "Members": {
      "id": "Members",
      "type": "object",
      "properties": {
        "members": {
          "description": "List of member objects.",
          "type": "array",
          "items": {
            "$ref": "Member"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#members"
        }
      }
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "description": "A response for issuing a command.",
      "properties": {
        "commandId": {
          "description": "The unique ID of the issued command, used to retrieve the command status.",
          "type": "string",
          "format": "int64"
        }
      },
      "type": "object"
    },
    "Roles": {
      "id": "Roles",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "Role"
          },
          "description": "A list of Role resources."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roles.",
          "default": "admin#directory#roles"
        }
      },
      "type": "object"
    },
    "FeatureRename": {
      "properties": {
        "newName": {
          "description": "New name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          },
          "type": "string"
        }
      },
      "type": "object",
      "id": "FeatureRename"
    },
    "VerificationCode": {
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "VerificationCode",
      "properties": {
        "verificationCode": {
          "type": "string",
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "userId": {
          "description": "The obfuscated unique ID of the user.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCode.",
          "default": "admin#directory#verificationCode",
          "type": "string"
        }
      }
    },
    "BuildingCoordinates": {
      "properties": {
        "latitude": {
          "format": "double",
          "type": "number",
          "description": "Latitude in decimal degrees."
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Longitude in decimal degrees."
        }
      },
      "description": "Public API: Resources.buildings",
      "type": "object",
      "id": "BuildingCoordinates"
    },
    "Alias": {
      "properties": {
        "primaryEmail": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#alias"
        },
        "alias": {
          "type": "string"
        }
      },
      "id": "Alias",
      "type": "object",
      "description": "JSON template for Alias object in Directory API."
    },
    "DomainAliases": {
      "id": "DomainAliases",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "domainAliases": {
          "description": "List of domain alias objects.",
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAliases"
        }
      }
    },
    "CustomerPostalAddress": {
      "properties": {
        "locality": {
          "description": "Name of the locality. An example of a locality value is the city of San Francisco.",
          "type": "string"
        },
        "countryCode": {
          "type": "string",
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements."
        },
        "organizationName": {
          "description": "The company or company division name.",
          "type": "string"
        },
        "region": {
          "type": "string",
          "description": "Name of the region. An example of a region value is NY for the state of New York."
        },
        "postalCode": {
          "type": "string",
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element."
        },
        "addressLine1": {
          "type": "string",
          "description": "A customer's physical address. The address can be composed of one to three lines."
        },
        "addressLine2": {
          "type": "string",
          "description": "Address line 2 of the address."
        },
        "contactName": {
          "description": "The customer contact's name.",
          "type": "string"
        },
        "addressLine3": {
          "type": "string",
          "description": "Address line 3 of the address."
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "id": "CustomerPostalAddress",
      "type": "object"
    },
    "Token": {
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Token",
      "properties": {
        "nativeApp": {
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device.",
          "type": "boolean"
        },
        "clientId": {
          "type": "string",
          "description": "The Client ID of the application the token is issued to."
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user that issued the token."
        },
        "displayText": {
          "type": "string",
          "description": "The displayable name of the application the token is issued to."
        },
        "anonymous": {
          "type": "boolean",
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#token.",
          "default": "admin#directory#token",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "scopes": {
          "description": "A list of authorization scopes the application is granted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "id": "DirectoryChromeosdevicesIssueCommandRequest",
      "properties": {
        "payload": {
          "type": "string",
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100]."
        },
        "commandType": {
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "type": "string",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "description": "The type of command."
        }
      },
      "type": "object",
      "description": "A request for issuing a command."
    },
    "Users": {
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "User"
          },
          "description": "List of user objects."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#users"
        },
        "trigger_event": {
          "type": "string",
          "description": "Event that triggered this response (only used in case of Push Response)"
        }
      },
      "id": "Users",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "FeatureInstance": {
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      },
      "id": "FeatureInstance",
      "type": "object",
      "description": "JSON template for a feature instance."
    },
    "Role": {
      "id": "Role",
      "properties": {
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#role.",
          "default": "admin#directory#role",
          "type": "string"
        },
        "isSystemRole": {
          "description": "Returns true if this is a pre-defined system role.",
          "type": "boolean"
        },
        "roleName": {
          "description": "Name of the role.",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "string"
        },
        "roleDescription": {
          "description": "A short description of the role.",
          "type": "string"
        },
        "isSuperAdminRole": {
          "description": "Returns true if the role is a super admin role.",
          "type": "boolean"
        },
        "rolePrivileges": {
          "items": {
            "type": "object",
            "properties": {
              "serviceId": {
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
                "type": "string"
              },
              "privilegeName": {
                "description": "The name of the privilege.",
                "type": "string"
              }
            }
          },
          "description": "The set of privileges that are granted to this role.",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "roleId": {
          "description": "ID of the role.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CalendarResources": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "CalendarResource"
          },
          "description": "The CalendarResources in this page of results."
        },
        "kind": {
          "type": "string",
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList.",
          "default": "admin#directory#resources#calendars#calendarResourcesList"
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "CalendarResources",
      "description": "Public API: Resources.calendars"
    },
    "UserIm": {
      "id": "UserIm",
      "properties": {
        "protocol": {
          "type": "string",
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "im": {
          "type": "string",
          "description": "Instant messenger id."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary im. Only one entry could be marked as primary."
        },
        "customProtocol": {
          "type": "string",
          "description": "Custom protocol."
        }
      },
      "description": "JSON template for instant messenger of an user.",
      "type": "object"
    },
    "UserName": {
      "type": "object",
      "properties": {
        "givenName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "First Name",
          "type": "string"
        },
        "fullName": {
          "type": "string",
          "description": "Full Name"
        },
        "familyName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "Last Name",
          "type": "string"
        }
      },
      "id": "UserName"
    },
    "UserSshPublicKey": {
      "id": "UserSshPublicKey",
      "type": "object",
      "description": "JSON template for a POSIX account entry.",
      "properties": {
        "key": {
          "type": "string",
          "description": "An SSH public key."
        },
        "expirationTimeUsec": {
          "format": "int64",
          "type": "string",
          "description": "An expiration time in microseconds since epoch."
        },
        "fingerprint": {
          "type": "string",
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
          "readOnly": true
        }
      }
    },
    "ChromeOsDevices": {
      "id": "ChromeOsDevices",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "chromeosdevices": {
          "description": "List of Chrome OS Device objects.",
          "type": "array",
          "items": {
            "$ref": "ChromeOsDevice"
          }
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#chromeosdevices"
        }
      }
    }
  },
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "servicePath": "",
  "discoveryVersion": "v1",
  "title": "Admin SDK",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        }
      }
    }
  },
  "version": "directory_v1",
  "kind": "discovery#restDescription",
  "basePath": "",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "id": "admin:directory_v1",
  "revision": "20201013",
  "batchPath": "batch/admin/directory_v1",
  "baseUrl": "https://www.googleapis.com/",
  "packagePath": "admin",
  "name": "admin",
  "ownerName": "Google",
  "ownerDomain": "google.com",
  "resources": {
    "users": {
      "resources": {
        "photos": {
          "methods": {
            "update": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              },
              "response": {
                "$ref": "UserPhoto"
              },
              "id": "directory.users.photos.update",
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "PUT",
              "request": {
                "$ref": "UserPhoto"
              },
              "description": "Add a photo for the user"
            },
            "delete": {
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.delete",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "parameters": {
                "userKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "DELETE",
              "description": "Remove photos for the user"
            },
            "get": {
              "description": "Retrieve photo of a user",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "id": "directory.users.photos.get",
              "parameterOrder": [
                "userKey"
              ],
              "httpMethod": "GET",
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ]
            },
            "patch": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "description": "Patch Photo via Apiary Patch Orchestration",
              "response": {
                "$ref": "UserPhoto"
              },
              "httpMethod": "PATCH",
              "id": "directory.users.photos.patch",
              "request": {
                "$ref": "UserPhoto"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ]
            }
          }
        },
        "aliases": {
          "methods": {
            "insert": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "id": "directory.users.aliases.insert",
              "request": {
                "$ref": "Alias"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "httpMethod": "POST",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "description": "Add a alias for the user",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Alias"
              },
              "parameterOrder": [
                "userKey"
              ]
            },
            "watch": {
              "parameterOrder": [
                "userKey"
              ],
              "description": "Watch for changes in users list",
              "httpMethod": "POST",
              "id": "directory.users.aliases.watch",
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "response": {
                "$ref": "Channel"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "parameters": {
                "userKey": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the user"
                },
                "event": {
                  "type": "string",
                  "description": "Event on which subscription is intended (if subscribing)",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "location": "query",
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ]
                }
              },
              "request": {
                "$ref": "Channel"
              }
            },
            "list": {
              "httpMethod": "GET",
              "id": "directory.users.aliases.list",
              "description": "List all aliases for a user",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "response": {
                "$ref": "Aliases"
              },
              "parameterOrder": [
                "userKey"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              }
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "id": "directory.users.aliases.delete",
              "httpMethod": "DELETE",
              "description": "Remove a alias for the user",
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "parameters": {
                "alias": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The alias to be removed"
                },
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              }
            }
          }
        }
      },
      "methods": {
        "update": {
          "path": "admin/directory/v1/users/{userKey}",
          "description": "update user",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.update",
          "request": {
            "$ref": "User"
          },
          "httpMethod": "PUT",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "response": {
            "$ref": "User"
          }
        },
        "get": {
          "id": "directory.users.get",
          "httpMethod": "GET",
          "path": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "User"
          },
          "description": "retrieve user",
          "parameters": {
            "projection": {
              "default": "basic",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "description": "What subset of fields to fetch for this user.",
              "type": "string",
              "location": "query",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ]
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string",
              "location": "query"
            },
            "userKey": {
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the user",
              "location": "path"
            },
            "viewType": {
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "location": "query",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}"
        },
        "watch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "Channel"
          },
          "id": "directory.users.watch",
          "httpMethod": "POST",
          "parameters": {
            "customer": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            },
            "viewType": {
              "type": "string",
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "default": "admin_view",
              "location": "query",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user."
            },
            "query": {
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "location": "query"
            },
            "customFieldMask": {
              "location": "query",
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "domain": {
              "location": "query",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\"",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "default": "100",
              "maximum": "500",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "format": "int32",
              "type": "integer"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "event": {
              "description": "Event on which subscription is intended",
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ]
            },
            "orderBy": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "location": "query"
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query",
              "type": "string",
              "description": "Whether to return results in ascending or descending order.",
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "location": "query",
              "default": "basic",
              "type": "string",
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ],
              "description": "What subset of fields to fetch for this user."
            },
            "showDeleted": {
              "type": "string",
              "location": "query",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)"
            }
          },
          "path": "admin/directory/v1/users/watch",
          "description": "Watch for changes in users list",
          "parameterOrder": [],
          "request": {
            "$ref": "Channel"
          },
          "flatPath": "admin/directory/v1/users/watch"
        },
        "insert": {
          "response": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameterOrder": [],
          "parameters": {},
          "id": "directory.users.insert",
          "httpMethod": "POST",
          "description": "create user.",
          "flatPath": "admin/directory/v1/users",
          "request": {
            "$ref": "User"
          }
        },
        "signOut": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "id": "directory.users.signOut",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "flatPath": "admin/directory/v1/users/{userKey}/signOut"
        },
        "undelete": {
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "description": "The immutable id of the user",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "id": "directory.users.undelete",
          "description": "Undelete a deleted user",
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "request": {
            "$ref": "UserUndelete"
          }
        },
        "list": {
          "parameters": {
            "projection": {
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "type": "string",
              "description": "What subset of fields to fetch for this user.",
              "location": "query",
              "default": "basic",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ]
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users"
            },
            "viewType": {
              "default": "admin_view",
              "location": "query",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user."
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "location": "query",
              "type": "string",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ]
            },
            "showDeleted": {
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order.",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query",
              "type": "string"
            },
            "domain": {
              "location": "query",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "type": "string"
            },
            "maxResults": {
              "default": "100",
              "format": "int32",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "maximum": "500",
              "type": "integer",
              "location": "query"
            },
            "customFieldMask": {
              "type": "string",
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "customer": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            }
          },
          "response": {
            "$ref": "Users"
          },
          "parameterOrder": [],
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "id": "directory.users.list",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "admin/directory/v1/users",
          "flatPath": "admin/directory/v1/users"
        },
        "patch": {
          "path": "admin/directory/v1/users/{userKey}",
          "request": {
            "$ref": "User"
          },
          "response": {
            "$ref": "User"
          },
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.patch",
          "description": "Patch Users via Apiary Patch Orchestration",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameterOrder": [
            "userKey"
          ]
        },
        "makeAdmin": {
          "description": "change admin status of a user",
          "id": "directory.users.makeAdmin",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user as admin",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "parameterOrder": [
            "userKey"
          ],
          "request": {
            "$ref": "UserMakeAdmin"
          }
        },
        "delete": {
          "httpMethod": "DELETE",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "Delete user",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.delete"
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "generate": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the user"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "httpMethod": "POST",
          "description": "Generate new backup verification codes for the user.",
          "id": "directory.verificationCodes.generate"
        },
        "list": {
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey"
          ],
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "response": {
            "$ref": "VerificationCodes"
          },
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            }
          },
          "id": "directory.verificationCodes.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "invalidate": {
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user",
              "required": true
            }
          },
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "description": "Invalidate the current backup verification codes for the user.",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.verificationCodes.invalidate"
        }
      }
    },
    "groups": {
      "resources": {
        "aliases": {
          "methods": {
            "insert": {
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "httpMethod": "POST",
              "parameterOrder": [
                "groupKey"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "request": {
                "$ref": "Alias"
              },
              "response": {
                "$ref": "Alias"
              },
              "description": "Add a alias for the group",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "parameters": {
                "groupKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the group",
                  "location": "path"
                }
              },
              "id": "directory.groups.aliases.insert"
            },
            "delete": {
              "description": "Remove a alias for the group",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "id": "directory.groups.aliases.delete",
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "httpMethod": "DELETE",
              "parameters": {
                "alias": {
                  "description": "The alias to be removed",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "groupKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the group",
                  "required": true,
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ]
            },
            "list": {
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "id": "directory.groups.aliases.list",
              "response": {
                "$ref": "Aliases"
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "description": "List all aliases for a group",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "parameterOrder": [
                "groupKey"
              ]
            }
          }
        }
      },
      "methods": {
        "insert": {
          "flatPath": "admin/directory/v1/groups",
          "id": "directory.groups.insert",
          "httpMethod": "POST",
          "path": "admin/directory/v1/groups",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "description": "Create Group",
          "response": {
            "$ref": "Group"
          },
          "request": {
            "$ref": "Group"
          },
          "parameters": {},
          "parameterOrder": []
        },
        "list": {
          "flatPath": "admin/directory/v1/groups",
          "path": "admin/directory/v1/groups",
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "userKey": {
              "location": "query",
              "type": "string",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object."
            },
            "domain": {
              "type": "string",
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.",
              "location": "query"
            },
            "sortOrder": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query"
            },
            "query": {
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "type": "string"
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "email"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "type": "string",
              "description": "Column to use for sorting results"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "default": "200",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "minimum": "1",
              "type": "integer",
              "format": "int32"
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain.",
              "location": "query"
            }
          },
          "response": {
            "$ref": "Groups"
          },
          "id": "directory.groups.list",
          "httpMethod": "GET",
          "parameterOrder": []
        },
        "delete": {
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "groupKey"
          ],
          "id": "directory.groups.delete",
          "description": "Delete Group",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "path": "admin/directory/v1/groups/{groupKey}"
        },
        "update": {
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "request": {
            "$ref": "Group"
          },
          "response": {
            "$ref": "Group"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "description": "Update Group",
          "id": "directory.groups.update",
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}"
        },
        "get": {
          "id": "directory.groups.get",
          "httpMethod": "GET",
          "path": "admin/directory/v1/groups/{groupKey}",
          "description": "Retrieve Group",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ]
        },
        "patch": {
          "response": {
            "$ref": "Group"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "location": "path"
            }
          },
          "id": "directory.groups.patch",
          "description": "Patch Groups via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Group"
          }
        }
      }
    },
    "roles": {
      "methods": {
        "insert": {
          "request": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "httpMethod": "POST",
          "id": "directory.roles.insert",
          "response": {
            "$ref": "Role"
          },
          "description": "Creates a role.",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          }
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            },
            "roleId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the role."
            }
          },
          "description": "Retrieves a role.",
          "id": "directory.roles.get"
        },
        "update": {
          "request": {
            "$ref": "Role"
          },
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "roleId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the role."
            }
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.update",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "description": "Updates a role."
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roles.delete",
          "httpMethod": "DELETE",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            },
            "roleId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role.",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Deletes a role.",
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "patch": {
          "parameters": {
            "roleId": {
              "description": "Immutable ID of the role.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "httpMethod": "PATCH",
          "description": "Patch role via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "request": {
            "$ref": "Role"
          },
          "id": "directory.roles.patch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "list": {
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "id": "directory.roles.list",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "parameters": {
            "customer": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "description": "Maximum number of results to return.",
              "format": "int32",
              "minimum": "1",
              "type": "integer",
              "location": "query",
              "maximum": "100"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify the next page in the list."
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles",
          "response": {
            "$ref": "Roles"
          }
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "response": {
            "$ref": "RoleAssignment"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "request": {
            "$ref": "RoleAssignment"
          },
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.roleAssignments.insert",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "description": "Creates a role assignment.",
          "httpMethod": "POST"
        },
        "get": {
          "response": {
            "$ref": "RoleAssignment"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "id": "directory.roleAssignments.get",
          "description": "Retrieve a role assignment.",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            },
            "roleAssignmentId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the role assignment.",
              "type": "string"
            }
          }
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameters": {
            "roleAssignmentId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the role assignment.",
              "required": true
            },
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            }
          },
          "description": "Deletes a role assignment.",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roleAssignments.delete",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ]
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "description": "Retrieves a paginated list of all roleAssignments.",
          "parameters": {
            "userKey": {
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            },
            "maxResults": {
              "location": "query",
              "format": "int32",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "maximum": "200",
              "type": "integer"
            },
            "roleId": {
              "location": "query",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "type": "string"
            },
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "location": "query",
              "type": "string"
            }
          },
          "response": {
            "$ref": "RoleAssignments"
          },
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "GET",
          "id": "directory.roleAssignments.list"
        }
      }
    },
    "orgunits": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "description": "Retrieve organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.orgunits.get",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "response": {
            "$ref": "OrgUnit"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameters": {
            "orgUnitPath": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ]
        },
        "patch": {
          "httpMethod": "PATCH",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameters": {
            "orgUnitPath": {
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "request": {
            "$ref": "OrgUnit"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "id": "directory.orgunits.patch",
          "response": {
            "$ref": "OrgUnit"
          }
        },
        "list": {
          "response": {
            "$ref": "OrgUnits"
          },
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.orgunits.list",
          "description": "Retrieve all organizational units",
          "parameters": {
            "type": {
              "description": "Whether to return all sub-organizations or just immediate children",
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ],
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ]
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true
            },
            "orgUnitPath": {
              "location": "query",
              "description": "the URL-encoded organizational unit's path or its ID",
              "type": "string",
              "default": ""
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "httpMethod": "GET"
        },
        "insert": {
          "description": "Add organizational unit",
          "response": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.insert",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "request": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            }
          },
          "httpMethod": "POST"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "httpMethod": "DELETE",
          "id": "directory.orgunits.delete",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "description": "Remove organizational unit",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "orgUnitPath": {
              "location": "path",
              "pattern": "^.*$",
              "required": true,
              "description": "Full path of the organizational unit or its ID",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}"
        },
        "update": {
          "id": "directory.orgunits.update",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "httpMethod": "PUT",
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "orgUnitPath": {
              "type": "string",
              "pattern": "^.*$",
              "location": "path",
              "required": true,
              "description": "Full path of the organizational unit or its ID"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "request": {
            "$ref": "OrgUnit"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "description": "Update organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "response": {
            "$ref": "OrgUnit"
          }
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "parameters": {
            "orderBy": {
              "type": "string",
              "location": "query",
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ]
            },
            "maxResults": {
              "default": "100",
              "description": "Maximum number of results to return.",
              "location": "query",
              "format": "int32",
              "minimum": "1",
              "type": "integer"
            },
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify next page in the list"
            },
            "orgUnitPath": {
              "type": "string",
              "location": "query",
              "description": "Full path of the organizational unit or its ID"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "id": "directory.chromeosdevices.list",
          "response": {
            "$ref": "ChromeOsDevices"
          }
        },
        "patch": {
          "httpMethod": "PATCH",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "id": "directory.chromeosdevices.patch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "description": "Patch Chrome OS Device",
          "parameters": {
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields."
            },
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "deviceId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of Chrome OS Device",
              "type": "string"
            }
          },
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        },
        "moveDevicesToOu": {
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "description": "Full path of the target organizational unit or its ID",
              "location": "query",
              "required": true
            },
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        },
        "action": {
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "description": "Take action on Chrome OS Device",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "parameters": {
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "resourceId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of Chrome OS Device",
              "location": "path"
            }
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "id": "directory.chromeosdevices.action"
        },
        "get": {
          "id": "directory.chromeosdevices.get",
          "description": "Retrieve Chrome OS Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "parameters": {
            "deviceId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of Chrome OS Device"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "projection": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            }
          },
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        },
        "update": {
          "id": "directory.chromeosdevices.update",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "description": "Update Chrome OS Device",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields."
            },
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "httpMethod": "PUT"
        }
      }
    },
    "members": {
      "methods": {
        "get": {
          "description": "Retrieve Group Member",
          "parameters": {
            "groupKey": {
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the group",
              "location": "path"
            },
            "memberKey": {
              "description": "Email or immutable ID of the member",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Member"
          },
          "id": "directory.members.get",
          "httpMethod": "GET",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "update": {
          "parameters": {
            "groupKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true
            },
            "memberKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object"
            }
          },
          "response": {
            "$ref": "Member"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Update membership of a user in the specified group.",
          "httpMethod": "PUT",
          "id": "directory.members.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "request": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "list": {
          "httpMethod": "GET",
          "description": "Retrieve all members in a group (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "response": {
            "$ref": "Members"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "parameters": {
            "includeDerivedMembership": {
              "type": "boolean",
              "location": "query",
              "description": "Whether to list indirect memberships. Default: false."
            },
            "roles": {
              "location": "query",
              "type": "string",
              "description": "Comma separated role values to filter list results on."
            },
            "groupKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group"
            },
            "maxResults": {
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "type": "integer",
              "default": "200",
              "minimum": "1",
              "format": "int32",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify next page in the list"
            }
          },
          "parameterOrder": [
            "groupKey"
          ],
          "id": "directory.members.list"
        },
        "patch": {
          "response": {
            "$ref": "Member"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string"
            },
            "memberKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "location": "path"
            }
          },
          "request": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.patch",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "description": "Patch Member via Apiary Patch Orchestration"
        },
        "insert": {
          "description": "Add user to the specified group.",
          "httpMethod": "POST",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "id": "directory.members.insert",
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "response": {
            "$ref": "Member"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "request": {
            "$ref": "Member"
          }
        },
        "delete": {
          "id": "directory.members.delete",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group",
              "required": true,
              "location": "path"
            },
            "memberKey": {
              "required": true,
              "description": "Email or immutable ID of the member",
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Remove membership.",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        },
        "hasMember": {
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path"
            },
            "memberKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID."
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "httpMethod": "GET",
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "id": "directory.members.hasMember",
          "response": {
            "$ref": "MembersHasMember"
          }
        }
      }
    },
    "customers": {
      "methods": {
        "patch": {
          "id": "directory.customers.patch",
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ],
          "response": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "description": "Patch Customers via Apiary Patch Orchestration",
          "request": {
            "$ref": "Customer"
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "PATCH"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "description": "Retrieves a customer.",
          "parameters": {
            "customerKey": {
              "type": "string",
              "location": "path",
              "description": "Id of the customer to be retrieved",
              "required": true
            }
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.get",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Customer"
          }
        },
        "update": {
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "description": "Updates a customer.",
          "path": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "PUT",
          "id": "directory.customers.update",
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "response": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "request": {
            "$ref": "Customer"
          },
          "parameterOrder": [
            "customerKey"
          ]
        }
      }
    },
    "resources": {
      "resources": {
        "buildings": {
          "methods": {
            "list": {
              "httpMethod": "GET",
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                },
                "maxResults": {
                  "type": "integer",
                  "description": "Maximum number of results to return.",
                  "minimum": "1",
                  "maximum": "500",
                  "location": "query",
                  "format": "int32"
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Token to specify the next page in the list."
                }
              },
              "id": "directory.resources.buildings.list",
              "description": "Retrieves a list of buildings for an account.",
              "response": {
                "$ref": "Buildings"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "delete": {
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.delete",
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "location": "path",
                  "description": "The id of the building to delete.",
                  "required": true
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Deletes a building."
            },
            "get": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "id": "directory.resources.buildings.get",
              "description": "Retrieves a building.",
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "buildingId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the building to retrieve."
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              }
            },
            "update": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Updates a building.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "response": {
                "$ref": "Building"
              },
              "request": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.update",
              "parameters": {
                "coordinatesSource": {
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "location": "query",
                  "description": "Source from which Building.coordinates are derived."
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "buildingId": {
                  "type": "string",
                  "description": "The id of the building to update.",
                  "location": "path",
                  "required": true
                }
              },
              "httpMethod": "PUT"
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "PATCH",
              "id": "directory.resources.buildings.patch",
              "request": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                },
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "location": "query",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "type": "string",
                  "default": "SOURCE_UNSPECIFIED"
                },
                "buildingId": {
                  "description": "The id of the building to update.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "description": "Patches a building via Apiary Patch Orchestration.",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "response": {
                "$ref": "Building"
              }
            },
            "insert": {
              "parameterOrder": [
                "customer"
              ],
              "request": {
                "$ref": "Building"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "description": "Inserts a building.",
              "id": "directory.resources.buildings.insert",
              "httpMethod": "POST",
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "coordinatesSource": {
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED",
                  "type": "string",
                  "location": "query",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ]
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings"
            }
          }
        },
        "features": {
          "methods": {
            "get": {
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.features.get",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Retrieves a feature.",
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                },
                "featureKey": {
                  "description": "The unique ID of the feature to retrieve.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "GET",
              "response": {
                "$ref": "Feature"
              }
            },
            "patch": {
              "response": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.patch",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "request": {
                "$ref": "Feature"
              },
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                },
                "featureKey": {
                  "description": "The unique ID of the feature to update.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "httpMethod": "PATCH"
            },
            "insert": {
              "description": "Inserts a feature.",
              "parameterOrder": [
                "customer"
              ],
              "request": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.insert",
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features"
            },
            "rename": {
              "id": "directory.resources.features.rename",
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                },
                "oldName": {
                  "description": "The unique ID of the feature to rename.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "description": "Renames a feature.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "FeatureRename"
              },
              "httpMethod": "POST"
            },
            "update": {
              "description": "Updates a feature.",
              "httpMethod": "PUT",
              "request": {
                "$ref": "Feature"
              },
              "response": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "featureKey": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID of the feature to update.",
                  "required": true
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "id": "directory.resources.features.update",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "list": {
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                },
                "pageToken": {
                  "type": "string",
                  "description": "Token to specify the next page in the list.",
                  "location": "query"
                },
                "maxResults": {
                  "format": "int32",
                  "maximum": "500",
                  "type": "integer",
                  "minimum": "1",
                  "description": "Maximum number of results to return.",
                  "location": "query"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "description": "Retrieves a list of features for an account.",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.features.list",
              "httpMethod": "GET",
              "response": {
                "$ref": "Features"
              }
            },
            "delete": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Deletes a feature.",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "DELETE",
              "id": "directory.resources.features.delete",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "featureKey": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the feature to delete.",
                  "required": true
                }
              }
            }
          }
        },
        "calendars": {
          "methods": {
            "list": {
              "description": "Retrieves a list of calendar resources for an account.",
              "parameters": {
                "maxResults": {
                  "description": "Maximum number of results to return.",
                  "minimum": "1",
                  "type": "integer",
                  "maximum": "500",
                  "location": "query",
                  "format": "int32"
                },
                "query": {
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone.",
                  "location": "query",
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "type": "string",
                  "location": "query"
                },
                "orderBy": {
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order.",
                  "location": "query",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "CalendarResources"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.calendars.list",
              "parameterOrder": [
                "customer"
              ],
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars"
            },
            "patch": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "PATCH",
              "response": {
                "$ref": "CalendarResource"
              },
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "request": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "description": "The unique ID of the calendar resource to update.",
                  "location": "path",
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "id": "directory.resources.calendars.patch"
            },
            "insert": {
              "description": "Inserts a calendar resource.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.calendars.insert",
              "response": {
                "$ref": "CalendarResource"
              },
              "httpMethod": "POST",
              "request": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              }
            },
            "update": {
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "response": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "request": {
                "$ref": "CalendarResource"
              },
              "id": "directory.resources.calendars.update",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "calendarResourceId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the calendar resource to update."
                }
              },
              "httpMethod": "PUT",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ]
            },
            "delete": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.delete",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "parameters": {
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                }
              },
              "httpMethod": "DELETE",
              "description": "Deletes a calendar resource.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "get": {
              "response": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "calendarResourceId": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "location": "path"
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "description": "Retrieves a calendar resource.",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.get"
            }
          }
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "response": {
            "$ref": "Privileges"
          },
          "id": "directory.privileges.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "httpMethod": "GET"
        }
      }
    },
    "schemas": {
      "methods": {
        "get": {
          "id": "directory.schemas.get",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "schemaKey": {
              "required": true,
              "description": "Name or immutable ID of the schema",
              "location": "path",
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "httpMethod": "GET",
          "description": "Retrieve schema",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          }
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.delete",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "parameters": {
            "schemaKey": {
              "type": "string",
              "description": "Name or immutable ID of the schema",
              "location": "path",
              "required": true
            },
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "httpMethod": "DELETE",
          "description": "Delete schema",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        },
        "update": {
          "httpMethod": "PUT",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "response": {
            "$ref": "Schema"
          },
          "description": "Update schema",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.update",
          "request": {
            "$ref": "Schema"
          },
          "parameters": {
            "schemaKey": {
              "description": "Name or immutable ID of the schema.",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            }
          }
        },
        "patch": {
          "request": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "response": {
            "$ref": "Schema"
          },
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "schemaKey": {
              "location": "path",
              "type": "string",
              "description": "Name or immutable ID of the schema.",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.patch",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Patch Schema via Apiary Patch Orchestration",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "httpMethod": "PATCH"
        },
        "list": {
          "id": "directory.schemas.list",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "response": {
            "$ref": "Schemas"
          },
          "description": "Retrieve all schemas for a customer",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "httpMethod": "GET"
        },
        "insert": {
          "id": "directory.schemas.insert",
          "request": {
            "$ref": "Schema"
          },
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "POST",
          "description": "Create schema.",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "path": "admin/directory/v1/customer/{customerId}/schemas"
        }
      }
    },
    "tokens": {
      "methods": {
        "get": {
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "clientId": {
              "location": "path",
              "type": "string",
              "description": "The Client ID of the application the token is issued to.",
              "required": true
            }
          },
          "response": {
            "$ref": "Token"
          },
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Get information about an access token issued by a user.",
          "httpMethod": "GET",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "id": "directory.tokens.get"
        },
        "list": {
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "id": "directory.tokens.list",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Tokens"
          },
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          }
        },
        "delete": {
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Delete all access tokens issued by a user for an application.",
          "parameters": {
            "clientId": {
              "type": "string",
              "description": "The Client ID of the application the token is issued to.",
              "location": "path",
              "required": true
            },
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "id": "directory.tokens.delete",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "id": "directory.twoStepVerification.turnOff",
          "httpMethod": "POST",
          "description": "Turn off 2-Step Verification for user.",
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          }
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "list": {
          "response": {
            "$ref": "MobileDevices"
          },
          "id": "directory.mobiledevices.list",
          "parameterOrder": [
            "customerId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "parameters": {
            "projection": {
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ]
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "maxResults": {
              "default": "100",
              "location": "query",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "format": "int32",
              "maximum": "100",
              "minimum": "1",
              "type": "integer"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "location": "query"
            },
            "query": {
              "type": "string",
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "location": "query"
            }
          },
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "httpMethod": "GET"
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameters": {
            "resourceId": {
              "required": true,
              "description": "Immutable ID of Mobile Device",
              "location": "path",
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "httpMethod": "DELETE",
          "description": "Delete Mobile Device",
          "id": "directory.mobiledevices.delete",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ]
        },
        "get": {
          "description": "Retrieve Mobile Device",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameters": {
            "resourceId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of Mobile Device",
              "type": "string"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            },
            "projection": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "description": "Restrict information returned to a set of selected fields."
            }
          },
          "id": "directory.mobiledevices.get",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "response": {
            "$ref": "MobileDevice"
          },
          "httpMethod": "GET"
        },
        "action": {
          "id": "directory.mobiledevices.action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "description": "Take action on Mobile Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "parameters": {
            "resourceId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of Mobile Device"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "MobileDeviceAction"
          }
        }
      }
    },
    "domainAliases": {
      "methods": {
        "get": {
          "id": "directory.domainAliases.get",
          "httpMethod": "GET",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "response": {
            "$ref": "DomainAlias"
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameters": {
            "domainAliasName": {
              "type": "string",
              "description": "Name of domain alias to be retrieved.",
              "location": "path",
              "required": true
            },
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "description": "Retrieves a domain alias of the customer."
        },
        "delete": {
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            },
            "domainAliasName": {
              "required": true,
              "type": "string",
              "description": "Name of domain alias to be retrieved.",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "description": "Deletes a domain Alias of the customer.",
          "httpMethod": "DELETE",
          "id": "directory.domainAliases.delete",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}"
        },
        "list": {
          "httpMethod": "GET",
          "id": "directory.domainAliases.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "description": "Lists the domain aliases of the customer.",
          "parameters": {
            "parentDomainName": {
              "type": "string",
              "location": "query",
              "description": "Name of the parent domain for which domain aliases are to be fetched."
            },
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "DomainAliases"
          }
        },
        "insert": {
          "parameterOrder": [
            "customer"
          ],
          "description": "Inserts a domain alias of the customer.",
          "httpMethod": "POST",
          "id": "directory.domainAliases.insert",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "response": {
            "$ref": "DomainAlias"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            }
          },
          "request": {
            "$ref": "DomainAlias"
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases"
        }
      }
    },
    "domains": {
      "methods": {
        "delete": {
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "httpMethod": "DELETE",
          "id": "directory.domains.delete",
          "description": "Deletes a domain of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameters": {
            "domainName": {
              "type": "string",
              "required": true,
              "description": "Name of domain to be deleted",
              "location": "path"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          }
        },
        "insert": {
          "parameterOrder": [
            "customer"
          ],
          "request": {
            "$ref": "Domains"
          },
          "description": "Inserts a domain of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "POST",
          "id": "directory.domains.insert",
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Domains"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ]
        },
        "get": {
          "description": "Retrieves a domain of the customer.",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "httpMethod": "GET",
          "id": "directory.domains.get",
          "response": {
            "$ref": "Domains"
          },
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            },
            "domainName": {
              "description": "Name of domain to be retrieved",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}"
        },
        "list": {
          "response": {
            "$ref": "Domains2"
          },
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domains",
          "description": "Lists the domains of the customer.",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "GET",
          "id": "directory.domains.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ]
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "methods": {
                "issueCommand": {
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "httpMethod": "POST",
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "parameters": {
                    "customerId": {
                      "type": "string",
                      "location": "path",
                      "description": "Immutable. Immutable ID of the G Suite account.",
                      "required": true
                    },
                    "deviceId": {
                      "type": "string",
                      "description": "Immutable. Immutable ID of Chrome OS Device.",
                      "location": "path",
                      "required": true
                    }
                  },
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "description": "Issues a command for the device to execute.",
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "id": "admin.customer.devices.chromeos.issueCommand"
                }
              },
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "description": "Gets command data a specific command issued to the device.",
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "parameters": {
                        "customerId": {
                          "location": "path",
                          "required": true,
                          "type": "string",
                          "description": "Immutable. Immutable ID of the G Suite account."
                        },
                        "deviceId": {
                          "type": "string",
                          "description": "Immutable. Immutable ID of Chrome OS Device.",
                          "required": true,
                          "location": "path"
                        },
                        "commandId": {
                          "description": "Immutable. Immutable ID of Chrome OS Device Command.",
                          "location": "path",
                          "type": "string",
                          "format": "int64",
                          "required": true
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ],
                      "id": "admin.customer.devices.chromeos.commands.get",
                      "httpMethod": "GET"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "asps": {
      "methods": {
        "delete": {
          "description": "Delete an ASP issued by a user.",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.delete",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            },
            "codeId": {
              "location": "path",
              "format": "int32",
              "required": true,
              "description": "The unique ID of the ASP to be deleted.",
              "type": "integer"
            }
          }
        },
        "get": {
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            },
            "codeId": {
              "location": "path",
              "format": "int32",
              "type": "integer",
              "required": true,
              "description": "The unique ID of the ASP."
            }
          },
          "response": {
            "$ref": "Asp"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "description": "Get information about an ASP issued by a user.",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.get",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "httpMethod": "GET"
        },
        "list": {
          "id": "directory.asps.list",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "httpMethod": "GET",
          "response": {
            "$ref": "Asps"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "description": "List the ASPs issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/asps"
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {},
          "path": "admin/directory_v1/channels/stop",
          "parameterOrder": [],
          "flatPath": "admin/directory_v1/channels/stop",
          "request": {
            "$ref": "Channel"
          },
          "id": "admin.channels.stop",
          "httpMethod": "POST",
          "description": "Stop watching resources through this channel."
        }
      }
    }
  },
  "rootUrl": "https://www.googleapis.com/",
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "parameters": {
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "prettyPrint": {
      "default": "true",
      "type": "boolean",
      "location": "query",
      "description": "Returns response with indentations and line breaks."
    },
    "upload_protocol": {
      "location": "query",
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response.",
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query",
      "default": "json"
    }
  }
}
