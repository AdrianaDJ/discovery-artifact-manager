{
  "version": "directory_v1",
  "ownerDomain": "google.com",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "canonicalName": "directory",
  "batchPath": "batch/admin/directory_v1",
  "rootUrl": "https://www.googleapis.com/",
  "protocol": "rest",
  "basePath": "",
  "revision": "20201013",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        }
      }
    }
  },
  "servicePath": "",
  "parameters": {
    "uploadType": {
      "location": "query",
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "prettyPrint": {
      "location": "query",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "location": "query",
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "access_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth access token."
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "location": "query",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response."
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    }
  },
  "resources": {
    "customers": {
      "methods": {
        "get": {
          "id": "directory.customers.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameters": {
            "customerKey": {
              "type": "string",
              "required": true,
              "description": "Id of the customer to be retrieved",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerKey"
          ],
          "response": {
            "$ref": "Customer"
          },
          "description": "Retrieves a customer.",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customers/{customerKey}"
        },
        "update": {
          "request": {
            "$ref": "Customer"
          },
          "parameterOrder": [
            "customerKey"
          ],
          "httpMethod": "PUT",
          "id": "directory.customers.update",
          "path": "admin/directory/v1/customers/{customerKey}",
          "description": "Updates a customer.",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "response": {
            "$ref": "Customer"
          }
        },
        "patch": {
          "id": "directory.customers.patch",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "description": "Patch Customers via Apiary Patch Orchestration",
          "parameterOrder": [
            "customerKey"
          ],
          "request": {
            "$ref": "Customer"
          },
          "response": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "parameters": {
            "customerKey": {
              "required": true,
              "location": "path",
              "description": "Id of the customer to be updated",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "PATCH"
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            }
          },
          "httpMethod": "GET",
          "id": "directory.privileges.list",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "response": {
            "$ref": "Privileges"
          }
        }
      }
    },
    "orgunits": {
      "methods": {
        "update": {
          "id": "directory.orgunits.update",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "response": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "request": {
            "$ref": "OrgUnit"
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "httpMethod": "PUT",
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "orgUnitPath": {
              "location": "path",
              "type": "string",
              "pattern": "^.*$",
              "required": true,
              "description": "Full path of the organizational unit or its ID"
            }
          },
          "description": "Update organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        },
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "orgUnitPath": {
              "type": "string",
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID",
              "required": true,
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "description": "Remove organizational unit",
          "id": "directory.orgunits.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        },
        "patch": {
          "request": {
            "$ref": "OrgUnit"
          },
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "id": "directory.orgunits.patch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            },
            "orgUnitPath": {
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID",
              "location": "path",
              "required": true,
              "type": "string"
            }
          }
        },
        "insert": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "description": "Add organizational unit",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "POST",
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "id": "directory.orgunits.insert",
          "request": {
            "$ref": "OrgUnit"
          },
          "response": {
            "$ref": "OrgUnit"
          }
        },
        "list": {
          "description": "Retrieve all organizational units",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "id": "directory.orgunits.list",
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "response": {
            "$ref": "OrgUnits"
          },
          "parameters": {
            "type": {
              "description": "Whether to return all sub-organizations or just immediate children",
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ],
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "type": "string",
              "location": "query"
            },
            "orgUnitPath": {
              "default": "",
              "type": "string",
              "location": "query",
              "description": "the URL-encoded organizational unit's path or its ID"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          }
        },
        "get": {
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "httpMethod": "GET",
          "description": "Retrieve organizational unit",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "orgUnitPath": {
              "type": "string",
              "description": "Full path of the organizational unit or its ID",
              "location": "path",
              "required": true,
              "pattern": "^.*$"
            }
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.get",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}"
        }
      }
    },
    "domainAliases": {
      "methods": {
        "delete": {
          "description": "Deletes a domain Alias of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "parameters": {
            "domainAliasName": {
              "type": "string",
              "description": "Name of domain alias to be retrieved.",
              "required": true,
              "location": "path"
            },
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "id": "directory.domainAliases.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "httpMethod": "DELETE"
        },
        "get": {
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            },
            "domainAliasName": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Name of domain alias to be retrieved."
            }
          },
          "description": "Retrieves a domain alias of the customer.",
          "id": "directory.domainAliases.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "httpMethod": "GET",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "response": {
            "$ref": "DomainAlias"
          }
        },
        "list": {
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            },
            "parentDomainName": {
              "description": "Name of the parent domain for which domain aliases are to be fetched.",
              "location": "query",
              "type": "string"
            }
          },
          "description": "Lists the domain aliases of the customer.",
          "id": "directory.domainAliases.list",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "response": {
            "$ref": "DomainAliases"
          }
        },
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "description": "Inserts a domain alias of the customer.",
          "id": "directory.domainAliases.insert",
          "request": {
            "$ref": "DomainAlias"
          },
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "POST",
          "response": {
            "$ref": "DomainAlias"
          },
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ]
        }
      }
    },
    "roles": {
      "methods": {
        "patch": {
          "id": "directory.roles.patch",
          "request": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Patch role via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            },
            "roleId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the role."
            }
          }
        },
        "delete": {
          "id": "directory.roles.delete",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Deletes a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            },
            "roleId": {
              "location": "path",
              "description": "Immutable ID of the role.",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "get": {
          "parameters": {
            "roleId": {
              "description": "Immutable ID of the role.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "response": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Retrieves a role.",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "id": "directory.roles.get"
        },
        "update": {
          "request": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "description": "Updates a role.",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "roleId": {
              "description": "Immutable ID of the role.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roles.update"
        },
        "list": {
          "httpMethod": "GET",
          "parameters": {
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify the next page in the list."
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "maxResults": {
              "description": "Maximum number of results to return.",
              "location": "query",
              "type": "integer",
              "minimum": "1",
              "format": "int32",
              "maximum": "100"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles",
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "id": "directory.roles.list",
          "response": {
            "$ref": "Roles"
          },
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles"
        },
        "insert": {
          "request": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "id": "directory.roles.insert",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "Role"
          },
          "httpMethod": "POST",
          "description": "Creates a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "path": "admin/directory/v1/customer/{customer}/roles"
        }
      }
    },
    "members": {
      "methods": {
        "insert": {
          "description": "Add user to the specified group.",
          "response": {
            "$ref": "Member"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "id": "directory.members.insert",
          "request": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "httpMethod": "POST",
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the group",
              "type": "string"
            }
          }
        },
        "update": {
          "request": {
            "$ref": "Member"
          },
          "description": "Update membership of a user in the specified group.",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "groupKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            },
            "memberKey": {
              "location": "path",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "PUT",
          "id": "directory.members.update",
          "response": {
            "$ref": "Member"
          }
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameterOrder": [
            "groupKey"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "description": "Retrieve all members in a group (paginated)",
          "id": "directory.members.list",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "response": {
            "$ref": "Members"
          },
          "parameters": {
            "roles": {
              "description": "Comma separated role values to filter list results on.",
              "type": "string",
              "location": "query"
            },
            "includeDerivedMembership": {
              "type": "boolean",
              "description": "Whether to list indirect memberships. Default: false.",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "groupKey": {
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group",
              "required": true
            },
            "maxResults": {
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "location": "query",
              "minimum": "1",
              "default": "200",
              "type": "integer"
            }
          }
        },
        "get": {
          "description": "Retrieve Group Member",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "GET",
          "id": "directory.members.get",
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group",
              "required": true,
              "type": "string"
            },
            "memberKey": {
              "required": true,
              "description": "Email or immutable ID of the member",
              "type": "string",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Member"
          }
        },
        "patch": {
          "httpMethod": "PATCH",
          "parameters": {
            "groupKey": {
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "location": "path"
            },
            "memberKey": {
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "response": {
            "$ref": "Member"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Patch Member via Apiary Patch Orchestration",
          "request": {
            "$ref": "Member"
          },
          "id": "directory.members.patch",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        },
        "hasMember": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "parameters": {
            "groupKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID."
            },
            "memberKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "type": "string"
            }
          },
          "response": {
            "$ref": "MembersHasMember"
          },
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "httpMethod": "GET",
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "id": "directory.members.hasMember"
        },
        "delete": {
          "id": "directory.members.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameters": {
            "memberKey": {
              "type": "string",
              "description": "Email or immutable ID of the member",
              "location": "path",
              "required": true
            },
            "groupKey": {
              "required": true,
              "description": "Email or immutable ID of the group",
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Remove membership.",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        }
      }
    },
    "asps": {
      "methods": {
        "delete": {
          "httpMethod": "DELETE",
          "description": "Delete an ASP issued by a user.",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            },
            "codeId": {
              "required": true,
              "format": "int32",
              "type": "integer",
              "description": "The unique ID of the ASP to be deleted.",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.asps.delete",
          "parameterOrder": [
            "userKey",
            "codeId"
          ]
        },
        "list": {
          "description": "List the ASPs issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/asps",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Asps"
          },
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "id": "directory.asps.list",
          "httpMethod": "GET"
        },
        "get": {
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            },
            "codeId": {
              "format": "int32",
              "description": "The unique ID of the ASP.",
              "type": "integer",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "response": {
            "$ref": "Asp"
          },
          "description": "Get information about an ASP issued by a user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.get",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "httpMethod": "GET"
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.twoStepVerification.turnOff",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "description": "Turn off 2-Step Verification for user.",
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ]
        }
      }
    },
    "resources": {
      "resources": {
        "features": {
          "methods": {
            "patch": {
              "request": {
                "$ref": "Feature"
              },
              "parameters": {
                "featureKey": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the feature to update."
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "id": "directory.resources.features.patch",
              "httpMethod": "PATCH",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "response": {
                "$ref": "Feature"
              },
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "insert": {
              "description": "Inserts a feature.",
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "id": "directory.resources.features.insert",
              "parameterOrder": [
                "customer"
              ],
              "request": {
                "$ref": "Feature"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "response": {
                "$ref": "Feature"
              },
              "httpMethod": "POST"
            },
            "delete": {
              "description": "Deletes a feature.",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "featureKey": {
                  "description": "The unique ID of the feature to delete.",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.delete"
            },
            "list": {
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "parameters": {
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                },
                "maxResults": {
                  "description": "Maximum number of results to return.",
                  "format": "int32",
                  "type": "integer",
                  "location": "query",
                  "minimum": "1",
                  "maximum": "500"
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "location": "query",
                  "type": "string"
                }
              },
              "httpMethod": "GET",
              "id": "directory.resources.features.list",
              "parameterOrder": [
                "customer"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "response": {
                "$ref": "Features"
              },
              "description": "Retrieves a list of features for an account.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "rename": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Renames a feature.",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "id": "directory.resources.features.rename",
              "request": {
                "$ref": "FeatureRename"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "httpMethod": "POST",
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                },
                "oldName": {
                  "description": "The unique ID of the feature to rename.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              }
            },
            "get": {
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "description": "The unique ID of the feature to retrieve.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "response": {
                "$ref": "Feature"
              },
              "id": "directory.resources.features.get",
              "description": "Retrieves a feature."
            },
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "Feature"
              },
              "httpMethod": "PUT",
              "description": "Updates a feature.",
              "id": "directory.resources.features.update",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "featureKey": {
                  "description": "The unique ID of the feature to update.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "response": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            }
          }
        },
        "buildings": {
          "methods": {
            "insert": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "parameters": {
                "coordinatesSource": {
                  "default": "SOURCE_UNSPECIFIED",
                  "type": "string",
                  "description": "Source from which Building.coordinates are derived.",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "location": "query",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ]
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.buildings.insert",
              "request": {
                "$ref": "Building"
              },
              "httpMethod": "POST",
              "response": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer"
              ],
              "description": "Inserts a building."
            },
            "patch": {
              "response": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.patch",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "buildingId": {
                  "description": "The id of the building to update.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "coordinatesSource": {
                  "description": "Source from which Building.coordinates are derived.",
                  "type": "string",
                  "default": "SOURCE_UNSPECIFIED",
                  "location": "query",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ]
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Patches a building via Apiary Patch Orchestration.",
              "request": {
                "$ref": "Building"
              },
              "httpMethod": "PATCH"
            },
            "get": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              },
              "httpMethod": "GET",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "id": "directory.resources.buildings.get",
              "description": "Retrieves a building.",
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "description": "The unique ID of the building to retrieve.",
                  "location": "path",
                  "required": true
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "list": {
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Token to specify the next page in the list."
                },
                "maxResults": {
                  "location": "query",
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "minimum": "1",
                  "format": "int32",
                  "type": "integer"
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                }
              },
              "description": "Retrieves a list of buildings for an account.",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "id": "directory.resources.buildings.list",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "Buildings"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "httpMethod": "GET"
            },
            "update": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "PUT",
              "response": {
                "$ref": "Building"
              },
              "description": "Updates a building.",
              "request": {
                "$ref": "Building"
              },
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                },
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "type": "string",
                  "default": "SOURCE_UNSPECIFIED",
                  "location": "query"
                },
                "buildingId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The id of the building to update."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.buildings.update",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ]
            },
            "delete": {
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "description": "Deletes a building.",
              "id": "directory.resources.buildings.delete",
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "buildingId": {
                  "location": "path",
                  "type": "string",
                  "description": "The id of the building to delete.",
                  "required": true
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            }
          }
        },
        "calendars": {
          "methods": {
            "patch": {
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "id": "directory.resources.calendars.patch",
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                },
                "calendarResourceId": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the calendar resource to update.",
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "PATCH",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "request": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "update": {
              "httpMethod": "PUT",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "request": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                },
                "calendarResourceId": {
                  "required": true,
                  "description": "The unique ID of the calendar resource to update.",
                  "type": "string",
                  "location": "path"
                }
              },
              "id": "directory.resources.calendars.update",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "response": {
                "$ref": "CalendarResource"
              }
            },
            "delete": {
              "parameters": {
                "calendarResourceId": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the calendar resource to delete.",
                  "location": "path"
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "id": "directory.resources.calendars.delete",
              "httpMethod": "DELETE",
              "description": "Deletes a calendar resource.",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "get": {
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "calendarResourceId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the calendar resource to retrieve."
                }
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a calendar resource.",
              "id": "directory.resources.calendars.get",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              }
            },
            "insert": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "POST",
              "description": "Inserts a calendar resource.",
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.calendars.insert",
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "response": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "request": {
                "$ref": "CalendarResource"
              }
            },
            "list": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameters": {
                "query": {
                  "location": "query",
                  "type": "string",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone."
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                },
                "orderBy": {
                  "location": "query",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order.",
                  "type": "string"
                },
                "maxResults": {
                  "maximum": "500",
                  "description": "Maximum number of results to return.",
                  "minimum": "1",
                  "type": "integer",
                  "format": "int32",
                  "location": "query"
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "CalendarResources"
              },
              "parameterOrder": [
                "customer"
              ],
              "description": "Retrieves a list of calendar resources for an account.",
              "httpMethod": "GET",
              "id": "directory.resources.calendars.list",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            }
          }
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "insert": {
          "id": "directory.roleAssignments.insert",
          "description": "Creates a role assignment.",
          "request": {
            "$ref": "RoleAssignment"
          },
          "httpMethod": "POST",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "response": {
            "$ref": "RoleAssignment"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ]
        },
        "list": {
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "response": {
            "$ref": "RoleAssignments"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer"
          ],
          "description": "Retrieves a paginated list of all roleAssignments.",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "id": "directory.roleAssignments.list",
          "parameters": {
            "maxResults": {
              "minimum": "1",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "location": "query",
              "maximum": "200",
              "type": "integer"
            },
            "roleId": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID."
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify the next page in the list."
            },
            "userKey": {
              "location": "query",
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            }
          }
        },
        "delete": {
          "id": "directory.roleAssignments.delete",
          "description": "Deletes a role assignment.",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            },
            "roleAssignmentId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role assignment.",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "get": {
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "httpMethod": "GET",
          "id": "directory.roleAssignments.get",
          "description": "Retrieve a role assignment.",
          "parameters": {
            "roleAssignmentId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the role assignment."
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "response": {
            "$ref": "RoleAssignment"
          }
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ],
                      "description": "Gets command data a specific command issued to the device.",
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "id": "admin.customer.devices.chromeos.commands.get",
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "httpMethod": "GET",
                      "parameters": {
                        "commandId": {
                          "format": "int64",
                          "type": "string",
                          "location": "path",
                          "description": "Immutable. Immutable ID of Chrome OS Device Command.",
                          "required": true
                        },
                        "deviceId": {
                          "type": "string",
                          "location": "path",
                          "required": true,
                          "description": "Immutable. Immutable ID of Chrome OS Device."
                        },
                        "customerId": {
                          "type": "string",
                          "location": "path",
                          "required": true,
                          "description": "Immutable. Immutable ID of the G Suite account."
                        }
                      },
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}"
                    }
                  }
                }
              },
              "methods": {
                "issueCommand": {
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "description": "Issues a command for the device to execute.",
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "parameters": {
                    "customerId": {
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "description": "Immutable. Immutable ID of the G Suite account."
                    },
                    "deviceId": {
                      "required": true,
                      "description": "Immutable. Immutable ID of Chrome OS Device.",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ],
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand"
                }
              }
            }
          }
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "list": {
          "id": "directory.chromeosdevices.list",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "query": {
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "location": "query",
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "sortOrder": {
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used"
            },
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "location": "query",
              "type": "string"
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            },
            "orderBy": {
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ],
              "location": "query",
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "type": "string",
              "description": "Column to use for sorting results"
            },
            "maxResults": {
              "description": "Maximum number of results to return.",
              "format": "int32",
              "type": "integer",
              "location": "query",
              "default": "100",
              "minimum": "1"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "response": {
            "$ref": "ChromeOsDevices"
          }
        },
        "get": {
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "id": "directory.chromeosdevices.get",
          "description": "Retrieve Chrome OS Device",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "httpMethod": "GET",
          "parameters": {
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "projection": {
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            }
          }
        },
        "update": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            },
            "deviceId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of Chrome OS Device"
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            }
          },
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.update",
          "description": "Update Chrome OS Device",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ]
        },
        "patch": {
          "id": "directory.chromeosdevices.patch",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "deviceId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of Chrome OS Device"
            },
            "projection": {
              "type": "string",
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            }
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "description": "Patch Chrome OS Device",
          "httpMethod": "PATCH",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ]
        },
        "moveDevicesToOu": {
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "location": "query",
              "required": true,
              "description": "Full path of the target organizational unit or its ID"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "httpMethod": "POST"
        },
        "action": {
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "httpMethod": "POST",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            },
            "resourceId": {
              "description": "Immutable ID of Chrome OS Device",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "id": "directory.chromeosdevices.action",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "description": "Take action on Chrome OS Device"
        }
      }
    },
    "domains": {
      "methods": {
        "insert": {
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "POST",
          "description": "Inserts a domain of the customer.",
          "response": {
            "$ref": "Domains"
          },
          "request": {
            "$ref": "Domains"
          },
          "path": "admin/directory/v1/customer/{customer}/domains",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domains.insert",
          "parameterOrder": [
            "customer"
          ]
        },
        "get": {
          "response": {
            "$ref": "Domains"
          },
          "description": "Retrieves a domain of the customer.",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "id": "directory.domains.get",
          "parameters": {
            "domainName": {
              "required": true,
              "location": "path",
              "description": "Name of domain to be retrieved",
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          }
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "GET",
          "response": {
            "$ref": "Domains2"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "id": "directory.domains.list",
          "parameterOrder": [
            "customer"
          ],
          "description": "Lists the domains of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domains",
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          }
        },
        "delete": {
          "id": "directory.domains.delete",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "description": "Deletes a domain of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "domainName": {
              "required": true,
              "description": "Name of domain to be deleted",
              "location": "path",
              "type": "string"
            }
          },
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}"
        }
      }
    },
    "users": {
      "resources": {
        "aliases": {
          "methods": {
            "insert": {
              "id": "directory.users.aliases.insert",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "parameterOrder": [
                "userKey"
              ],
              "httpMethod": "POST",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "response": {
                "$ref": "Alias"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "parameters": {
                "userKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true
                }
              },
              "description": "Add a alias for the user",
              "request": {
                "$ref": "Alias"
              }
            },
            "delete": {
              "parameters": {
                "alias": {
                  "location": "path",
                  "description": "The alias to be removed",
                  "type": "string",
                  "required": true
                },
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              },
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "description": "Remove a alias for the user",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "id": "directory.users.aliases.delete",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}"
            },
            "watch": {
              "parameters": {
                "event": {
                  "location": "query",
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "description": "Event on which subscription is intended (if subscribing)"
                },
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              },
              "id": "directory.users.aliases.watch",
              "description": "Watch for changes in users list",
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "response": {
                "$ref": "Channel"
              },
              "request": {
                "$ref": "Channel"
              },
              "httpMethod": "POST"
            },
            "list": {
              "description": "List all aliases for a user",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the user"
                }
              },
              "id": "directory.users.aliases.list",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "response": {
                "$ref": "Aliases"
              },
              "parameterOrder": [
                "userKey"
              ]
            }
          }
        },
        "photos": {
          "methods": {
            "get": {
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.get",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "description": "Retrieve photo of a user",
              "httpMethod": "GET"
            },
            "patch": {
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Email or immutable ID of the user"
                }
              },
              "description": "Patch Photo via Apiary Patch Orchestration",
              "id": "directory.users.photos.patch",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "UserPhoto"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              }
            },
            "update": {
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.photos.update",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "httpMethod": "PUT",
              "description": "Add a photo for the user",
              "response": {
                "$ref": "UserPhoto"
              },
              "request": {
                "$ref": "UserPhoto"
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "delete": {
              "id": "directory.users.photos.delete",
              "parameterOrder": [
                "userKey"
              ],
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "description": "Remove photos for the user",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Email or immutable ID of the user"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            }
          }
        }
      },
      "methods": {
        "makeAdmin": {
          "parameterOrder": [
            "userKey"
          ],
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the user as admin"
            }
          },
          "description": "change admin status of a user",
          "id": "directory.users.makeAdmin",
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "httpMethod": "POST"
        },
        "update": {
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.update",
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}",
          "description": "update user",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          },
          "httpMethod": "PUT",
          "request": {
            "$ref": "User"
          }
        },
        "get": {
          "id": "directory.users.get",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "description": "retrieve user",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the user"
            },
            "viewType": {
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "type": "string",
              "location": "query",
              "default": "admin_view"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "description": "What subset of fields to fetch for this user.",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "default": "basic",
              "type": "string",
              "location": "query"
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "path": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          }
        },
        "patch": {
          "description": "Patch Users via Apiary Patch Orchestration",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.patch",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          },
          "request": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "undelete": {
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "httpMethod": "POST",
          "id": "directory.users.undelete",
          "request": {
            "$ref": "UserUndelete"
          },
          "description": "Undelete a deleted user",
          "parameters": {
            "userKey": {
              "description": "The immutable id of the user",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "parameterOrder": [
            "userKey"
          ]
        },
        "watch": {
          "flatPath": "admin/directory/v1/users/watch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Watch for changes in users list",
          "parameterOrder": [],
          "id": "directory.users.watch",
          "httpMethod": "POST",
          "response": {
            "$ref": "Channel"
          },
          "request": {
            "$ref": "Channel"
          },
          "parameters": {
            "maxResults": {
              "format": "int32",
              "minimum": "1",
              "location": "query",
              "maximum": "500",
              "description": "Maximum number of results to return.",
              "default": "100",
              "type": "integer"
            },
            "event": {
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "description": "Event on which subscription is intended",
              "location": "query",
              "type": "string"
            },
            "orderBy": {
              "type": "string",
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "description": "Column to use for sorting results",
              "location": "query"
            },
            "sortOrder": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query",
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order."
            },
            "showDeleted": {
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            },
            "domain": {
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\"",
              "location": "query"
            },
            "customFieldMask": {
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string"
            },
            "projection": {
              "default": "basic",
              "type": "string",
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ],
              "location": "query",
              "description": "What subset of fields to fetch for this user.",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ]
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "location": "query",
              "type": "string"
            },
            "viewType": {
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "default": "admin_view",
              "location": "query",
              "type": "string",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user."
            }
          },
          "path": "admin/directory/v1/users/watch"
        },
        "signOut": {
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ],
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "id": "directory.users.signOut"
        },
        "list": {
          "parameters": {
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "projection": {
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "type": "string",
              "location": "query",
              "default": "basic",
              "description": "What subset of fields to fetch for this user.",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ]
            },
            "query": {
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "location": "query"
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "description": "Whether to return results in ascending or descending order.",
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "domain": {
              "type": "string",
              "location": "query",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead."
            },
            "maxResults": {
              "minimum": "1",
              "default": "100",
              "format": "int32",
              "type": "integer",
              "location": "query",
              "maximum": "500",
              "description": "Maximum number of results to return."
            },
            "showDeleted": {
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "location": "query"
            },
            "orderBy": {
              "location": "query",
              "type": "string",
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ]
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "location": "query"
            },
            "viewType": {
              "default": "admin_view",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "location": "query",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "type": "string",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ]
            },
            "customFieldMask": {
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query"
            }
          },
          "id": "directory.users.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "flatPath": "admin/directory/v1/users",
          "path": "admin/directory/v1/users",
          "response": {
            "$ref": "Users"
          },
          "httpMethod": "GET",
          "parameterOrder": []
        },
        "delete": {
          "id": "directory.users.delete",
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}",
          "description": "Delete user",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "httpMethod": "DELETE",
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user",
              "type": "string",
              "location": "path"
            }
          }
        },
        "insert": {
          "parameters": {},
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users",
          "request": {
            "$ref": "User"
          },
          "description": "create user.",
          "flatPath": "admin/directory/v1/users",
          "id": "directory.users.insert",
          "response": {
            "$ref": "User"
          },
          "parameterOrder": []
        }
      }
    },
    "tokens": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            }
          },
          "httpMethod": "GET",
          "id": "directory.tokens.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "response": {
            "$ref": "Tokens"
          },
          "parameterOrder": [
            "userKey"
          ]
        },
        "get": {
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "response": {
            "$ref": "Token"
          },
          "id": "directory.tokens.get",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Get information about an access token issued by a user.",
          "parameters": {
            "clientId": {
              "type": "string",
              "location": "path",
              "description": "The Client ID of the application the token is issued to.",
              "required": true
            },
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path"
            }
          }
        },
        "delete": {
          "description": "Delete all access tokens issued by a user for an application.",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "DELETE",
          "id": "directory.tokens.delete",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameters": {
            "clientId": {
              "type": "string",
              "location": "path",
              "description": "The Client ID of the application the token is issued to.",
              "required": true
            },
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true
            }
          }
        }
      }
    },
    "groups": {
      "resources": {
        "aliases": {
          "methods": {
            "list": {
              "parameters": {
                "groupKey": {
                  "required": true,
                  "description": "Email or immutable ID of the group",
                  "location": "path",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "response": {
                "$ref": "Aliases"
              },
              "parameterOrder": [
                "groupKey"
              ],
              "description": "List all aliases for a group",
              "httpMethod": "GET",
              "id": "directory.groups.aliases.list",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases"
            },
            "delete": {
              "id": "directory.groups.aliases.delete",
              "description": "Remove a alias for the group",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "parameters": {
                "alias": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The alias to be removed"
                },
                "groupKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the group",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "httpMethod": "DELETE"
            },
            "insert": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "description": "Add a alias for the group",
              "parameterOrder": [
                "groupKey"
              ],
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "id": "directory.groups.aliases.insert",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "request": {
                "$ref": "Alias"
              },
              "response": {
                "$ref": "Alias"
              },
              "httpMethod": "POST",
              "path": "admin/directory/v1/groups/{groupKey}/aliases"
            }
          }
        }
      },
      "methods": {
        "list": {
          "response": {
            "$ref": "Groups"
          },
          "path": "admin/directory/v1/groups",
          "flatPath": "admin/directory/v1/groups",
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "id": "directory.groups.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameterOrder": [],
          "parameters": {
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "type": "string",
              "location": "query"
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "email"
              ],
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "description": "Column to use for sorting results"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "customer": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain."
            },
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "location": "query"
            },
            "domain": {
              "location": "query",
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead.",
              "type": "string"
            },
            "maxResults": {
              "minimum": "1",
              "format": "int32",
              "type": "integer",
              "default": "200",
              "location": "query",
              "description": "Maximum number of results to return. Max allowed value is 200."
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string"
            }
          },
          "httpMethod": "GET"
        },
        "update": {
          "request": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "PUT",
          "description": "Update Group",
          "path": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "id": "directory.groups.update",
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "groupKey"
          ]
        },
        "patch": {
          "path": "admin/directory/v1/groups/{groupKey}",
          "description": "Patch Groups via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "response": {
            "$ref": "Group"
          },
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.groups.patch"
        },
        "delete": {
          "description": "Delete Group",
          "path": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "DELETE",
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the group",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.delete",
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ]
        },
        "get": {
          "description": "Retrieve Group",
          "path": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "GET",
          "parameterOrder": [
            "groupKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.get",
          "parameters": {
            "groupKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Email or immutable ID of the group"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "response": {
            "$ref": "Group"
          }
        },
        "insert": {
          "description": "Create Group",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameters": {},
          "path": "admin/directory/v1/groups",
          "response": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups",
          "request": {
            "$ref": "Group"
          },
          "httpMethod": "POST",
          "parameterOrder": [],
          "id": "directory.groups.insert"
        }
      }
    },
    "schemas": {
      "methods": {
        "update": {
          "response": {
            "$ref": "Schema"
          },
          "httpMethod": "PUT",
          "id": "directory.schemas.update",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Update schema",
          "request": {
            "$ref": "Schema"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "schemaKey": {
              "location": "path",
              "description": "Name or immutable ID of the schema.",
              "type": "string",
              "required": true
            },
            "customerId": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ]
        },
        "delete": {
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "id": "directory.schemas.delete",
          "parameters": {
            "schemaKey": {
              "required": true,
              "description": "Name or immutable ID of the schema",
              "type": "string",
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "DELETE",
          "description": "Delete schema",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ]
        },
        "insert": {
          "parameterOrder": [
            "customerId"
          ],
          "request": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "description": "Create schema.",
          "response": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.insert",
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas"
        },
        "get": {
          "response": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "schemaKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Name or immutable ID of the schema"
            }
          },
          "description": "Retrieve schema",
          "id": "directory.schemas.get"
        },
        "list": {
          "description": "Retrieve all schemas for a customer",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "id": "directory.schemas.list",
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Schemas"
          },
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "path": "admin/directory/v1/customer/{customerId}/schemas"
        },
        "patch": {
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "request": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.patch",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "parameters": {
            "schemaKey": {
              "required": true,
              "location": "path",
              "description": "Name or immutable ID of the schema.",
              "type": "string"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "response": {
            "$ref": "Schema"
          },
          "description": "Patch Schema via Apiary Patch Orchestration",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "PATCH"
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            },
            "resourceId": {
              "description": "Immutable ID of Mobile Device",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "id": "directory.mobiledevices.delete",
          "description": "Delete Mobile Device"
        },
        "get": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "id": "directory.mobiledevices.get",
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "parameters": {
            "projection": {
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "type": "string"
            },
            "resourceId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of Mobile Device",
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "description": "Retrieve Mobile Device",
          "response": {
            "$ref": "MobileDevice"
          }
        },
        "action": {
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "description": "Take action on Mobile Device",
          "httpMethod": "POST",
          "id": "directory.mobiledevices.action",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "parameters": {
            "resourceId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of Mobile Device"
            },
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          }
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.mobiledevices.list",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "httpMethod": "GET",
          "parameters": {
            "orderBy": {
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "description": "Column to use for sorting results",
              "location": "query",
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "type": "string"
            },
            "maxResults": {
              "default": "100",
              "minimum": "1",
              "location": "query",
              "format": "int32",
              "maximum": "100",
              "type": "integer",
              "description": "Maximum number of results to return. Max allowed value is 100."
            },
            "sortOrder": {
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "description": "Restrict information returned to a set of selected fields."
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search"
            },
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "response": {
            "$ref": "MobileDevices"
          }
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "invalidate": {
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user"
            }
          },
          "description": "Invalidate the current backup verification codes for the user.",
          "id": "directory.verificationCodes.invalidate",
          "httpMethod": "POST"
        },
        "list": {
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "VerificationCodes"
          },
          "id": "directory.verificationCodes.list",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          }
        },
        "generate": {
          "id": "directory.verificationCodes.generate",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "description": "Generate new backup verification codes for the user.",
          "httpMethod": "POST",
          "parameterOrder": [
            "userKey"
          ]
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "request": {
            "$ref": "Channel"
          },
          "parameterOrder": [],
          "flatPath": "admin/directory_v1/channels/stop",
          "parameters": {},
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "admin.channels.stop",
          "path": "admin/directory_v1/channels/stop",
          "description": "Stop watching resources through this channel."
        }
      }
    }
  },
  "fullyEncodeReservedExpansion": true,
  "packagePath": "admin",
  "baseUrl": "https://www.googleapis.com/",
  "ownerName": "Google",
  "id": "admin:directory_v1",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "schemas": {
    "ChromeOsDevices": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#chromeosdevices",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "chromeosdevices": {
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "type": "array",
          "description": "List of Chrome OS Device objects."
        }
      },
      "id": "ChromeOsDevices",
      "type": "object"
    },
    "Alias": {
      "description": "JSON template for Alias object in Directory API.",
      "properties": {
        "etag": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#alias",
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "id": "Alias",
      "type": "object"
    },
    "UserMakeAdmin": {
      "id": "UserMakeAdmin",
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "description": "Boolean indicating new admin status of the user"
        }
      }
    },
    "Features": {
      "type": "object",
      "id": "Features",
      "description": "Public API: Resources.features",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#featuresList",
          "type": "string"
        },
        "features": {
          "description": "The Features in this page of results.",
          "type": "array",
          "items": {
            "$ref": "Feature"
          }
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        }
      }
    },
    "Channel": {
      "properties": {
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Additional parameters controlling delivery channel behavior. Optional."
        },
        "address": {
          "type": "string",
          "description": "The address where notifications are delivered for this channel."
        },
        "kind": {
          "default": "api#channel",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "type": "string"
        },
        "payload": {
          "description": "A Boolean value to indicate whether payload is wanted. Optional.",
          "type": "boolean"
        },
        "token": {
          "type": "string",
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional."
        },
        "id": {
          "description": "A UUID or similar unique string that identifies this channel.",
          "type": "string"
        },
        "expiration": {
          "format": "int64",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "type": "string"
        },
        "resourceUri": {
          "description": "A version-specific identifier for the watched resource.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "resourceId": {
          "type": "string",
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions."
        }
      },
      "type": "object",
      "id": "Channel",
      "description": "An notification channel used to watch for resource changes."
    },
    "Buildings": {
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#buildings#buildingsList",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "buildings": {
          "items": {
            "$ref": "Building"
          },
          "type": "array",
          "description": "The Buildings in this page of results."
        }
      },
      "description": "Public API: Resources.buildings",
      "id": "Buildings"
    },
    "Role": {
      "properties": {
        "isSystemRole": {
          "type": "boolean",
          "description": "Returns true if this is a pre-defined system role."
        },
        "roleDescription": {
          "type": "string",
          "description": "A short description of the role."
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#role.",
          "default": "admin#directory#role"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "roleName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "description": "Name of the role."
        },
        "rolePrivileges": {
          "type": "array",
          "description": "The set of privileges that are granted to this role.",
          "items": {
            "properties": {
              "privilegeName": {
                "type": "string",
                "description": "The name of the privilege."
              },
              "serviceId": {
                "type": "string",
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
              }
            },
            "type": "object"
          },
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          }
        },
        "isSuperAdminRole": {
          "type": "boolean",
          "description": "Returns true if the role is a super admin role."
        },
        "roleId": {
          "type": "string",
          "description": "ID of the role.",
          "format": "int64"
        }
      },
      "id": "Role",
      "type": "object"
    },
    "MobileDeviceAction": {
      "type": "object",
      "properties": {
        "action": {
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          },
          "description": "Action to be taken on the Mobile Device",
          "type": "string"
        }
      },
      "id": "MobileDeviceAction"
    },
    "BuildingCoordinates": {
      "description": "Public API: Resources.buildings",
      "id": "BuildingCoordinates",
      "properties": {
        "longitude": {
          "type": "number",
          "description": "Longitude in decimal degrees.",
          "format": "double"
        },
        "latitude": {
          "description": "Latitude in decimal degrees.",
          "type": "number",
          "format": "double"
        }
      },
      "type": "object"
    },
    "UserKeyword": {
      "description": "JSON template for a keyword entry.",
      "type": "object",
      "id": "UserKeyword",
      "properties": {
        "value": {
          "type": "string",
          "description": "Keyword."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      }
    },
    "Asps": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#aspList.",
          "type": "string",
          "default": "admin#directory#aspList"
        },
        "items": {
          "items": {
            "$ref": "Asp"
          },
          "description": "A list of ASP resources.",
          "type": "array"
        }
      },
      "id": "Asps",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "ChromeOsDeviceAction": {
      "properties": {
        "deprovisionReason": {
          "type": "string"
        },
        "action": {
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "type": "string",
          "description": "Action to be taken on the ChromeOs Device"
        }
      },
      "id": "ChromeOsDeviceAction",
      "type": "object"
    },
    "VerificationCode": {
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#verificationCode",
          "description": "The type of the resource. This is always admin#directory#verificationCode.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "verificationCode": {
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.",
          "type": "string"
        },
        "userId": {
          "type": "string",
          "description": "The obfuscated unique ID of the user."
        }
      },
      "id": "VerificationCode",
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Group": {
      "id": "Group",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "nonEditableAliases": {
          "description": "List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "email": {
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "type": "string",
          "description": "Email of Group"
        },
        "adminCreated": {
          "description": "Is the group created by admin (Read-only) *",
          "type": "boolean"
        },
        "aliases": {
          "type": "array",
          "description": "List of aliases (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#group"
        },
        "directMembersCount": {
          "description": "Group direct members count",
          "format": "int64",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of Group (Read-only)",
          "type": "string"
        },
        "description": {
          "description": "Description of the group",
          "type": "string"
        }
      }
    },
    "UserPosixAccount": {
      "type": "object",
      "id": "UserPosixAccount",
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix.",
      "properties": {
        "uid": {
          "description": "The POSIX compliant user ID.",
          "type": "string",
          "format": "uint64"
        },
        "homeDirectory": {
          "type": "string",
          "description": "The path to the home directory for this account."
        },
        "gid": {
          "description": "The default group ID.",
          "type": "string",
          "format": "uint64"
        },
        "operatingSystemType": {
          "description": "The operating system type for this account.",
          "type": "string"
        },
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        },
        "accountId": {
          "description": "A POSIX account field identifier.",
          "type": "string"
        },
        "shell": {
          "type": "string",
          "description": "The path to the login shell for this account."
        },
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        },
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "gecos": {
          "type": "string",
          "description": "The GECOS (user information) for this account."
        }
      }
    },
    "CalendarResource": {
      "properties": {
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "generatedResourceName": {
          "type": "string",
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\"."
        },
        "floorSection": {
          "type": "string",
          "description": "Name of the section within a floor a resource is located in."
        },
        "kind": {
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "type": "string",
          "default": "admin#directory#resources#calendars#CalendarResource"
        },
        "resourceCategory": {
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.",
          "type": "string"
        },
        "resourceName": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "type": "string"
        },
        "capacity": {
          "description": "Capacity of a resource, number of seats in a room.",
          "format": "int32",
          "type": "integer"
        },
        "resourceId": {
          "description": "The unique ID for the calendar resource.",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string"
        },
        "resourceEmail": {
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource.",
          "type": "string"
        },
        "resourceType": {
          "type": "string",
          "description": "The type of the calendar resource, intended for non-room resources."
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "featureInstances": {
          "type": "any",
          "description": "Instances of features for the calendar resource."
        },
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        },
        "buildingId": {
          "type": "string",
          "description": "Unique ID for the building a resource is located in."
        },
        "floorName": {
          "type": "string",
          "description": "Name of the floor a resource is located on."
        }
      },
      "type": "object",
      "description": "Public API: Resources.calendars",
      "id": "CalendarResource"
    },
    "RoleAssignment": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roleAssignment.",
          "default": "admin#directory#roleAssignment"
        },
        "roleId": {
          "type": "string",
          "description": "The ID of the role that is assigned.",
          "format": "int64"
        },
        "roleAssignmentId": {
          "format": "int64",
          "description": "ID of this roleAssignment.",
          "type": "string"
        },
        "assignedTo": {
          "type": "string",
          "description": "The unique ID of the user this role is assigned to."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "orgUnitId": {
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.",
          "type": "string"
        },
        "scopeType": {
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT ",
          "type": "string"
        }
      },
      "id": "RoleAssignment",
      "type": "object"
    },
    "DomainAliases": {
      "type": "object",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#domainAliases"
        },
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array",
          "description": "List of domain alias objects."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "DomainAliases"
    },
    "Customer": {
      "properties": {
        "postalAddress": {
          "description": "The customer's postal address information.",
          "$ref": "CustomerPostalAddress"
        },
        "id": {
          "type": "string",
          "description": "The unique ID for the customer's G Suite account. (Readonly)"
        },
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain"
        },
        "customerDomain": {
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer.",
          "type": "string"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The customer's contact phone number in E.164 format."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. The default value is en-US",
          "type": "string"
        },
        "customerCreationTime": {
          "description": "The customer's creation time (Readonly)",
          "type": "string",
          "format": "date-time"
        },
        "kind": {
          "default": "admin#directory#customer",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer",
          "type": "string"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Customer"
    },
    "Feature": {
      "description": "JSON template for Feature object in Directory API.",
      "type": "object",
      "properties": {
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "name": {
          "description": "The name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#resources#features#Feature",
          "description": "Kind of resource this is.",
          "type": "string"
        }
      },
      "id": "Feature"
    },
    "UserPhone": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "value": {
          "description": "Phone number.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary phone or not."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "description": "JSON template for a phone entry.",
      "id": "UserPhone"
    },
    "Token": {
      "properties": {
        "nativeApp": {
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device.",
          "type": "boolean"
        },
        "anonymous": {
          "type": "boolean",
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID."
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user that issued the token."
        },
        "clientId": {
          "type": "string",
          "description": "The Client ID of the application the token is issued to."
        },
        "scopes": {
          "type": "array",
          "description": "A list of authorization scopes the application is granted.",
          "items": {
            "type": "string"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "displayText": {
          "description": "The displayable name of the application the token is issued to.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#token",
          "description": "The type of the API resource. This is always admin#directory#token.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Token",
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserRelation": {
      "id": "UserRelation",
      "properties": {
        "type": {
          "type": "string",
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner."
        },
        "value": {
          "type": "string",
          "description": "The name of the relation."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "description": "JSON template for a relation entry.",
      "type": "object"
    },
    "VerificationCodes": {
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCodesList.",
          "default": "admin#directory#verificationCodesList",
          "type": "string"
        },
        "items": {
          "description": "A list of verification code resources.",
          "type": "array",
          "items": {
            "$ref": "VerificationCode"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "VerificationCodes"
    },
    "Domains": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "domainName": {
          "description": "The domain name of the customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "type": "string"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain. (Read-only)."
        },
        "creationTime": {
          "description": "Creation time of the domain. (Read-only).",
          "format": "int64",
          "type": "string"
        },
        "domainAliases": {
          "description": "List of domain alias objects. (Read-only)",
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          }
        },
        "isPrimary": {
          "description": "Indicates if the domain is a primary domain (Read-only).",
          "type": "boolean"
        },
        "kind": {
          "default": "admin#directory#domain",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "type": "object",
      "id": "Domains"
    },
    "UserSshPublicKey": {
      "description": "JSON template for a POSIX account entry.",
      "type": "object",
      "id": "UserSshPublicKey",
      "properties": {
        "key": {
          "description": "An SSH public key.",
          "type": "string"
        },
        "expirationTimeUsec": {
          "type": "string",
          "description": "An expiration time in microseconds since epoch.",
          "format": "int64"
        },
        "fingerprint": {
          "type": "string",
          "readOnly": true,
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)"
        }
      }
    },
    "Privileges": {
      "type": "object",
      "properties": {
        "items": {
          "description": "A list of Privilege resources.",
          "items": {
            "$ref": "Privilege"
          },
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#privileges",
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "Privileges"
    },
    "MobileDevices": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "mobiledevices": {
          "type": "array",
          "items": {
            "$ref": "MobileDevice"
          },
          "description": "List of Mobile Device objects."
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#mobiledevices"
        }
      },
      "id": "MobileDevices"
    },
    "Building": {
      "properties": {
        "floorNames": {
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "buildingName": {
          "type": "string",
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters."
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#buildings#Building"
        },
        "description": {
          "type": "string",
          "description": "A brief description of the building. For example, \"Chelsea Market\"."
        },
        "address": {
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required.",
          "$ref": "BuildingAddress"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "buildingId": {
          "type": "string",
          "description": "Unique identifier for the building. The maximum length is 100 characters."
        },
        "coordinates": {
          "$ref": "BuildingCoordinates",
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees."
        }
      },
      "id": "Building",
      "description": "Public API: Resources.buildings",
      "type": "object"
    },
    "MobileDevice": {
      "id": "MobileDevice",
      "properties": {
        "userAgent": {
          "description": "Mobile Device user agent",
          "type": "string"
        },
        "brand": {
          "description": "Mobile Device Brand (Read-only)",
          "type": "string"
        },
        "unknownSourcesStatus": {
          "description": "Unknown sources enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "wifiMacAddress": {
          "description": "Mobile Device WiFi MAC address (Read-only)",
          "type": "string"
        },
        "kernelVersion": {
          "description": "Mobile Device Kernel version (Read-only)",
          "type": "string"
        },
        "type": {
          "description": "The type of device (Read-only)",
          "type": "string"
        },
        "defaultLanguage": {
          "type": "string",
          "description": "The default locale used on the Mobile Device (Read-only)"
        },
        "privilege": {
          "description": "DMAgentPermission (Read-only)",
          "type": "string"
        },
        "supportsWorkProfile": {
          "description": "Work profile supported on device (Read-only)",
          "type": "boolean"
        },
        "releaseVersion": {
          "type": "string",
          "description": "Mobile Device release version version (Read-only)"
        },
        "bootloaderVersion": {
          "type": "string",
          "description": "Mobile Device Bootloader version (Read-only)"
        },
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "status": {
          "description": "Status of the device (Read-only)",
          "type": "string"
        },
        "name": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of owner user's names (Read-only)"
        },
        "applications": {
          "description": "List of applications installed on Mobile Device",
          "type": "array",
          "items": {
            "properties": {
              "packageName": {
                "description": "Package name of application",
                "type": "string"
              },
              "versionCode": {
                "format": "int32",
                "description": "Version code of application",
                "type": "integer"
              },
              "displayName": {
                "type": "string",
                "description": "Display name of application"
              },
              "permission": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "List of Permissions for application"
              },
              "versionName": {
                "description": "Version name of application",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "email": {
          "type": "array",
          "description": "List of owner user's email addresses (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "firstSync": {
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "managedAccountIsOnOwnerProfile": {
          "type": "boolean",
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)"
        },
        "deviceId": {
          "description": "Mobile Device serial number (Read-only)",
          "type": "string"
        },
        "buildNumber": {
          "description": "Mobile Device Build number (Read-only)",
          "type": "string"
        },
        "deviceCompromisedStatus": {
          "type": "string",
          "description": "Mobile Device compromised status (Read-only)"
        },
        "meid": {
          "description": "Mobile Device MEID number (Read-only)",
          "type": "string"
        },
        "hardwareId": {
          "description": "Mobile Device Hardware Id (Read-only)",
          "type": "string"
        },
        "encryptionStatus": {
          "type": "string",
          "description": "Mobile Device Encryption Status (Read-only)"
        },
        "model": {
          "type": "string",
          "description": "Name of the model of the device"
        },
        "serialNumber": {
          "description": "Mobile Device SSN or Serial Number (Read-only)",
          "type": "string"
        },
        "os": {
          "description": "Name of the mobile operating system",
          "type": "string"
        },
        "lastSync": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "devicePasswordStatus": {
          "description": "DevicePasswordStatus (Read-only)",
          "type": "string"
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "otherAccountsInfo": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of accounts added on device (Read-only)"
        },
        "resourceId": {
          "type": "string",
          "description": "Unique identifier of Mobile Device (Read-only)"
        },
        "networkOperator": {
          "type": "string",
          "description": "Mobile Device mobile or network operator (if available) (Read-only)"
        },
        "manufacturer": {
          "description": "Mobile Device manufacturer (Read-only)",
          "type": "string"
        },
        "basebandVersion": {
          "description": "Mobile Device Baseband version (Read-only)",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#mobiledevice",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "securityPatchLevel": {
          "format": "int64",
          "description": "Mobile Device Security patch level (Read-only)",
          "type": "string"
        },
        "imei": {
          "type": "string",
          "description": "Mobile Device IMEI number (Read-only)"
        }
      },
      "type": "object"
    },
    "DomainAlias": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain alias. (Read-only)"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAlias"
        },
        "creationTime": {
          "type": "string",
          "format": "int64",
          "description": "The creation time of the domain alias. (Read-only)."
        },
        "parentDomainName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer."
        },
        "domainAliasName": {
          "description": "The domain alias name.",
          "type": "string"
        }
      },
      "id": "DomainAlias"
    },
    "RoleAssignments": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments .",
          "default": "admin#directory#roleAssignments"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "RoleAssignment"
          },
          "description": "A list of RoleAssignment resources."
        }
      },
      "id": "RoleAssignments",
      "type": "object"
    },
    "FeatureInstance": {
      "id": "FeatureInstance",
      "description": "JSON template for a feature instance.",
      "properties": {
        "feature": {
          "$ref": "Feature",
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature."
        }
      },
      "type": "object"
    },
    "Members": {
      "type": "object",
      "id": "Members",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#members",
          "description": "Kind of resource this is."
        },
        "members": {
          "description": "List of member objects.",
          "type": "array",
          "items": {
            "$ref": "Member"
          }
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        }
      }
    },
    "Asp": {
      "id": "Asp",
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "lastTimeUsed": {
          "type": "string",
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "format": "int64"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the ASP."
        },
        "userKey": {
          "description": "The unique ID of the user who issued the ASP.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#asp.",
          "default": "admin#directory#asp"
        },
        "name": {
          "type": "string",
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created."
        },
        "codeId": {
          "format": "int32",
          "description": "The unique ID of the ASP.",
          "type": "integer"
        },
        "creationTime": {
          "format": "int64",
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "type": "string"
        }
      }
    },
    "FeatureRename": {
      "type": "object",
      "id": "FeatureRename",
      "properties": {
        "newName": {
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          },
          "type": "string",
          "description": "New name of the feature."
        }
      }
    },
    "UserPhoto": {
      "type": "object",
      "properties": {
        "photoData": {
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "type": "string",
          "format": "byte",
          "description": "Base64 encoded photo data"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "height": {
          "format": "int32",
          "description": "Height in pixels of the photo",
          "type": "integer"
        },
        "primaryEmail": {
          "type": "string",
          "description": "Primary email of User (Read-only)"
        },
        "mimeType": {
          "description": "Mime Type of the photo",
          "type": "string"
        },
        "width": {
          "type": "integer",
          "description": "Width in pixels of the photo",
          "format": "int32"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "kind": {
          "default": "admin#directory#user#photo",
          "description": "Kind of resource this is.",
          "type": "string"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "UserPhoto"
    },
    "Schemas": {
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "schemas": {
          "items": {
            "$ref": "Schema"
          },
          "description": "List of UserSchema objects.",
          "type": "array"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#schemas"
        }
      },
      "id": "Schemas"
    },
    "Tokens": {
      "id": "Tokens",
      "properties": {
        "items": {
          "description": "A list of Token resources.",
          "items": {
            "$ref": "Token"
          },
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#tokenList",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#tokenList."
        }
      },
      "type": "object",
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserName": {
      "id": "UserName",
      "type": "object",
      "properties": {
        "givenName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "First Name",
          "type": "string"
        },
        "fullName": {
          "description": "Full Name",
          "type": "string"
        },
        "familyName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "Last Name"
        }
      }
    },
    "Privilege": {
      "type": "object",
      "id": "Privilege",
      "properties": {
        "serviceId": {
          "type": "string",
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
        },
        "privilegeName": {
          "type": "string",
          "description": "The name of the privilege."
        },
        "childPrivileges": {
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "type": "array",
          "items": {
            "$ref": "Privilege"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "isOuScopable": {
          "description": "If the privilege can be restricted to an organization unit.",
          "type": "boolean"
        },
        "serviceName": {
          "type": "string",
          "description": "The name of the service this privilege is for."
        },
        "kind": {
          "default": "admin#directory#privilege",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privilege."
        }
      }
    },
    "Users": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "description": "List of user objects.",
          "items": {
            "$ref": "User"
          }
        },
        "trigger_event": {
          "type": "string",
          "description": "Event that triggered this response (only used in case of Push Response)"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#users"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Users"
    },
    "Roles": {
      "id": "Roles",
      "type": "object",
      "properties": {
        "items": {
          "items": {
            "$ref": "Role"
          },
          "description": "A list of Role resources.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#roles.",
          "default": "admin#directory#roles",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "UserLocation": {
      "id": "UserLocation",
      "properties": {
        "floorName": {
          "description": "Floor name/number.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "deskCode": {
          "description": "Most specific textual code of individual desk location.",
          "type": "string"
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        },
        "floorSection": {
          "type": "string",
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values."
        },
        "buildingId": {
          "type": "string",
          "description": "Building Identifier."
        }
      },
      "type": "object",
      "description": "JSON template for a location entry."
    },
    "CustomerPostalAddress": {
      "type": "object",
      "properties": {
        "contactName": {
          "description": "The customer contact's name.",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Name of the locality. An example of a locality value is the city of San Francisco."
        },
        "addressLine2": {
          "type": "string",
          "description": "Address line 2 of the address."
        },
        "region": {
          "type": "string",
          "description": "Name of the region. An example of a region value is NY for the state of New York."
        },
        "postalCode": {
          "type": "string",
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element."
        },
        "countryCode": {
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements.",
          "type": "string"
        },
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        },
        "addressLine3": {
          "description": "Address line 3 of the address.",
          "type": "string"
        }
      },
      "id": "CustomerPostalAddress",
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)"
    },
    "Domains2": {
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domains",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "domains": {
          "description": "List of domain objects.",
          "type": "array",
          "items": {
            "$ref": "Domains"
          }
        }
      },
      "type": "object",
      "id": "Domains2"
    },
    "BuildingAddress": {
      "description": "Public API: Resources.buildings",
      "type": "object",
      "properties": {
        "addressLines": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unstructured address lines describing the lower levels of an address."
        },
        "locality": {
          "type": "string",
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines."
        },
        "languageCode": {
          "type": "string",
          "description": "Optional. BCP-47 language code of the contents of this address (if known)."
        },
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        },
        "postalCode": {
          "description": "Optional. Postal code of the address.",
          "type": "string"
        },
        "sublocality": {
          "type": "string",
          "description": "Optional. Sublocality of the address."
        },
        "administrativeArea": {
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region.",
          "type": "string"
        }
      },
      "id": "BuildingAddress"
    },
    "UserCustomProperties": {
      "id": "UserCustomProperties",
      "type": "object",
      "additionalProperties": {
        "type": "any"
      },
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)"
    },
    "OrgUnits": {
      "id": "OrgUnits",
      "type": "object",
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#orgUnits",
          "description": "Kind of resource this is."
        },
        "organizationUnits": {
          "description": "List of user objects.",
          "type": "array",
          "items": {
            "$ref": "OrgUnit"
          }
        }
      }
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "description": "A request for issuing a command.",
      "properties": {
        "payload": {
          "type": "string",
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100]."
        },
        "commandType": {
          "description": "The type of command.",
          "type": "string",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ]
        }
      },
      "id": "DirectoryChromeosdevicesIssueCommandRequest",
      "type": "object"
    },
    "ChromeOsDevice": {
      "id": "ChromeOsDevice",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "osVersion": {
          "description": "Chromebook Os Version (Read-only)",
          "type": "string"
        },
        "notes": {
          "type": "string",
          "description": "Notes added by the administrator"
        },
        "deviceFiles": {
          "description": "List of device files to download (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "File name",
                "type": "string"
              },
              "type": {
                "type": "string",
                "description": "File type"
              },
              "createTime": {
                "format": "date-time",
                "description": "Date and time the file was created",
                "type": "string"
              },
              "downloadUrl": {
                "description": "File download URL",
                "type": "string"
              }
            }
          },
          "type": "array"
        },
        "diskVolumeReports": {
          "description": "Reports of disk space and other info about mounted/connected volumes.",
          "items": {
            "properties": {
              "volumeInfo": {
                "items": {
                  "properties": {
                    "storageTotal": {
                      "format": "int64",
                      "description": "Total disk space [in bytes]",
                      "type": "string"
                    },
                    "volumeId": {
                      "description": "Volume id",
                      "type": "string"
                    },
                    "storageFree": {
                      "format": "int64",
                      "description": "Free disk space [in bytes]",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "description": "Disk volumes",
                "type": "array"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#chromeosdevice",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "manufactureDate": {
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "status of the device (Read-only)"
        },
        "model": {
          "type": "string",
          "description": "Chromebook Model (Read-only)"
        },
        "lastEnrollmentTime": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was last enrolled (Read-only)"
        },
        "dockMacAddress": {
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "lastSync": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "bootMode": {
          "description": "Chromebook boot mode (Read-only)",
          "type": "string"
        },
        "annotatedAssetId": {
          "type": "string",
          "description": "AssetId specified during enrollment or through later annotation"
        },
        "willAutoRenew": {
          "type": "boolean",
          "description": "Will Chromebook auto renew after support end date (Read-only)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "cpuStatusReports": {
          "items": {
            "properties": {
              "cpuUtilizationPercentageInfo": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "reportTime": {
                "description": "Date and time the report was received.",
                "type": "string",
                "format": "date-time"
              },
              "cpuTemperatureInfo": {
                "description": "List of CPU temperature samples.",
                "type": "array",
                "items": {
                  "properties": {
                    "temperature": {
                      "format": "int32",
                      "type": "integer",
                      "description": "Temperature in Celsius degrees."
                    },
                    "label": {
                      "type": "string",
                      "description": "CPU label"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "Reports of CPU utilization and temperature (Read-only)"
        },
        "platformVersion": {
          "type": "string",
          "description": "Chromebook platform version (Read-only)"
        },
        "activeTimeRanges": {
          "items": {
            "properties": {
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of usage"
              },
              "activeTime": {
                "format": "int32",
                "description": "Duration in milliseconds",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "List of active time ranges (Read-only)"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of the device"
        },
        "annotatedLocation": {
          "description": "Address or location of the device as noted by the administrator",
          "type": "string"
        },
        "annotatedUser": {
          "type": "string",
          "description": "User of the device"
        },
        "systemRamTotal": {
          "format": "int64",
          "type": "string",
          "description": "Total RAM on the device [in bytes] (Read-only)"
        },
        "serialNumber": {
          "description": "Chromebook serial number (Read-only)",
          "type": "string"
        },
        "autoUpdateExpiration": {
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "type": "string",
          "format": "int64"
        },
        "firmwareVersion": {
          "description": "Chromebook firmware version (Read-only)",
          "type": "string"
        },
        "supportEndDate": {
          "description": "Final date the device will be supported (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "systemRamFreeReports": {
          "items": {
            "properties": {
              "systemRamFreeInfo": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "int64"
                }
              },
              "reportTime": {
                "format": "date-time",
                "type": "string",
                "description": "Date and time the report was received."
              }
            },
            "type": "object"
          },
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "type": "array"
        },
        "macAddress": {
          "description": "Chromebook Mac Address on wifi network interface (Read-only)",
          "type": "string"
        },
        "tpmVersionInfo": {
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "type": "object",
          "properties": {
            "manufacturer": {
              "type": "string",
              "description": "TPM manufacturer code."
            },
            "tpmModel": {
              "description": "TPM model number.",
              "type": "string"
            },
            "vendorSpecific": {
              "type": "string",
              "description": "Vendor-specific information such as Vendor ID."
            },
            "family": {
              "type": "string",
              "description": "TPM family."
            },
            "specLevel": {
              "description": "TPM specification level.",
              "type": "string"
            },
            "firmwareVersion": {
              "type": "string",
              "description": "TPM firmware version."
            }
          }
        },
        "meid": {
          "type": "string",
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)"
        },
        "orderNumber": {
          "type": "string",
          "description": "Chromebook order number (Read-only)"
        },
        "ethernetMacAddress0": {
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "recentUsers": {
          "items": {
            "type": "object",
            "properties": {
              "email": {
                "description": "Email address of the user. Present only if the user type is managed",
                "type": "string"
              },
              "type": {
                "description": "The type of the user",
                "type": "string"
              }
            }
          },
          "description": "List of recent device users, in descending order by last login time (Read-only)",
          "type": "array"
        },
        "lastKnownNetwork": {
          "description": "Contains last known network (Read-only)",
          "items": {
            "description": "Information for an ip address.",
            "type": "object",
            "properties": {
              "ipAddress": {
                "type": "string",
                "description": "The IP address."
              },
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              }
            }
          },
          "type": "array"
        },
        "deviceId": {
          "description": "Unique identifier of Chrome OS Device (Read-only)",
          "type": "string"
        },
        "ethernetMacAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)"
        }
      },
      "type": "object"
    },
    "OrgUnit": {
      "properties": {
        "orgUnitId": {
          "description": "Id of OrgUnit",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Name of OrgUnit",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          }
        },
        "parentOrgUnitId": {
          "type": "string",
          "description": "Id of parent OrgUnit"
        },
        "parentOrgUnitPath": {
          "type": "string",
          "description": "Path of parent OrgUnit"
        },
        "blockInheritance": {
          "type": "boolean",
          "description": "Should block inheritance"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#orgUnit",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Description of OrgUnit"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "Path of OrgUnit"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object",
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "OrgUnit"
    },
    "Schema": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#schema",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "type": "string",
          "description": "Display name for the schema."
        },
        "schemaName": {
          "type": "string",
          "description": "Schema name",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "fields": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Fields of Schema",
          "type": "array",
          "items": {
            "$ref": "SchemaFieldSpec"
          }
        },
        "schemaId": {
          "type": "string",
          "description": "Unique identifier of Schema (Read-only)"
        }
      },
      "type": "object",
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Schema"
    },
    "DirectoryChromeosdevicesCommandResult": {
      "properties": {
        "result": {
          "type": "string",
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ],
          "description": "The result of the command."
        },
        "executeTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time at which the command was executed or failed to execute."
        },
        "errorMessage": {
          "type": "string",
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed."
        }
      },
      "type": "object",
      "id": "DirectoryChromeosdevicesCommandResult",
      "description": "The result of executing a command."
    },
    "UserLanguage": {
      "type": "object",
      "description": "JSON template for a language entry.",
      "id": "UserLanguage",
      "properties": {
        "customLanguage": {
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set",
          "type": "string"
        },
        "languageCode": {
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.",
          "type": "string"
        }
      }
    },
    "UserAddress": {
      "description": "JSON template for address.",
      "properties": {
        "countryCode": {
          "description": "Country code.",
          "type": "string"
        },
        "region": {
          "description": "Region.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary address. Only one entry could be marked as primary."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "extendedAddress": {
          "type": "string",
          "description": "Extended Address."
        },
        "locality": {
          "type": "string",
          "description": "Locality."
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "sourceIsStructured": {
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered.",
          "type": "boolean"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "streetAddress": {
          "description": "Street.",
          "type": "string"
        },
        "poBox": {
          "description": "Other parts of address.",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal code.",
          "type": "string"
        },
        "formatted": {
          "type": "string",
          "description": "Formatted address."
        }
      },
      "type": "object",
      "id": "UserAddress"
    },
    "MembersHasMember": {
      "type": "object",
      "id": "MembersHasMember",
      "properties": {
        "isMember": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested."
        }
      },
      "description": "JSON template for Has Member response in Directory API."
    },
    "Member": {
      "properties": {
        "status": {
          "type": "string",
          "description": "Status of member (Immutable)"
        },
        "role": {
          "description": "Role of member",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#member"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey."
        },
        "email": {
          "description": "Email of member (Read-only)",
          "type": "string"
        },
        "delivery_settings": {
          "description": "Delivery settings of member",
          "type": "string"
        },
        "type": {
          "description": "Type of member (Immutable)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object",
      "id": "Member"
    },
    "SchemaFieldSpec": {
      "properties": {
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string",
          "description": "Display Name of the field."
        },
        "fieldId": {
          "type": "string",
          "description": "Unique identifier of Field (Read-only)"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#schema#fieldspec"
        },
        "fieldType": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string",
          "description": "Type of the field."
        },
        "readAccessType": {
          "default": "ALL_DOMAIN_USERS",
          "type": "string",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\"."
        },
        "fieldName": {
          "description": "Name of the field.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "indexed": {
          "description": "Boolean specifying whether the field is indexed or not.",
          "type": "boolean",
          "default": "true"
        },
        "numericIndexingSpec": {
          "type": "object",
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "properties": {
            "minValue": {
              "format": "double",
              "type": "number",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            },
            "maxValue": {
              "format": "double",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "type": "number"
            }
          }
        },
        "multiValued": {
          "description": "Boolean specifying whether this is a multi-valued field or not.",
          "type": "boolean"
        }
      },
      "id": "SchemaFieldSpec",
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "properties": {
        "commandId": {
          "format": "int64",
          "description": "The unique ID of the issued command, used to retrieve the command status.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A response for issuing a command.",
      "id": "DirectoryChromeosdevicesIssueCommandResponse"
    },
    "DirectoryChromeosdevicesCommand": {
      "properties": {
        "commandId": {
          "description": "Unique ID of a device command.",
          "format": "int64",
          "type": "string"
        },
        "state": {
          "type": "string",
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "description": "Indicates the command state.",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ]
        },
        "type": {
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "description": "The type of the command.",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "type": "string"
        },
        "commandResult": {
          "description": "The result of the command execution.",
          "$ref": "DirectoryChromeosdevicesCommandResult"
        },
        "issueTime": {
          "format": "google-datetime",
          "description": "The timestamp when the command was issued by the admin.",
          "type": "string"
        },
        "payload": {
          "description": "The payload that the command specified, if any.",
          "type": "string"
        },
        "commandExpireTime": {
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "description": "Information regarding a command that was issued to a device.",
      "id": "DirectoryChromeosdevicesCommand",
      "type": "object"
    },
    "UserGender": {
      "properties": {
        "customGender": {
          "description": "Custom gender.",
          "type": "string"
        },
        "type": {
          "description": "Gender.",
          "type": "string"
        },
        "addressMeAs": {
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their.",
          "type": "string"
        }
      },
      "id": "UserGender",
      "type": "object"
    },
    "User": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "User",
      "properties": {
        "isAdmin": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is admin (Read-only)"
        },
        "hashFunction": {
          "type": "string",
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt"
        },
        "agreedToTerms": {
          "description": "Output only. Indicates if user has agreed to terms (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "addresses": {
          "description": "Addresses of User",
          "type": "any"
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "Boolean indicating if ip is whitelisted"
        },
        "lastLoginTime": {
          "readOnly": true,
          "type": "string",
          "format": "date-time",
          "description": "User's last login time. (Read-only)"
        },
        "customSchemas": {
          "description": "Custom fields of the user.",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          },
          "type": "object"
        },
        "gender": {
          "type": "any",
          "description": "Gender of User"
        },
        "phones": {
          "type": "any",
          "description": "Phone numbers of User"
        },
        "ims": {
          "description": "User's Instant Messenger",
          "type": "any"
        },
        "isEnrolledIn2Sv": {
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "etag": {
          "description": "Output only. ETag of the resource.",
          "readOnly": true,
          "type": "string"
        },
        "archived": {
          "type": "boolean",
          "description": "Indicates if user is archived."
        },
        "websites": {
          "type": "any",
          "description": "Websites of User"
        },
        "externalIds": {
          "description": "The external Ids of User *",
          "type": "any"
        },
        "password": {
          "type": "string",
          "description": "User's password",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "primaryEmail": {
          "description": "username of User",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "creationTime": {
          "type": "string",
          "readOnly": true,
          "description": "User's G Suite account creation time. (Read-only)",
          "format": "date-time"
        },
        "nonEditableAliases": {
          "type": "array",
          "description": "Output only. List of non editable aliases (Read-only)",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "languages": {
          "type": "any",
          "description": "Languages of User"
        },
        "name": {
          "description": "User's name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "$ref": "UserName"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "includeInGlobalAddressList": {
          "type": "boolean",
          "description": "Boolean indicating if user is included in Global Address List"
        },
        "isEnforcedIn2Sv": {
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "thumbnailPhotoUrl": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Photo Url of the user (Read-only)"
        },
        "organizations": {
          "description": "Organizations of User",
          "type": "any"
        },
        "customerId": {
          "type": "string",
          "description": "Output only. CustomerId of User (Read-only)",
          "readOnly": true
        },
        "keywords": {
          "description": "Keywords of User",
          "type": "any"
        },
        "notes": {
          "description": "Notes of User",
          "type": "any"
        },
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        },
        "sshPublicKeys": {
          "description": "The SSH public keys of User",
          "type": "any"
        },
        "emails": {
          "type": "any",
          "description": "Emails of User"
        },
        "suspended": {
          "description": "Indicates if user is suspended.",
          "type": "boolean"
        },
        "changePasswordAtNextLogin": {
          "description": "Boolean indicating if the user should change password in next login",
          "type": "boolean"
        },
        "recoveryEmail": {
          "description": "Recovery email of the user.",
          "type": "string"
        },
        "posixAccounts": {
          "type": "any",
          "description": "The POSIX accounts of User"
        },
        "deletionTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "aliases": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Output only. List of aliases (Read-only)",
          "readOnly": true
        },
        "isMailboxSetup": {
          "type": "boolean",
          "description": "Output only. Is mailbox setup (Read-only)",
          "readOnly": true
        },
        "locations": {
          "type": "any",
          "description": "Locations of User"
        },
        "isDelegatedAdmin": {
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "kind": {
          "description": "Output only. Kind of resource this is.",
          "readOnly": true,
          "default": "admin#directory#user",
          "type": "string"
        },
        "suspensionReason": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Suspension reason if user is suspended (Read-only)"
        },
        "relations": {
          "type": "any",
          "description": "The Relations of User *"
        },
        "recoveryPhone": {
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
          "type": "string"
        },
        "thumbnailPhotoEtag": {
          "description": "Output only. ETag of the user's photo (Read-only)",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "UserEmail": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value."
        },
        "primary": {
          "description": "If this is user's primary email. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "address": {
          "description": "Email id of the user.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      },
      "id": "UserEmail",
      "description": "JSON template for an email.",
      "type": "object"
    },
    "UserUndelete": {
      "id": "UserUndelete",
      "type": "object",
      "properties": {
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        }
      }
    },
    "ChromeOsMoveDevicesToOu": {
      "properties": {
        "deviceIds": {
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "items": {
            "type": "string"
          },
          "description": "ChromeOs Devices to be moved to OU",
          "type": "array"
        }
      },
      "type": "object",
      "id": "ChromeOsMoveDevicesToOu"
    },
    "UserExternalId": {
      "type": "object",
      "description": "JSON template for an externalId entry.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the Id."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "value": {
          "type": "string",
          "description": "The value of the id."
        }
      },
      "id": "UserExternalId"
    },
    "UserWebsite": {
      "id": "UserWebsite",
      "type": "object",
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary website or not."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Website."
        }
      },
      "description": "JSON template for a website entry."
    },
    "UserIm": {
      "description": "JSON template for instant messenger of an user.",
      "type": "object",
      "properties": {
        "customProtocol": {
          "type": "string",
          "description": "Custom protocol."
        },
        "im": {
          "type": "string",
          "description": "Instant messenger id."
        },
        "primary": {
          "description": "If this is user's primary im. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "protocol": {
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.",
          "type": "string"
        }
      },
      "id": "UserIm"
    },
    "UserOrganization": {
      "description": "JSON template for an organization entry.",
      "properties": {
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        },
        "description": {
          "description": "Description of the organization.",
          "type": "string"
        },
        "primary": {
          "description": "If it user's primary organization.",
          "type": "boolean"
        },
        "domain": {
          "type": "string",
          "description": "The domain to which the organization belongs to."
        },
        "name": {
          "description": "Name of the organization",
          "type": "string"
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
        },
        "costCenter": {
          "type": "string",
          "description": "The cost center of the users department."
        },
        "fullTimeEquivalent": {
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
          "type": "integer",
          "format": "int32"
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of the organization."
        },
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        }
      },
      "id": "UserOrganization",
      "type": "object"
    },
    "UserAbout": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text."
        },
        "value": {
          "type": "string",
          "description": "Actual value of notes."
        }
      },
      "id": "UserAbout",
      "description": "JSON template for About (notes) of a user in Directory API."
    },
    "CalendarResources": {
      "id": "CalendarResources",
      "description": "Public API: Resources.calendars",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList.",
          "default": "admin#directory#resources#calendars#calendarResourcesList"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "type": "array",
          "description": "The CalendarResources in this page of results.",
          "items": {
            "$ref": "CalendarResource"
          }
        }
      }
    },
    "Groups": {
      "type": "object",
      "id": "Groups",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#groups"
        },
        "groups": {
          "items": {
            "$ref": "Group"
          },
          "description": "List of group objects.",
          "type": "array"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Aliases": {
      "id": "Aliases",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string"
        },
        "aliases": {
          "items": {
            "type": "any"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#aliases"
        }
      },
      "description": "JSON response template to list aliases in Directory API."
    }
  },
  "name": "admin",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "title": "Admin SDK"
}
