{
  "ownerName": "Google",
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "baseUrl": "https://www.googleapis.com/",
  "ownerDomain": "google.com",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        }
      }
    }
  },
  "id": "admin:directory_v1",
  "title": "Admin SDK",
  "rootUrl": "https://www.googleapis.com/",
  "fullyEncodeReservedExpansion": true,
  "canonicalName": "directory",
  "parameters": {
    "$.xgafv": {
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "location": "query",
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "prettyPrint": {
      "default": "true",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    }
  },
  "packagePath": "admin",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "batchPath": "batch/admin/directory_v1",
  "protocol": "rest",
  "resources": {
    "roles": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "id": "directory.roles.get",
          "description": "Retrieves a role.",
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "roleId": {
              "location": "path",
              "description": "Immutable ID of the role.",
              "type": "string",
              "required": true
            },
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          }
        },
        "list": {
          "id": "directory.roles.list",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "Roles"
          },
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            },
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "type": "integer",
              "location": "query",
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "maximum": "100",
              "format": "int32"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "httpMethod": "GET"
        },
        "delete": {
          "description": "Deletes a role.",
          "parameters": {
            "roleId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the role.",
              "location": "path"
            },
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "id": "directory.roles.delete",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        },
        "patch": {
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.patch",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "request": {
            "$ref": "Role"
          },
          "response": {
            "$ref": "Role"
          },
          "description": "Patch role via Apiary Patch Orchestration",
          "parameters": {
            "roleId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the role."
            },
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "httpMethod": "PATCH"
        },
        "insert": {
          "request": {
            "$ref": "Role"
          },
          "id": "directory.roles.insert",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "description": "Creates a role.",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles",
          "response": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer"
          ]
        },
        "update": {
          "request": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Updates a role.",
          "response": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "httpMethod": "PUT",
          "id": "directory.roles.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            },
            "roleId": {
              "required": true,
              "description": "Immutable ID of the role.",
              "type": "string",
              "location": "path"
            }
          }
        }
      }
    },
    "domainAliases": {
      "methods": {
        "insert": {
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            }
          },
          "id": "directory.domainAliases.insert",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "httpMethod": "POST",
          "request": {
            "$ref": "DomainAlias"
          },
          "parameterOrder": [
            "customer"
          ],
          "description": "Inserts a domain alias of the customer.",
          "response": {
            "$ref": "DomainAlias"
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ]
        },
        "list": {
          "description": "Lists the domain aliases of the customer.",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "response": {
            "$ref": "DomainAliases"
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "id": "directory.domainAliases.list",
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "parentDomainName": {
              "type": "string",
              "description": "Name of the parent domain for which domain aliases are to be fetched.",
              "location": "query"
            }
          }
        },
        "delete": {
          "id": "directory.domainAliases.delete",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "description": "Deletes a domain Alias of the customer.",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "domainAliasName": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Name of domain alias to be retrieved."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "httpMethod": "DELETE"
        },
        "get": {
          "id": "directory.domainAliases.get",
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            },
            "domainAliasName": {
              "description": "Name of domain alias to be retrieved.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "httpMethod": "GET",
          "description": "Retrieves a domain alias of the customer.",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "response": {
            "$ref": "DomainAlias"
          }
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "get": {
          "description": "Retrieve a role assignment.",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "response": {
            "$ref": "RoleAssignment"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "id": "directory.roleAssignments.get",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameters": {
            "roleAssignmentId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role assignment.",
              "required": true
            },
            "customer": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "httpMethod": "GET"
        },
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "id": "directory.roleAssignments.insert",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "request": {
            "$ref": "RoleAssignment"
          },
          "response": {
            "$ref": "RoleAssignment"
          },
          "description": "Creates a role assignment.",
          "httpMethod": "POST"
        },
        "list": {
          "httpMethod": "GET",
          "id": "directory.roleAssignments.list",
          "response": {
            "$ref": "RoleAssignments"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "description": "Retrieves a paginated list of all roleAssignments.",
          "parameters": {
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "minimum": "1",
              "format": "int32",
              "maximum": "200",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "location": "query"
            },
            "roleId": {
              "location": "query",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "userKey": {
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "type": "string",
              "location": "query"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ]
        },
        "delete": {
          "id": "directory.roleAssignments.delete",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "description": "Deletes a role assignment.",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "roleAssignmentId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the role assignment."
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ]
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "description": "Turn off 2-Step Verification for user.",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.twoStepVerification.turnOff",
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "parameterOrder": [
            "userKey"
          ]
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "list": {
          "parameters": {
            "maxResults": {
              "default": "100",
              "maximum": "100",
              "type": "integer",
              "location": "query",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "minimum": "1",
              "format": "int32"
            },
            "projection": {
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query"
            },
            "orderBy": {
              "type": "string",
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ],
              "description": "Column to use for sorting results"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            },
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "location": "query"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "response": {
            "$ref": "MobileDevices"
          },
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "GET",
          "id": "directory.mobiledevices.list"
        },
        "delete": {
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "description": "Delete Mobile Device",
          "id": "directory.mobiledevices.delete",
          "parameters": {
            "resourceId": {
              "description": "Immutable ID of Mobile Device",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ]
        },
        "action": {
          "parameters": {
            "resourceId": {
              "location": "path",
              "description": "Immutable ID of Mobile Device",
              "required": true,
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "description": "Take action on Mobile Device",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "httpMethod": "POST",
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "id": "directory.mobiledevices.action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "parameterOrder": [
            "customerId",
            "resourceId"
          ]
        },
        "get": {
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path"
            },
            "resourceId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of Mobile Device",
              "required": true
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "response": {
            "$ref": "MobileDevice"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "id": "directory.mobiledevices.get",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "httpMethod": "GET",
          "description": "Retrieve Mobile Device"
        }
      }
    },
    "domains": {
      "methods": {
        "insert": {
          "description": "Inserts a domain of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "POST",
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.domains.insert",
          "request": {
            "$ref": "Domains"
          },
          "response": {
            "$ref": "Domains"
          },
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ]
        },
        "delete": {
          "description": "Deletes a domain of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "domainName": {
              "description": "Name of domain to be deleted",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "id": "directory.domains.delete",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ]
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains",
          "id": "directory.domains.list",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "response": {
            "$ref": "Domains2"
          },
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "description": "Lists the domains of the customer.",
          "parameterOrder": [
            "customer"
          ]
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "description": "Retrieves a domain of the customer.",
          "id": "directory.domains.get",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "response": {
            "$ref": "Domains"
          },
          "parameters": {
            "domainName": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Name of domain to be retrieved"
            },
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          }
        }
      }
    },
    "schemas": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "response": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "description": "Retrieve schema",
          "id": "directory.schemas.get",
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            },
            "schemaKey": {
              "type": "string",
              "description": "Name or immutable ID of the schema",
              "required": true,
              "location": "path"
            }
          }
        },
        "patch": {
          "description": "Patch Schema via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "schemaKey": {
              "description": "Name or immutable ID of the schema.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "response": {
            "$ref": "Schema"
          },
          "httpMethod": "PATCH",
          "id": "directory.schemas.patch",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "request": {
            "$ref": "Schema"
          }
        },
        "insert": {
          "id": "directory.schemas.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "request": {
            "$ref": "Schema"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "description": "Create schema.",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "response": {
            "$ref": "Schema"
          },
          "parameterOrder": [
            "customerId"
          ]
        },
        "list": {
          "description": "Retrieve all schemas for a customer",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "parameterOrder": [
            "customerId"
          ],
          "response": {
            "$ref": "Schemas"
          },
          "id": "directory.schemas.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          }
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "schemaKey": {
              "description": "Name or immutable ID of the schema",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "description": "Delete schema",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "httpMethod": "DELETE",
          "id": "directory.schemas.delete",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ]
        },
        "update": {
          "description": "Update schema",
          "id": "directory.schemas.update",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "request": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "response": {
            "$ref": "Schema"
          },
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "schemaKey": {
              "required": true,
              "location": "path",
              "description": "Name or immutable ID of the schema.",
              "type": "string"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ]
        }
      }
    },
    "orgunits": {
      "methods": {
        "patch": {
          "id": "directory.orgunits.patch",
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "request": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            },
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "location": "path",
              "required": true,
              "type": "string",
              "pattern": "^.*$"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "httpMethod": "PATCH"
        },
        "insert": {
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "description": "Add organizational unit",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.orgunits.insert",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "parameterOrder": [
            "customerId"
          ],
          "request": {
            "$ref": "OrgUnit"
          },
          "httpMethod": "POST",
          "response": {
            "$ref": "OrgUnit"
          }
        },
        "list": {
          "response": {
            "$ref": "OrgUnits"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "id": "directory.orgunits.list",
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "description": "the URL-encoded organizational unit's path or its ID",
              "default": "",
              "location": "query"
            },
            "type": {
              "type": "string",
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "description": "Whether to return all sub-organizations or just immediate children",
              "location": "query",
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ]
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            }
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "description": "Retrieve all organizational units"
        },
        "get": {
          "httpMethod": "GET",
          "id": "directory.orgunits.get",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "orgUnitPath": {
              "type": "string",
              "pattern": "^.*$",
              "location": "path",
              "description": "Full path of the organizational unit or its ID",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "description": "Retrieve organizational unit",
          "response": {
            "$ref": "OrgUnit"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "httpMethod": "DELETE",
          "description": "Remove organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.orgunits.delete",
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}"
        },
        "update": {
          "description": "Update organizational unit",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameters": {
            "orgUnitPath": {
              "required": true,
              "type": "string",
              "location": "path",
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID"
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "request": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.update",
          "response": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "httpMethod": "PUT"
        }
      }
    },
    "asps": {
      "methods": {
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            },
            "codeId": {
              "type": "integer",
              "format": "int32",
              "location": "path",
              "required": true,
              "description": "The unique ID of the ASP."
            }
          },
          "response": {
            "$ref": "Asp"
          },
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "description": "Get information about an ASP issued by a user.",
          "id": "directory.asps.get",
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey",
            "codeId"
          ]
        },
        "list": {
          "description": "List the ASPs issued by a user.",
          "id": "directory.asps.list",
          "response": {
            "$ref": "Asps"
          },
          "path": "admin/directory/v1/users/{userKey}/asps",
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "httpMethod": "GET"
        },
        "delete": {
          "httpMethod": "DELETE",
          "id": "directory.asps.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameters": {
            "codeId": {
              "format": "int32",
              "type": "integer",
              "description": "The unique ID of the ASP to be deleted.",
              "required": true,
              "location": "path"
            },
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path"
            }
          },
          "description": "Delete an ASP issued by a user.",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        }
      }
    },
    "users": {
      "methods": {
        "insert": {
          "parameterOrder": [],
          "flatPath": "admin/directory/v1/users",
          "httpMethod": "POST",
          "response": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "create user.",
          "id": "directory.users.insert",
          "request": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users",
          "parameters": {}
        },
        "makeAdmin": {
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "id": "directory.users.makeAdmin",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user as admin",
              "required": true
            }
          },
          "description": "change admin status of a user",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "path": "admin/directory/v1/users/{userKey}/makeAdmin"
        },
        "patch": {
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "location": "path"
            }
          },
          "description": "Patch Users via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "path": "admin/directory/v1/users/{userKey}",
          "request": {
            "$ref": "User"
          },
          "response": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.patch"
        },
        "list": {
          "httpMethod": "GET",
          "parameterOrder": [],
          "response": {
            "$ref": "Users"
          },
          "parameters": {
            "orderBy": {
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "type": "string",
              "location": "query",
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ]
            },
            "maxResults": {
              "location": "query",
              "type": "integer",
              "minimum": "1",
              "format": "int32",
              "default": "100",
              "maximum": "500",
              "description": "Maximum number of results to return."
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "type": "string",
              "location": "query"
            },
            "showDeleted": {
              "type": "string",
              "location": "query",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)"
            },
            "viewType": {
              "default": "admin_view",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "type": "string",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "location": "query"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "customFieldMask": {
              "location": "query",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string"
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query",
              "description": "Whether to return results in ascending or descending order."
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users"
            },
            "domain": {
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "location": "query"
            },
            "projection": {
              "default": "basic",
              "description": "What subset of fields to fetch for this user.",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "location": "query",
              "type": "string",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ]
            }
          },
          "flatPath": "admin/directory/v1/users",
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "directory.users.list",
          "path": "admin/directory/v1/users"
        },
        "undelete": {
          "description": "Undelete a deleted user",
          "httpMethod": "POST",
          "id": "directory.users.undelete",
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "request": {
            "$ref": "UserUndelete"
          },
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "The immutable id of the user"
            }
          }
        },
        "watch": {
          "flatPath": "admin/directory/v1/users/watch",
          "parameters": {
            "customer": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            },
            "maxResults": {
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "minimum": "1",
              "location": "query",
              "maximum": "500",
              "default": "100"
            },
            "event": {
              "location": "query",
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "description": "Event on which subscription is intended",
              "type": "string",
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ]
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string",
              "location": "query"
            },
            "orderBy": {
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "location": "query",
              "description": "Whether to return results in ascending or descending order.",
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string"
            },
            "showDeleted": {
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "location": "query",
              "type": "string",
              "default": "basic",
              "description": "What subset of fields to fetch for this user.",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ]
            },
            "viewType": {
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "location": "query",
              "type": "string",
              "default": "admin_view",
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ]
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "domain": {
              "location": "query",
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\""
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string",
              "location": "query"
            }
          },
          "path": "admin/directory/v1/users/watch",
          "httpMethod": "POST",
          "id": "directory.users.watch",
          "response": {
            "$ref": "Channel"
          },
          "request": {
            "$ref": "Channel"
          },
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Watch for changes in users list"
        },
        "update": {
          "path": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "description": "update user",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object"
            }
          },
          "request": {
            "$ref": "User"
          },
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "PUT",
          "id": "directory.users.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.users.delete",
          "parameterOrder": [
            "userKey"
          ],
          "description": "Delete user",
          "flatPath": "admin/directory/v1/users/{userKey}"
        },
        "signOut": {
          "id": "directory.users.signOut",
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "get": {
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.get",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          },
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user",
              "location": "path",
              "type": "string"
            },
            "viewType": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "location": "query",
              "default": "admin_view",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user."
            },
            "customFieldMask": {
              "location": "query",
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "projection": {
              "type": "string",
              "default": "basic",
              "description": "What subset of fields to fetch for this user.",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ]
            }
          },
          "path": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "description": "retrieve user"
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "parameters": {
                "alias": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The alias to be removed"
                },
                "userKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                }
              },
              "description": "Remove a alias for the user",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "id": "directory.users.aliases.delete",
              "httpMethod": "DELETE"
            },
            "insert": {
              "description": "Add a alias for the user",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "response": {
                "$ref": "Alias"
              },
              "parameterOrder": [
                "userKey"
              ],
              "parameters": {
                "userKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user"
                }
              },
              "request": {
                "$ref": "Alias"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "id": "directory.users.aliases.insert",
              "httpMethod": "POST"
            },
            "list": {
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "id": "directory.users.aliases.list",
              "response": {
                "$ref": "Aliases"
              },
              "parameterOrder": [
                "userKey"
              ],
              "description": "List all aliases for a user",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                }
              },
              "httpMethod": "GET"
            },
            "watch": {
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "response": {
                "$ref": "Channel"
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "description": "Watch for changes in users list",
              "parameters": {
                "userKey": {
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "type": "string"
                },
                "event": {
                  "location": "query",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "type": "string",
                  "description": "Event on which subscription is intended (if subscribing)"
                }
              },
              "request": {
                "$ref": "Channel"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "id": "directory.users.aliases.watch"
            }
          }
        },
        "photos": {
          "methods": {
            "delete": {
              "httpMethod": "DELETE",
              "id": "directory.users.photos.delete",
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "description": "Remove photos for the user",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "patch": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.patch",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "httpMethod": "PATCH",
              "description": "Patch Photo via Apiary Patch Orchestration",
              "parameterOrder": [
                "userKey"
              ],
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                }
              },
              "response": {
                "$ref": "UserPhoto"
              },
              "request": {
                "$ref": "UserPhoto"
              }
            },
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "description": "Add a photo for the user",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.update",
              "httpMethod": "PUT",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "request": {
                "$ref": "UserPhoto"
              },
              "response": {
                "$ref": "UserPhoto"
              }
            },
            "get": {
              "response": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "GET",
              "description": "Retrieve photo of a user",
              "id": "directory.users.photos.get",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              }
            }
          }
        }
      }
    },
    "resources": {
      "resources": {
        "buildings": {
          "methods": {
            "patch": {
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                },
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "type": "string",
                  "location": "query",
                  "description": "Source from which Building.coordinates are derived.",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ]
                },
                "buildingId": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The id of the building to update."
                }
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "httpMethod": "PATCH",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.patch",
              "response": {
                "$ref": "Building"
              },
              "description": "Patches a building via Apiary Patch Orchestration.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "request": {
                "$ref": "Building"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "update": {
              "request": {
                "$ref": "Building"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.update",
              "description": "Updates a building.",
              "parameters": {
                "buildingId": {
                  "description": "The id of the building to update.",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "coordinatesSource": {
                  "location": "query",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "type": "string",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "description": "Source from which Building.coordinates are derived."
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                }
              },
              "response": {
                "$ref": "Building"
              },
              "httpMethod": "PUT",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ]
            },
            "get": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "buildingId": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID of the building to retrieve."
                }
              },
              "response": {
                "$ref": "Building"
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "description": "Retrieves a building.",
              "id": "directory.resources.buildings.get"
            },
            "insert": {
              "id": "directory.resources.buildings.insert",
              "request": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "coordinatesSource": {
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "location": "query",
                  "type": "string",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "description": "Source from which Building.coordinates are derived."
                },
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "description": "Inserts a building."
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "description": "Retrieves a list of buildings for an account.",
              "id": "directory.resources.buildings.list",
              "response": {
                "$ref": "Buildings"
              },
              "parameterOrder": [
                "customer"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                },
                "maxResults": {
                  "type": "integer",
                  "maximum": "500",
                  "location": "query",
                  "minimum": "1",
                  "format": "int32",
                  "description": "Maximum number of results to return."
                }
              }
            },
            "delete": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "buildingId": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The id of the building to delete."
                }
              },
              "id": "directory.resources.buildings.delete",
              "httpMethod": "DELETE",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Deletes a building.",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            }
          }
        },
        "features": {
          "methods": {
            "delete": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameters": {
                "featureKey": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the feature to delete.",
                  "type": "string"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "httpMethod": "DELETE",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "description": "Deletes a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.delete"
            },
            "update": {
              "request": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "Feature"
              },
              "description": "Updates a feature.",
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "type": "string",
                  "description": "The unique ID of the feature to update.",
                  "required": true,
                  "location": "path"
                }
              },
              "id": "directory.resources.features.update",
              "httpMethod": "PUT",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "get": {
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "featureKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the feature to retrieve."
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "response": {
                "$ref": "Feature"
              },
              "description": "Retrieves a feature.",
              "id": "directory.resources.features.get",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameterOrder": [
                "customer",
                "featureKey"
              ]
            },
            "rename": {
              "request": {
                "$ref": "FeatureRename"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.features.rename",
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "description": "Renames a feature.",
              "httpMethod": "POST",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "parameters": {
                "oldName": {
                  "required": true,
                  "description": "The unique ID of the feature to rename.",
                  "type": "string",
                  "location": "path"
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string"
                }
              }
            },
            "list": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "id": "directory.resources.features.list",
              "description": "Retrieves a list of features for an account.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "maxResults": {
                  "minimum": "1",
                  "type": "integer",
                  "location": "query",
                  "maximum": "500",
                  "format": "int32",
                  "description": "Maximum number of results to return."
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "location": "query",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Features"
              }
            },
            "insert": {
              "response": {
                "$ref": "Feature"
              },
              "description": "Inserts a feature.",
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "id": "directory.resources.features.insert",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "request": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer"
              ]
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "featureKey": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the feature to update."
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "Feature"
              },
              "response": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "id": "directory.resources.features.patch",
              "description": "Patches a feature via Apiary Patch Orchestration."
            }
          }
        },
        "calendars": {
          "methods": {
            "delete": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.delete",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "httpMethod": "DELETE",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "calendarResourceId": {
                  "location": "path",
                  "description": "The unique ID of the calendar resource to delete.",
                  "type": "string",
                  "required": true
                }
              },
              "description": "Deletes a calendar resource."
            },
            "patch": {
              "response": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "calendarResourceId": {
                  "location": "path",
                  "description": "The unique ID of the calendar resource to update.",
                  "type": "string",
                  "required": true
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                }
              },
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "request": {
                "$ref": "CalendarResource"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.patch",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "httpMethod": "PATCH"
            },
            "list": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a list of calendar resources for an account.",
              "id": "directory.resources.calendars.list",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "response": {
                "$ref": "CalendarResources"
              },
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "query": {
                  "location": "query",
                  "type": "string",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone."
                },
                "orderBy": {
                  "location": "query",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order.",
                  "type": "string"
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                },
                "maxResults": {
                  "location": "query",
                  "description": "Maximum number of results to return.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": "1",
                  "maximum": "500"
                }
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "customer"
              ]
            },
            "get": {
              "id": "directory.resources.calendars.get",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "httpMethod": "GET",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "calendarResourceId": {
                  "type": "string",
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "location": "path",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a calendar resource.",
              "response": {
                "$ref": "CalendarResource"
              }
            },
            "insert": {
              "id": "directory.resources.calendars.insert",
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "response": {
                "$ref": "CalendarResource"
              },
              "description": "Inserts a calendar resource.",
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "httpMethod": "POST"
            },
            "update": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "calendarResourceId": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the calendar resource to update.",
                  "required": true
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "request": {
                "$ref": "CalendarResource"
              },
              "id": "directory.resources.calendars.update",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "httpMethod": "PUT"
            }
          }
        }
      }
    },
    "groups": {
      "methods": {
        "patch": {
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "request": {
            "$ref": "Group"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "id": "directory.groups.patch",
          "description": "Patch Groups via Apiary Patch Orchestration",
          "response": {
            "$ref": "Group"
          },
          "httpMethod": "PATCH"
        },
        "list": {
          "httpMethod": "GET",
          "id": "directory.groups.list",
          "path": "admin/directory/v1/groups",
          "parameters": {
            "domain": {
              "location": "query",
              "type": "string",
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead."
            },
            "customer": {
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain.",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "type": "integer",
              "format": "int32",
              "default": "200"
            },
            "sortOrder": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups"
            },
            "orderBy": {
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "enum": [
                "orderByUndefined",
                "email"
              ],
              "description": "Column to use for sorting results"
            },
            "userKey": {
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "type": "string",
              "location": "query"
            }
          },
          "parameterOrder": [],
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "response": {
            "$ref": "Groups"
          },
          "flatPath": "admin/directory/v1/groups"
        },
        "update": {
          "description": "Update Group",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "PUT",
          "path": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.update",
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            }
          },
          "request": {
            "$ref": "Group"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ]
        },
        "get": {
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.get",
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "groupKey"
          ],
          "description": "Retrieve Group",
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ]
        },
        "delete": {
          "path": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "description": "Delete Group",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group",
              "type": "string"
            }
          },
          "id": "directory.groups.delete",
          "parameterOrder": [
            "groupKey"
          ]
        },
        "insert": {
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameters": {},
          "description": "Create Group",
          "httpMethod": "POST",
          "parameterOrder": [],
          "path": "admin/directory/v1/groups",
          "flatPath": "admin/directory/v1/groups",
          "id": "directory.groups.insert",
          "request": {
            "$ref": "Group"
          }
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "description": "Remove a alias for the group",
              "id": "directory.groups.aliases.delete",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "parameters": {
                "alias": {
                  "location": "path",
                  "description": "The alias to be removed",
                  "required": true,
                  "type": "string"
                },
                "groupKey": {
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the group",
                  "location": "path"
                }
              }
            },
            "list": {
              "id": "directory.groups.aliases.list",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameters": {
                "groupKey": {
                  "description": "Email or immutable ID of the group",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Aliases"
              },
              "parameterOrder": [
                "groupKey"
              ],
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "description": "List all aliases for a group"
            },
            "insert": {
              "httpMethod": "POST",
              "id": "directory.groups.aliases.insert",
              "parameters": {
                "groupKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Email or immutable ID of the group"
                }
              },
              "parameterOrder": [
                "groupKey"
              ],
              "description": "Add a alias for the group",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "request": {
                "$ref": "Alias"
              },
              "response": {
                "$ref": "Alias"
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases"
            }
          }
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "httpMethod": "POST",
          "path": "admin/directory_v1/channels/stop",
          "request": {
            "$ref": "Channel"
          },
          "parameterOrder": [],
          "parameters": {},
          "description": "Stop watching resources through this channel.",
          "flatPath": "admin/directory_v1/channels/stop",
          "id": "admin.channels.stop",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "id": "admin.customer.devices.chromeos.commands.get",
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "parameters": {
                        "customerId": {
                          "location": "path",
                          "description": "Immutable. Immutable ID of the G Suite account.",
                          "required": true,
                          "type": "string"
                        },
                        "deviceId": {
                          "description": "Immutable. Immutable ID of Chrome OS Device.",
                          "type": "string",
                          "required": true,
                          "location": "path"
                        },
                        "commandId": {
                          "location": "path",
                          "format": "int64",
                          "required": true,
                          "type": "string",
                          "description": "Immutable. Immutable ID of Chrome OS Device Command."
                        }
                      },
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "description": "Gets command data a specific command issued to the device.",
                      "httpMethod": "GET",
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}"
                    }
                  }
                }
              },
              "methods": {
                "issueCommand": {
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "description": "Issues a command for the device to execute.",
                  "httpMethod": "POST",
                  "parameters": {
                    "customerId": {
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "description": "Immutable. Immutable ID of the G Suite account."
                    },
                    "deviceId": {
                      "description": "Immutable. Immutable ID of Chrome OS Device.",
                      "location": "path",
                      "type": "string",
                      "required": true
                    }
                  },
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "members": {
      "methods": {
        "hasMember": {
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.members.hasMember",
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "response": {
            "$ref": "MembersHasMember"
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "parameters": {
            "groupKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID."
            },
            "memberKey": {
              "type": "string",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "location": "path",
              "required": true
            }
          }
        },
        "list": {
          "description": "Retrieve all members in a group (paginated)",
          "httpMethod": "GET",
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "roles": {
              "description": "Comma separated role values to filter list results on.",
              "location": "query",
              "type": "string"
            },
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group",
              "required": true,
              "location": "path"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "minimum": "1",
              "default": "200",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "type": "integer",
              "format": "int32",
              "location": "query"
            },
            "includeDerivedMembership": {
              "description": "Whether to list indirect memberships. Default: false.",
              "type": "boolean",
              "location": "query"
            }
          },
          "response": {
            "$ref": "Members"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "id": "directory.members.list",
          "path": "admin/directory/v1/groups/{groupKey}/members"
        },
        "get": {
          "id": "directory.members.get",
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group",
              "required": true,
              "type": "string"
            },
            "memberKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the member",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Retrieve Group Member",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "response": {
            "$ref": "Member"
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "update": {
          "request": {
            "$ref": "Member"
          },
          "response": {
            "$ref": "Member"
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "PUT",
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "required": true
            },
            "memberKey": {
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "description": "Update membership of a user in the specified group.",
          "id": "directory.members.update",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ]
        },
        "insert": {
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "id": "directory.members.insert",
          "parameters": {
            "groupKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the group"
            }
          },
          "parameterOrder": [
            "groupKey"
          ],
          "response": {
            "$ref": "Member"
          },
          "description": "Add user to the specified group.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "request": {
            "$ref": "Member"
          }
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "description": "Patch Member via Apiary Patch Orchestration",
          "request": {
            "$ref": "Member"
          },
          "httpMethod": "PATCH",
          "parameters": {
            "memberKey": {
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "location": "path",
              "type": "string"
            },
            "groupKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object"
            }
          },
          "id": "directory.members.patch",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          }
        },
        "delete": {
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "httpMethod": "DELETE",
          "id": "directory.members.delete",
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "memberKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the member"
            }
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "description": "Remove membership."
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "invalidate": {
          "id": "directory.verificationCodes.invalidate",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Invalidate the current backup verification codes for the user.",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "parameterOrder": [
            "userKey"
          ]
        },
        "generate": {
          "description": "Generate new backup verification codes for the user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "id": "directory.verificationCodes.generate",
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user",
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey"
          ]
        },
        "list": {
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "response": {
            "$ref": "VerificationCodes"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "httpMethod": "GET",
          "id": "directory.verificationCodes.list"
        }
      }
    },
    "customers": {
      "methods": {
        "update": {
          "parameters": {
            "customerKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Id of the customer to be updated"
            }
          },
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "description": "Updates a customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "request": {
            "$ref": "Customer"
          },
          "id": "directory.customers.update",
          "parameterOrder": [
            "customerKey"
          ]
        },
        "patch": {
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.patch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "response": {
            "$ref": "Customer"
          },
          "parameterOrder": [
            "customerKey"
          ],
          "request": {
            "$ref": "Customer"
          },
          "description": "Patch Customers via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameters": {
            "customerKey": {
              "location": "path",
              "required": true,
              "description": "Id of the customer to be updated",
              "type": "string"
            }
          }
        },
        "get": {
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be retrieved",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "customerKey"
          ],
          "path": "admin/directory/v1/customers/{customerKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "description": "Retrieves a customer.",
          "response": {
            "$ref": "Customer"
          },
          "id": "directory.customers.get",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "GET"
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "action": {
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "description": "Take action on Chrome OS Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameters": {
            "resourceId": {
              "description": "Immutable ID of Chrome OS Device",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "id": "directory.chromeosdevices.action"
        },
        "patch": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "description": "Patch Chrome OS Device",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "httpMethod": "PATCH",
          "id": "directory.chromeosdevices.patch",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "deviceId": {
              "type": "string",
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "location": "path"
            },
            "projection": {
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            }
          }
        },
        "update": {
          "id": "directory.chromeosdevices.update",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "description": "Update Chrome OS Device",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameters": {
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "deviceId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of Chrome OS Device",
              "type": "string"
            }
          },
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "httpMethod": "PUT"
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "id": "directory.chromeosdevices.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "parameters": {
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            },
            "orderBy": {
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ],
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "type": "string",
              "location": "query"
            },
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            },
            "orgUnitPath": {
              "type": "string",
              "location": "query",
              "description": "Full path of the organizational unit or its ID"
            },
            "maxResults": {
              "format": "int32",
              "default": "100",
              "minimum": "1",
              "location": "query",
              "type": "integer",
              "description": "Maximum number of results to return."
            },
            "query": {
              "type": "string",
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "location": "query"
            },
            "sortOrder": {
              "location": "query",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "projection": {
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            }
          },
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "parameterOrder": [
            "customerId"
          ]
        },
        "get": {
          "id": "directory.chromeosdevices.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "httpMethod": "GET",
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "type": "string"
            },
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "description": "Retrieve Chrome OS Device",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        },
        "moveDevicesToOu": {
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true,
              "type": "string"
            },
            "orgUnitPath": {
              "type": "string",
              "required": true,
              "location": "query",
              "description": "Full path of the target organizational unit or its ID"
            }
          },
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu"
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "id": "directory.privileges.list",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "response": {
            "$ref": "Privileges"
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "description": "Retrieves a paginated list of all privileges for a customer."
        }
      }
    },
    "tokens": {
      "methods": {
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "id": "directory.tokens.delete",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "httpMethod": "DELETE",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "clientId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "The Client ID of the application the token is issued to."
            }
          },
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "description": "Delete all access tokens issued by a user for an application."
        },
        "list": {
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "Tokens"
          },
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "id": "directory.tokens.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/tokens"
        },
        "get": {
          "id": "directory.tokens.get",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true
            },
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "description": "Get information about an access token issued by a user.",
          "response": {
            "$ref": "Token"
          },
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        }
      }
    }
  },
  "basePath": "",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "servicePath": "",
  "schemas": {
    "FeatureRename": {
      "id": "FeatureRename",
      "properties": {
        "newName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          },
          "description": "New name of the feature."
        }
      },
      "type": "object"
    },
    "UserLocation": {
      "id": "UserLocation",
      "description": "JSON template for a location entry.",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "floorName": {
          "type": "string",
          "description": "Floor name/number."
        },
        "buildingId": {
          "type": "string",
          "description": "Building Identifier."
        },
        "floorSection": {
          "type": "string",
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values."
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        },
        "deskCode": {
          "type": "string",
          "description": "Most specific textual code of individual desk location."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserMakeAdmin": {
      "type": "object",
      "id": "UserMakeAdmin",
      "properties": {
        "status": {
          "type": "boolean",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "description": "Boolean indicating new admin status of the user"
        }
      }
    },
    "DomainAliases": {
      "type": "object",
      "id": "DomainAliases",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#domainAliases",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "domainAliases": {
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          },
          "description": "List of domain alias objects."
        }
      }
    },
    "BuildingAddress": {
      "properties": {
        "regionCode": {
          "description": "Required. CLDR region code of the country/region of the address.",
          "type": "string"
        },
        "sublocality": {
          "type": "string",
          "description": "Optional. Sublocality of the address."
        },
        "addressLines": {
          "type": "array",
          "description": "Unstructured address lines describing the lower levels of an address.",
          "items": {
            "type": "string"
          }
        },
        "languageCode": {
          "type": "string",
          "description": "Optional. BCP-47 language code of the contents of this address (if known)."
        },
        "postalCode": {
          "type": "string",
          "description": "Optional. Postal code of the address."
        },
        "locality": {
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.",
          "type": "string"
        },
        "administrativeArea": {
          "type": "string",
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region."
        }
      },
      "description": "Public API: Resources.buildings",
      "type": "object",
      "id": "BuildingAddress"
    },
    "RoleAssignments": {
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of RoleAssignment resources.",
          "items": {
            "$ref": "RoleAssignment"
          }
        },
        "nextPageToken": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments .",
          "default": "admin#directory#roleAssignments"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "RoleAssignments",
      "type": "object"
    },
    "MobileDevices": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "mobiledevices": {
          "type": "array",
          "items": {
            "$ref": "MobileDevice"
          },
          "description": "List of Mobile Device objects."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#mobiledevices",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        }
      },
      "id": "MobileDevices"
    },
    "Roles": {
      "type": "object",
      "id": "Roles",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#roles",
          "description": "The type of the API resource. This is always admin#directory#roles."
        },
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Role"
          },
          "description": "A list of Role resources."
        }
      }
    },
    "MobileDeviceAction": {
      "type": "object",
      "id": "MobileDeviceAction",
      "properties": {
        "action": {
          "type": "string",
          "description": "Action to be taken on the Mobile Device",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          }
        }
      }
    },
    "BuildingCoordinates": {
      "description": "Public API: Resources.buildings",
      "type": "object",
      "id": "BuildingCoordinates",
      "properties": {
        "latitude": {
          "format": "double",
          "description": "Latitude in decimal degrees.",
          "type": "number"
        },
        "longitude": {
          "description": "Longitude in decimal degrees.",
          "format": "double",
          "type": "number"
        }
      }
    },
    "Domains": {
      "type": "object",
      "id": "Domains",
      "properties": {
        "isPrimary": {
          "description": "Indicates if the domain is a primary domain (Read-only).",
          "type": "boolean"
        },
        "domainAliases": {
          "description": "List of domain alias objects. (Read-only)",
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          }
        },
        "creationTime": {
          "description": "Creation time of the domain. (Read-only).",
          "type": "string",
          "format": "int64"
        },
        "verified": {
          "description": "Indicates the verification state of a domain. (Read-only).",
          "type": "boolean"
        },
        "domainName": {
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The domain name of the customer.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domain"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "Token": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user that issued the token."
        },
        "displayText": {
          "description": "The displayable name of the application the token is issued to.",
          "type": "string"
        },
        "clientId": {
          "type": "string",
          "description": "The Client ID of the application the token is issued to."
        },
        "anonymous": {
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID.",
          "type": "boolean"
        },
        "scopes": {
          "description": "A list of authorization scopes the application is granted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nativeApp": {
          "type": "boolean",
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#token.",
          "type": "string",
          "default": "admin#directory#token"
        }
      },
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Token"
    },
    "DirectoryChromeosdevicesCommand": {
      "description": "Information regarding a command that was issued to a device.",
      "type": "object",
      "properties": {
        "commandExpireTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired."
        },
        "payload": {
          "description": "The payload that the command specified, if any.",
          "type": "string"
        },
        "state": {
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "description": "Indicates the command state.",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of the command.",
          "type": "string",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ]
        },
        "commandId": {
          "description": "Unique ID of a device command.",
          "type": "string",
          "format": "int64"
        },
        "issueTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The timestamp when the command was issued by the admin."
        },
        "commandResult": {
          "description": "The result of the command execution.",
          "$ref": "DirectoryChromeosdevicesCommandResult"
        }
      },
      "id": "DirectoryChromeosdevicesCommand"
    },
    "UserPhoto": {
      "id": "UserPhoto",
      "type": "object",
      "properties": {
        "height": {
          "format": "int32",
          "type": "integer",
          "description": "Height in pixels of the photo"
        },
        "width": {
          "description": "Width in pixels of the photo",
          "format": "int32",
          "type": "integer"
        },
        "mimeType": {
          "description": "Mime Type of the photo",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#user#photo",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "photoData": {
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "type": "string",
          "description": "Base64 encoded photo data",
          "format": "byte"
        },
        "id": {
          "description": "Unique identifier of User (Read-only)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "primaryEmail": {
          "description": "Primary email of User (Read-only)",
          "type": "string"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Groups": {
      "properties": {
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#groups",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "groups": {
          "description": "List of group objects.",
          "type": "array",
          "items": {
            "$ref": "Group"
          }
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Groups",
      "type": "object"
    },
    "VerificationCode": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#verificationCode",
          "type": "string",
          "description": "The type of the resource. This is always admin#directory#verificationCode."
        },
        "userId": {
          "description": "The obfuscated unique ID of the user.",
          "type": "string"
        },
        "verificationCode": {
          "type": "string",
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result."
        }
      },
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "VerificationCode"
    },
    "CustomerPostalAddress": {
      "properties": {
        "addressLine3": {
          "type": "string",
          "description": "Address line 3 of the address."
        },
        "contactName": {
          "type": "string",
          "description": "The customer contact's name."
        },
        "locality": {
          "description": "Name of the locality. An example of a locality value is the city of San Francisco.",
          "type": "string"
        },
        "region": {
          "description": "Name of the region. An example of a region value is NY for the state of New York.",
          "type": "string"
        },
        "countryCode": {
          "type": "string",
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements."
        },
        "addressLine1": {
          "type": "string",
          "description": "A customer's physical address. The address can be composed of one to three lines."
        },
        "organizationName": {
          "description": "The company or company division name.",
          "type": "string"
        },
        "postalCode": {
          "type": "string",
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element."
        },
        "addressLine2": {
          "description": "Address line 2 of the address.",
          "type": "string"
        }
      },
      "id": "CustomerPostalAddress",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserRelation": {
      "type": "object",
      "description": "JSON template for a relation entry.",
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "value": {
          "description": "The name of the relation.",
          "type": "string"
        },
        "type": {
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner.",
          "type": "string"
        }
      },
      "id": "UserRelation"
    },
    "Tokens": {
      "type": "object",
      "id": "Tokens",
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#tokenList",
          "description": "The type of the API resource. This is always admin#directory#tokenList.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "Token"
          },
          "description": "A list of Token resources.",
          "type": "array"
        }
      }
    },
    "FeatureInstance": {
      "id": "FeatureInstance",
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      },
      "description": "JSON template for a feature instance.",
      "type": "object"
    },
    "UserPosixAccount": {
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix.",
      "type": "object",
      "properties": {
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        },
        "homeDirectory": {
          "type": "string",
          "description": "The path to the home directory for this account."
        },
        "shell": {
          "type": "string",
          "description": "The path to the login shell for this account."
        },
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "uid": {
          "format": "uint64",
          "type": "string",
          "description": "The POSIX compliant user ID."
        },
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        },
        "accountId": {
          "description": "A POSIX account field identifier.",
          "type": "string"
        },
        "gid": {
          "type": "string",
          "description": "The default group ID.",
          "format": "uint64"
        },
        "operatingSystemType": {
          "type": "string",
          "description": "The operating system type for this account."
        },
        "gecos": {
          "type": "string",
          "description": "The GECOS (user information) for this account."
        }
      },
      "id": "UserPosixAccount"
    },
    "UserAddress": {
      "type": "object",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "region": {
          "description": "Region.",
          "type": "string"
        },
        "streetAddress": {
          "type": "string",
          "description": "Street."
        },
        "extendedAddress": {
          "description": "Extended Address.",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal code.",
          "type": "string"
        },
        "countryCode": {
          "type": "string",
          "description": "Country code."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "poBox": {
          "type": "string",
          "description": "Other parts of address."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary address. Only one entry could be marked as primary."
        },
        "formatted": {
          "type": "string",
          "description": "Formatted address."
        },
        "locality": {
          "description": "Locality.",
          "type": "string"
        }
      },
      "id": "UserAddress",
      "description": "JSON template for address."
    },
    "UserUndelete": {
      "type": "object",
      "id": "UserUndelete",
      "properties": {
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        }
      }
    },
    "MobileDevice": {
      "properties": {
        "supportsWorkProfile": {
          "description": "Work profile supported on device (Read-only)",
          "type": "boolean"
        },
        "serialNumber": {
          "description": "Mobile Device SSN or Serial Number (Read-only)",
          "type": "string"
        },
        "userAgent": {
          "type": "string",
          "description": "Mobile Device user agent"
        },
        "bootloaderVersion": {
          "type": "string",
          "description": "Mobile Device Bootloader version (Read-only)"
        },
        "deviceCompromisedStatus": {
          "type": "string",
          "description": "Mobile Device compromised status (Read-only)"
        },
        "meid": {
          "description": "Mobile Device MEID number (Read-only)",
          "type": "string"
        },
        "kernelVersion": {
          "type": "string",
          "description": "Mobile Device Kernel version (Read-only)"
        },
        "manufacturer": {
          "type": "string",
          "description": "Mobile Device manufacturer (Read-only)"
        },
        "privilege": {
          "description": "DMAgentPermission (Read-only)",
          "type": "string"
        },
        "releaseVersion": {
          "type": "string",
          "description": "Mobile Device release version version (Read-only)"
        },
        "email": {
          "items": {
            "type": "string"
          },
          "description": "List of owner user's email addresses (Read-only)",
          "type": "array"
        },
        "status": {
          "description": "Status of the device (Read-only)",
          "type": "string"
        },
        "applications": {
          "items": {
            "type": "object",
            "properties": {
              "packageName": {
                "description": "Package name of application",
                "type": "string"
              },
              "displayName": {
                "description": "Display name of application",
                "type": "string"
              },
              "permission": {
                "description": "List of Permissions for application",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "versionCode": {
                "description": "Version code of application",
                "type": "integer",
                "format": "int32"
              },
              "versionName": {
                "type": "string",
                "description": "Version name of application"
              }
            }
          },
          "description": "List of applications installed on Mobile Device",
          "type": "array"
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "devicePasswordStatus": {
          "description": "DevicePasswordStatus (Read-only)",
          "type": "string"
        },
        "hardwareId": {
          "description": "Mobile Device Hardware Id (Read-only)",
          "type": "string"
        },
        "securityPatchLevel": {
          "format": "int64",
          "description": "Mobile Device Security patch level (Read-only)",
          "type": "string"
        },
        "defaultLanguage": {
          "type": "string",
          "description": "The default locale used on the Mobile Device (Read-only)"
        },
        "managedAccountIsOnOwnerProfile": {
          "type": "boolean",
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)"
        },
        "type": {
          "type": "string",
          "description": "The type of device (Read-only)"
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "deviceId": {
          "type": "string",
          "description": "Mobile Device serial number (Read-only)"
        },
        "adbStatus": {
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "wifiMacAddress": {
          "description": "Mobile Device WiFi MAC address (Read-only)",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#mobiledevice"
        },
        "name": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of owner user's names (Read-only)"
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "resourceId": {
          "type": "string",
          "description": "Unique identifier of Mobile Device (Read-only)"
        },
        "brand": {
          "type": "string",
          "description": "Mobile Device Brand (Read-only)"
        },
        "encryptionStatus": {
          "description": "Mobile Device Encryption Status (Read-only)",
          "type": "string"
        },
        "firstSync": {
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "os": {
          "type": "string",
          "description": "Name of the mobile operating system"
        },
        "otherAccountsInfo": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of accounts added on device (Read-only)"
        },
        "basebandVersion": {
          "description": "Mobile Device Baseband version (Read-only)",
          "type": "string"
        },
        "buildNumber": {
          "description": "Mobile Device Build number (Read-only)",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "imei": {
          "type": "string",
          "description": "Mobile Device IMEI number (Read-only)"
        },
        "networkOperator": {
          "type": "string",
          "description": "Mobile Device mobile or network operator (if available) (Read-only)"
        },
        "model": {
          "description": "Name of the model of the device",
          "type": "string"
        },
        "unknownSourcesStatus": {
          "description": "Unknown sources enabled or disabled on device (Read-only)",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "MobileDevice"
    },
    "ChromeOsMoveDevicesToOu": {
      "type": "object",
      "id": "ChromeOsMoveDevicesToOu",
      "properties": {
        "deviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "ChromeOs Devices to be moved to OU",
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          }
        }
      }
    },
    "Alias": {
      "description": "JSON template for Alias object in Directory API.",
      "type": "object",
      "id": "Alias",
      "properties": {
        "kind": {
          "default": "admin#directory#alias",
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        }
      }
    },
    "Group": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Group",
      "properties": {
        "directMembersCount": {
          "description": "Group direct members count",
          "format": "int64",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#group"
        },
        "aliases": {
          "description": "List of aliases (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nonEditableAliases": {
          "description": "List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "Description of the group",
          "type": "string"
        },
        "email": {
          "description": "Email of Group",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "type": "string"
        },
        "adminCreated": {
          "description": "Is the group created by admin (Read-only) *",
          "type": "boolean"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of Group (Read-only)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Role": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "roleName": {
          "description": "Name of the role.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          }
        },
        "isSuperAdminRole": {
          "type": "boolean",
          "description": "Returns true if the role is a super admin role."
        },
        "rolePrivileges": {
          "items": {
            "type": "object",
            "properties": {
              "privilegeName": {
                "type": "string",
                "description": "The name of the privilege."
              },
              "serviceId": {
                "type": "string",
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
              }
            }
          },
          "description": "The set of privileges that are granted to this role.",
          "type": "array",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          }
        },
        "roleId": {
          "format": "int64",
          "type": "string",
          "description": "ID of the role."
        },
        "roleDescription": {
          "type": "string",
          "description": "A short description of the role."
        },
        "isSystemRole": {
          "description": "Returns true if this is a pre-defined system role.",
          "type": "boolean"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#role",
          "description": "The type of the API resource. This is always admin#directory#role."
        }
      },
      "id": "Role"
    },
    "Schemas": {
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Schemas",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#schemas",
          "type": "string"
        },
        "schemas": {
          "type": "array",
          "items": {
            "$ref": "Schema"
          },
          "description": "List of UserSchema objects."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "DirectoryChromeosdevicesCommandResult": {
      "type": "object",
      "id": "DirectoryChromeosdevicesCommandResult",
      "description": "The result of executing a command.",
      "properties": {
        "executeTime": {
          "description": "The time at which the command was executed or failed to execute.",
          "format": "google-datetime",
          "type": "string"
        },
        "errorMessage": {
          "type": "string",
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed."
        },
        "result": {
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ],
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "description": "The result of the command.",
          "type": "string"
        }
      }
    },
    "Member": {
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#member"
        },
        "delivery_settings": {
          "type": "string",
          "description": "Delivery settings of member"
        },
        "status": {
          "description": "Status of member (Immutable)",
          "type": "string"
        },
        "email": {
          "description": "Email of member (Read-only)",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey."
        },
        "role": {
          "type": "string",
          "description": "Role of member"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "type": {
          "type": "string",
          "description": "Type of member (Immutable)"
        }
      },
      "id": "Member",
      "type": "object"
    },
    "UserKeyword": {
      "type": "object",
      "description": "JSON template for a keyword entry.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "value": {
          "type": "string",
          "description": "Keyword."
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      },
      "id": "UserKeyword"
    },
    "UserPhone": {
      "type": "object",
      "description": "JSON template for a phone entry.",
      "id": "UserPhone",
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary phone or not."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "value": {
          "description": "Phone number.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      }
    },
    "CalendarResource": {
      "id": "CalendarResource",
      "type": "object",
      "properties": {
        "featureInstances": {
          "type": "any",
          "description": "Instances of features for the calendar resource."
        },
        "resourceType": {
          "type": "string",
          "description": "The type of the calendar resource, intended for non-room resources."
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "Capacity of a resource, number of seats in a room."
        },
        "floorSection": {
          "type": "string",
          "description": "Name of the section within a floor a resource is located in."
        },
        "floorName": {
          "type": "string",
          "description": "Name of the floor a resource is located on."
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "resourceName": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string",
          "description": "The name of the calendar resource. For example, \"Training Room 1A\"."
        },
        "resourceDescription": {
          "type": "string",
          "description": "Description of the resource, visible only to admins."
        },
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        },
        "buildingId": {
          "description": "Unique ID for the building a resource is located in.",
          "type": "string"
        },
        "resourceCategory": {
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.",
          "type": "string"
        },
        "resourceId": {
          "description": "The unique ID for the calendar resource.",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#calendars#CalendarResource",
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource."
        },
        "resourceEmail": {
          "type": "string",
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource."
        },
        "generatedResourceName": {
          "type": "string",
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\"."
        }
      },
      "description": "Public API: Resources.calendars"
    },
    "UserCustomProperties": {
      "type": "object",
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "additionalProperties": {
        "type": "any"
      },
      "id": "UserCustomProperties"
    },
    "UserLanguage": {
      "type": "object",
      "id": "UserLanguage",
      "description": "JSON template for a language entry.",
      "properties": {
        "customLanguage": {
          "type": "string",
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set"
        },
        "languageCode": {
          "type": "string",
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException."
        }
      }
    },
    "Asp": {
      "id": "Asp",
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created.",
          "type": "string"
        },
        "lastTimeUsed": {
          "description": "The time when the ASP was last used. Expressed in Unix time format.",
          "format": "int64",
          "type": "string"
        },
        "creationTime": {
          "format": "int64",
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "type": "string"
        },
        "userKey": {
          "description": "The unique ID of the user who issued the ASP.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the ASP.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#asp.",
          "default": "admin#directory#asp",
          "type": "string"
        },
        "codeId": {
          "description": "The unique ID of the ASP.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "type": "object",
      "description": "A response for issuing a command.",
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "properties": {
        "commandId": {
          "format": "int64",
          "type": "string",
          "description": "The unique ID of the issued command, used to retrieve the command status."
        }
      }
    },
    "MembersHasMember": {
      "id": "MembersHasMember",
      "type": "object",
      "description": "JSON template for Has Member response in Directory API.",
      "properties": {
        "isMember": {
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "readOnly": true,
          "type": "boolean"
        }
      }
    },
    "DomainAlias": {
      "type": "object",
      "properties": {
        "parentDomainName": {
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "creationTime": {
          "type": "string",
          "description": "The creation time of the domain alias. (Read-only).",
          "format": "int64"
        },
        "domainAliasName": {
          "type": "string",
          "description": "The domain alias name."
        },
        "kind": {
          "default": "admin#directory#domainAlias",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "verified": {
          "description": "Indicates the verification state of a domain alias. (Read-only)",
          "type": "boolean"
        }
      },
      "id": "DomainAlias"
    },
    "UserSshPublicKey": {
      "id": "UserSshPublicKey",
      "description": "JSON template for a POSIX account entry.",
      "type": "object",
      "properties": {
        "expirationTimeUsec": {
          "type": "string",
          "description": "An expiration time in microseconds since epoch.",
          "format": "int64"
        },
        "fingerprint": {
          "type": "string",
          "readOnly": true,
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)"
        },
        "key": {
          "description": "An SSH public key.",
          "type": "string"
        }
      }
    },
    "Building": {
      "description": "Public API: Resources.buildings",
      "properties": {
        "floorNames": {
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "buildingId": {
          "description": "Unique identifier for the building. The maximum length is 100 characters.",
          "type": "string"
        },
        "address": {
          "$ref": "BuildingAddress",
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required."
        },
        "buildingName": {
          "type": "string",
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the building. For example, \"Chelsea Market\"."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#buildings#Building",
          "description": "Kind of resource this is."
        },
        "coordinates": {
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees.",
          "$ref": "BuildingCoordinates"
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "id": "Building",
      "type": "object"
    },
    "Domains2": {
      "id": "Domains2",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domains",
          "description": "Kind of resource this is."
        },
        "domains": {
          "items": {
            "$ref": "Domains"
          },
          "description": "List of domain objects.",
          "type": "array"
        }
      }
    },
    "VerificationCodes": {
      "id": "VerificationCodes",
      "type": "object",
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#verificationCodesList",
          "description": "The type of the resource. This is always admin#directory#verificationCodesList."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "VerificationCode"
          },
          "description": "A list of verification code resources."
        }
      }
    },
    "OrgUnits": {
      "id": "OrgUnits",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#orgUnits",
          "description": "Kind of resource this is."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "organizationUnits": {
          "items": {
            "$ref": "OrgUnit"
          },
          "description": "List of user objects.",
          "type": "array"
        }
      },
      "type": "object",
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Schema": {
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Schema",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "schemaId": {
          "type": "string",
          "description": "Unique identifier of Schema (Read-only)"
        },
        "displayName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "Display name for the schema."
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema"
        },
        "fields": {
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "type": "array",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Fields of Schema"
        },
        "schemaName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "Schema name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserEmail": {
      "type": "object",
      "description": "JSON template for an email.",
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary email. Only one entry could be marked as primary."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value."
        },
        "address": {
          "type": "string",
          "description": "Email id of the user."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "id": "UserEmail"
    },
    "UserIm": {
      "type": "object",
      "id": "UserIm",
      "description": "JSON template for instant messenger of an user.",
      "properties": {
        "customProtocol": {
          "type": "string",
          "description": "Custom protocol."
        },
        "im": {
          "type": "string",
          "description": "Instant messenger id."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "protocol": {
          "type": "string",
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field."
        },
        "primary": {
          "description": "If this is user's primary im. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        }
      }
    },
    "ChromeOsDevices": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "chromeosdevices": {
          "description": "List of Chrome OS Device objects.",
          "type": "array",
          "items": {
            "$ref": "ChromeOsDevice"
          }
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#chromeosdevices"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        }
      },
      "id": "ChromeOsDevices"
    },
    "ChromeOsDevice": {
      "id": "ChromeOsDevice",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "macAddress": {
          "description": "Chromebook Mac Address on wifi network interface (Read-only)",
          "type": "string"
        },
        "willAutoRenew": {
          "description": "Will Chromebook auto renew after support end date (Read-only)",
          "type": "boolean"
        },
        "dockMacAddress": {
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "annotatedLocation": {
          "type": "string",
          "description": "Address or location of the device as noted by the administrator"
        },
        "status": {
          "type": "string",
          "description": "status of the device (Read-only)"
        },
        "lastKnownNetwork": {
          "type": "array",
          "items": {
            "properties": {
              "wanIpAddress": {
                "description": "The WAN IP address.",
                "type": "string"
              },
              "ipAddress": {
                "type": "string",
                "description": "The IP address."
              }
            },
            "type": "object",
            "description": "Information for an ip address."
          },
          "description": "Contains last known network (Read-only)"
        },
        "deviceFiles": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "description": "File type",
                "type": "string"
              },
              "downloadUrl": {
                "type": "string",
                "description": "File download URL"
              },
              "createTime": {
                "type": "string",
                "description": "Date and time the file was created",
                "format": "date-time"
              },
              "name": {
                "type": "string",
                "description": "File name"
              }
            }
          },
          "description": "List of device files to download (Read-only)"
        },
        "deviceId": {
          "type": "string",
          "description": "Unique identifier of Chrome OS Device (Read-only)"
        },
        "cpuStatusReports": {
          "description": "Reports of CPU utilization and temperature (Read-only)",
          "type": "array",
          "items": {
            "properties": {
              "reportTime": {
                "type": "string",
                "description": "Date and time the report was received.",
                "format": "date-time"
              },
              "cpuTemperatureInfo": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "description": "CPU label",
                      "type": "string"
                    },
                    "temperature": {
                      "description": "Temperature in Celsius degrees.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                },
                "description": "List of CPU temperature samples."
              },
              "cpuUtilizationPercentageInfo": {
                "type": "array",
                "items": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            },
            "type": "object"
          }
        },
        "activeTimeRanges": {
          "type": "array",
          "description": "List of active time ranges (Read-only)",
          "items": {
            "properties": {
              "activeTime": {
                "format": "int32",
                "description": "Duration in milliseconds",
                "type": "integer"
              },
              "date": {
                "description": "Date of usage",
                "type": "string",
                "format": "date"
              }
            },
            "type": "object"
          }
        },
        "lastEnrollmentTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was last enrolled (Read-only)"
        },
        "orderNumber": {
          "description": "Chromebook order number (Read-only)",
          "type": "string"
        },
        "systemRamTotal": {
          "type": "string",
          "format": "int64",
          "description": "Total RAM on the device [in bytes] (Read-only)"
        },
        "firmwareVersion": {
          "description": "Chromebook firmware version (Read-only)",
          "type": "string"
        },
        "manufactureDate": {
          "type": "string",
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format."
        },
        "annotatedAssetId": {
          "type": "string",
          "description": "AssetId specified during enrollment or through later annotation"
        },
        "recentUsers": {
          "type": "array",
          "description": "List of recent device users, in descending order by last login time (Read-only)",
          "items": {
            "properties": {
              "email": {
                "description": "Email address of the user. Present only if the user type is managed",
                "type": "string"
              },
              "type": {
                "description": "The type of the user",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "ethernetMacAddress": {
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)",
          "type": "string"
        },
        "tpmVersionInfo": {
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "type": "object",
          "properties": {
            "manufacturer": {
              "type": "string",
              "description": "TPM manufacturer code."
            },
            "vendorSpecific": {
              "description": "Vendor-specific information such as Vendor ID.",
              "type": "string"
            },
            "family": {
              "type": "string",
              "description": "TPM family."
            },
            "specLevel": {
              "description": "TPM specification level.",
              "type": "string"
            },
            "firmwareVersion": {
              "description": "TPM firmware version.",
              "type": "string"
            },
            "tpmModel": {
              "description": "TPM model number.",
              "type": "string"
            }
          }
        },
        "notes": {
          "type": "string",
          "description": "Notes added by the administrator"
        },
        "diskVolumeReports": {
          "description": "Reports of disk space and other info about mounted/connected volumes.",
          "type": "array",
          "items": {
            "properties": {
              "volumeInfo": {
                "description": "Disk volumes",
                "type": "array",
                "items": {
                  "properties": {
                    "volumeId": {
                      "description": "Volume id",
                      "type": "string"
                    },
                    "storageTotal": {
                      "description": "Total disk space [in bytes]",
                      "type": "string",
                      "format": "int64"
                    },
                    "storageFree": {
                      "description": "Free disk space [in bytes]",
                      "type": "string",
                      "format": "int64"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "type": "object"
          }
        },
        "serialNumber": {
          "type": "string",
          "description": "Chromebook serial number (Read-only)"
        },
        "platformVersion": {
          "type": "string",
          "description": "Chromebook platform version (Read-only)"
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "osVersion": {
          "description": "Chromebook Os Version (Read-only)",
          "type": "string"
        },
        "model": {
          "type": "string",
          "description": "Chromebook Model (Read-only)"
        },
        "ethernetMacAddress0": {
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "autoUpdateExpiration": {
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "format": "int64",
          "type": "string"
        },
        "supportEndDate": {
          "type": "string",
          "format": "date-time",
          "description": "Final date the device will be supported (Read-only)"
        },
        "bootMode": {
          "description": "Chromebook boot mode (Read-only)",
          "type": "string"
        },
        "systemRamFreeReports": {
          "items": {
            "type": "object",
            "properties": {
              "reportTime": {
                "description": "Date and time the report was received.",
                "type": "string",
                "format": "date-time"
              },
              "systemRamFreeInfo": {
                "items": {
                  "type": "string",
                  "format": "int64"
                },
                "type": "array"
              }
            }
          },
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#chromeosdevice",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "meid": {
          "type": "string",
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)"
        },
        "annotatedUser": {
          "description": "User of the device",
          "type": "string"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of the device"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "Customer": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "default": "admin#directory#customer",
          "type": "string",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer"
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. The default value is en-US",
          "type": "string"
        },
        "id": {
          "description": "The unique ID for the customer's G Suite account. (Readonly)",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "postalAddress": {
          "$ref": "CustomerPostalAddress",
          "description": "The customer's postal address information."
        },
        "phoneNumber": {
          "description": "The customer's contact phone number in E.164 format.",
          "type": "string"
        },
        "alternateEmail": {
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain",
          "type": "string"
        },
        "customerCreationTime": {
          "format": "date-time",
          "description": "The customer's creation time (Readonly)",
          "type": "string"
        },
        "customerDomain": {
          "type": "string",
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer."
        }
      },
      "type": "object",
      "id": "Customer"
    },
    "UserGender": {
      "type": "object",
      "properties": {
        "addressMeAs": {
          "type": "string",
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their."
        },
        "customGender": {
          "type": "string",
          "description": "Custom gender."
        },
        "type": {
          "type": "string",
          "description": "Gender."
        }
      },
      "id": "UserGender"
    },
    "Buildings": {
      "id": "Buildings",
      "properties": {
        "buildings": {
          "type": "array",
          "description": "The Buildings in this page of results.",
          "items": {
            "$ref": "Building"
          }
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#buildings#buildingsList"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "Public API: Resources.buildings",
      "type": "object"
    },
    "Asps": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "A list of ASP resources.",
          "items": {
            "$ref": "Asp"
          }
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#aspList",
          "description": "The type of the API resource. This is always admin#directory#aspList."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Asps"
    },
    "UserWebsite": {
      "description": "JSON template for a website entry.",
      "id": "UserWebsite",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "value": {
          "type": "string",
          "description": "Website."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary website or not."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        }
      },
      "type": "object"
    },
    "Members": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "members": {
          "description": "List of member objects.",
          "type": "array",
          "items": {
            "$ref": "Member"
          }
        },
        "kind": {
          "default": "admin#directory#members",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "type": "object",
      "id": "Members"
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "description": "A request for issuing a command.",
      "properties": {
        "payload": {
          "type": "string",
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100]."
        },
        "commandType": {
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "description": "The type of command.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "DirectoryChromeosdevicesIssueCommandRequest"
    },
    "UserExternalId": {
      "properties": {
        "type": {
          "description": "The type of the Id.",
          "type": "string"
        },
        "value": {
          "description": "The value of the id.",
          "type": "string"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        }
      },
      "description": "JSON template for an externalId entry.",
      "type": "object",
      "id": "UserExternalId"
    },
    "ChromeOsDeviceAction": {
      "id": "ChromeOsDeviceAction",
      "properties": {
        "deprovisionReason": {
          "type": "string"
        },
        "action": {
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "description": "Action to be taken on the ChromeOs Device",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Aliases": {
      "description": "JSON response template to list aliases in Directory API.",
      "id": "Aliases",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#aliases"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        }
      }
    },
    "UserOrganization": {
      "id": "UserOrganization",
      "properties": {
        "fullTimeEquivalent": {
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Name of the organization"
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "costCenter": {
          "description": "The cost center of the users department.",
          "type": "string"
        },
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        },
        "domain": {
          "description": "The domain to which the organization belongs to.",
          "type": "string"
        },
        "title": {
          "description": "Title (designation) of the user in the organization.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If it user's primary organization."
        },
        "description": {
          "type": "string",
          "description": "Description of the organization."
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of the organization."
        }
      },
      "description": "JSON template for an organization entry.",
      "type": "object"
    },
    "RoleAssignment": {
      "type": "object",
      "properties": {
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#roleAssignment.",
          "default": "admin#directory#roleAssignment",
          "type": "string"
        },
        "roleAssignmentId": {
          "description": "ID of this roleAssignment.",
          "format": "int64",
          "type": "string"
        },
        "roleId": {
          "type": "string",
          "description": "The ID of the role that is assigned.",
          "format": "int64"
        },
        "scopeType": {
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT ",
          "type": "string"
        },
        "orgUnitId": {
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "assignedTo": {
          "type": "string",
          "description": "The unique ID of the user this role is assigned to."
        }
      },
      "id": "RoleAssignment"
    },
    "UserAbout": {
      "id": "UserAbout",
      "type": "object",
      "properties": {
        "contentType": {
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.",
          "type": "string"
        },
        "value": {
          "description": "Actual value of notes.",
          "type": "string"
        }
      },
      "description": "JSON template for About (notes) of a user in Directory API."
    },
    "Features": {
      "id": "Features",
      "description": "Public API: Resources.features",
      "type": "object",
      "properties": {
        "features": {
          "type": "array",
          "description": "The Features in this page of results.",
          "items": {
            "$ref": "Feature"
          }
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#features#featuresList",
          "description": "Kind of resource this is."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "UserName": {
      "type": "object",
      "id": "UserName",
      "properties": {
        "givenName": {
          "description": "First Name",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "familyName": {
          "type": "string",
          "description": "Last Name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "fullName": {
          "description": "Full Name",
          "type": "string"
        }
      }
    },
    "Users": {
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#users",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "trigger_event": {
          "description": "Event that triggered this response (only used in case of Push Response)",
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "User"
          },
          "description": "List of user objects."
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        }
      },
      "id": "Users",
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Channel": {
      "type": "object",
      "properties": {
        "expiration": {
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "format": "int64",
          "type": "string"
        },
        "address": {
          "type": "string",
          "description": "The address where notifications are delivered for this channel."
        },
        "kind": {
          "type": "string",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "default": "api#channel"
        },
        "resourceId": {
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "A UUID or similar unique string that identifies this channel."
        },
        "payload": {
          "type": "boolean",
          "description": "A Boolean value to indicate whether payload is wanted. Optional."
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "params": {
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "token": {
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.",
          "type": "string"
        },
        "type": {
          "description": "The type of delivery mechanism used for this channel.",
          "type": "string"
        }
      },
      "description": "An notification channel used to watch for resource changes.",
      "id": "Channel"
    },
    "User": {
      "id": "User",
      "type": "object",
      "properties": {
        "gender": {
          "type": "any",
          "description": "Gender of User"
        },
        "deletionTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "thumbnailPhotoUrl": {
          "description": "Output only. Photo Url of the user (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "languages": {
          "description": "Languages of User",
          "type": "any"
        },
        "sshPublicKeys": {
          "description": "The SSH public keys of User",
          "type": "any"
        },
        "phones": {
          "description": "Phone numbers of User",
          "type": "any"
        },
        "isEnforcedIn2Sv": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Is 2-step verification enforced (Read-only)"
        },
        "agreedToTerms": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Indicates if user has agreed to terms (Read-only)"
        },
        "password": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string",
          "description": "User's password"
        },
        "posixAccounts": {
          "type": "any",
          "description": "The POSIX accounts of User"
        },
        "hashFunction": {
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt",
          "type": "string"
        },
        "locations": {
          "type": "any",
          "description": "Locations of User"
        },
        "aliases": {
          "description": "Output only. List of aliases (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "externalIds": {
          "description": "The external Ids of User *",
          "type": "any"
        },
        "websites": {
          "type": "any",
          "description": "Websites of User"
        },
        "suspended": {
          "type": "boolean",
          "description": "Indicates if user is suspended."
        },
        "isAdmin": {
          "description": "Output only. Boolean indicating if the user is admin (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "lastLoginTime": {
          "description": "User's last login time. (Read-only)",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "archived": {
          "description": "Indicates if user is archived.",
          "type": "boolean"
        },
        "notes": {
          "description": "Notes of User",
          "type": "any"
        },
        "customSchemas": {
          "description": "Custom fields of the user.",
          "type": "object",
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          }
        },
        "nonEditableAliases": {
          "type": "array",
          "description": "Output only. List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "etag": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. ETag of the resource."
        },
        "addresses": {
          "description": "Addresses of User",
          "type": "any"
        },
        "includeInGlobalAddressList": {
          "type": "boolean",
          "description": "Boolean indicating if user is included in Global Address List"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "keywords": {
          "type": "any",
          "description": "Keywords of User"
        },
        "kind": {
          "description": "Output only. Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#user",
          "readOnly": true
        },
        "isDelegatedAdmin": {
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "suspensionReason": {
          "description": "Output only. Suspension reason if user is suspended (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "customerId": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. CustomerId of User (Read-only)"
        },
        "recoveryPhone": {
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
          "type": "string"
        },
        "emails": {
          "description": "Emails of User",
          "type": "any"
        },
        "creationTime": {
          "format": "date-time",
          "readOnly": true,
          "description": "User's G Suite account creation time. (Read-only)",
          "type": "string"
        },
        "recoveryEmail": {
          "description": "Recovery email of the user.",
          "type": "string"
        },
        "isEnrolledIn2Sv": {
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "name": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "User's name",
          "$ref": "UserName"
        },
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        },
        "ims": {
          "type": "any",
          "description": "User's Instant Messenger"
        },
        "changePasswordAtNextLogin": {
          "type": "boolean",
          "description": "Boolean indicating if the user should change password in next login"
        },
        "organizations": {
          "description": "Organizations of User",
          "type": "any"
        },
        "primaryEmail": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string",
          "description": "username of User"
        },
        "thumbnailPhotoEtag": {
          "type": "string",
          "description": "Output only. ETag of the user's photo (Read-only)",
          "readOnly": true
        },
        "relations": {
          "description": "The Relations of User *",
          "type": "any"
        },
        "ipWhitelisted": {
          "description": "Boolean indicating if ip is whitelisted",
          "type": "boolean"
        },
        "isMailboxSetup": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Is mailbox setup (Read-only)"
        }
      },
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)"
    },
    "SchemaFieldSpec": {
      "properties": {
        "indexed": {
          "default": "true",
          "type": "boolean",
          "description": "Boolean specifying whether the field is indexed or not."
        },
        "fieldName": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string",
          "description": "Name of the field."
        },
        "numericIndexingSpec": {
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.",
          "properties": {
            "minValue": {
              "type": "number",
              "format": "double",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            },
            "maxValue": {
              "type": "number",
              "format": "double",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            }
          },
          "type": "object"
        },
        "fieldType": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Type of the field."
        },
        "multiValued": {
          "description": "Boolean specifying whether this is a multi-valued field or not.",
          "type": "boolean"
        },
        "readAccessType": {
          "type": "string",
          "default": "ALL_DOMAIN_USERS",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\"."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "fieldId": {
          "description": "Unique identifier of Field (Read-only)",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#schema#fieldspec",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "displayName": {
          "description": "Display Name of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        }
      },
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "SchemaFieldSpec"
    },
    "CalendarResources": {
      "type": "object",
      "description": "Public API: Resources.calendars",
      "id": "CalendarResources",
      "properties": {
        "items": {
          "type": "array",
          "description": "The CalendarResources in this page of results.",
          "items": {
            "$ref": "CalendarResource"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "kind": {
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList.",
          "type": "string",
          "default": "admin#directory#resources#calendars#calendarResourcesList"
        }
      }
    },
    "OrgUnit": {
      "id": "OrgUnit",
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of OrgUnit"
        },
        "parentOrgUnitId": {
          "description": "Id of parent OrgUnit",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "orgUnitId": {
          "type": "string",
          "description": "Id of OrgUnit"
        },
        "blockInheritance": {
          "type": "boolean",
          "description": "Should block inheritance"
        },
        "orgUnitPath": {
          "type": "string",
          "description": "Path of OrgUnit"
        },
        "kind": {
          "default": "admin#directory#orgUnit",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "name": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          },
          "description": "Name of OrgUnit"
        },
        "parentOrgUnitPath": {
          "description": "Path of parent OrgUnit",
          "type": "string"
        }
      }
    },
    "Privileges": {
      "properties": {
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "default": "admin#directory#privileges",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Privilege"
          },
          "description": "A list of Privilege resources."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Privileges",
      "type": "object"
    },
    "Feature": {
      "type": "object",
      "description": "JSON template for Feature object in Directory API.",
      "id": "Feature",
      "properties": {
        "kind": {
          "default": "admin#directory#resources#features#Feature",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "name": {
          "description": "The name of the feature.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          }
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "Privilege": {
      "type": "object",
      "properties": {
        "serviceId": {
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
          "type": "string"
        },
        "serviceName": {
          "description": "The name of the service this privilege is for.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "childPrivileges": {
          "type": "array",
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "items": {
            "$ref": "Privilege"
          }
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#privilege.",
          "default": "admin#directory#privilege",
          "type": "string"
        },
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        },
        "isOuScopable": {
          "description": "If the privilege can be restricted to an organization unit.",
          "type": "boolean"
        }
      },
      "id": "Privilege"
    }
  },
  "name": "admin",
  "revision": "20201013",
  "version": "directory_v1",
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1"
}
