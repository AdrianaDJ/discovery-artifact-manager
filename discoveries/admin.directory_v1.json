{
  "title": "Admin SDK",
  "basePath": "",
  "ownerName": "Google",
  "revision": "20201013",
  "ownerDomain": "google.com",
  "batchPath": "batch/admin/directory_v1",
  "discoveryVersion": "v1",
  "kind": "discovery#restDescription",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        }
      }
    }
  },
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "id": "admin:directory_v1",
  "schemas": {
    "Asp": {
      "type": "object",
      "description": "The template that returns individual ASP (Access Code) data. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "codeId": {
          "format": "int32",
          "type": "integer",
          "description": "The unique ID of the ASP."
        },
        "userKey": {
          "description": "The unique ID of the user who issued the ASP.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#asp",
          "description": "The type of the API resource. This is always admin#directory#asp."
        },
        "lastTimeUsed": {
          "format": "int64",
          "type": "string",
          "description": "The time when the ASP was last used. Expressed in Unix time format."
        },
        "name": {
          "description": "The name of the application that the user, represented by their userId, entered when the ASP was created.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the ASP.",
          "type": "string"
        },
        "creationTime": {
          "description": "The time when the ASP was created. Expressed in Unix time format.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "Asp"
    },
    "Schema": {
      "id": "Schema",
      "description": "JSON template for Schema resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "displayName": {
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "description": "Display name for the schema.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#schema",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "schemaName": {
          "type": "string",
          "description": "Schema name",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "fields": {
          "description": "Fields of Schema",
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "type": "array",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "schemaId": {
          "type": "string",
          "description": "Unique identifier of Schema (Read-only)"
        }
      },
      "type": "object"
    },
    "Domains": {
      "type": "object",
      "properties": {
        "domainAliases": {
          "type": "array",
          "description": "List of domain alias objects. (Read-only)",
          "items": {
            "$ref": "DomainAlias"
          }
        },
        "creationTime": {
          "type": "string",
          "format": "int64",
          "description": "Creation time of the domain. (Read-only)."
        },
        "domainName": {
          "description": "The domain name of the customer.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        },
        "verified": {
          "description": "Indicates the verification state of a domain. (Read-only).",
          "type": "boolean"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domain",
          "type": "string"
        },
        "isPrimary": {
          "description": "Indicates if the domain is a primary domain (Read-only).",
          "type": "boolean"
        }
      },
      "id": "Domains"
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "description": "A request for issuing a command.",
      "id": "DirectoryChromeosdevicesIssueCommandRequest",
      "properties": {
        "commandType": {
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "description": "The type of command.",
          "type": "string",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ]
        },
        "payload": {
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100].",
          "type": "string"
        }
      },
      "type": "object"
    },
    "VerificationCodes": {
      "type": "object",
      "id": "VerificationCodes",
      "properties": {
        "kind": {
          "description": "The type of the resource. This is always admin#directory#verificationCodesList.",
          "type": "string",
          "default": "admin#directory#verificationCodesList"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "items": {
            "$ref": "VerificationCode"
          },
          "type": "array",
          "description": "A list of verification code resources."
        }
      },
      "description": "JSON response template for List verification codes operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Asps": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#aspList",
          "description": "The type of the API resource. This is always admin#directory#aspList."
        },
        "items": {
          "description": "A list of ASP resources.",
          "type": "array",
          "items": {
            "$ref": "Asp"
          }
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Asps"
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "type": "object",
      "properties": {
        "commandId": {
          "format": "int64",
          "type": "string",
          "description": "The unique ID of the issued command, used to retrieve the command status."
        }
      },
      "description": "A response for issuing a command."
    },
    "UserCustomProperties": {
      "type": "object",
      "id": "UserCustomProperties",
      "additionalProperties": {
        "type": "any"
      },
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)"
    },
    "UserLanguage": {
      "description": "JSON template for a language entry.",
      "id": "UserLanguage",
      "properties": {
        "customLanguage": {
          "type": "string",
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set"
        },
        "languageCode": {
          "type": "string",
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException."
        }
      },
      "type": "object"
    },
    "Domains2": {
      "type": "object",
      "id": "Domains2",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "domains": {
          "type": "array",
          "items": {
            "$ref": "Domains"
          },
          "description": "List of domain objects."
        },
        "kind": {
          "default": "admin#directory#domains",
          "type": "string",
          "description": "Kind of resource this is."
        }
      }
    },
    "VerificationCode": {
      "description": "JSON template for verification codes in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "VerificationCode",
      "properties": {
        "kind": {
          "default": "admin#directory#verificationCode",
          "description": "The type of the resource. This is always admin#directory#verificationCode.",
          "type": "string"
        },
        "userId": {
          "description": "The obfuscated unique ID of the user.",
          "type": "string"
        },
        "verificationCode": {
          "type": "string",
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "Member": {
      "properties": {
        "delivery_settings": {
          "type": "string",
          "description": "Delivery settings of member"
        },
        "role": {
          "description": "Role of member",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of group (Read-only) Unique identifier of member (Read-only) The unique ID of the group member. A member id can be used as a member request URI's memberKey."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#member",
          "type": "string"
        },
        "email": {
          "description": "Email of member (Read-only)",
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Status of member (Immutable)"
        },
        "type": {
          "description": "Type of member (Immutable)",
          "type": "string"
        }
      },
      "id": "Member",
      "type": "object"
    },
    "ChromeOsDevice": {
      "id": "ChromeOsDevice",
      "properties": {
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of the device"
        },
        "lastKnownNetwork": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              },
              "ipAddress": {
                "description": "The IP address.",
                "type": "string"
              }
            },
            "description": "Information for an ip address."
          },
          "description": "Contains last known network (Read-only)"
        },
        "manufactureDate": {
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
          "type": "string"
        },
        "firmwareVersion": {
          "description": "Chromebook firmware version (Read-only)",
          "type": "string"
        },
        "lastEnrollmentTime": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was last enrolled (Read-only)"
        },
        "status": {
          "description": "status of the device (Read-only)",
          "type": "string"
        },
        "annotatedUser": {
          "description": "User of the device",
          "type": "string"
        },
        "willAutoRenew": {
          "description": "Will Chromebook auto renew after support end date (Read-only)",
          "type": "boolean"
        },
        "systemRamTotal": {
          "type": "string",
          "format": "int64",
          "description": "Total RAM on the device [in bytes] (Read-only)"
        },
        "deviceFiles": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "File name"
              },
              "type": {
                "type": "string",
                "description": "File type"
              },
              "downloadUrl": {
                "description": "File download URL",
                "type": "string"
              },
              "createTime": {
                "format": "date-time",
                "type": "string",
                "description": "Date and time the file was created"
              }
            }
          },
          "description": "List of device files to download (Read-only)"
        },
        "tpmVersionInfo": {
          "properties": {
            "tpmModel": {
              "description": "TPM model number.",
              "type": "string"
            },
            "family": {
              "type": "string",
              "description": "TPM family."
            },
            "firmwareVersion": {
              "type": "string",
              "description": "TPM firmware version."
            },
            "vendorSpecific": {
              "type": "string",
              "description": "Vendor-specific information such as Vendor ID."
            },
            "manufacturer": {
              "description": "TPM manufacturer code.",
              "type": "string"
            },
            "specLevel": {
              "description": "TPM specification level.",
              "type": "string"
            }
          },
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "type": "object"
        },
        "diskVolumeReports": {
          "items": {
            "properties": {
              "volumeInfo": {
                "type": "array",
                "description": "Disk volumes",
                "items": {
                  "properties": {
                    "storageFree": {
                      "description": "Free disk space [in bytes]",
                      "format": "int64",
                      "type": "string"
                    },
                    "volumeId": {
                      "type": "string",
                      "description": "Volume id"
                    },
                    "storageTotal": {
                      "format": "int64",
                      "description": "Total disk space [in bytes]",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "Reports of disk space and other info about mounted/connected volumes."
        },
        "supportEndDate": {
          "format": "date-time",
          "type": "string",
          "description": "Final date the device will be supported (Read-only)"
        },
        "ethernetMacAddress0": {
          "type": "string",
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "annotatedAssetId": {
          "description": "AssetId specified during enrollment or through later annotation",
          "type": "string"
        },
        "activeTimeRanges": {
          "items": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "format": "date",
                "description": "Date of usage"
              },
              "activeTime": {
                "type": "integer",
                "format": "int32",
                "description": "Duration in milliseconds"
              }
            }
          },
          "type": "array",
          "description": "List of active time ranges (Read-only)"
        },
        "systemRamFreeReports": {
          "items": {
            "properties": {
              "reportTime": {
                "format": "date-time",
                "type": "string",
                "description": "Date and time the report was received."
              },
              "systemRamFreeInfo": {
                "items": {
                  "format": "int64",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "type": "array"
        },
        "deviceId": {
          "description": "Unique identifier of Chrome OS Device (Read-only)",
          "type": "string"
        },
        "serialNumber": {
          "type": "string",
          "description": "Chromebook serial number (Read-only)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "platformVersion": {
          "description": "Chromebook platform version (Read-only)",
          "type": "string"
        },
        "orderNumber": {
          "description": "Chromebook order number (Read-only)",
          "type": "string"
        },
        "recentUsers": {
          "items": {
            "properties": {
              "email": {
                "type": "string",
                "description": "Email address of the user. Present only if the user type is managed"
              },
              "type": {
                "type": "string",
                "description": "The type of the user"
              }
            },
            "type": "object"
          },
          "description": "List of recent device users, in descending order by last login time (Read-only)",
          "type": "array"
        },
        "model": {
          "description": "Chromebook Model (Read-only)",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#chromeosdevice",
          "type": "string"
        },
        "notes": {
          "description": "Notes added by the administrator",
          "type": "string"
        },
        "dockMacAddress": {
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "bootMode": {
          "type": "string",
          "description": "Chromebook boot mode (Read-only)"
        },
        "annotatedLocation": {
          "type": "string",
          "description": "Address or location of the device as noted by the administrator"
        },
        "ethernetMacAddress": {
          "description": "Chromebook Mac Address on ethernet network interface (Read-only)",
          "type": "string"
        },
        "meid": {
          "type": "string",
          "description": "Contains either the Mobile Equipment identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in the Chromebook (Read-only)"
        },
        "macAddress": {
          "type": "string",
          "description": "Chromebook Mac Address on wifi network interface (Read-only)"
        },
        "cpuStatusReports": {
          "type": "array",
          "items": {
            "properties": {
              "cpuTemperatureInfo": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "type": "string",
                      "description": "CPU label"
                    },
                    "temperature": {
                      "description": "Temperature in Celsius degrees.",
                      "format": "int32",
                      "type": "integer"
                    }
                  }
                },
                "description": "List of CPU temperature samples."
              },
              "reportTime": {
                "type": "string",
                "description": "Date and time the report was received.",
                "format": "date-time"
              },
              "cpuUtilizationPercentageInfo": {
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "description": "Reports of CPU utilization and temperature (Read-only)"
        },
        "autoUpdateExpiration": {
          "type": "string",
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "format": "int64"
        },
        "osVersion": {
          "description": "Chromebook Os Version (Read-only)",
          "type": "string"
        }
      },
      "type": "object",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserName": {
      "id": "UserName",
      "properties": {
        "givenName": {
          "type": "string",
          "description": "First Name",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "familyName": {
          "description": "Last Name",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "fullName": {
          "description": "Full Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DirectoryChromeosdevicesCommandResult": {
      "id": "DirectoryChromeosdevicesCommandResult",
      "description": "The result of executing a command.",
      "properties": {
        "errorMessage": {
          "type": "string",
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed."
        },
        "result": {
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "description": "The result of the command.",
          "type": "string",
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ]
        },
        "executeTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time at which the command was executed or failed to execute."
        }
      },
      "type": "object"
    },
    "Alias": {
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#alias"
        },
        "primaryEmail": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "type": "object",
      "id": "Alias",
      "description": "JSON template for Alias object in Directory API."
    },
    "DomainAliases": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domainAliases",
          "description": "Kind of resource this is."
        },
        "domainAliases": {
          "description": "List of domain alias objects.",
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array"
        }
      },
      "id": "DomainAliases",
      "type": "object"
    },
    "UserIm": {
      "type": "object",
      "description": "JSON template for instant messenger of an user.",
      "id": "UserIm",
      "properties": {
        "im": {
          "description": "Instant messenger id.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "protocol": {
          "type": "string",
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field."
        },
        "customProtocol": {
          "description": "Custom protocol.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary im. Only one entry could be marked as primary."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        }
      }
    },
    "UserLocation": {
      "description": "JSON template for a location entry.",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "deskCode": {
          "type": "string",
          "description": "Most specific textual code of individual desk location."
        },
        "floorSection": {
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values.",
          "type": "string"
        },
        "buildingId": {
          "type": "string",
          "description": "Building Identifier."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.",
          "type": "string"
        },
        "area": {
          "type": "string",
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''"
        },
        "floorName": {
          "type": "string",
          "description": "Floor name/number."
        }
      },
      "type": "object",
      "id": "UserLocation"
    },
    "Role": {
      "id": "Role",
      "properties": {
        "roleDescription": {
          "description": "A short description of the role.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "roleId": {
          "format": "int64",
          "type": "string",
          "description": "ID of the role."
        },
        "isSuperAdminRole": {
          "description": "Returns true if the role is a super admin role.",
          "type": "boolean"
        },
        "rolePrivileges": {
          "items": {
            "properties": {
              "privilegeName": {
                "description": "The name of the privilege.",
                "type": "string"
              },
              "serviceId": {
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list().",
                "type": "string"
              }
            },
            "type": "object"
          },
          "description": "The set of privileges that are granted to this role.",
          "type": "array",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          }
        },
        "isSystemRole": {
          "type": "boolean",
          "description": "Returns true if this is a pre-defined system role."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#role",
          "description": "The type of the API resource. This is always admin#directory#role."
        },
        "roleName": {
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "string",
          "description": "Name of the role."
        }
      },
      "type": "object"
    },
    "CalendarResources": {
      "description": "Public API: Resources.calendars",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "description": "Identifies this as a collection of CalendarResources. This is always admin#directory#resources#calendars#calendarResourcesList.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "The CalendarResources in this page of results.",
          "items": {
            "$ref": "CalendarResource"
          }
        }
      },
      "id": "CalendarResources",
      "type": "object"
    },
    "UserWebsite": {
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "value": {
          "description": "Website.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary website or not."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "description": "JSON template for a website entry.",
      "type": "object",
      "id": "UserWebsite"
    },
    "Groups": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "id": "Groups",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "groups": {
          "items": {
            "$ref": "Group"
          },
          "description": "List of group objects.",
          "type": "array"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#groups",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "UserAbout": {
      "type": "object",
      "description": "JSON template for About (notes) of a user in Directory API.",
      "properties": {
        "value": {
          "description": "Actual value of notes.",
          "type": "string"
        },
        "contentType": {
          "type": "string",
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text."
        }
      },
      "id": "UserAbout"
    },
    "UserSshPublicKey": {
      "properties": {
        "expirationTimeUsec": {
          "type": "string",
          "format": "int64",
          "description": "An expiration time in microseconds since epoch."
        },
        "key": {
          "description": "An SSH public key.",
          "type": "string"
        },
        "fingerprint": {
          "readOnly": true,
          "type": "string",
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)"
        }
      },
      "type": "object",
      "description": "JSON template for a POSIX account entry.",
      "id": "UserSshPublicKey"
    },
    "Roles": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "Role"
          },
          "description": "A list of Role resources."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#roles",
          "description": "The type of the API resource. This is always admin#directory#roles."
        },
        "nextPageToken": {
          "type": "string"
        }
      },
      "type": "object",
      "id": "Roles"
    },
    "SchemaFieldSpec": {
      "description": "JSON template for FieldSpec resource for Schemas in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema#fieldspec",
          "type": "string"
        },
        "fieldId": {
          "description": "Unique identifier of Field (Read-only)",
          "type": "string"
        },
        "fieldName": {
          "description": "Name of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        },
        "fieldType": {
          "description": "Type of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "type": "string"
        },
        "readAccessType": {
          "type": "string",
          "default": "ALL_DOMAIN_USERS",
          "description": "Read ACLs on the field specifying who can view values of this field. Valid values are \"ALL_DOMAIN_USERS\" and \"ADMINS_AND_SELF\"."
        },
        "indexed": {
          "default": "true",
          "description": "Boolean specifying whether the field is indexed or not.",
          "type": "boolean"
        },
        "multiValued": {
          "description": "Boolean specifying whether this is a multi-valued field or not.",
          "type": "boolean"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "Display Name of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "numericIndexingSpec": {
          "type": "object",
          "properties": {
            "maxValue": {
              "format": "double",
              "type": "number",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            },
            "minValue": {
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "format": "double",
              "type": "number"
            }
          },
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported."
        }
      },
      "type": "object",
      "id": "SchemaFieldSpec"
    },
    "OrgUnit": {
      "id": "OrgUnit",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "orgUnitPath": {
          "type": "string",
          "description": "Path of OrgUnit"
        },
        "blockInheritance": {
          "description": "Should block inheritance",
          "type": "boolean"
        },
        "orgUnitId": {
          "description": "Id of OrgUnit",
          "type": "string"
        },
        "name": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          },
          "description": "Name of OrgUnit"
        },
        "parentOrgUnitPath": {
          "type": "string",
          "description": "Path of parent OrgUnit"
        },
        "parentOrgUnitId": {
          "type": "string",
          "description": "Id of parent OrgUnit"
        },
        "description": {
          "description": "Description of OrgUnit",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#orgUnit",
          "description": "Kind of resource this is.",
          "type": "string"
        }
      },
      "description": "JSON template for Org Unit resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "FeatureRename": {
      "id": "FeatureRename",
      "type": "object",
      "properties": {
        "newName": {
          "description": "New name of the feature.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          }
        }
      }
    },
    "MobileDeviceAction": {
      "id": "MobileDeviceAction",
      "properties": {
        "action": {
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          },
          "description": "Action to be taken on the Mobile Device",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DirectoryChromeosdevicesCommand": {
      "description": "Information regarding a command that was issued to a device.",
      "properties": {
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ],
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "description": "Indicates the command state.",
          "type": "string"
        },
        "issueTime": {
          "description": "The timestamp when the command was issued by the admin.",
          "format": "google-datetime",
          "type": "string"
        },
        "commandResult": {
          "$ref": "DirectoryChromeosdevicesCommandResult",
          "description": "The result of the command execution."
        },
        "type": {
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "type": "string",
          "description": "The type of the command."
        },
        "payload": {
          "description": "The payload that the command specified, if any.",
          "type": "string"
        },
        "commandExpireTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired."
        },
        "commandId": {
          "format": "int64",
          "description": "Unique ID of a device command.",
          "type": "string"
        }
      },
      "id": "DirectoryChromeosdevicesCommand",
      "type": "object"
    },
    "Privileges": {
      "type": "object",
      "id": "Privileges",
      "properties": {
        "items": {
          "items": {
            "$ref": "Privilege"
          },
          "description": "A list of Privilege resources.",
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#privileges.",
          "type": "string",
          "default": "admin#directory#privileges"
        }
      }
    },
    "UserKeyword": {
      "id": "UserKeyword",
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Keyword."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "description": "JSON template for a keyword entry."
    },
    "UserExternalId": {
      "type": "object",
      "description": "JSON template for an externalId entry.",
      "id": "UserExternalId",
      "properties": {
        "type": {
          "description": "The type of the Id.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The value of the id."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        }
      }
    },
    "DomainAlias": {
      "type": "object",
      "id": "DomainAlias",
      "properties": {
        "parentDomainName": {
          "type": "string",
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          }
        },
        "domainAliasName": {
          "description": "The domain alias name.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#domainAlias"
        },
        "creationTime": {
          "type": "string",
          "description": "The creation time of the domain alias. (Read-only).",
          "format": "int64"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain alias. (Read-only)"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "Buildings": {
      "description": "Public API: Resources.buildings",
      "properties": {
        "buildings": {
          "items": {
            "$ref": "Building"
          },
          "type": "array",
          "description": "The Buildings in this page of results."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#buildings#buildingsList",
          "type": "string"
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Buildings"
    },
    "CustomerPostalAddress": {
      "type": "object",
      "properties": {
        "organizationName": {
          "description": "The company or company division name.",
          "type": "string"
        },
        "addressLine2": {
          "description": "Address line 2 of the address.",
          "type": "string"
        },
        "addressLine1": {
          "type": "string",
          "description": "A customer's physical address. The address can be composed of one to three lines."
        },
        "locality": {
          "description": "Name of the locality. An example of a locality value is the city of San Francisco.",
          "type": "string"
        },
        "addressLine3": {
          "description": "Address line 3 of the address.",
          "type": "string"
        },
        "contactName": {
          "type": "string",
          "description": "The customer contact's name."
        },
        "region": {
          "description": "Name of the region. An example of a region value is NY for the state of New York.",
          "type": "string"
        },
        "postalCode": {
          "type": "string",
          "description": "The postal code. A postalCode example is a postal zip code such as 10009. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element."
        },
        "countryCode": {
          "description": "This is a required property. For countryCode information see the ISO 3166 country code elements.",
          "type": "string"
        }
      },
      "id": "CustomerPostalAddress",
      "description": "STEPLADDER: Generated unstable field number for field 'address_line2' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'address_line3' to avoid collision. (See http://go/stepladder-help#fieldNumber)"
    },
    "Token": {
      "id": "Token",
      "properties": {
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user that issued the token."
        },
        "anonymous": {
          "description": "Whether the application is registered with Google. The value is true if the application has an anonymous Client ID.",
          "type": "boolean"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#token.",
          "default": "admin#directory#token",
          "type": "string"
        },
        "nativeApp": {
          "type": "boolean",
          "description": "Whether the token is issued to an installed application. The value is true if the application is installed to a desktop or mobile device."
        },
        "displayText": {
          "type": "string",
          "description": "The displayable name of the application the token is issued to."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of authorization scopes the application is granted."
        },
        "clientId": {
          "description": "The Client ID of the application the token is issued to.",
          "type": "string"
        }
      },
      "description": "JSON template for token resource in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "UserUndelete": {
      "type": "object",
      "properties": {
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        }
      },
      "id": "UserUndelete"
    },
    "FeatureInstance": {
      "properties": {
        "feature": {
          "$ref": "Feature",
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature."
        }
      },
      "type": "object",
      "description": "JSON template for a feature instance.",
      "id": "FeatureInstance"
    },
    "UserOrganization": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the organization."
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of the organization."
        },
        "name": {
          "description": "Name of the organization",
          "type": "string"
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.",
          "type": "string"
        },
        "costCenter": {
          "description": "The cost center of the users department.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If it user's primary organization."
        },
        "department": {
          "description": "Department within the organization.",
          "type": "string"
        },
        "fullTimeEquivalent": {
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
          "format": "int32",
          "type": "integer"
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "domain": {
          "type": "string",
          "description": "The domain to which the organization belongs to."
        },
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        }
      },
      "type": "object",
      "description": "JSON template for an organization entry.",
      "id": "UserOrganization"
    },
    "CalendarResource": {
      "type": "object",
      "properties": {
        "resourceType": {
          "description": "The type of the calendar resource, intended for non-room resources.",
          "type": "string"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "generatedResourceName": {
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\".",
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "description": "The unique ID for the calendar resource."
        },
        "resourceCategory": {
          "type": "string",
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN."
        },
        "resourceEmail": {
          "type": "string",
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource."
        },
        "floorSection": {
          "type": "string",
          "description": "Name of the section within a floor a resource is located in."
        },
        "capacity": {
          "format": "int32",
          "description": "Capacity of a resource, number of seats in a room.",
          "type": "integer"
        },
        "kind": {
          "description": "The type of the resource. For calendar resources, the value is admin#directory#resources#calendars#CalendarResource.",
          "type": "string",
          "default": "admin#directory#resources#calendars#CalendarResource"
        },
        "floorName": {
          "description": "Name of the floor a resource is located on.",
          "type": "string"
        },
        "userVisibleDescription": {
          "type": "string",
          "description": "Description of the resource, visible to users and admins."
        },
        "resourceName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "description": "The name of the calendar resource. For example, \"Training Room 1A\"."
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "featureInstances": {
          "type": "any",
          "description": "Instances of features for the calendar resource."
        },
        "buildingId": {
          "description": "Unique ID for the building a resource is located in.",
          "type": "string"
        }
      },
      "id": "CalendarResource",
      "description": "Public API: Resources.calendars"
    },
    "Building": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A brief description of the building. For example, \"Chelsea Market\"."
        },
        "kind": {
          "default": "admin#directory#resources#buildings#Building",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "buildingId": {
          "type": "string",
          "description": "Unique identifier for the building. The maximum length is 100 characters."
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "floorNames": {
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "coordinates": {
          "$ref": "BuildingCoordinates",
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees."
        },
        "buildingName": {
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters.",
          "type": "string"
        },
        "address": {
          "$ref": "BuildingAddress",
          "description": "The postal address of the building. See PostalAddress for details. Note that only a single address line and region code are required."
        }
      },
      "description": "Public API: Resources.buildings",
      "id": "Building"
    },
    "ChromeOsDevices": {
      "id": "ChromeOsDevices",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "chromeosdevices": {
          "type": "array",
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "description": "List of Chrome OS Device objects."
        },
        "kind": {
          "default": "admin#directory#chromeosdevices",
          "type": "string",
          "description": "Kind of resource this is."
        }
      }
    },
    "RoleAssignments": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#roleAssignments",
          "description": "The type of the API resource. This is always admin#directory#roleAssignments ."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "A list of RoleAssignment resources.",
          "items": {
            "$ref": "RoleAssignment"
          }
        }
      },
      "id": "RoleAssignments"
    },
    "UserEmail": {
      "id": "UserEmail",
      "description": "JSON template for an email.",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "primary": {
          "description": "If this is user's primary email. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value."
        },
        "address": {
          "type": "string",
          "description": "Email id of the user."
        }
      },
      "type": "object"
    },
    "UserMakeAdmin": {
      "type": "object",
      "id": "UserMakeAdmin",
      "properties": {
        "status": {
          "description": "Boolean indicating new admin status of the user",
          "type": "boolean",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          }
        }
      }
    },
    "Privilege": {
      "type": "object",
      "properties": {
        "childPrivileges": {
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "type": "array",
          "items": {
            "$ref": "Privilege"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        },
        "isOuScopable": {
          "description": "If the privilege can be restricted to an organization unit.",
          "type": "boolean"
        },
        "serviceName": {
          "description": "The name of the service this privilege is for.",
          "type": "string"
        },
        "serviceId": {
          "type": "string",
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with Privileges.list()."
        },
        "kind": {
          "default": "admin#directory#privilege",
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#privilege."
        }
      },
      "id": "Privilege"
    },
    "Customer": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "customerCreationTime": {
          "format": "date-time",
          "type": "string",
          "description": "The customer's creation time (Readonly)"
        },
        "phoneNumber": {
          "description": "The customer's contact phone number in E.164 format.",
          "type": "string"
        },
        "postalAddress": {
          "description": "The customer's postal address information.",
          "$ref": "CustomerPostalAddress"
        },
        "customerDomain": {
          "type": "string",
          "description": "The customer's primary domain name string. Do not include the www prefix when creating a new customer."
        },
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the customerDomain"
        },
        "id": {
          "description": "The unique ID for the customer's G Suite account. (Readonly)",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#customer",
          "type": "string",
          "description": "Identifies the resource as a customer. Value: admin#directory#customer"
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. The default value is en-US",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Customer",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Group": {
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#group",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of Group (Read-only)"
        },
        "nonEditableAliases": {
          "type": "array",
          "description": "List of non editable aliases (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "name": {
          "description": "Group name",
          "type": "string"
        },
        "adminCreated": {
          "description": "Is the group created by admin (Read-only) *",
          "type": "boolean"
        },
        "aliases": {
          "description": "List of aliases (Read-only)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "directMembersCount": {
          "format": "int64",
          "description": "Group direct members count",
          "type": "string"
        },
        "email": {
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "type": "string",
          "description": "Email of Group"
        },
        "description": {
          "type": "string",
          "description": "Description of the group"
        }
      },
      "id": "Group"
    },
    "UserPhone": {
      "id": "UserPhone",
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary phone or not.",
          "type": "boolean"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Phone number."
        }
      },
      "type": "object",
      "description": "JSON template for a phone entry."
    },
    "Channel": {
      "id": "Channel",
      "properties": {
        "token": {
          "type": "string",
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional."
        },
        "type": {
          "description": "The type of delivery mechanism used for this channel.",
          "type": "string"
        },
        "resourceId": {
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.",
          "type": "string"
        },
        "expiration": {
          "format": "int64",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "type": "string"
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Additional parameters controlling delivery channel behavior. Optional."
        },
        "payload": {
          "description": "A Boolean value to indicate whether payload is wanted. Optional.",
          "type": "boolean"
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        },
        "resourceUri": {
          "description": "A version-specific identifier for the watched resource.",
          "type": "string"
        },
        "id": {
          "description": "A UUID or similar unique string that identifies this channel.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "default": "api#channel"
        }
      },
      "description": "An notification channel used to watch for resource changes.",
      "type": "object"
    },
    "Tokens": {
      "description": "JSON response template for List tokens operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "id": "Tokens",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "items": {
          "items": {
            "$ref": "Token"
          },
          "description": "A list of Token resources.",
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always admin#directory#tokenList.",
          "default": "admin#directory#tokenList"
        }
      },
      "type": "object"
    },
    "Aliases": {
      "type": "object",
      "id": "Aliases",
      "properties": {
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "kind": {
          "default": "admin#directory#aliases",
          "type": "string"
        },
        "etag": {
          "type": "string"
        }
      },
      "description": "JSON response template to list aliases in Directory API."
    },
    "UserPosixAccount": {
      "properties": {
        "username": {
          "description": "The username of the account.",
          "type": "string"
        },
        "systemId": {
          "type": "string",
          "description": "System identifier for which account Username or Uid apply to."
        },
        "accountId": {
          "type": "string",
          "description": "A POSIX account field identifier."
        },
        "gecos": {
          "type": "string",
          "description": "The GECOS (user information) for this account."
        },
        "gid": {
          "type": "string",
          "format": "uint64",
          "description": "The default group ID."
        },
        "uid": {
          "format": "uint64",
          "type": "string",
          "description": "The POSIX compliant user ID."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary account within the SystemId."
        },
        "operatingSystemType": {
          "type": "string",
          "description": "The operating system type for this account."
        },
        "homeDirectory": {
          "type": "string",
          "description": "The path to the home directory for this account."
        },
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        }
      },
      "description": "JSON template for a POSIX account entry. Description of the field family: go/fbs-posix.",
      "type": "object",
      "id": "UserPosixAccount"
    },
    "MembersHasMember": {
      "properties": {
        "isMember": {
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "readOnly": true,
          "type": "boolean"
        }
      },
      "type": "object",
      "description": "JSON template for Has Member response in Directory API.",
      "id": "MembersHasMember"
    },
    "UserPhoto": {
      "properties": {
        "width": {
          "type": "integer",
          "description": "Width in pixels of the photo",
          "format": "int32"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "mimeType": {
          "type": "string",
          "description": "Mime Type of the photo"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#user#photo"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "height": {
          "format": "int32",
          "description": "Height in pixels of the photo",
          "type": "integer"
        },
        "primaryEmail": {
          "type": "string",
          "description": "Primary email of User (Read-only)"
        },
        "photoData": {
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "type": "string",
          "format": "byte",
          "description": "Base64 encoded photo data"
        }
      },
      "id": "UserPhoto",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    },
    "Users": {
      "type": "object",
      "id": "Users",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#users"
        },
        "trigger_event": {
          "description": "Event that triggered this response (only used in case of Push Response)",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        },
        "users": {
          "description": "List of user objects.",
          "type": "array",
          "items": {
            "$ref": "User"
          }
        }
      }
    },
    "RoleAssignment": {
      "id": "RoleAssignment",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "orgUnitId": {
          "type": "string",
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to."
        },
        "roleAssignmentId": {
          "format": "int64",
          "type": "string",
          "description": "ID of this roleAssignment."
        },
        "roleId": {
          "description": "The ID of the role that is assigned.",
          "type": "string",
          "format": "int64"
        },
        "kind": {
          "description": "The type of the API resource. This is always admin#directory#roleAssignment.",
          "type": "string",
          "default": "admin#directory#roleAssignment"
        },
        "assignedTo": {
          "description": "The unique ID of the user this role is assigned to.",
          "type": "string"
        },
        "scopeType": {
          "type": "string",
          "description": "The scope in which this role is assigned. Possible values are: - CUSTOMER - ORG_UNIT "
        }
      }
    },
    "MobileDevice": {
      "type": "object",
      "id": "MobileDevice",
      "properties": {
        "manufacturer": {
          "type": "string",
          "description": "Mobile Device manufacturer (Read-only)"
        },
        "serialNumber": {
          "description": "Mobile Device SSN or Serial Number (Read-only)",
          "type": "string"
        },
        "hardwareId": {
          "type": "string",
          "description": "Mobile Device Hardware Id (Read-only)"
        },
        "deviceCompromisedStatus": {
          "description": "Mobile Device compromised status (Read-only)",
          "type": "string"
        },
        "bootloaderVersion": {
          "description": "Mobile Device Bootloader version (Read-only)",
          "type": "string"
        },
        "securityPatchLevel": {
          "type": "string",
          "description": "Mobile Device Security patch level (Read-only)",
          "format": "int64"
        },
        "encryptionStatus": {
          "type": "string",
          "description": "Mobile Device Encryption Status (Read-only)"
        },
        "basebandVersion": {
          "description": "Mobile Device Baseband version (Read-only)",
          "type": "string"
        },
        "applications": {
          "description": "List of applications installed on Mobile Device",
          "items": {
            "properties": {
              "packageName": {
                "type": "string",
                "description": "Package name of application"
              },
              "displayName": {
                "description": "Display name of application",
                "type": "string"
              },
              "versionName": {
                "description": "Version name of application",
                "type": "string"
              },
              "versionCode": {
                "format": "int32",
                "description": "Version code of application",
                "type": "integer"
              },
              "permission": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "List of Permissions for application"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "deviceId": {
          "type": "string",
          "description": "Mobile Device serial number (Read-only)"
        },
        "kernelVersion": {
          "type": "string",
          "description": "Mobile Device Kernel version (Read-only)"
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "os": {
          "description": "Name of the mobile operating system",
          "type": "string"
        },
        "imei": {
          "description": "Mobile Device IMEI number (Read-only)",
          "type": "string"
        },
        "userAgent": {
          "type": "string",
          "description": "Mobile Device user agent"
        },
        "privilege": {
          "description": "DMAgentPermission (Read-only)",
          "type": "string"
        },
        "email": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of owner user's email addresses (Read-only)"
        },
        "otherAccountsInfo": {
          "type": "array",
          "description": "List of accounts added on device (Read-only)",
          "items": {
            "type": "string"
          }
        },
        "model": {
          "type": "string",
          "description": "Name of the model of the device"
        },
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "firstSync": {
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "name": {
          "items": {
            "type": "string"
          },
          "description": "List of owner user's names (Read-only)",
          "type": "array"
        },
        "resourceId": {
          "type": "string",
          "description": "Unique identifier of Mobile Device (Read-only)"
        },
        "devicePasswordStatus": {
          "type": "string",
          "description": "DevicePasswordStatus (Read-only)"
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "brand": {
          "type": "string",
          "description": "Mobile Device Brand (Read-only)"
        },
        "supportsWorkProfile": {
          "description": "Work profile supported on device (Read-only)",
          "type": "boolean"
        },
        "defaultLanguage": {
          "description": "The default locale used on the Mobile Device (Read-only)",
          "type": "string"
        },
        "buildNumber": {
          "description": "Mobile Device Build number (Read-only)",
          "type": "string"
        },
        "meid": {
          "description": "Mobile Device MEID number (Read-only)",
          "type": "string"
        },
        "status": {
          "description": "Status of the device (Read-only)",
          "type": "string"
        },
        "wifiMacAddress": {
          "type": "string",
          "description": "Mobile Device WiFi MAC address (Read-only)"
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "format": "date-time",
          "type": "string"
        },
        "unknownSourcesStatus": {
          "type": "boolean",
          "description": "Unknown sources enabled or disabled on device (Read-only)"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#mobiledevice"
        },
        "type": {
          "type": "string",
          "description": "The type of device (Read-only)"
        },
        "managedAccountIsOnOwnerProfile": {
          "description": "Boolean indicating if this account is on owner/primary profile or not (Read-only)",
          "type": "boolean"
        },
        "networkOperator": {
          "type": "string",
          "description": "Mobile Device mobile or network operator (if available) (Read-only)"
        }
      }
    },
    "UserAddress": {
      "type": "object",
      "description": "JSON template for address.",
      "id": "UserAddress",
      "properties": {
        "region": {
          "type": "string",
          "description": "Region."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary address. Only one entry could be marked as primary."
        },
        "poBox": {
          "description": "Other parts of address.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "extendedAddress": {
          "type": "string",
          "description": "Extended Address."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "postalCode": {
          "description": "Postal code.",
          "type": "string"
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "countryCode": {
          "type": "string",
          "description": "Country code."
        },
        "formatted": {
          "type": "string",
          "description": "Formatted address."
        },
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "locality": {
          "type": "string",
          "description": "Locality."
        },
        "streetAddress": {
          "type": "string",
          "description": "Street."
        }
      }
    },
    "MobileDevices": {
      "id": "MobileDevices",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "mobiledevices": {
          "description": "List of Mobile Device objects.",
          "items": {
            "$ref": "MobileDevice"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#mobiledevices",
          "description": "Kind of resource this is."
        }
      },
      "type": "object"
    },
    "Features": {
      "id": "Features",
      "type": "object",
      "description": "Public API: Resources.features",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "features": {
          "type": "array",
          "description": "The Features in this page of results.",
          "items": {
            "$ref": "Feature"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#resources#features#featuresList",
          "description": "Kind of resource this is."
        }
      }
    },
    "Members": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#members"
        },
        "members": {
          "description": "List of member objects.",
          "items": {
            "$ref": "Member"
          },
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Members"
    },
    "BuildingAddress": {
      "type": "object",
      "properties": {
        "addressLines": {
          "type": "array",
          "description": "Unstructured address lines describing the lower levels of an address.",
          "items": {
            "type": "string"
          }
        },
        "administrativeArea": {
          "type": "string",
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region."
        },
        "languageCode": {
          "type": "string",
          "description": "Optional. BCP-47 language code of the contents of this address (if known)."
        },
        "regionCode": {
          "type": "string",
          "description": "Required. CLDR region code of the country/region of the address."
        },
        "sublocality": {
          "type": "string",
          "description": "Optional. Sublocality of the address."
        },
        "postalCode": {
          "description": "Optional. Postal code of the address.",
          "type": "string"
        },
        "locality": {
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.",
          "type": "string"
        }
      },
      "id": "BuildingAddress",
      "description": "Public API: Resources.buildings"
    },
    "Schemas": {
      "type": "object",
      "id": "Schemas",
      "properties": {
        "schemas": {
          "items": {
            "$ref": "Schema"
          },
          "description": "List of UserSchema objects.",
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#schemas",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "description": "JSON response template for List Schema operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "UserRelation": {
      "type": "object",
      "description": "JSON template for a relation entry.",
      "id": "UserRelation",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "value": {
          "type": "string",
          "description": "The name of the relation."
        },
        "type": {
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner.",
          "type": "string"
        }
      }
    },
    "ChromeOsMoveDevicesToOu": {
      "type": "object",
      "properties": {
        "deviceIds": {
          "description": "ChromeOs Devices to be moved to OU",
          "items": {
            "type": "string"
          },
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "type": "array"
        }
      },
      "id": "ChromeOsMoveDevicesToOu"
    },
    "OrgUnits": {
      "properties": {
        "organizationUnits": {
          "description": "List of user objects.",
          "items": {
            "$ref": "OrgUnit"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#orgUnits",
          "description": "Kind of resource this is.",
          "type": "string"
        }
      },
      "id": "OrgUnits",
      "type": "object",
      "description": "JSON response template for List Organization Units operation in Directory API. STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber)"
    },
    "Feature": {
      "type": "object",
      "id": "Feature",
      "properties": {
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "name": {
          "type": "string",
          "description": "The name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          }
        },
        "kind": {
          "default": "admin#directory#resources#features#Feature",
          "description": "Kind of resource this is.",
          "type": "string"
        }
      },
      "description": "JSON template for Feature object in Directory API."
    },
    "BuildingCoordinates": {
      "properties": {
        "longitude": {
          "format": "double",
          "type": "number",
          "description": "Longitude in decimal degrees."
        },
        "latitude": {
          "description": "Latitude in decimal degrees.",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object",
      "description": "Public API: Resources.buildings",
      "id": "BuildingCoordinates"
    },
    "ChromeOsDeviceAction": {
      "type": "object",
      "id": "ChromeOsDeviceAction",
      "properties": {
        "action": {
          "description": "Action to be taken on the ChromeOs Device",
          "type": "string",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          }
        },
        "deprovisionReason": {
          "type": "string"
        }
      }
    },
    "UserGender": {
      "id": "UserGender",
      "properties": {
        "customGender": {
          "description": "Custom gender.",
          "type": "string"
        },
        "addressMeAs": {
          "type": "string",
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their."
        },
        "type": {
          "type": "string",
          "description": "Gender."
        }
      },
      "type": "object"
    },
    "User": {
      "properties": {
        "languages": {
          "type": "any",
          "description": "Languages of User"
        },
        "emails": {
          "type": "any",
          "description": "Emails of User"
        },
        "phones": {
          "description": "Phone numbers of User",
          "type": "any"
        },
        "organizations": {
          "type": "any",
          "description": "Organizations of User"
        },
        "creationTime": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "User's G Suite account creation time. (Read-only)"
        },
        "archived": {
          "type": "boolean",
          "description": "Indicates if user is archived."
        },
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        },
        "posixAccounts": {
          "type": "any",
          "description": "The POSIX accounts of User"
        },
        "relations": {
          "type": "any",
          "description": "The Relations of User *"
        },
        "changePasswordAtNextLogin": {
          "description": "Boolean indicating if the user should change password in next login",
          "type": "boolean"
        },
        "recoveryEmail": {
          "description": "Recovery email of the user.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#user",
          "type": "string",
          "readOnly": true,
          "description": "Output only. Kind of resource this is."
        },
        "locations": {
          "type": "any",
          "description": "Locations of User"
        },
        "addresses": {
          "description": "Addresses of User",
          "type": "any"
        },
        "isMailboxSetup": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Is mailbox setup (Read-only)"
        },
        "notes": {
          "type": "any",
          "description": "Notes of User"
        },
        "password": {
          "description": "User's password",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string"
        },
        "hashFunction": {
          "description": "Hash function name for password. Supported are MD5, SHA-1 and crypt",
          "type": "string"
        },
        "suspended": {
          "description": "Indicates if user is suspended.",
          "type": "boolean"
        },
        "externalIds": {
          "type": "any",
          "description": "The external Ids of User *"
        },
        "thumbnailPhotoUrl": {
          "description": "Output only. Photo Url of the user (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "recoveryPhone": {
          "type": "string",
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*."
        },
        "name": {
          "description": "User's name",
          "$ref": "UserName",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "ims": {
          "type": "any",
          "description": "User's Instant Messenger"
        },
        "isEnforcedIn2Sv": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Is 2-step verification enforced (Read-only)"
        },
        "suspensionReason": {
          "readOnly": true,
          "description": "Output only. Suspension reason if user is suspended (Read-only)",
          "type": "string"
        },
        "customerId": {
          "readOnly": true,
          "description": "Output only. CustomerId of User (Read-only)",
          "type": "string"
        },
        "thumbnailPhotoEtag": {
          "readOnly": true,
          "description": "Output only. ETag of the user's photo (Read-only)",
          "type": "string"
        },
        "isDelegatedAdmin": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is delegated admin (Read-only)"
        },
        "isAdmin": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Boolean indicating if the user is admin (Read-only)"
        },
        "keywords": {
          "type": "any",
          "description": "Keywords of User"
        },
        "customSchemas": {
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          },
          "description": "Custom fields of the user.",
          "type": "object"
        },
        "websites": {
          "type": "any",
          "description": "Websites of User"
        },
        "nonEditableAliases": {
          "items": {
            "type": "string"
          },
          "description": "Output only. List of non editable aliases (Read-only)",
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of User (Read-only)"
        },
        "aliases": {
          "description": "Output only. List of aliases (Read-only)",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "includeInGlobalAddressList": {
          "description": "Boolean indicating if user is included in Global Address List",
          "type": "boolean"
        },
        "agreedToTerms": {
          "description": "Output only. Indicates if user has agreed to terms (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "deletionTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "gender": {
          "type": "any",
          "description": "Gender of User"
        },
        "primaryEmail": {
          "description": "username of User",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        },
        "sshPublicKeys": {
          "description": "The SSH public keys of User",
          "type": "any"
        },
        "etag": {
          "readOnly": true,
          "description": "Output only. ETag of the resource.",
          "type": "string"
        },
        "lastLoginTime": {
          "readOnly": true,
          "description": "User's last login time. (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "isEnrolledIn2Sv": {
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "readOnly": true,
          "type": "boolean"
        },
        "ipWhitelisted": {
          "description": "Boolean indicating if ip is whitelisted",
          "type": "boolean"
        }
      },
      "id": "User",
      "description": "STEPLADDER: Generated unstable field number for field 'kind'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'etag'. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'external_ids' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'relations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'addresses' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'organizations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'phones' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'languages' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'posix_accounts' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'ssh_public_keys' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'notes' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'websites' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'locations' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'keywords' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'gender' to avoid collision. (See http://go/stepladder-help#fieldNumber) STEPLADDER: Generated unstable field number for field 'thumbnail_photo_etag' to avoid collision. (See http://go/stepladder-help#fieldNumber)",
      "type": "object"
    }
  },
  "servicePath": "",
  "name": "admin",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "version": "directory_v1",
  "parameters": {
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "default": "true",
      "type": "boolean"
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query",
      "default": "json",
      "description": "Data format for response.",
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "upload_protocol": {
      "location": "query",
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ]
    }
  },
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "baseUrl": "https://www.googleapis.com/",
  "protocol": "rest",
  "canonicalName": "directory",
  "resources": {
    "channels": {
      "methods": {
        "stop": {
          "path": "admin/directory_v1/channels/stop",
          "id": "admin.channels.stop",
          "httpMethod": "POST",
          "flatPath": "admin/directory_v1/channels/stop",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "Channel"
          },
          "description": "Stop watching resources through this channel."
        }
      }
    },
    "schemas": {
      "methods": {
        "get": {
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "description": "Retrieve schema",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "response": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.get",
          "parameters": {
            "schemaKey": {
              "description": "Name or immutable ID of the schema",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          }
        },
        "update": {
          "description": "Update schema",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "schemaKey": {
              "required": true,
              "location": "path",
              "description": "Name or immutable ID of the schema.",
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true
            }
          },
          "id": "directory.schemas.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          },
          "request": {
            "$ref": "Schema"
          }
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "schemaKey": {
              "required": true,
              "description": "Name or immutable ID of the schema",
              "location": "path",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "id": "directory.schemas.delete",
          "description": "Delete schema",
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}"
        },
        "list": {
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            }
          },
          "description": "Retrieve all schemas for a customer",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "id": "directory.schemas.list",
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "response": {
            "$ref": "Schemas"
          }
        },
        "insert": {
          "response": {
            "$ref": "Schema"
          },
          "description": "Create schema.",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "request": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.schemas.insert",
          "httpMethod": "POST"
        },
        "patch": {
          "request": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.patch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          },
          "description": "Patch Schema via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path",
              "required": true
            },
            "schemaKey": {
              "description": "Name or immutable ID of the schema.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ]
        }
      }
    },
    "resources": {
      "resources": {
        "buildings": {
          "methods": {
            "get": {
              "id": "directory.resources.buildings.get",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "buildingId": {
                  "description": "The unique ID of the building to retrieve.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              },
              "httpMethod": "GET",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "description": "Retrieves a building.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ]
            },
            "insert": {
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                },
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "type": "string",
                  "location": "query"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.buildings.insert",
              "response": {
                "$ref": "Building"
              },
              "description": "Inserts a building.",
              "request": {
                "$ref": "Building"
              },
              "httpMethod": "POST"
            },
            "delete": {
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "buildingId": {
                  "required": true,
                  "description": "The id of the building to delete.",
                  "location": "path",
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                }
              },
              "description": "Deletes a building.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.delete",
              "parameterOrder": [
                "customer",
                "buildingId"
              ]
            },
            "list": {
              "parameterOrder": [
                "customer"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "httpMethod": "GET",
              "description": "Retrieves a list of buildings for an account.",
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "description": "Token to specify the next page in the list.",
                  "location": "query"
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "maxResults": {
                  "format": "int32",
                  "location": "query",
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "minimum": "1",
                  "type": "integer"
                }
              },
              "response": {
                "$ref": "Buildings"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.buildings.list"
            },
            "patch": {
              "request": {
                "$ref": "Building"
              },
              "id": "directory.resources.buildings.patch",
              "description": "Patches a building via Apiary Patch Orchestration.",
              "response": {
                "$ref": "Building"
              },
              "httpMethod": "PATCH",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "description": "The id of the building to update.",
                  "location": "path",
                  "required": true
                },
                "coordinatesSource": {
                  "location": "query",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "description": "Source from which Building.coordinates are derived.",
                  "type": "string"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "update": {
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "response": {
                "$ref": "Building"
              },
              "description": "Updates a building.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The id of the building to update."
                },
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "default": "SOURCE_UNSPECIFIED",
                  "description": "Source from which Building.coordinates are derived.",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to RESOLVED_FROM_ADDRESS if postal address is provided. Otherwise, defaults to CLIENT_SPECIFIED if coordinates are provided."
                  ],
                  "type": "string",
                  "location": "query"
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string"
                }
              },
              "id": "directory.resources.buildings.update",
              "request": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "PUT"
            }
          }
        },
        "calendars": {
          "methods": {
            "list": {
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "pageToken": {
                  "type": "string",
                  "description": "Token to specify the next page in the list.",
                  "location": "query"
                },
                "maxResults": {
                  "type": "integer",
                  "location": "query",
                  "minimum": "1",
                  "format": "int32",
                  "maximum": "500",
                  "description": "Maximum number of results to return."
                },
                "orderBy": {
                  "type": "string",
                  "location": "query",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include resourceId, resourceName, capacity, buildingId, and floorName. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example buildingId, capacity desc would return results sorted first by buildingId in ascending order then by capacity in descending order."
                },
                "query": {
                  "type": "string",
                  "location": "query",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include generatedResourceName, name, buildingId, floor_name, capacity, featureInstances.feature.name. For example buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone."
                }
              },
              "parameterOrder": [
                "customer"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.calendars.list",
              "description": "Retrieves a list of calendar resources for an account.",
              "response": {
                "$ref": "CalendarResources"
              },
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars"
            },
            "delete": {
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "description": "Deletes a calendar resource.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "DELETE",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.delete"
            },
            "patch": {
              "parameters": {
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to update.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "PATCH",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "id": "directory.resources.calendars.patch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "request": {
                "$ref": "CalendarResource"
              }
            },
            "update": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "request": {
                "$ref": "CalendarResource"
              },
              "id": "directory.resources.calendars.update",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                },
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to update.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "PUT",
              "response": {
                "$ref": "CalendarResource"
              },
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}"
            },
            "get": {
              "parameters": {
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string"
                },
                "calendarResourceId": {
                  "required": true,
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Retrieves a calendar resource.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.calendars.get",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ]
            },
            "insert": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.calendars.insert",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "response": {
                "$ref": "CalendarResource"
              },
              "httpMethod": "POST",
              "description": "Inserts a calendar resource.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                }
              },
              "request": {
                "$ref": "CalendarResource"
              }
            }
          }
        },
        "features": {
          "methods": {
            "delete": {
              "id": "directory.resources.features.delete",
              "description": "Deletes a feature.",
              "parameters": {
                "featureKey": {
                  "description": "The unique ID of the feature to delete.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "DELETE",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "get": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameters": {
                "featureKey": {
                  "description": "The unique ID of the feature to retrieve.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "description": "Retrieves a feature.",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "response": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.get"
            },
            "update": {
              "request": {
                "$ref": "Feature"
              },
              "parameters": {
                "featureKey": {
                  "description": "The unique ID of the feature to update.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID."
                }
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "id": "directory.resources.features.update",
              "response": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "PUT",
              "description": "Updates a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "rename": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "request": {
                "$ref": "FeatureRename"
              },
              "httpMethod": "POST",
              "parameters": {
                "oldName": {
                  "description": "The unique ID of the feature to rename.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                }
              },
              "description": "Renames a feature.",
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "id": "directory.resources.features.rename"
            },
            "insert": {
              "request": {
                "$ref": "Feature"
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "customer"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "response": {
                "$ref": "Feature"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Inserts a feature.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "id": "directory.resources.features.insert"
            },
            "patch": {
              "response": {
                "$ref": "Feature"
              },
              "httpMethod": "PATCH",
              "id": "directory.resources.features.patch",
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "featureKey": {
                  "type": "string",
                  "description": "The unique ID of the feature to update.",
                  "required": true,
                  "location": "path"
                },
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "request": {
                "$ref": "Feature"
              },
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "list": {
              "httpMethod": "GET",
              "description": "Retrieves a list of features for an account.",
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the my_customer alias to represent your account's customer ID.",
                  "required": true
                },
                "pageToken": {
                  "type": "string",
                  "description": "Token to specify the next page in the list.",
                  "location": "query"
                },
                "maxResults": {
                  "minimum": "1",
                  "location": "query",
                  "description": "Maximum number of results to return.",
                  "format": "int32",
                  "type": "integer",
                  "maximum": "500"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "response": {
                "$ref": "Features"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "parameterOrder": [
                "customer"
              ],
              "id": "directory.resources.features.list"
            }
          }
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Turn off 2-Step Verification for user.",
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.twoStepVerification.turnOff",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          }
        }
      }
    },
    "tokens": {
      "methods": {
        "list": {
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "response": {
            "$ref": "Tokens"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.tokens.list",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
          "path": "admin/directory/v1/users/{userKey}/tokens"
        },
        "delete": {
          "id": "directory.tokens.delete",
          "description": "Delete all access tokens issued by a user for an application.",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            },
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "DELETE"
        },
        "get": {
          "response": {
            "$ref": "Token"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "description": "Get information about an access token issued by a user.",
          "httpMethod": "GET",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "id": "directory.tokens.get",
          "parameters": {
            "clientId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "The Client ID of the application the token is issued to."
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string",
              "required": true
            }
          }
        }
      }
    },
    "asps": {
      "methods": {
        "delete": {
          "id": "directory.asps.delete",
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "httpMethod": "DELETE",
          "description": "Delete an ASP issued by a user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            },
            "codeId": {
              "location": "path",
              "required": true,
              "type": "integer",
              "description": "The unique ID of the ASP to be deleted.",
              "format": "int32"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        },
        "list": {
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "path": "admin/directory/v1/users/{userKey}/asps",
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.asps.list",
          "description": "List the ASPs issued by a user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "response": {
            "$ref": "Asps"
          }
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "id": "directory.asps.get",
          "httpMethod": "GET",
          "response": {
            "$ref": "Asp"
          },
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            },
            "codeId": {
              "location": "path",
              "required": true,
              "type": "integer",
              "format": "int32",
              "description": "The unique ID of the ASP."
            }
          },
          "description": "Get information about an ASP issued by a user."
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "list": {
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "httpMethod": "GET",
          "response": {
            "$ref": "VerificationCodes"
          },
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.verificationCodes.list",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes"
        },
        "generate": {
          "description": "Generate new backup verification codes for the user.",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the user",
              "type": "string"
            }
          },
          "id": "directory.verificationCodes.generate",
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate"
        },
        "invalidate": {
          "id": "directory.verificationCodes.invalidate",
          "description": "Invalidate the current backup verification codes for the user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate"
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "delete": {
          "description": "Delete Mobile Device",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "httpMethod": "DELETE",
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            },
            "resourceId": {
              "description": "Immutable ID of Mobile Device",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "id": "directory.mobiledevices.delete"
        },
        "get": {
          "response": {
            "$ref": "MobileDevice"
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "id": "directory.mobiledevices.get",
          "description": "Retrieve Mobile Device",
          "parameters": {
            "resourceId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of Mobile Device"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "httpMethod": "GET"
        },
        "list": {
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ]
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "query": {
              "type": "string",
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "location": "query"
            },
            "sortOrder": {
              "location": "query",
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "orderBy": {
              "type": "string",
              "location": "query",
              "description": "Column to use for sorting results",
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "enumDescriptions": [
                "",
                "Mobile Device serial number.",
                "Owner user email.",
                "Last policy settings sync date time of the device.",
                "Mobile Device model.",
                "Owner user name.",
                "Mobile operating system.",
                "Status of the device.",
                "Type of the device."
              ]
            },
            "maxResults": {
              "minimum": "1",
              "format": "int32",
              "location": "query",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "type": "integer",
              "maximum": "100",
              "default": "100"
            }
          },
          "parameterOrder": [
            "customerId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "httpMethod": "GET",
          "response": {
            "$ref": "MobileDevices"
          },
          "description": "Retrieve all Mobile Devices of a customer (paginated)",
          "id": "directory.mobiledevices.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile"
        },
        "action": {
          "parameters": {
            "resourceId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of Mobile Device",
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account"
            }
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "request": {
            "$ref": "MobileDeviceAction"
          },
          "description": "Take action on Mobile Device",
          "id": "directory.mobiledevices.action"
        }
      }
    },
    "groups": {
      "methods": {
        "insert": {
          "flatPath": "admin/directory/v1/groups",
          "request": {
            "$ref": "Group"
          },
          "parameters": {},
          "parameterOrder": [],
          "description": "Create Group",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "httpMethod": "POST",
          "id": "directory.groups.insert",
          "path": "admin/directory/v1/groups",
          "response": {
            "$ref": "Group"
          }
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "httpMethod": "PATCH",
          "response": {
            "$ref": "Group"
          },
          "request": {
            "$ref": "Group"
          },
          "description": "Patch Groups via Apiary Patch Orchestration",
          "path": "admin/directory/v1/groups/{groupKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.groups.patch"
        },
        "list": {
          "response": {
            "$ref": "Groups"
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/groups",
          "parameters": {
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "userKey": {
              "location": "query",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "type": "string"
            },
            "domain": {
              "location": "query",
              "type": "string",
              "description": "Name of the domain. Fill this field to get groups from only this domain. To return all groups in a multi-domain fill customer field instead."
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "enum": [
                "orderByUndefined",
                "email"
              ]
            },
            "maxResults": {
              "default": "200",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "minimum": "1",
              "type": "integer",
              "location": "query",
              "format": "int32"
            },
            "customer": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all groups for a customer, fill this field instead of domain."
            },
            "query": {
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups",
              "location": "query"
            }
          },
          "flatPath": "admin/directory/v1/groups",
          "id": "directory.groups.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "parameterOrder": []
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "description": "Delete Group",
          "id": "directory.groups.delete",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the group",
              "location": "path"
            }
          },
          "httpMethod": "DELETE",
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}"
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "httpMethod": "PUT",
          "response": {
            "$ref": "Group"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "request": {
            "$ref": "Group"
          },
          "id": "directory.groups.update",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true
            }
          },
          "description": "Update Group",
          "path": "admin/directory/v1/groups/{groupKey}"
        },
        "get": {
          "response": {
            "$ref": "Group"
          },
          "description": "Retrieve Group",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.groups.get",
          "httpMethod": "GET",
          "path": "admin/directory/v1/groups/{groupKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}"
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "insert": {
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "httpMethod": "POST",
              "description": "Add a alias for the group",
              "id": "directory.groups.aliases.insert",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "request": {
                "$ref": "Alias"
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "response": {
                "$ref": "Alias"
              },
              "parameters": {
                "groupKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the group",
                  "location": "path",
                  "required": true
                }
              },
              "parameterOrder": [
                "groupKey"
              ]
            },
            "list": {
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameterOrder": [
                "groupKey"
              ],
              "id": "directory.groups.aliases.list",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "response": {
                "$ref": "Aliases"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "httpMethod": "GET",
              "description": "List all aliases for a group",
              "parameters": {
                "groupKey": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Email or immutable ID of the group"
                }
              }
            },
            "delete": {
              "id": "directory.groups.aliases.delete",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "parameters": {
                "groupKey": {
                  "location": "path",
                  "type": "string",
                  "description": "Email or immutable ID of the group",
                  "required": true
                },
                "alias": {
                  "description": "The alias to be removed",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "description": "Remove a alias for the group",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "httpMethod": "DELETE"
            }
          }
        }
      }
    },
    "users": {
      "methods": {
        "signOut": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.users.signOut",
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "httpMethod": "POST"
        },
        "watch": {
          "parameterOrder": [],
          "id": "directory.users.watch",
          "response": {
            "$ref": "Channel"
          },
          "flatPath": "admin/directory/v1/users/watch",
          "httpMethod": "POST",
          "description": "Watch for changes in users list",
          "parameters": {
            "maxResults": {
              "maximum": "500",
              "type": "integer",
              "default": "100",
              "location": "query",
              "minimum": "1",
              "format": "int32",
              "description": "Maximum number of results to return."
            },
            "viewType": {
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "enumDescriptions": [
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "type": "string",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "location": "query",
              "default": "admin_view"
            },
            "customer": {
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "type": "string"
            },
            "domain": {
              "location": "query",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\"",
              "type": "string"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "type": "string",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "event": {
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "location": "query",
              "description": "Event on which subscription is intended",
              "type": "string",
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ]
            },
            "showDeleted": {
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string",
              "location": "query"
            },
            "query": {
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order.",
              "type": "string"
            },
            "projection": {
              "location": "query",
              "type": "string",
              "default": "basic",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ],
              "description": "What subset of fields to fetch for this user."
            },
            "customFieldMask": {
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query"
            }
          },
          "path": "admin/directory/v1/users/watch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "Channel"
          }
        },
        "patch": {
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.patch",
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object"
            }
          },
          "description": "Patch Users via Apiary Patch Orchestration",
          "response": {
            "$ref": "User"
          },
          "request": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "delete": {
          "id": "directory.users.delete",
          "parameters": {
            "userKey": {
              "location": "path",
              "type": "string",
              "description": "Email or immutable ID of the user",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "description": "Delete user",
          "flatPath": "admin/directory/v1/users/{userKey}"
        },
        "insert": {
          "request": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users",
          "path": "admin/directory/v1/users",
          "parameters": {},
          "id": "directory.users.insert",
          "response": {
            "$ref": "User"
          },
          "parameterOrder": [],
          "httpMethod": "POST",
          "description": "create user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "update": {
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user. If ID, it should match with id of user object",
              "required": true,
              "location": "path"
            }
          },
          "response": {
            "$ref": "User"
          },
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "PUT",
          "request": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "description": "update user",
          "id": "directory.users.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ]
        },
        "undelete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "Undelete a deleted user",
          "request": {
            "$ref": "UserUndelete"
          },
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "id": "directory.users.undelete",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "The immutable id of the user",
              "required": true
            }
          },
          "httpMethod": "POST"
        },
        "makeAdmin": {
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user as admin",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "id": "directory.users.makeAdmin",
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "description": "change admin status of a user",
          "parameterOrder": [
            "userKey"
          ]
        },
        "get": {
          "path": "admin/directory/v1/users/{userKey}",
          "httpMethod": "GET",
          "description": "retrieve user",
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user",
              "type": "string",
              "location": "path"
            },
            "viewType": {
              "default": "admin_view",
              "location": "query",
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "type": "string",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ]
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "location": "query",
              "description": "What subset of fields to fetch for this user.",
              "default": "basic",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "type": "string"
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string",
              "location": "query"
            }
          },
          "id": "directory.users.get"
        },
        "list": {
          "id": "directory.users.list",
          "flatPath": "admin/directory/v1/users",
          "description": "Retrieve either deleted users or all users in a domain (paginated)",
          "response": {
            "$ref": "Users"
          },
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "orderBy": {
              "location": "query",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "type": "string",
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ]
            },
            "maxResults": {
              "location": "query",
              "type": "integer",
              "maximum": "500",
              "default": "100",
              "format": "int32",
              "minimum": "1",
              "description": "Maximum number of results to return."
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order.",
              "type": "string",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "type": "string",
              "default": "basic",
              "location": "query",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "description": "What subset of fields to fetch for this user."
            },
            "domain": {
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.",
              "location": "query",
              "type": "string"
            },
            "showDeleted": {
              "description": "If set to true, retrieves the list of deleted users. (Default: false)",
              "type": "string",
              "location": "query"
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users"
            },
            "viewType": {
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "enumDescriptions": [
                "",
                "Fetches the ADMIN_VIEW of the user.",
                "Fetches the DOMAIN_PUBLIC view of the user."
              ],
              "location": "query",
              "type": "string",
              "description": "Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.",
              "default": "admin_view"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "type": "string",
              "location": "query"
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "location": "query",
              "type": "string"
            },
            "customer": {
              "location": "query",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/users"
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "insert": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "response": {
                "$ref": "Alias"
              },
              "description": "Add a alias for the user",
              "request": {
                "$ref": "Alias"
              },
              "id": "directory.users.aliases.insert",
              "parameterOrder": [
                "userKey"
              ],
              "httpMethod": "POST",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "required": true
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases"
            },
            "delete": {
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "id": "directory.users.aliases.delete",
              "httpMethod": "DELETE",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "alias": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The alias to be removed"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "description": "Remove a alias for the user"
            },
            "watch": {
              "httpMethod": "POST",
              "response": {
                "$ref": "Channel"
              },
              "description": "Watch for changes in users list",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "request": {
                "$ref": "Channel"
              },
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.aliases.watch",
              "parameters": {
                "event": {
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "description": "Event on which subscription is intended (if subscribing)",
                  "location": "query",
                  "type": "string"
                },
                "userKey": {
                  "required": true,
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases/watch"
            },
            "list": {
              "parameterOrder": [
                "userKey"
              ],
              "id": "directory.users.aliases.list",
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "response": {
                "$ref": "Aliases"
              },
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "Email or immutable ID of the user"
                }
              },
              "description": "List all aliases for a user"
            }
          }
        },
        "photos": {
          "methods": {
            "delete": {
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.delete",
              "description": "Remove photos for the user",
              "parameters": {
                "userKey": {
                  "location": "path",
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "required": true
                }
              },
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "parameterOrder": [
                "userKey"
              ]
            },
            "patch": {
              "request": {
                "$ref": "UserPhoto"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "description": "Patch Photo via Apiary Patch Orchestration",
              "parameters": {
                "userKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "location": "path",
                  "required": true
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "httpMethod": "PATCH",
              "id": "directory.users.photos.patch"
            },
            "get": {
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.get",
              "parameters": {
                "userKey": {
                  "description": "Email or immutable ID of the user",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "description": "Retrieve photo of a user",
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              }
            },
            "update": {
              "parameters": {
                "userKey": {
                  "type": "string",
                  "description": "Email or immutable ID of the user",
                  "required": true,
                  "location": "path"
                }
              },
              "request": {
                "$ref": "UserPhoto"
              },
              "description": "Add a photo for the user",
              "httpMethod": "PUT",
              "response": {
                "$ref": "UserPhoto"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "id": "directory.users.photos.update",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            }
          }
        }
      }
    },
    "members": {
      "methods": {
        "delete": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group",
              "required": true,
              "type": "string"
            },
            "memberKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the member",
              "type": "string"
            }
          },
          "httpMethod": "DELETE",
          "id": "directory.members.delete",
          "description": "Remove membership.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "update": {
          "description": "Update membership of a user in the specified group.",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "request": {
            "$ref": "Member"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "response": {
            "$ref": "Member"
          },
          "httpMethod": "PUT",
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "required": true,
              "location": "path"
            },
            "memberKey": {
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "id": "directory.members.update"
        },
        "insert": {
          "httpMethod": "POST",
          "request": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "id": "directory.members.insert",
          "description": "Add user to the specified group.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "groupKey"
          ],
          "response": {
            "$ref": "Member"
          }
        },
        "hasMember": {
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID."
            },
            "memberKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.members.hasMember",
          "httpMethod": "GET",
          "response": {
            "$ref": "MembersHasMember"
          }
        },
        "patch": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "memberKey": {
              "type": "string",
              "required": true,
              "description": "Email or immutable ID of the user. If ID, it should match with id of member object",
              "location": "path"
            },
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Email or immutable ID of the group. If ID, it should match with id of group object",
              "type": "string"
            }
          },
          "httpMethod": "PATCH",
          "description": "Patch Member via Apiary Patch Orchestration",
          "request": {
            "$ref": "Member"
          },
          "response": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.patch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ]
        },
        "list": {
          "id": "directory.members.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "parameterOrder": [
            "groupKey"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "response": {
            "$ref": "Members"
          },
          "description": "Retrieve all members in a group (paginated)",
          "parameters": {
            "roles": {
              "description": "Comma separated role values to filter list results on.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "type": "integer",
              "default": "200",
              "minimum": "1",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "format": "int32"
            },
            "includeDerivedMembership": {
              "description": "Whether to list indirect memberships. Default: false.",
              "location": "query",
              "type": "boolean"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list",
              "location": "query"
            },
            "groupKey": {
              "description": "Email or immutable ID of the group",
              "location": "path",
              "required": true,
              "type": "string"
            }
          }
        },
        "get": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Retrieve Group Member",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "httpMethod": "GET",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "id": "directory.members.get",
          "response": {
            "$ref": "Member"
          },
          "parameters": {
            "memberKey": {
              "location": "path",
              "description": "Email or immutable ID of the member",
              "type": "string",
              "required": true
            },
            "groupKey": {
              "location": "path",
              "description": "Email or immutable ID of the group",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ]
        }
      }
    },
    "roles": {
      "methods": {
        "delete": {
          "description": "Deletes a role.",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.delete",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            },
            "roleId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role.",
              "type": "string"
            }
          }
        },
        "patch": {
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.patch",
          "httpMethod": "PATCH",
          "description": "Patch role via Apiary Patch Orchestration",
          "request": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "response": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "roleId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role."
            },
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          }
        },
        "insert": {
          "parameterOrder": [
            "customer"
          ],
          "description": "Creates a role.",
          "httpMethod": "POST",
          "request": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "response": {
            "$ref": "Role"
          },
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roles.insert"
        },
        "list": {
          "path": "admin/directory/v1/customer/{customer}/roles",
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "parameters": {
            "maxResults": {
              "format": "int32",
              "maximum": "100",
              "minimum": "1",
              "type": "integer",
              "description": "Maximum number of results to return.",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify the next page in the list."
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "parameterOrder": [
            "customer"
          ],
          "id": "directory.roles.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "Roles"
          }
        },
        "get": {
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            },
            "roleId": {
              "required": true,
              "description": "Immutable ID of the role.",
              "type": "string",
              "location": "path"
            }
          },
          "description": "Retrieves a role.",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "id": "directory.roles.get",
          "response": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        },
        "update": {
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "response": {
            "$ref": "Role"
          },
          "id": "directory.roles.update",
          "httpMethod": "PUT",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            },
            "roleId": {
              "description": "Immutable ID of the role.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "request": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Updates a role."
        }
      }
    },
    "orgunits": {
      "methods": {
        "delete": {
          "httpMethod": "DELETE",
          "description": "Remove organizational unit",
          "id": "directory.orgunits.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "location": "path",
              "pattern": "^.*$",
              "required": true,
              "description": "Full path of the organizational unit or its ID"
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}"
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "description": "Patch organization unit via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.orgunits.patch",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "httpMethod": "PATCH",
          "response": {
            "$ref": "OrgUnit"
          },
          "request": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            },
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "pattern": "^.*$",
              "location": "path",
              "required": true,
              "type": "string"
            }
          }
        },
        "insert": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "response": {
            "$ref": "OrgUnit"
          },
          "description": "Add organizational unit",
          "id": "directory.orgunits.insert",
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "POST",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path"
            }
          },
          "request": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ]
        },
        "get": {
          "description": "Retrieve organizational unit",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "orgUnitPath": {
              "required": true,
              "type": "string",
              "location": "path",
              "pattern": "^.*$",
              "description": "Full path of the organizational unit or its ID"
            }
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "id": "directory.orgunits.get",
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}"
        },
        "update": {
          "description": "Update organizational unit",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "response": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "id": "directory.orgunits.update",
          "request": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "type": "string",
              "pattern": "^.*$",
              "required": true,
              "description": "Full path of the organizational unit or its ID"
            },
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "httpMethod": "PUT"
        },
        "list": {
          "parameters": {
            "type": {
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "description": "Whether to return all sub-organizations or just immediate children",
              "type": "string",
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ],
              "location": "query"
            },
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            },
            "orgUnitPath": {
              "location": "query",
              "description": "the URL-encoded organizational unit's path or its ID",
              "type": "string",
              "default": ""
            }
          },
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.orgunits.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "description": "Retrieve all organizational units",
          "response": {
            "$ref": "OrgUnits"
          }
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "get": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameters": {
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            },
            "deviceId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of Chrome OS Device"
            },
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            }
          },
          "id": "directory.chromeosdevices.get",
          "description": "Retrieve Chrome OS Device",
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "response": {
            "$ref": "ChromeOsDevice"
          }
        },
        "patch": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "description": "Patch Chrome OS Device",
          "parameters": {
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "location": "query"
            },
            "deviceId": {
              "description": "Immutable ID of Chrome OS Device",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.chromeosdevices.patch",
          "request": {
            "$ref": "ChromeOsDevice"
          }
        },
        "update": {
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string",
              "location": "path"
            },
            "deviceId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of Chrome OS Device",
              "required": true
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            }
          },
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "description": "Update Chrome OS Device",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "request": {
            "$ref": "ChromeOsDevice"
          }
        },
        "moveDevicesToOu": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "description": "Move or insert multiple Chrome OS Devices to organizational unit",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "type": "string"
            },
            "orgUnitPath": {
              "description": "Full path of the target organizational unit or its ID",
              "location": "query",
              "type": "string",
              "required": true
            }
          },
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "httpMethod": "POST"
        },
        "list": {
          "parameters": {
            "projection": {
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "description": "Restrict information returned to a set of selected fields."
            },
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query",
              "type": "string",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account"
            },
            "maxResults": {
              "description": "Maximum number of results to return.",
              "type": "integer",
              "format": "int32",
              "default": "100",
              "minimum": "1",
              "location": "query"
            },
            "orgUnitPath": {
              "description": "Full path of the organizational unit or its ID",
              "type": "string",
              "location": "query"
            },
            "orderBy": {
              "enumDescriptions": [
                "",
                "Chromebook location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "Chromebook last sync.",
                "Chromebook notes as annotated by the administrator.",
                "Chromebook Serial Number.",
                "Chromebook status.",
                "Chromebook support end date."
              ],
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "location": "query",
              "type": "string",
              "description": "Column to use for sorting results"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333"
            }
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "description": "Retrieve all Chrome OS Devices of a customer (paginated)",
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.chromeosdevices.list",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "response": {
            "$ref": "ChromeOsDevices"
          }
        },
        "action": {
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "description": "Take action on Chrome OS Device",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "type": "string"
            },
            "resourceId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of Chrome OS Device"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "id": "directory.chromeosdevices.action",
          "httpMethod": "POST"
        }
      }
    },
    "customers": {
      "methods": {
        "patch": {
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "response": {
            "$ref": "Customer"
          },
          "request": {
            "$ref": "Customer"
          },
          "id": "directory.customers.patch",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "httpMethod": "PATCH",
          "description": "Patch Customers via Apiary Patch Orchestration",
          "parameterOrder": [
            "customerKey"
          ],
          "path": "admin/directory/v1/customers/{customerKey}"
        },
        "get": {
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "id": "directory.customers.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "path": "admin/directory/v1/customers/{customerKey}",
          "description": "Retrieves a customer.",
          "parameterOrder": [
            "customerKey"
          ],
          "parameters": {
            "customerKey": {
              "type": "string",
              "required": true,
              "description": "Id of the customer to be retrieved",
              "location": "path"
            }
          },
          "httpMethod": "GET"
        },
        "update": {
          "path": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "id": "directory.customers.update",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "PUT",
          "parameterOrder": [
            "customerKey"
          ],
          "parameters": {
            "customerKey": {
              "location": "path",
              "description": "Id of the customer to be updated",
              "type": "string",
              "required": true
            }
          },
          "request": {
            "$ref": "Customer"
          },
          "description": "Updates a customer."
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "methods": {
                "issueCommand": {
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ],
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "httpMethod": "POST",
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "parameters": {
                    "customerId": {
                      "description": "Immutable. Immutable ID of the G Suite account.",
                      "location": "path",
                      "type": "string",
                      "required": true
                    },
                    "deviceId": {
                      "location": "path",
                      "type": "string",
                      "description": "Immutable. Immutable ID of Chrome OS Device.",
                      "required": true
                    }
                  },
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "description": "Issues a command for the device to execute.",
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ]
                }
              },
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "id": "admin.customer.devices.chromeos.commands.get",
                      "parameters": {
                        "deviceId": {
                          "location": "path",
                          "description": "Immutable. Immutable ID of Chrome OS Device.",
                          "required": true,
                          "type": "string"
                        },
                        "commandId": {
                          "format": "int64",
                          "location": "path",
                          "description": "Immutable. Immutable ID of Chrome OS Device Command.",
                          "type": "string",
                          "required": true
                        },
                        "customerId": {
                          "location": "path",
                          "type": "string",
                          "description": "Immutable. Immutable ID of the G Suite account.",
                          "required": true
                        }
                      },
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ],
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "description": "Gets command data a specific command issued to the device.",
                      "httpMethod": "GET"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "response": {
            "$ref": "Privileges"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            }
          },
          "id": "directory.privileges.list",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges"
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "get": {
          "id": "directory.roleAssignments.get",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "response": {
            "$ref": "RoleAssignment"
          },
          "description": "Retrieve a role assignment.",
          "httpMethod": "GET",
          "parameters": {
            "roleAssignmentId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the role assignment."
            },
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          }
        },
        "insert": {
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "response": {
            "$ref": "RoleAssignment"
          },
          "request": {
            "$ref": "RoleAssignment"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "id": "directory.roleAssignments.insert",
          "description": "Creates a role assignment."
        },
        "delete": {
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Deletes a role assignment.",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "httpMethod": "DELETE",
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            },
            "roleAssignmentId": {
              "type": "string",
              "description": "Immutable ID of the role assignment.",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.roleAssignments.delete",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}"
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "description": "Retrieves a paginated list of all roleAssignments.",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "response": {
            "$ref": "RoleAssignments"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            },
            "maxResults": {
              "maximum": "200",
              "description": "Maximum number of results to return.",
              "minimum": "1",
              "location": "query",
              "format": "int32",
              "type": "integer"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify the next page in the list.",
              "type": "string"
            },
            "roleId": {
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "location": "query",
              "type": "string"
            },
            "userKey": {
              "type": "string",
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "location": "query"
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "GET",
          "id": "directory.roleAssignments.list"
        }
      }
    },
    "domainAliases": {
      "methods": {
        "delete": {
          "parameters": {
            "domainAliasName": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Name of domain alias to be retrieved."
            },
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "id": "directory.domainAliases.delete",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "description": "Deletes a domain Alias of the customer."
        },
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            },
            "parentDomainName": {
              "location": "query",
              "description": "Name of the parent domain for which domain aliases are to be fetched.",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "DomainAliases"
          },
          "id": "directory.domainAliases.list",
          "httpMethod": "GET",
          "description": "Lists the domain aliases of the customer."
        },
        "get": {
          "httpMethod": "GET",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "domainAliasName": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Name of domain alias to be retrieved."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "id": "directory.domainAliases.get",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "response": {
            "$ref": "DomainAlias"
          },
          "description": "Retrieves a domain alias of the customer."
        },
        "insert": {
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "httpMethod": "POST",
          "id": "directory.domainAliases.insert",
          "response": {
            "$ref": "DomainAlias"
          },
          "parameterOrder": [
            "customer"
          ],
          "description": "Inserts a domain alias of the customer.",
          "request": {
            "$ref": "DomainAlias"
          },
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          }
        }
      }
    },
    "domains": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "id": "directory.domains.list",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "GET",
          "response": {
            "$ref": "Domains2"
          },
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains",
          "description": "Lists the domains of the customer."
        },
        "delete": {
          "description": "Deletes a domain of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "id": "directory.domains.delete",
          "parameters": {
            "domainName": {
              "required": true,
              "description": "Name of domain to be deleted",
              "type": "string",
              "location": "path"
            },
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "httpMethod": "DELETE"
        },
        "get": {
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "domainName": {
              "type": "string",
              "description": "Name of domain to be retrieved",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.domains.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "description": "Retrieves a domain of the customer.",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "response": {
            "$ref": "Domains"
          }
        },
        "insert": {
          "id": "directory.domains.insert",
          "response": {
            "$ref": "Domains"
          },
          "request": {
            "$ref": "Domains"
          },
          "path": "admin/directory/v1/customer/{customer}/domains",
          "parameterOrder": [
            "customer"
          ],
          "description": "Inserts a domain of the customer.",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customer}/domains"
        }
      }
    }
  },
  "fullyEncodeReservedExpansion": true,
  "packagePath": "admin",
  "rootUrl": "https://www.googleapis.com/"
}
